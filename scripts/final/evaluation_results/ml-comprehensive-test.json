{
  "success": true,
  "artifact_name": "ml-image-classifier",
  "artifact_path": "https://github.com/sneh2001patel/ml-image-classifier",
  "extracted_path": "..\\..\\temp_dir_for_git\\ml-image-classifier",
  "extraction_method": "git_clone",
  "extraction_stats": {
    "reused_existing": false
  },
  "documentation_files": [
    {
      "path": "README.md",
      "content": [
        "# ML Image Classifier",
        "This repository contains the implementation of our",
        "image classification algorithm.",
        "## Installation",
        "Install dependencies: `pip install -r requirements.txt`",
        "## Usage",
        "Run `python src/train.py` to train the model.",
        "Run `python src/evaluate.py` to evaluate the model."
      ]
    }
  ],
  "code_files": [
    {
      "path": "src\\__init__.py",
      "content": []
    },
    {
      "path": "src\\evaluate.py",
      "content": [
        "import torch",
        "from torch.utils.data import DataLoader",
        "from torchvision import datasets, transforms",
        "from model import CNN",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")",
        "# Transforms",
        "transform = transforms.Compose(",
        "    [",
        "        transforms.Resize((128, 128)),",
        "        transforms.ToTensor(),",
        "        transforms.Normalize([0.5] * 3, [0.5] * 3),",
        "    ]",
        ")",
        "# Dataset and loader",
        "test_dataset = datasets.ImageFolder(\"data/testing\", transform=transform)",
        "test_loader = DataLoader(test_dataset, batch_size=32)",
        "# Load model",
        "model = CNN().to(device)",
        "model.load_state_dict(torch.load(\"model.pth\", map_location=device))",
        "model.eval()",
        "# Evaluation loop",
        "correct = 0",
        "with torch.no_grad():",
        "    for images, labels in test_loader:",
        "        images, labels = images.to(device), labels.to(device)",
        "        outputs = model(images)",
        "        _, preds = torch.max(outputs, 1)",
        "        correct += (preds == labels).sum().item()",
        "accuracy = correct / len(test_loader.dataset)",
        "print(f\"Test Accuracy: {accuracy:.4f}\")"
      ]
    },
    {
      "path": "src\\model.py",
      "content": [
        "import torch.nn as nn",
        "class CNN(nn.Module):",
        "    def __init__(self):",
        "        super(CNN, self).__init__()",
        "        self.features = nn.Sequential(",
        "            nn.Conv2d(3, 32, 3, padding=1),",
        "            nn.ReLU(),",
        "            nn.MaxPool2d(2),",
        "            nn.Conv2d(32, 64, 3, padding=1),",
        "            nn.ReLU(),",
        "            nn.MaxPool2d(2),",
        "            nn.Conv2d(64, 128, 3, padding=1),",
        "            nn.ReLU(),",
        "            nn.MaxPool2d(2),",
        "        )",
        "        self.classifier = nn.Sequential(",
        "            nn.Flatten(),",
        "            nn.Linear(128 * 16 * 16, 512),",
        "            nn.ReLU(),",
        "            nn.Dropout(0.5),",
        "            nn.Linear(512, 2),",
        "        )",
        "    def forward(self, x):",
        "        x = self.features(x)",
        "        x = self.classifier(x)",
        "        return x"
      ]
    },
    {
      "path": "src\\train.py",
      "content": [
        "import torch",
        "from torch import nn, optim",
        "from torch.utils.data import DataLoader",
        "from torchvision import datasets, transforms",
        "from model import SimpleCNN",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")",
        "# Transforms",
        "transform = transforms.Compose(",
        "    [",
        "        transforms.Resize((128, 128)),",
        "        transforms.ToTensor(),",
        "        transforms.Normalize([0.5] * 3, [0.5] * 3),",
        "    ]",
        ")",
        "# Datasets and loaders",
        "train_dataset = datasets.ImageFolder(\"data/training\", transform=transform)",
        "train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)",
        "# Model, loss, optimizer",
        "model = SimpleCNN().to(device)",
        "criterion = nn.CrossEntropyLoss()",
        "optimizer = optim.Adam(model.parameters(), lr=0.001)",
        "# Training loop",
        "for epoch in range(10):",
        "    model.train()",
        "    total_loss = 0",
        "    correct = 0",
        "    for images, labels in train_loader:",
        "        images, labels = images.to(device), labels.to(device)",
        "        optimizer.zero_grad()",
        "        outputs = model(images)",
        "        loss = criterion(outputs, labels)",
        "        loss.backward()",
        "        optimizer.step()",
        "        total_loss += loss.item()",
        "        _, preds = torch.max(outputs, 1)",
        "        correct += (preds == labels).sum().item()",
        "    accuracy = correct / len(train_loader.dataset)",
        "    print(f\"Epoch [{epoch+1}/10] Loss: {total_loss:.4f}, Accuracy: {accuracy:.4f}\")",
        "# Save the model",
        "torch.save(model.state_dict(), \"model.pth\")",
        "print(\"Model saved as model.pth\")"
      ]
    },
    {
      "path": "tests\\__init__.py",
      "content": []
    },
    {
      "path": "tests\\test_model.py",
      "content": [
        "import torch",
        "from src.model import CNN",
        "def test_model_forward():",
        "    model = CNN()",
        "    model.eval()",
        "    # Create dummy input: batch of 4 images, 3 channels, 128x128 (same as training)",
        "    dummy_input = torch.randn(4, 3, 128, 128)",
        "    # Forward pass",
        "    with torch.no_grad():",
        "        output = model(dummy_input)",
        "    # Output should have shape (4, 2) since 2 classes (cats, dogs)",
        "    assert output.shape == (4, 2), f\"Expected output shape (4, 2), got {output.shape}\"",
        "def test_model_trainable():",
        "    model = CNN()",
        "    # Check that model parameters are trainable (require_grad == True)",
        "    params = list(model.parameters())",
        "    assert any(",
        "        p.requires_grad for p in params",
        "    ), \"Model parameters should require gradients.\""
      ]
    }
  ],
  "license_files": [
    {
      "path": "LICENSE",
      "content": [
        "MIT License",
        "Copyright (c) 2025 Sneh Patel",
        "Permission is hereby granted, free of charge, to any person obtaining a copy",
        "of this software and associated documentation files (the \"Software\"), to deal",
        "in the Software without restriction, including without limitation the rights",
        "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
        "copies of the Software, and to permit persons to whom the Software is",
        "furnished to do so, subject to the following conditions:",
        "The above copyright notice and this permission notice shall be included in all",
        "copies or substantial portions of the Software.",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
        "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
        "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
        "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
        "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
        "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
        "SOFTWARE."
      ]
    }
  ],
  "tree_structure": [
    "ml-image-classifier",
    "├── .gitignore",
    "├── LICENSE",
    "├── README.md",
    "├── src",
    "│   ├── __init__.py",
    "│   ├── evaluate.py",
    "│   ├── model.py",
    "│   └── train.py",
    "└── tests",
    "    ├── __init__.py",
    "    └── test_model.py"
  ],
  "repo_path": "..\\..\\temp_dir_for_git\\ml-image-classifier",
  "repo_size_mb": 1583.66,
  "build_files": [
    {
      "name": "requirements.txt",
      "path": "..\\..\\temp_dir_for_git\\ml-image-classifier\\requirements.txt",
      "mime_type": "text/plain",
      "size_kb": 1.42
    }
  ],
  "docker_files": [
    {
      "path": "..\\..\\temp_dir_for_git\\ml-image-classifier\\Dockerfile",
      "content": [
        "FROM python:3.9",
        "WORKDIR /app",
        "COPY requirements.txt .",
        "RUN pip install -r requirements.txt",
        "COPY . .",
        "CMD ['python', 'train.py']"
      ]
    }
  ],
  "data_files": [
    {
      "name": "cifar10_data.tar.gz",
      "path": "data/cifar10_data.tar.gz",
      "size_kb": 1024,
      "mime_type": "application/gzip"
    }
  ],
  "config_files": [
    {
      "path": "..\\..\\temp_dir_for_git\\ml-image-classifier\\requirements.txt",
      "content": [
        "torch>=1.9.0",
        "torchvision>=0.10.0",
        "numpy>=1.21.0"
      ]
    }
  ],
  "analysis_performed": true
}