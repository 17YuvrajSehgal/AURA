{
    "10.5281/zenodo.1112358": {
        "doi": "10.5281/zenodo.1112358",
        "author": "Buchwald, Sebastian and Fried, Andreas and Hack, Sebastian",
        "title": "Synthesizing an Instruction Selection Rule Library from Semantic Specifications",
        "year": "2017",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1112358",
        "abstract": "<p>This is the software accompanying the paper of the same name, to appear at CGO 2018. The goal of the software is to automatically synthesize rules for translating a compiler's intermediate representation into the assembly language of a processor (a process called ”instruction selection“). The software is distributed along with benchmarks in a Docker container. For some benchmarks, a copy of the SPEC CPU2000 benchmark suite is required.</p>",
        "keywords": "Compiler, Instruction Selection, Program Synthesis",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.1218718": {
        "doi": "10.5281/zenodo.1218718",
        "author": "Liu, Peizun and Wahl, Thomas",
        "title": "CUBA: Interprocedural Context-Unbounded Analysis of Concurrent Programs (Artifact)",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1218718",
        "abstract": "<p>This is the artifact package for the article: CUBA: Interprocedural Context-Unbounded Analysis of Concurrent Programs. It includes: 1. The tool implemented in the article. In particular, -- the source code, -- executable binaries, -- an installation guide, -- documentation. 2. A brief introduction to the syntax used in our input programs. 3. A brief tutorial. 4. A set of benchmarks used and a guide to run the experiments.</p>",
        "keywords": "Concurrent Program, Context Bound, Interprocedural Analysis, Recursion, Stack",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/lpzun/cuba/tree/v1.0.1"
    },
    "10.5281/zenodo.1320453": {
        "doi": "10.5281/zenodo.1320453",
        "author": "Habchi, Sarra and Blanc, Xavier and Rouvoy, Romain",
        "title": "Additional data",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1320453",
        "abstract": "<p>The repository includes the survey questions and answers, the interview guide, and the coding results</p>",
        "keywords": "Android, linter, performance, static analysis.",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.1321181": {
        "doi": "10.5281/zenodo.1321181",
        "author": "Beyer, Dirk and Lemberger, Thomas",
        "title": "Replication Package for Article \"CPA-SymExec: Efficient Symbolic Execution in CPAchecker\"",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1321181",
        "abstract": "<p>Replication Package for Article “CPA-SymExec: Efficient Symbolic Execution in CPAchecker” by Dirk Beyer and Thomas Lemberger</p>\n<p>It contains all tools and data that are necessary to reproduce the results in our article. The included README.md contains detailed replication instructions.</p>",
        "keywords": "Program analysis, Software engineering, Software verification, SV-Benchmarks, Symbolic execution, Test-case generation",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.1322090": {
        "doi": "10.5281/zenodo.1322090",
        "author": "Beyer, Dirk and Friedberger, Karlheinz",
        "title": "Replication Package for Article \"Domain-Independent Multi-Threaded Software Model Checking\"",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1322090",
        "abstract": "<p>Replication Package for Article “Domain-Independent Multi-Threaded Software Model Checking” by Dirk Beyer and Karlheinz Friedberger</p>\n<p>It contains all tools and data that are necessary to reproduce the results in our article. The included README.md contains detailed replication instructions.</p>",
        "keywords": "Block-Abstraction Memoization, Multithreading, Parallel Algorithm, Program Analysis, Software Verification",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.1341421": {
        "doi": "10.5281/zenodo.1341421",
        "author": "Jiang, Bo and Liu, Ye and Chan, W. K.",
        "title": "The ContractFuzzer Tool for ASE 18 paper ContractFuzzer: Fuzzing Smart Contracts for Vulnerability Detection",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1341421",
        "abstract": "<p>The first version of ContractFuzzer Tool for ASE 18 paper “ContractFuzzer: Fuzzing Smart Contracts for Vulnerability Detection”.</p>",
        "keywords": "blockchain, fuzzer, fuzzing, smart contract, vulnerability detection",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/gongbell/ContractFuzzer/tree/v1.0"
    },
    "10.5281/zenodo.2229779": {
        "doi": "10.5281/zenodo.2229779",
        "author": "Lim, Jay P. and Nagarakatte, Santosh",
        "title": "CASM_Verify",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.2229779",
        "abstract": "<p>This is the artifact of the tool, CASM_Verify, for the paper, “Automatic Equivalence Checking for Assembly Implementations of Cryptography Libraries,” which will appear in CGO 2019.</p>\n<p>CASM_Verify is a tool that automatically checks whether the equivalence of highly optimized assembly implementation of cryptographic implementations are equivalent to the reference implementation.</p>\n<p>The artifact contains the source code of CASM_Verify, the benchmarks used for the evaluation, and the Dockerfile that can automatically create a Docker image containing all the required software and CASM_Verify.</p>\n<p>To use CASM_Verify without Docker, install Python3 and z3.</p>",
        "keywords": "CGO 2019",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.2240193": {
        "doi": "10.5281/zenodo.2240193",
        "author": "Qiao, Bo and Reiche, Oliver and Hannig, Frank and Teich, J\\\"{u",
        "title": "From Loop Fusion to Kernel Fusion: A Domain-specific Approach to Locality Optimization",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.2240193",
        "abstract": "<p>This artifact describes the steps to reproduce the results for the CUDA code generation with kernel fusion in Hipacc (an image processing DSL and source-to-source compiler embedded in C++), as presented in the CGO19 paper “From Loop Fusion to Kernel Fusion: A Domain-specific Approach to Locality Optimization”. We provide the original binaries as well as the source code to regenerate the binaries, which can be executed on x86_64 Linux system with CUDA enabled GPUs. Furthermore, we include two python scripts to run the application and compute the statistics as depicted in Figure 6 in the paper.</p>\n<p>Hardware Dependencies: CUDA enabled GPUs are required. We used three Nvidia cards, as discussed in Section 5.1 in the paper: (a) Geforce GTX 745 facilitates 384 CUDA cores with a base clock of 1,033 MHz and 900 MHz memory clock. (b) Geforce GTX 680 has 1,536 CUDA cores with a base clock of 1,058 MHz and 3,004 MHz memory clock. (c) Tesla K20c has 2,496 CUDA cores with a base clock of 706 MHz and 2,600 MHz memory clock. For all three GPUs, the total amount of shared memory per block is 48 Kbytes, the total number of registers available per block is 65,536. GPUs with similar configurations are expected to generate comparable results.</p>\n<p>Software Dependencies: Clang/LLVM (6.0), compiler_rt and libcxx for Linux (6.0). CMake (3.4 or later), Git (2.7 or later). Nvidia CUDA Driver (9.0 or later). OpenCV for producing visual output in the samples.</p>",
        "keywords": "DSL, Image Processing, Kernel Fusion",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.2640864": {
        "doi": "10.5281/zenodo.2640864",
        "author": "Gershuni, Elazar and Amit, Nadav and Gurfinkel, Arie and Narodytska, Nina and Navas, Jorge A. and Rinetzky, Noam and Ryzhyk, Leonid and Sagiv, Mooly",
        "title": "Tool implementation for paper: \"Simple and Precise Static Analysis of Untrusted Linux Kernel Extensions\"",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.2640864",
        "abstract": "<p>C++ implementation of the analyzer described in the paper.</p>",
        "keywords": "ebpf, kernel extensions, linux, static analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/vbpf/ebpf-verifier/tree/v0.1-alpha"
    },
    "10.5281/zenodo.2645128": {
        "doi": "10.5281/zenodo.2645128",
        "author": "Liu, Lun and Millstein, Todd and Musuvathi, Madanlal",
        "title": "schotspot-aarch64: First Release for Artifact Registration for PLDI 2019",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.2645128",
        "abstract": "<p>This is the first release of the artifact of the PLDI 2019 paper \"Accelerating Sequential Consistency for Java with Speculative Compilation\". For the latest updates please check out the GitHub repo: https://github.com/Lun-Liu/schotspot-aarch64</p>",
        "keywords": "Java virtual machine, memory consistency, sequential consistency, speculative compilation, volatile by default",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/Lun-Liu/schotspot-aarch64/tree/1.0.0"
    },
    "10.5281/zenodo.2646525": {
        "doi": "10.5281/zenodo.2646525",
        "author": "Rowe, Reuben N. S. and F\\'{e",
        "title": "ROTOR: A Reliable OCaml Tool for OCaml Refactoring - Trustworthy Refactoring for OCaml",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.2646525",
        "abstract": "<p>ROTOR is a refactoring tool for the OCaml language that is written in OCaml.</p>",
        "keywords": "OCaml, Refactoring",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.2646617": {
        "doi": "10.5281/zenodo.2646617",
        "author": "Dasgupta, Sandeep and Park, Daejun and Kasampalis, Theodoros and Adve, Vikram S. and Ro\\c{s",
        "title": "Replication package for the article \"A Complete Formal Semantics of x86-64 User-Level Instruction Set Architecture\"",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.2646617",
        "abstract": "<p>We present the most complete and thoroughly tested formal semantics of x86-64 to date. Our semantics faithfully formalizes all the non-deprecated, sequential user-level instructions of the x86-64 Haswell instruction set architecture. This totals 3155 instruction variants, corresponding to 774 mnemonics. The semantics is fully executable and has been tested against more than 7,000 instruction-level test cases and the GCC torture test suite. This extensive testing paid off, revealing bugs in both the x86-64 reference manual and other existing semantics. We also illustrate potential applications of our semantics in different formal analyses, and discuss how it can be useful for processor verification</p>",
        "keywords": "Formal Semantics, ISA specification, x86-64",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/sdasgup3/PLDI19-ArtifactEvaluation/tree/v1.0"
    },
    "10.5281/zenodo.2646720": {
        "doi": "10.5281/zenodo.2646720",
        "author": "Churchill, Berkeley and Padon, Oded and Sharma, Rahul and Aiken, Alex",
        "title": "Semantic Alignment Equivalence Checker",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.2646720",
        "abstract": "<p>An equivalence checker for x86-64 using semantic program alignment, as presented in the 2019 PLDI paper \"Semantic Program Alignment for Equivalence Checking\".</p>",
        "keywords": "equivalence checking, formal verification, x86-64",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/bchurchill/pldi19-equivalence-checker/tree/v1.0.1"
    },
    "10.5281/zenodo.2642857": {
        "doi": "10.5281/zenodo.2642857",
        "author": "van Tonder, Rijnard and Le Goues, Claire",
        "title": "Lightweight Multi-Language Syntax Transformation with Parser Parser Combinators: PLDI 2019 Artifact",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.2642857",
        "abstract": "<p>The PLDI 2019 VM artifact is archived for the associated paper and it's emphasis is to produce results consistent with those in the paper. It includes a research-grade implementation, associated transformations, and repository data to reproduce the tables in the paper. For those interested in actively trying or using the out the tool, consider the newer, actively maintained variety of this software at https://github.com/comby-tools/comby.</p>",
        "keywords": "parsers, refactoring, rewriting, syntax, transformation",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.2644665": {
        "doi": "10.5281/zenodo.2644665",
        "author": "Mohammadi, Mahdi Soltan and Yuki, Tomofumi and Cheshmi, Kazem and Davis, Eddie C. and Hall, Mary and Dehnavi, Maryam Mehri and Nandy, Payal and Olschanowsky, Catherine and Venkat, Anand and Strout, Michelle Mills",
        "title": "Replication Package for Article: \"Sparse Computation Data Dependence Simplification for Efficient Compiler-Generated Inspectors\"",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.2644665",
        "abstract": "<p>We use four packages to implement our approach: IEGenLib library, ISL library, CHiLL compiler framework, and Omega+ codegen included in the CHiLL. CHiLL is a source-to-source compiler framework for composing and applying high-level loop transformations to improve the performance of nested loops written in C. We use CHiLL to extract the dependence relations from the benchmarks. The CHiLL compiler also includes the Omega+ library, a modified version of Omega, which is an integer set manipulation library with limited support for constraints that involve uninterpreted function calls. We have used Omega+'s codegen capability to generate the DAG construction portion of the wavefront inspector code. ISL is a library for manipulating integer sets and relations that only contain affine constraints. It can act as a constraint solver by testing the emptiness of integer sets. It is also equipped with other operations on integer sets for detecting equalities and testing subset relationships. ISL does not support uninterpreted functions, and thus cannot directly represent the dependence constraints in sparse matrix code. IEGenLib is a set manipulation library that can manipulate integer sets/relations that contain uninterpreted function symbols. It uses ISL for some of its functionalities. We implemented the detection of unsatisfiable dependences and finding the equalities utilizing the IEGenLib and ISL libraries. The following briefly describes how our driver, illustrated in Figure 3 of the paper, generates wavefront parallelization inspectors. First, the driver extracts the dependences using CHiLL, and stores them in IEGenLib data structures. The driver also reads the JSON file with user-defined, domain-specific knowledge about index arrays, and stores them in IEGenLib environment variables. Then, it makes a call to an IEGenLib function to simplify the dependences. IEGenLib instantiates universally quantified assertions using the procedure described in Section 5 to prove unsatisfiability and to detect equalities. The uninterpreted functions are removed by replacing each call with a fresh variable, and functional consistency is encoded with additional constraints, before calling ISL to test for satisfiability and to expose equalities. Once the satisfiable, simplified, dependences are obtained, the driver tests each pair of the remaining dependences using IEGenLib for subsets and discards any dependence subsumed by another. Finally, the inspectors for the remaining dependences are generated by Omega+. Since, the outermost loop in the inspectors that we generate are embarrassingly parallel, the driver turns Omega+ generated code into a parallel inspector by simply adding an \"omp parallel for\" pragma before the outermost loop. The reason why the inspectors are obviously parallel is that each iteration of their outermost loop just connects dependence edges for the row (column) of the same iteration in the dependence graph structure. There are number of different source codes and data sources in this artifact: (1) IEGenLib library: used as a platform for some parts of the implementations. IEGenLib has its own licensing that can be referred to. (2) CHiLL compiler framework: used as a platform for some parts of the implementations. CHiLL has its own licensing that can be referred to. (3) ISL library that is included as part of IEGenLib. ISL has its own licensing that can be referred to. (4) Sparse computations benchmark suit (inside data directory) that have several different sources, and their sources are referenced in the paper. (5) Other codes and scripts, the drivers, built scripts, etc, are implemented by authors.</p>",
        "keywords": "CHiLL, Codegen+, data dependence simplification, dependence analysis, IEGenLib, inspector-executor strategies, ISL, Omega+, Presburger arithmetic with uninterpreted functions, SMT solvers, sparse matrices",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/CompOpt4Apps/Artifact-DataDepSimplify/tree/v1.0"
    },
    "10.5281/zenodo.2649613": {
        "doi": "10.5281/zenodo.2649613",
        "author": "Smolka, Steffen and Kumar, Praveen and Kahn, David M. and Foster, Nate and Hsu, Justin and Kozen, Dexter and Silva, Alexandra",
        "title": "McNetKAT: Scalable Verification of Probabilistic Networks",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.2649613",
        "abstract": "<p>This is the artifact associated with the following paper: Steffen Smolka, Praveen Kumar, David M. Kahn, Nate Foster, Justin Hsu, Dexter Kozen, and Alexandra Silva. 2019. Scalable Verification of Probabilistic Networks. In PLDI  19. https://doi.org/10.1145/3314221.3314639. Please refer to artifact-page/index.html for instruction on how to install McNetKAT and reproduce the experiments from the paper.</p>",
        "keywords": "McNetKAT, Network verification, Probabilistic Programming",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.2669678": {
        "doi": "10.5281/zenodo.2669678",
        "author": "Hsiao, Luke and Wu, Sen and Chiang, Nicholas and R\\'{e",
        "title": "Software for Automating the Generation of Hardware Component Datasheets",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.2669678",
        "abstract": "<p>This artifact provides a Python package and datasets which can be used to replicate our methodology for automating the generation of hardware component knowledge bases. We describe how the software and datasets can be obtained, how the software and dependencies can be installed, and how the software can be used to run our experiments. Our artifact outlines the workflow from the input data (PDF and HTML documents, along with gold labels) to the final quality metrics we used to evaluate the approach. We also include scripts used for our analysis and performance experiments.</p>",
        "keywords": "design tools, hardware components, knowledge base construction",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/lukehsiao/lctes-p27/tree/v0.1.1"
    },
    "10.5281/zenodo.2648959": {
        "doi": "10.5281/zenodo.2648959",
        "author": "Daruwalla, Kyle and Zhuo, Heng and Schulz, Carly and Lipasti, Mikko",
        "title": "BitBench Artifact Evaluation",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.2648959",
        "abstract": "<p>A ZIP file containing the source files and scripts to verify the results of BitBench.</p>",
        "keywords": "bitstream computing, high level synthesis, pulse density modulation, stochastic computing, verilog",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.2678161": {
        "doi": "10.5281/zenodo.2678161",
        "author": "Das, Sourav and Unnithan, R. Harikrishnan and Menon, Arjun and Rebeiro, Chester and Veezhinathan, Kamakoti",
        "title": "SHAKTI-MS Artifacts",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.2678161",
        "abstract": "<p>Artifacts for SHAKTI-MS: A RISC-V Processor for Memory Safety in C</p>",
        "keywords": "c, compiler, LLVM, memory corruption, security",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.2713721": {
        "doi": "10.5281/zenodo.2713721",
        "author": "Fuchs, Per and Hijma, Pieter and Grelck, Clemens",
        "title": "Heat Dissipation in Chapel",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.2713721",
        "abstract": "<p>Software belonging to Implementing Stencil Problems in Chapel: An Experience Report. The software contains several versions of a heat dissipation problem written in Chapel: the versions that were used to perform the measurements in the paper and versions based on feedback from the Chapel team.</p>",
        "keywords": "Chapel, cluster computing, performance study, stencil operation",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/JungleComputing/heat-dissipation-chapel/tree/v1.0.0"
    },
    "10.5281/zenodo.2678129": {
        "doi": "10.5281/zenodo.2678129",
        "author": "Yadavalli, S. Bharadwaj and Smith, Aaron",
        "title": "LLVM-MCTOLL",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.2678129",
        "abstract": "<p>MCTOLL is an LLVM-based static analysis tools that raises x64 and Arm32 binaries to LLVM bitcode.</p>",
        "keywords": "Binary Translation, LLVM, Static Analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3237378": {
        "doi": "10.5281/zenodo.3237378",
        "author": "Liu, Kui and Koyuncu, Anil and Kim, Dongsun and Bissyand\\'{e",
        "title": "Replication package of TBar",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3237378",
        "abstract": "<p>Template-based Automated Program Repair Tool</p>",
        "keywords": "fix pattern, program repair",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3239998": {
        "doi": "10.5281/zenodo.3239998",
        "author": "Lee, Sungho and Ryu, Sukyoung",
        "title": "Adlib: Static Analyzer to Detect Vunlerable Patterns in AdSDKs",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3239998",
        "abstract": "<p>Adlib is a static analyzer for AdSDKs. AdSDKs have powerful APIs, but the APIs may open to the malicious advertisements. Using predefined vulnerable patterns, Adlib constructs callgraphs and performs data flow analysis to find the vulnerable APIs that open to and can be abused by advertisements.</p>",
        "keywords": "AdSDKs, Advertising Platform Vulnerabilities, Hybrid Applications, Malicious Advertisements",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/SunghoLee/Adlib/tree/v1.0.0"
    },
    "10.5281/zenodo.3258225": {
        "doi": "10.5281/zenodo.3258225",
        "author": "L\\r{a",
        "title": "ALICE Data Point Processing Framework",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3258225",
        "abstract": "<p>This is version 5.0.0 of the ALICE Data Point Processing Framework (ADAPRO), an open source (licensed under Apache 2.0) C++ software framework, originally developed at CERN. This archive contains the source code, example applications, tests, documentation, and the Promela and DIVINE models of ADAPRO.</p>",
        "keywords": "ESEC/FSE 2019",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.3258821": {
        "doi": "10.5281/zenodo.3258821",
        "author": "Zhou, Shurui and Vasilescu, Bogdan and K\\\"{a",
        "title": "shuiblue/ForkingEfficiencyPaper: data",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3258821",
        "abstract": "<p>No description provided.</p>",
        "keywords": "ESEC/FSE 2019",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/shuiblue/ForkingEfficiencyPaper/tree/stable"
    },
    "10.5281/zenodo.3261842": {
        "doi": "10.5281/zenodo.3261842",
        "author": "Safwan, Khadijah Al and Servant, Francisco",
        "title": "Replication package for research paper \"Decomposing the Rationale of Code Commits: The Software Developer's Perspective \"",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3261842",
        "abstract": "<p>The replication package for our human study of rationale for code commits. This package includes: - Interview scripts -- Screening questionnaire -- Interview questions (interviewee) -- Interview questions (interviewer) -- Preliminary model of rationale for code commits - Online survey -- Survey questions -- Rationale model</p>",
        "keywords": "code commits, human study, rationale, revision control",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.3262370": {
        "doi": "10.5281/zenodo.3262370",
        "author": "Mordahl, Austin and Oh, Jeho and Koc, Ugur and Wei, Shiyi and Gazzillo, Paul",
        "title": "Artifacts for: An Empirical Study of Real-World Variability Bugs Detected by Variability-Oblivious Tools",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3262370",
        "abstract": "<p>This repository provides the implementation of the final three steps of the automated framework presented in our FSE'2019 paper (included as ./PDF). The first step, Sample Generation, relies on the work done by Jeho et al. [31], so we do not include it here. Instead, we provide the results of that step in ./cases, and provide the rest of the framework, which runs off-the-shelf bug detectors, deduplicates their results, automatically extracts relevant features, and outputs those results in a unified format. See INSTALL.md for instructions on running the experiments. This is a single version uploaded for archival purposes, but refer to https://github.com/paulgazz/kconfig_case_studies for the most current version, with any necessary bug fixes.</p>",
        "keywords": "configurable C software, static analysis, variability bugs",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.3267950": {
        "doi": "10.5281/zenodo.3267950",
        "author": "Banerjee, Subarno and Clapp, Lazaro and Sridharan, Manu",
        "title": "NullAway: Practical Type-Based Null Safety for Java",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3267950",
        "abstract": "<p>NullAway is a tool to help eliminate NullPointerExceptions (NPEs) in your Java code. To use NullAway, first add @Nullable annotations in your code wherever a field, method parameter, or return value may be null. Given these annotations, NullAway performs a series of type-based, local checks to ensure that any pointer that gets dereferenced in your code cannot be null. NullAway is similar to the type-based nullability checking in the Kotlin and Swift languages, and the Checker Framework and Eradicate null checkers for Java. NullAway is fast. It is built as a plugin to Error Prone and can run on every single build of your code. In our measurements, the build-time overhead of running NullAway is usually less than 10\\%. NullAway is also practical: it does not prevent all possible NPEs in your code, but it catches most of the NPEs we have observed in production while imposing a reasonable annotation burden.</p>",
        "keywords": "java, null safety, pluggable type systems, static code analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.3257080": {
        "doi": "10.5281/zenodo.3257080",
        "author": "Eremondi, Joseph and Tanter, \\'{E",
        "title": "Redex Model: Approximate Normalization for Gradual Dependent Types",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3257080",
        "abstract": "<p>This artifact contains an implementation of the core calculus from the paper, built using the Racket Redex library.</p>",
        "keywords": "dependent types, gradual types, racket, redex, type systems",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/JoeyEremondi/GDTL-artifact/tree/v1.0.2"
    },
    "10.5281/zenodo.3257707": {
        "doi": "10.5281/zenodo.3257707",
        "author": "Swierstra, Wouter and Baanen, Tim",
        "title": "Source code",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3257707",
        "abstract": "<p>This artefact contains the proofs and programs associated with the ICFP '19 paper 'A Predicate Transformer Semantics for Effects'</p>",
        "keywords": "Agda, effects, free monads, predicate transformers, program calculation, programming with dependent types, refinement, weakest precondition semantics",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/wouter-swierstra/predicate-transformers/tree/v1.0"
    },
    "10.5281/zenodo.3264974": {
        "doi": "10.5281/zenodo.3264974",
        "author": "Kr\\\"{u",
        "title": "Artifact for the ESEC/FSE 2019 Paper: Effects of Explicit Feature Traceability on Program Comprehension",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3264974",
        "abstract": "<p>This is the artifact for our ESEC/FSE 2019 paper \"Effects of Explicit Feature Traceability on Program Comprehension\", providing 1) the experiment as reusable source code and 2) the anonymized results of our experiment. For more details on how to use the source code and interpret the data, please refer to the readme file.</p>",
        "keywords": "Experiment, Feature Traceability, Program Comprehension",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.3257172": {
        "doi": "10.5281/zenodo.3257172",
        "author": "Koyuncu, Anil and Liu, Kui and Bissyand\\'{e",
        "title": "iFixR a patch generation system for user-reported bugs",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3257172",
        "abstract": "<p>Dataset and code to run iFixR</p>",
        "keywords": "bug-report.program-repair",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.3262201": {
        "doi": "10.5281/zenodo.3262201",
        "author": "Kalhauge, Christian Gram and Palsberg, Jens",
        "title": "Artifact from \"Binary Reduction of Dependency Graphs\"",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3262201",
        "abstract": "<p>This is the artifact is supplementing the \"Binary Reduction of Dependency Graphs\" paper by Christian Gram Kalhauge and Jens Palsberg ESCE/FSE 2019. It contains the source code for tool, the evaluation procedure, and the benchmarks.</p>",
        "keywords": "debugging, dependencies, reduction",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.3334854": {
        "doi": "10.5281/zenodo.3334854",
        "author": "Durieux, Thomas and Madeiral, Fernanda and Martinez, Matias and Abreu, Rui",
        "title": "RepairThemAll",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3334854",
        "abstract": "<p>RepairThemAll is a framework to execute 11 automatic repair tools on 5 benchmarks of Java Bugs.</p>",
        "keywords": "Automatic Program Repair, Benchmark of bugs, Patch Generation",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/program-repair/RepairThemAll/tree/v1.0"
    },
    "10.5281/zenodo.3336282": {
        "doi": "10.5281/zenodo.3336282",
        "author": "Bui, Nghi D. Q. and Yu, Yijun and Jiang, Lingxiao",
        "title": "SAR: Learning Cross-Language API Mappings with Little Knowledge",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3336282",
        "abstract": "<p>Providing the 2 corpus of the 2 languages, the tool will automatically infer the API mappings.</p>",
        "keywords": "adversarial learning, API mapping, code learning, cross language, generative adversarial networks, program representation learning",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/bdqnghi/SAR_API_mapping/tree/1.0"
    },
    "10.5281/zenodo.3262095": {
        "doi": "10.5281/zenodo.3262095",
        "author": "Menghi, Claudio and Nejati, Shiva and Gaaloul, Khouloud and Briand, Lionel C.",
        "title": "Replication Package for Article: Generating Automated and Online Test Oracles for Simulink Models with Continuous and Uncertain Behaviors",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3262095",
        "abstract": "<p>SOCRaTeS automatically converts functional requirements into oracles specified in Simulink. The oracles evaluate test outputs of the CPS model in an automated and online manner and generate fitness values that provide engineers with a degree of satisfaction or failure for each test input. Engineers can stop running a test in the middle when SOCRaTeS concludes that the test fitness is going to remain below a given threshold for the rest of its execution.</p>",
        "keywords": "Formal language definitions., Software and its engineering, Software verification and validation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.3265783": {
        "doi": "10.5281/zenodo.3265783",
        "author": "Fucci, Davide and Mollaalizadehbahnemiri, Alireza and Maalej, Walid",
        "title": "Library Package for Article: On Using Machine Learning to Identify Knowledge in API Reference Documentation",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3265783",
        "abstract": "<p>This project provides NLP tools based on LSTM for Multi-Lable Calssification of Documents.</p>",
        "keywords": "Knowledge Identification, LSTM, Multi-Lable Classification, NLP",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/dfucci/api-doc-kn-identification/tree/v1.0.3"
    },
    "10.5281/zenodo.3364750": {
        "doi": "10.5281/zenodo.3364750",
        "author": "Near, Joseph P. and Darais, David and Abuah, Chike and Stevens, Tim and Gaddamadugu, Pranav and Wang, Lun and Somani, Neel and Zhang, Mu and Sharma, Nikhil and Shan, Alex and Song, Dawn",
        "title": "Replication Package for Article: Duet: An Expressive Higher-Order Language and Linear Type System for Statically Enforcing Differential Privacy",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3364750",
        "abstract": "<p>Duet is an expressive higher-order language, linear type system and tool for automatically verifying differential privacy of arbitrary higher-order programs. In addition to general purpose programming, it supports encoding machine learning algorithms such as stochastic gradient descent, as well as common auxiliary data analysis tasks such as clipping, normalization and hyperparameter tuning. Current version is available at the GitHub repository: https://github.com/uvm-plaid/duet</p>",
        "keywords": "Differential privacy, machine learning, typechecking",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3363914": {
        "doi": "10.5281/zenodo.3363914",
        "author": "Astrauskas, Vytautas and M\\\"{u",
        "title": "Software Artefact for the OOPSLA'19 Paper Titled \"Leveraging Rust Types for Modular Specification and Verification\"",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3363914",
        "abstract": "<p>This artefact contains a virtual machine that can be used to reproduce the evaluation of our paper. You can find the instructions in the README.pdf file. If you are interested in building on top of our research results, you can find the latest version of Prusti in our GitHub repository: https://github.com/viperproject/prusti-dev.</p>",
        "keywords": "Rust, verification, Viper",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3365991": {
        "doi": "10.5281/zenodo.3365991",
        "author": "Nanevski, Aleksandar and Banerjee, Anindya and Delbianco, Germ\\'{a",
        "title": "Specifying Concurrent Programs in Separation Logic: Morphisms and Simulations (Artefact).",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3365991",
        "abstract": "<p>This artefact is a companion to: Aleksandar Nanevski, Anindya Banerjee, Germ n Andr s Delbianco, and Ignacio F bregas. 2019. Specifying Concurrent Programs in Separation Logic: Morphisms and Simulations. Proc. ACM Program. Lang. 3, OOPSLA, Article 161 (October 2019), 30 pages. https://doi.org/10.1145/3360587 The artefact contains all the Coq sources of the developments presented in the submission, including the meta-theory of FCSL, and the example case studies. It also contains additional examples that the main body submission does not discuss. Some, such as readers/writers locks, are presented in the Extended Technical Report [arXiv:1904.07136], which has also been included in the artefact.</p>",
        "keywords": "Coq, FCSL, Hoare/Separation Logics, Program Logics for Concurrency",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3369233": {
        "doi": "10.5281/zenodo.3369233",
        "author": "Keidel, Sven and Erdweg, Sebastian",
        "title": "Artifact: Sound and Reusable Components for Abstract Interpretation",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3369233",
        "abstract": "<p>The artifact contains the library of analysis components (Section 6) and the code of the case studies (Section 7).</p>",
        "keywords": "Abstract Interpretation, Soundness, Static Analysis",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3368627": {
        "doi": "10.5281/zenodo.3368627",
        "author": "Antonopoulos, Timos and Koskinen, Eric and Le, Ton Chanh",
        "title": "Knotical: An Inference System of Trace Refinement Relations",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3368627",
        "abstract": "<p>This is an artifact for the paper \"Specification and Inference of Trace Refinement Relations\", which is accepted to OOPSLA 2019. The artifact is licensed under the MIT license. The development repository is located at https://github.com/knotical/knotical.</p>",
        "keywords": "Kleene Algebra with Tests, program refinement, relational reasoning, trace refinement",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3362424": {
        "doi": "10.5281/zenodo.3362424",
        "author": "Caires, Lu\\'{\\i",
        "title": "Refinement Kinds: Type-safe Programming with Practical Type-level Computation (Artifact)",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3362424",
        "abstract": "<p>This is the artifact for the paper Refinement Kinds: Type-safe Programming with Practical Type-level Computation. The artifact consists of a prototype kind and type-checker (which also includes an evaluator) for the language described in the paper. The artifact is distributed as a Docker image that bundles the source code, all its dependencies, the code examples from the paper and various additional examples. See the README for a getting started and syntax guides.</p>",
        "keywords": "Refinement Kinds, Type Theory, Type-level Computation, Typed Meta-Programming",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3365412": {
        "doi": "10.5281/zenodo.3365412",
        "author": "Bender, John and Palsberg, Jens",
        "title": "JAM Model: Herd and Coq Instantiations",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3365412",
        "abstract": "<p>The artifact is a virtual machine image with all necessary dependencies to use the Herd and Coq models and reproduce the results of our paper.</p>",
        "keywords": "coq, herd, mechanized, memory models",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3366380": {
        "doi": "10.5281/zenodo.3366380",
        "author": "Barik, Rajkishore and Sridharan, Manu and Ramanathan, Murali Krishna and Chabbi, Milind",
        "title": "Optimization of Swift Protocols",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3366380",
        "abstract": "<p>Swift, an increasingly-popular programming language, advocates the use of protocols, which define a set of required methods and properties for conforming types. Protocols are commonly used in Swift programs for abstracting away implementation details; e.g., in an industrial app, they are heavily used to enable mock objects for unit testing. Unfortunately, heavy use of protocols can result in significant performance overhead. Beyond the dynamic dispatch often associated with such a feature, Swift allows for both value and reference types to conform to a protocol, leading to significant boxing and unboxing overheads. In this paper, we describe three new optimizations and transformations we have developed to reduce the overhead of Swift protocols. Within a procedure, we define LocalVar, a data-flow analysis and transformation to remove both dynamic dispatch and boxing overheads. We also describe Param, which optimizes the case of protocol-typed method parameters using specialization. Finally, we describe SoleType, a transformation that injects casts when a global analysis (like type-hierarchy analysis) discovers some protocol variable must have some concrete type. We also describe how these optimizations work fruitfully together and with existing Swift optimizations to deliver further speedups. We perform elaborate experimentation and demonstrate that our optimizations deliver an average 1.56x speedup on a suite of Swift benchmarks that use protocols. Further, we applied the optimizations to a production iOS Swift application used by millions of customers daily. For a set of performance spans defined by the developers of the application, the optimized version showed speedups ranging from 6.9\\% to 55.49\\%. A version of our optimizations has been accepted as part of the official Swift compiler distribution.</p>",
        "keywords": "boxing/unboxing, protocols, SIL, Swift, virtual method disptach",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3363988": {
        "doi": "10.5281/zenodo.3363988",
        "author": "Marcozzi, Micha\\\"{e",
        "title": "Replication Package for \"Compiler Fuzzing: How Much Does It Matter?\"",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3363988",
        "abstract": "<p>This artifact provides the bug impact measurement infrastructure and the experimental data presented in the following paper: Micha l Marcozzi, Qiyi Tang, Alastair F. Donaldson, and Cristian Cadar. 2019. Compiler Fuzzing: How Much Does It Matter . Proc. ACM Program. Lang. 3, OOPSLA, Article 155 (October 2019), 29 pages. https://doi.org/10.1145/3360581 The paper introduces the first quantitative and qualitative study of the tangible impact of fuzzer-found compiler bugs. It follows a novel methodology where the impact of a miscompilation bug is evaluated based on (1) whether the bug appears to trigger during compilation; (2) the extent to which generated assembly code changes syntactically due to triggering of the bug; and (3) how likely such changes are to cause runtime divergences during execution. The study is conducted with respect to the compilation of more than 10 million lines of C/C++ code from 309 Debian packages, using 12\\% (27) of the historical and now fixed miscompilation bugs found by four state-of-the-art fuzzers in the Clang/LLVM compiler, as well as 18 other bugs found by the Alive formal verification tool or human users. This artifact provides the necessary software and data to replicate this study for the 45 Clang/LLVM miscompilation bugs over the 309 Debian packages. In addition to enabling the easy replication of the paper results, the provided bug impact measurement infrastructure can also be used to measure the impact of miscompilation bugs over Debian packages that have not been considered in the paper. It can also be extended to perform differential testing for multiple compilers or optimisation options of a compiler.</p>",
        "keywords": "bug impact, Clang, compilers, fuzzing, LLVM, software testing",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3364086": {
        "doi": "10.5281/zenodo.3364086",
        "author": "Padhye, Rohan and Lemieux, Caroline and Sen, Koushik and Simon, Laurent and Vijayakumar, Hayawardh",
        "title": "Replication Package for \"FuzzFactory: Domain-Specific Fuzzing with Waypoints\"",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3364086",
        "abstract": "<p>The artifact contains a Docker image for supporting various claims made in the paper. In particular, the Docker image contains a snapshot of the AFL fuzzing tool, a snapshot of FuzzFactory (which itself is a fork of AFL), a snapshot of Google's fuzzer-test-suite, scripts to replicate the experiments described in the paper, and a \"pre-baked\" data dump of the results of experiments that were conducted on the author's machine (this data can be used to reproduce the plots that are included in the paper).</p>",
        "keywords": "domain-specific fuzzing, fuzz testing, waypoints",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3366234": {
        "doi": "10.5281/zenodo.3366234",
        "author": "Rapoport, Marianna and Lhot\\'{a",
        "title": "Coq type soundness proof for 'A Path to DOT: Formalizint Fully Path-Dependent Types'",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3366234",
        "abstract": "<p>Our paper presents pDOT, a generalization of the Dependent Object Types (DOT) calculus that formalizes Scala. The pDOT calculus extends DOT with support for path-dependent types on paths of arbitrary length. This artifact presents the Coq formalization of the pDOT type-safety proof as presented in Section 5 of the paper.</p>",
        "keywords": "Coq, DOT, paths, Scala, type safety",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3366904": {
        "doi": "10.5281/zenodo.3366904",
        "author": "Siraichi, Marcos Yukio and Santos, Vin\\'{\\i",
        "title": "Experiment and Software to Reproduce: Qubit Allocation as a Combination of Subgraph Isomorphism and Token Swapping",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3366904",
        "abstract": "<p>This artifact is composed of mainly scripts, benchmarks, and configuration data used to generate the data of this paper. The scripts set up the environment, downloading the necessary software and dependencies using Git and APT (since package managers are specific for different distros, it may not work on all of them), and compiling them all. In the end, you will have in hands: (i) \"enfield\", an OpenQASM source-to-source compiler; (ii) all the benchmarks used; (iii) helper scripts. Ideally, you would run the script for reproducing the experiments as is, but you may also change the configuration data for custom experiments.</p>",
        "keywords": "Compilers, Quantum Computing, Qubit Allocation",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3368504": {
        "doi": "10.5281/zenodo.3368504",
        "author": "Sergey, Ilya and Nagaraj, Vaivaswatha and Johannsen, Jacob and Kumar, Amrit and Trunov, Anton and Hao, Ken Chan Guan",
        "title": "Benchmarks accompanying the OOPSLA 2019 paper Safer Smart Contract Programming with Scilla",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3368504",
        "abstract": "<p>This is the artefact accompanying the OOPSLA 2019 paper entitled \"Safer Smart Contract Programming with Scilla\". The artefact contains scripts for reproducing the quantitative comparison with Ethereum Virtual Machine, reported in the paper.</p>",
        "keywords": "Benchmarks, EVM, Scilla, Smart Contracts, Zilliqa",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/ilyasergey/scilla-benchmarks/tree/v1.0"
    },
    "10.5281/zenodo.3374030": {
        "doi": "10.5281/zenodo.3374030",
        "author": "Pan, Rong and Hu, Qinheping and Xu, Gaowei and D'Antoni, Loris",
        "title": "RFixer: a tool for repairing complex regular expressions using examples",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3374030",
        "abstract": "<p>This artifact contains the virtual machine image that has RFixer installed. RFixer is a tool for repairing complex regular expressions using examples. Given an incorrect regular expression and sets of positive and negative examples, RFixer synthesizes the closest regular expression to the original one that is consistent with the examples. The paper \"Automatic Repair of Regular Expressions\" that describes RFixer is conditionally accepted at OOPSLA 2019. The Step-by-Step Instructions in the README file explains how to reproduce the paper's results.</p>",
        "keywords": "Program Repair, Program Synthesis, Regular Expressions",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3374036": {
        "doi": "10.5281/zenodo.3374036",
        "author": "Shajii, Ariya and Numanagi?, Ibrahim and Baghdadi, Riyadh and Berger, Bonnie and Amarasinghe, Saman",
        "title": "Seq (OOPSLA 2019 Artifact)",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3374036",
        "abstract": "<p>This is the artifact submitted alongside the Seq paper to OOPSLA 2019, which consists of a VM containing an alpha build of Seq, as well as a usage guide. Seq is a programming language for computational genomics and bioinformatics. With a Python-compatible syntax and a host of domain-specific features and optimizations, Seq makes writing high-performance genomics software as easy as writing Python code, and achieves performance comparable to (and in many cases better than) C/C++.</p>",
        "keywords": "artifact, bioinformatics, compiler, domain-specific language, genomics, programming language",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3363977": {
        "doi": "10.5281/zenodo.3363977",
        "author": "Huang, Mingzhang and Fu, Hongfei and Chatterjee, Krishnendu and Goharshady, Amir Kafshdar",
        "title": "Software Artifact Accompanying the Article \"Modular Verification for Almost-Sure Termination of Probabilistic Programs\"",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3363977",
        "abstract": "<p>Please see the readme file.</p>",
        "keywords": "modular analysis, probabilistic programs, Termination analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3364114": {
        "doi": "10.5281/zenodo.3364114",
        "author": "Mastrangelo, Luis and Hauswirth, Matthias and Nystrom, Nathaniel",
        "title": "Casting about in the Dark - Artifact Evaluation",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3364114",
        "abstract": "<p>Companion dataset artifact used in the paper \"Casting about in the Dark\".</p>",
        "keywords": "cast, Java, type safety",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3366212": {
        "doi": "10.5281/zenodo.3366212",
        "author": "Adams, Ulf",
        "title": "Implementations of Ryu \\&amp; Ryu Printf",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3366212",
        "abstract": "<p>A set of C and Java libraries implementing Ryu and Ryu Printf.</p>",
        "keywords": "c, conversion, float, java, printf, string",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/ulfjack/ryu/tree/v2.0"
    },
    "10.5281/zenodo.3368188": {
        "doi": "10.5281/zenodo.3368188",
        "author": "Vukotic, Ivana and Rahli, Vincent and Esteves-Ver\\'{\\i",
        "title": "Asphalion: Trustworthy Shielding Against Byzantine Faults",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3368188",
        "abstract": "<p>Asphalion is a Coq-based framework for verifying the correctness of implementations of fault-tolerant systems. It especially provides features to verify the correctness of hybrid fault-tolerant systems (such as the MinBFT protocol http://www.di.fc.ul.pt/~bessani/publications/tc11-minimal.pdf), where normal components (that can for example fail arbitrarily) trust some special components (that can for example only crash on failure) to provide properties in a trustworthy manner. Asphalion allows running such trusted-trustworthy components inside Intel SGX enclaves. More details are provided here: https://vrahli.github.io/articles/asphalion.pdf and here: https://vrahli.github.io/articles/asphalion-long.pdf</p>",
        "keywords": "Byzantine fault-tolerance, Compositional reasoning, Coq, Crash fault-tolerance, Distributed systems, Fault-tolerance, Formal verification, Hybrid fault-tolerance, Intel SGX, Knowledge calculus, MinBFT, State machine replication, Trusted components",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3368779": {
        "doi": "10.5281/zenodo.3368779",
        "author": "Wang, Shengyi and Cao, Qinxiang and Mohan, Anshuman and Hobor, Aquinas",
        "title": "Coq library supporting the paper \"Certifying Graph-Manipulating C Programs via Localizations within Data Structures\"",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3368779",
        "abstract": "<p>This Docker machine contains a compiled and ready-to-use version of our Coq code library. Our work aims to provide a comprehensive solution to the problem of formally verifying programs that manipulate mathematical graphs. The codebase contains a number of worked examples showing how our library can be used to verify real C programs. The overview file provides a helpful starter guide to understanding and replicating our verifications.</p>",
        "keywords": "CompCert, Coq, Graph-manipulating programs, Separation logic, VST",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3369915": {
        "doi": "10.5281/zenodo.3369915",
        "author": "Bastian, Th\\'{e",
        "title": "Reliable and Fast DWARF-Based Stack Unwinding (Artifact)",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3369915",
        "abstract": "<p>This VM contains the tools to reproduce the experiments of the submission: Reliable and Fast DWARF-based Stack Unwinding</p>",
        "keywords": "debugging, DWARF, stack unwinding",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3370063": {
        "doi": "10.5281/zenodo.3370063",
        "author": "Konnov, Igor and Kukovec, Jure and Tran, Thanh-Hai",
        "title": "Artifact - TLA+ Model Checking Made Symbolic",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3370063",
        "abstract": "<p>This artifact version, named \"25_ae\", contains the same materials which we submitted in the artifact evaluation, and two new files README, and LICENSE. Our artifact comes in the form of a virtual machine (user: oopsla19, pass: ae). Our model checker v0.5.0 is already installed on the VM. After the rebuttal, we agreed with the reviewers to add new optimizations in our model checker, and new benchmarks in the second submission. However, these changes are included only in the later version of our artifact, named \"25_v2\". Please follow the link 10.5281/zenodo.3370071 for the new version called \"25_v2\", which contains updates in our second submission.</p>",
        "keywords": "artifact, model checking, SMT, TLA+",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3370297": {
        "doi": "10.5281/zenodo.3370297",
        "author": "Kokologiannakis, Michalis and Raad, Azalea and Vafeiadis, Viktor",
        "title": "Replication package for 'Effective Lock Handling in Stateless Model Checking'",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3370297",
        "abstract": "<p>This is the artifact accompanying the paper \"Effective Lock Handling in Stateless Model Checking\". Our paper's artifact is the set of benchmarks we used in the paper, as well as the results we got by running particular versions of model checking tools (i.e., GenMC and LAPOR) on the benchmarks' set.</p>",
        "keywords": "Model checking, mutual exclusion locks, weak memory models",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3377079": {
        "doi": "10.5281/zenodo.3377079",
        "author": "Lu, Jingbo and Xue, Jingling",
        "title": "Replication package for article: Precision-Preserving Yet Fast Object-Sensitive Pointer Analysis with Partial Context Sensitivity",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3377079",
        "abstract": "<p>This artifact is provided to enable the reproducing of results in Section 4 of the companion paper \"Precision-Preserving Yet Fast Object-Sensitive Pointer Analysis with Partial Context Sensitivity\". To use this artifact, please start by reading Getting-Started-Guide.pdf and Step-by-Step-Instructions.pdf in the artifact package.</p>",
        "keywords": "Dacapo, Soot",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3362696": {
        "doi": "10.5281/zenodo.3362696",
        "author": "Song, Dowon and Lee, Myungho and Oh, Hakjoo",
        "title": "Automatic and Scalable Detection of Logical Errors in Functional Programming Assignments",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3362696",
        "abstract": "<p>This is an artifact for the paper \"Automatic and Scalable Detection of Logical Errors in Functional Programming Assignments\" submitted to OOPSLA 2019. It provides VM and documentation for reproducing the evaluation results in the paper. The VM contains source codes for implementing the algorithm, benchmarks used in evaluation, and a python script for reproducing the Table 1 and Table 2 in the paper. Specially, you can see that the main parts of our algorithm are implemented in the following files: 1. engine/TestML/testGenerator.ml: Our overall algorithm and symbolic test case generation 2. engine/TestML/sym_exec.ml: Symbolic verification</p>",
        "keywords": "Automated Test Case Generation, Program Synthesis, Symbolic Execution",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3369573": {
        "doi": "10.5281/zenodo.3369573",
        "author": "Goel, Aviral and Vitek, Jan",
        "title": "Replication Package for Article: On the Design, Implementation and Use of Laziness in R",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3369573",
        "abstract": "<p>The artifact is a Docker image. It performs a dynamic analysis on packages written in the R language, and analyzes the generated data. The artifact uses this data to generate an HTML report containing the graphs and data appearing in our paper. The report is served by the Docker container on localhost:8000.</p>",
        "keywords": "Corpus Analysis, Delayed or Lazy Evaluation, Empirical Study, Large-scale, R Language",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3370437": {
        "doi": "10.5281/zenodo.3370437",
        "author": "Biswas, Ranadeep and Enea, Constantin",
        "title": "Database Testing Tool for Article: On the Complexity of Checking Transactional Consistency",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3370437",
        "abstract": "<p>The artifact contains a database testing tool named `dbcop` which provides three functionalities: 1. A random generator for client programs to run on a database. 2. A `trait`(equivalent to java interface) to run client programs on a database and log its executions. A user can use this trait to write an implementation specific to a database. 3. A verifier that checks conformance of a given execution to a consistency model. `dbcop` offers two subcommands: `generate` and `verify`. 1. `generate` generates client programs to run on a database. 2. `verify` verifies consistency of the executions of these client programs. The artifact is packaged as a Docker image. The image includes our tool and the database-generated executions (histories) used in the experimental evaluation reported in the paper.</p>",
        "keywords": "axiomatic specifications, consistency, testing, transactional databases",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3374034": {
        "doi": "10.5281/zenodo.3374034",
        "author": "Wei, Guannan and Chen, Yuxuan and Rompf, Tiark",
        "title": "Replication Package for Article: Staged Abstract Interpreter",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3374034",
        "abstract": "<p>The artifact contains programs that show how to stage an abstract interpreter step-by-step, as well as programs to reproduce the performance evaluation in the paper.</p>",
        "keywords": "abstract interpreters, multi-stage programming, Scala",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3374835": {
        "doi": "10.5281/zenodo.3374835",
        "author": "Yamazaki, Tetsuro and Nakamaru, Tomoki and Ichikawa, Kazuhiro and Chiba, Shigeru",
        "title": "Generating a fluent API with syntax checking from an LR grammar (Artifact)",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3374835",
        "abstract": "<p>The artifact for \"Generating a fluent API with syntax checking from an LR grammar\", which will be published in OOPSLA 2019. \"artifact.pdf\" mentions the usage of typelevelLR, a fluent-API-style library-skeleton generator, which we implemented for the experiments presented in the paper. This artefact contains all the programs that can be used to reproduce the evaluation of our paper. You can find the instructions in the README.pdf file.</p>",
        "keywords": "artifact, fluent API, library skeleton generator, OOPSLA 2019",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3384856": {
        "doi": "10.5281/zenodo.3384856",
        "author": "Abdulla, Parosh Aziz and Atig, Mohamed Faouzi and Jonsson, Bengt and L\\r{a",
        "title": "Optimal Stateless Model Checking for Reads-From Equivalence under Sequential Consistency",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3384856",
        "abstract": "<p>The artifact reproduces the performance numbers in the paper. It consists of an overview document, which describes its use, and a virtual machine image.</p>",
        "keywords": "concurrency, model checking, sequential consistency, testing",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3378067": {
        "doi": "10.5281/zenodo.3378067",
        "author": "Mariano, Benjamin and Reese, Josh and Xu, Siyuan and Nguyen, ThanhVu and Qiu, Xiaokang and Foster, Jeffrey S. and Solar-Lezama, Armando",
        "title": "Replication Package for \"Program Synthesis with Algebraic Library Specifications\"",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3378067",
        "abstract": "<p>This artifact can be used to recreate the experiments from the paper \"Program Synthesis with Algebraic Library Specifications\". In particular, the artifact contains the benchmarks we used and scripts for running the experiments, as well as instructions for building the tool from source.</p>",
        "keywords": "Algebraic Specification, Java, Sketch-based Program Synthesis, Term Rewriting",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3369436": {
        "doi": "10.5281/zenodo.3369436",
        "author": "K?ikava, Filip and Miller, Heather and Vitek, Jan",
        "title": "Artifact for Scala Implicits are Everywhere",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3369436",
        "abstract": "<p>Code and data for the OOPLSA 2019 paper.</p>",
        "keywords": "analysis, Scala",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3533037": {
        "doi": "10.5281/zenodo.3533037",
        "author": "Sammler, Michael and Garg, Deepak and Dreyer, Derek and Litak, Tadeusz",
        "title": "Coq development for \"The High-Level Benefits of Low-Level Sandboxing\"",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3533037",
        "abstract": "<p>This is the artifact for the POPL'20 paper \"The High-Level Benefits of Low-Level Sandboxing\". It contains the Coq development formalizing the results of the paper.</p>",
        "keywords": "Coq, Iris, language-based security, logical relations, robust safety, sandboxing, type systems",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.3533633": {
        "doi": "10.5281/zenodo.3533633",
        "author": "Wang, Peixin and Fu, Hongfei and Chatterjee, Krishnendu and Deng, Yuxin and Xu, Ming",
        "title": "Software Artifact Accompanying the Article: Proving Expected Sensitivity of Probabilistic Programs with Randomized Variable-Dependent Termination Time",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3533633",
        "abstract": "<p>This artifact contains an implementation of the RSM synthesis algorithm as described in the paper. For details, please see the \"README.md\" file.</p>",
        "keywords": "Expected Sensitivity, Martingales, Probabilistic Programs",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/peterwang45a/popl-2020-artifact/tree/v1.0"
    },
    "10.5281/zenodo.3541779": {
        "doi": "10.5281/zenodo.3541779",
        "author": "Jung, Ralf and Dang, Hoang-Hai and Kang, Jeehoon and Dreyer, Derek",
        "title": "Stacked Borrows: An Aliasing Model for Rust -- Artifact",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3541779",
        "abstract": "<p>This is the artifact accompanying the POPL20 paper \"Stacked Borrows: An Aliasing Model for Rust\". It consists of a Coq mechanization of the simulation proof sketches that were made in the paper. For more information about that paper, see https://plv.mpi-sws.org/rustbelt/stacked-borrows/.</p>",
        "keywords": "alias analysis, Coq, operational semantics, program transformation, Rust, simulation proof",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.3539237": {
        "doi": "10.5281/zenodo.3539237",
        "author": "Dang, Hoang-Hai and Jourdan, Jacques-Henri and Kaiser, Jan-Oliver and Dreyer, Derek",
        "title": "RustBelt Meets Relaxed Memory (Artifact)",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3539237",
        "abstract": "<p>This is a virtual machine that contains a snapshot of the RustBelt Relaxed Coq development. In our repository, the snapshot has the tag \"RBrlx-POPL20-artifact\". More updated information can be found at http://plv.mpi-sws.org/rustbelt/rbrlx/.</p>",
        "keywords": "Coq, Iris, relaxed memory model, Rust, RustBelt, semantic soundness",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.3544697": {
        "doi": "10.5281/zenodo.3544697",
        "author": "Guo, Zheng and James, Michael and Justo, David and Zhou, Jiaxiao and Wang, Ziteng and Jhala, Ranjit and Polikarpova, Nadia",
        "title": "Hoogle Plus",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3544697",
        "abstract": "<p>Hoogle Plus implements our Type-Guided Abstraction Refinement technique. It includes two binaries: `hplus`, which serves as a CLI to our synthesis engine; and `webapp`, which serves a basic web interface to our default parameters. There are two scripts to re-run the evaluation, either in part or in full (evaluation-short.sh and evaluation.sh)</p>",
        "keywords": "Functional Programming, Haskell, Program Synthesis, Type Systems",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.3545194": {
        "doi": "10.5281/zenodo.3545194",
        "author": "Lee, Wonyeol and Yu, Hangyeol and Rival, Xavier and Yang, Hongseok",
        "title": "Artifact for Article: Towards Verified Stochastic Variational Inference for Probabilistic Programs",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3545194",
        "abstract": "<p>The artifact includes (i) our implementation of the static analysis for model-guide support match, and (ii) the Pyro model-guide pairs used in our experiments. For more details, please refer to `README.txt' in the artifact, and Section 8 of the paper.</p>",
        "keywords": "correctness, Probabilistic programming, semantics, static analysis, variational inference",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/wonyeol/static-analysis-for-support-match/tree/v1.0.0"
    },
    "10.5281/zenodo.3570660": {
        "doi": "10.5281/zenodo.3570660",
        "author": "Jung, Ralf and Lepigre, Rodolphe and Parthasarathy, Gaurav and Rapoport, Marianna and Timany, Amin and Dreyer, Derek and Jacobs, Bart",
        "title": "The Future is Ours: Prophecy Variables in Separation Logic -- Artifact",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3570660",
        "abstract": "<p>This is the artifact accompanying the POPL20 paper \"The Future is Ours: Prophecy Variables in Separation Logic\". For more information about that paper, see https://plv.mpi-sws.org/prophecies/.</p>",
        "keywords": "Iris, linearizability, logical atomicity, Prophecy variables, separation logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.3544373": {
        "doi": "10.5281/zenodo.3544373",
        "author": "Sozeau, Matthieu and Boulier, Simon and Forster, Yannick and Tabareau, Nicolas and Winterhalter, Th\\'{e",
        "title": "Snapshot of MetaCoq associated to the article",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3544373",
        "abstract": "<p>This archive contains the whole development of MetaCoq. If you only want to browse the files a \"light\" documentation is available in html/toc.html which provides access to all the development files. Otherwise, to run interactively, the development can be compiled with Coq 8.9.1 and Equations 1.2. Detailed installation instructions for the version of the package on opam are below, what follows is a short summary of the development and installation instructions for the popl artifact sources version.</p>",
        "keywords": "Metatheory\nType-checking\nProof Assistants",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/MetaCoq/metacoq/tree/CoqCoqCorrect"
    },
    "10.5281/zenodo.3543712": {
        "doi": "10.5281/zenodo.3543712",
        "author": "Chang, Stephen and Ballantyne, Michael and Turner, Milo and Bowman, William J.",
        "title": "Artifact for: Dependent Type Systems as Macros",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3543712",
        "abstract": "<p>Implementation of the Turnstile+ framework, and the Cur proof assistant</p>",
        "keywords": "dependent types, macros, proof assistants, type systems",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.3546500": {
        "doi": "10.5281/zenodo.3546500",
        "author": "Darais, David and Sweet, Ian and Liu, Chang and Hicks, Michael",
        "title": "OblivML",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3546500",
        "abstract": "<p>OblivML is an extension of the  obliv language with additional programming constructs. The repository also contains examples of ORAM and an Oblivious Stack (OStack). It is the artifact for the associated POPL 2020 paper, A Language for Probabilistically Oblivious Computation.</p>",
        "keywords": "Noninterference., Oblivious Computation, Probability, Type Systems",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3572539": {
        "doi": "10.5281/zenodo.3572539",
        "author": "Mackay, Julian and Potanin, Alex and Aldrich, Jonathan and Groves, Lindsay",
        "title": "Proof of Decidable Subtyping for Path Dependent Types",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3572539",
        "abstract": "<p>A proof of subtype decidability for the Wyv_self and Wyv_fix variants of Wyvern, formalised in Coq. The associated type systems are described in greater detail in the associated paper: Decidable Subtyping for Path Dependent Types.</p>",
        "keywords": "Formal Methods, Functional Programming Languages, Object Oriented Lanaguages, Programming Languages, Proofs, Scala, Type Systems, Type Theory, Wyvern",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.3588624": {
        "doi": "10.5281/zenodo.3588624",
        "author": "Forsberg, Fredrik Nordvall and Xu, Chuangjie and Ghani, Neil",
        "title": "Agda formalisation for article: Three Equivalent Ordinal Notation Systems in Cubical Agda",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3588624",
        "abstract": "<p>This is the complete cubical Agda formalisation of our CPP'20 paper \"Three equivalent ordinal notation systems in cubical Agda\".</p>",
        "keywords": "Agda, higher inductive types, inductive-inductive definitions, ordinals, Type theory, univalence",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.3542289": {
        "doi": "10.5281/zenodo.3542289",
        "author": "Cheng, Lin and Ilbeyi, Berkin and Bolz-Tereick, Carl Friedrich and Batten, Christopher",
        "title": "Replication package for Type Freezing: Exploiting Attribute Type Monomorphism in Tracing JIT Compilers",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3542289",
        "abstract": "<p>In this artifact we provide the source code of type freezing equipped PyPy, our microbenchmarks, and PyPy benchmarks we used in our paper -- Type Freezing: Exploiting Attribute Type Monomorphism in Tracing JIT Compilers. Along with the source code, we also provide a prebuilt Docker image. Be noted that running performance experiments inside Docker can have unexpected behaviors. Please refer to the README file for how to import the docker image, translate PyPy from source code, and run the experiments we did in this paper.</p>",
        "keywords": "dynamic languages, just-in-time compiler, PyPy, type monomorphism",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.3597890": {
        "doi": "10.5281/zenodo.3597890",
        "author": "Cowan, Meghan and Moreau, Thierry and Chen, Tianqi and Bornholt, James and Ceze, Luis",
        "title": "Replication Package for Automatic Generation of High-Performance Quantized Machine Learning Kernels",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3597890",
        "abstract": "<p>This artifact contains the source code for generating quantized operators for ARM devices as well as scripts to reproduce the experimental results. Quantized microkernels are synthesized for ARM NEON, which are used by TVM, a machine learning compiler.</p>",
        "keywords": "code generation, program synthesis, Quantization",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3558339": {
        "doi": "10.5281/zenodo.3558339",
        "author": "Dakkak, Abdul and Wickham-Jones, Tom and Hwu, Wen-mei",
        "title": "Artifact for The Design and Implementation of the Wolfram Language Compiler",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3558339",
        "abstract": "<p>Benchmark source code for the CGO'20 paper</p>",
        "keywords": "compiler, mathematica, wolfram",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3581199": {
        "doi": "10.5281/zenodo.3581199",
        "author": "Zhang, Yunming and Brahmakshatriya, Ajay and Chen, Xinyi and Dhulipala, Laxman and Kamil, Shoaib and Amarasinghe, Saman and Shun, Julian",
        "title": "Optimizing Ordered Graph Algorithms with GraphIt",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3581199",
        "abstract": "<p>Instructions to test the compiler extension and replicate the performance numbers.</p>",
        "keywords": "Compiler Optimizations, Graph Processing",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/GraphIt-DSL/graphit/tree/0.1.2"
    },
    "10.5281/zenodo.3605359": {
        "doi": "10.5281/zenodo.3605359",
        "author": "Kang, Seokwon and Choi, Kyunghwan and Park, Yongjun",
        "title": "[Evaluation Package] PreScaler: An Efficient System-aware Precision Scaling Framework on Heterogeneous Systems",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3605359",
        "abstract": "<p>This package provides all the binaries, libraries, benchmarks, and scripts, for evaluating the PreScaler implementations. These require target heterogeneous systems that contain Intel CPUs and NVIDIA GPUs. This package provides PreScaler artifact in two forms: ocker images and native binaries for several different system environments. These include installation scripts for software dependencies except NVIDIA Graphic Driver and CUDA toolkit. When you use a Docker image, all the software dependencies are preinstalled.</p>",
        "keywords": "Compiler, HSA, OpenCL, Precision Scaling, Profile-guided, Runtime",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3608382": {
        "doi": "10.5281/zenodo.3608382",
        "author": "Chen, Hanfeng and Krolik, Alexander and Kemme, Bettina and Verbrugge, Clark and Hendren, Laurie",
        "title": "Replication Package for Article: Improving Database Query Performance with Automatic Fusion",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3608382",
        "abstract": "<p>This artifact is created for showing the reproducibility of our experiments in the paper. We provide the details of scripts and original data used in the experiments. There are mainly two systems: HorsePower and RDBMS MonetDB. We supply step-by-step instructions to configure and deploy both systems in the experiments.</p>",
        "keywords": "Array programming, Compiler optimizations, IR, Loop fusion, SQL database queries",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.3579301": {
        "doi": "10.5281/zenodo.3579301",
        "author": "L\\'{o",
        "title": "Replication Package for Article: Relaxing the One Definition Rule in Interpreted C++",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3579301",
        "abstract": "<p>This package contains the required scripts and source code to run the required evaluation tests -both, those included in the paper, and additional tests-. For convenience, we provide a VM image in OVA format that contains all the required dependencies. Users should import the image and see the README file for further instructions. Alternatively, the `master' branch can be built from sources in the Cling repository.</p>",
        "keywords": "C++, Cling, interpreter, One-Definition-Rule",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.3607141": {
        "doi": "10.5281/zenodo.3607141",
        "author": "Chida, Nariyoshi and Kawakoya, Yuhei and Ikarashi, Dai and Takahashi, Kenji and Sen, Koushik",
        "title": "PoC Implementation of parser generators based on existing/SG/CM-stateful packrat parsing",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3607141",
        "abstract": "<p>This is an artifact of the paper titled \"Is Stateful Packrat Parsing Really Linear in Practice  -- A Counter-Example, an Improved Grammar, and Its Parsing Algorithms --\".</p>",
        "keywords": "Parser Generator, Parsing Expression Grammar, Stateful Packrat Parser",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.3597725": {
        "doi": "10.5281/zenodo.3597725",
        "author": "Kr\\\"{u",
        "title": "CogniCrypt_GEN - Generating Code for the Secure Use of Crypto APIs (Artefact)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3597725",
        "abstract": "<p>In this artefact, we present Cognicrypt_GEN, a code generation approach that allows for the generation of functionally correct, type-safe, and secure Java code that implements common use cases of cryptographic APIs. To implement a given use case, Cognicrypt_GEN requires two artefacts: a) a set of API-usage rules in the specification language CrySL and b) a Java code template specifying which CRYSL rules are to be used and how. The artefact comes with an Eclipse environment, in which Cognicrypt_GEN may be executed with all eleven use cases from the original paper. It further contains the artefacts to all use cases to allow for modification and extension. We finally include a tutorial on how Cognicrypt_GEN is used.</p>",
        "keywords": "Code Generation, Cryptography, Eclipse, Java",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3889126": {
        "doi": "10.5281/zenodo.3889126",
        "author": "Krieger, Max",
        "title": "Comic of \"Chatting with Glue: Cognitive Tools for Augmented Conversation\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3889126",
        "abstract": "<p>This is the comic referenced in the paper. It comprises the main content of the paper.</p>",
        "keywords": "comic, conversation, media",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.3926703": {
        "doi": "10.5281/zenodo.3926703",
        "author": "Giarrusso, Paolo G. and Stefanesco, L\\'{e",
        "title": "Scala Step-by-Step: Soundness for DOT with Step-Indexed Logical Relations in Iris — Coq Formalization",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3926703",
        "abstract": "<p>This package contains the mathematical proofs for the associated paper, formalized in the Coq proof assistant, both as a source archive, and as a virtual machine containing the right dependencies to build the proofs.</p>",
        "keywords": "Coq, data abstraction, DOT, Iris, logical relations, Scala, step-indexing, type soundness",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3926830": {
        "doi": "10.5281/zenodo.3926830",
        "author": "Lubin, Justin and Collins, Nick and Omar, Cyrus and Chugh, Ravi",
        "title": "Implementation of Program Sketching with Live Bidirectional Evaluation",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3926830",
        "abstract": "<p>This artifact is the implementation of Smyth, the program synthesizer described in \"Program Sketching with Live Bidirectional Evaluation.\"</p>",
        "keywords": "Bidirectional Evaluation, Examples, Program Synthesis, Sketches",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/UChicago-PL/smyth/tree/icfp-2020-camera-ready"
    },
    "10.5281/zenodo.3930143": {
        "doi": "10.5281/zenodo.3930143",
        "author": "Kamps, Sander and Heeren, Bastiaan and Jeuring, Johan",
        "title": "icfpws20haskellmain-p2-p",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3930143",
        "abstract": "<p>This artifact contains the data that is collected during the research described in the paper \"Assessing the quality of evolving Haskell systems by measuring structural inequality\"</p>",
        "keywords": "Distribution, Evolution, Gini coefficient, Ideal value deviation",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.3692205": {
        "doi": "10.5281/zenodo.3692205",
        "author": "Muller, Stefan K. and Singer, Kyle and Goldstein, Noah and Acar, Umut A. and Agrawal, Kunal and Lee, I-Ting Angelina",
        "title": "Responsive Parallelism with Futures and State - Software Artifact",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3692205",
        "abstract": "<p>This artifact contains a prototype of the I-Cilk runtime for scheduling parallel code with task priorities, a C++ type system for preventing priority inversions, and benchmarks using both of the former. The artifact demonstrates the practicality of the type system in implementing performant parallel code that uses task priorities. The prototype I-Cilk runtime is in the interactive-cilk directory, with the type system located in interactive-cilk/include/cilk/cilk_priority.h.</p>",
        "keywords": "futures, Interactive Cilk, priority inversion, responsiveness, task parallelism, type systems",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3742225": {
        "doi": "10.5281/zenodo.3742225",
        "author": "Chowdhary, Sangeeta and Lim, Jay P. and Nagarakatte, Santosh",
        "title": "PositDebug Artifact: Debugging and Detecting Numerical Errors in Computation with Posits",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3742225",
        "abstract": "<p>This artifact contains a shadow execution framework for finding numerical errors in applications using both posits and floating point. The prototype for posits is called PositDebug and the prototype for floating point programs is called FPSsanitizer.</p>",
        "keywords": "cancellation, CORDIC, floating point, FPSanitizer, numerical errors, PositDebug, posits",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3742711": {
        "doi": "10.5281/zenodo.3742711",
        "author": "Antoniadis, Anastasios and Filippakis, Nikos and Krishnan, Paddy and Ramesh, Raghavendra and Allen, Nicholas and Smaragdakis, Yannis",
        "title": "Artifact: Static Analysis of Enterprise Applications: Frameworks and Caches, the Elephants in the Room",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3742711",
        "abstract": "<p>This artifact contains the evaluation benchmarks for the paper \"Static Analysis of Java Enterprise Applications: Frameworks and Caches, the Elephants in the Room\" , accepted in the Programming Language Design and Implementation Conference (PLDI'20).</p>\n<p>Link to paper preprint</p>\n<p>Abstract:</p>\n<p>Enterprise applications are a major success domain of Java, and Java</p>\n<p>is the default setting for much modern static analysis research. It</p>\n<p>would stand to reason that high-quality static analysis of Java</p>\n<p>enterprise applications would be commonplace, but this is far from</p>\n<p>true. Major analysis frameworks feature virtually no support for</p>\n<p>enterprise applications and offer analyses that are woefully</p>\n<p>incomplete and vastly imprecise, when at all scalable.</p>\n<p>In this work, we present two techniques for drastically enhancing</p>\n<p>the completeness and precision of static analysis for Java</p>\n<p>enterprise applications. The first technique identifies</p>\n<p>domain-specific concepts underlying all enterprise application</p>\n<p>frameworks, captures them in an extensible, declarative form, and</p>\n<p>achieves modeling of components and entry points in a largely</p>\n<p>framework-independent way. The second technique offers precision and</p>\n<p>scalability via a sound-modulo-analysis modeling of standard data</p>\n<p>structures.</p>\n<p>In realistic enterprise applications (an order of magnitude larger than</p>\n<p>prior benchmarks in the literature) our techniques achieve high degrees of</p>\n<p>completeness (on average more than 4x higher than conventional techniques) and</p>\n<p>speedups of about 6x compared to the most precise conventional analysis, with</p>\n<p>higher precision on multiple metrics. The result is JackEE, an</p>\n<p>enterprise analysis framework that can offer precise, high-completeness</p>\n<p>static modeling of realistic enterprise applications.</p>",
        "keywords": "Java EE, points-to analysis, static analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3743160": {
        "doi": "10.5281/zenodo.3743160",
        "author": "Premtoon, Varot and Koppel, James and Solar-Lezama, Armando",
        "title": "Yogo",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3743160",
        "abstract": "<p>Docker container with an executable copy of Yogo, and source code for the Haskell portion (frontend)</p>",
        "keywords": "code search, equational reasoning",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3750961": {
        "doi": "10.5281/zenodo.3750961",
        "author": "Ji, Ruyi and Liang, Jingjing and Xiong, Yingfei and Zhang, Lu and Hu, Zhenjiang",
        "title": "Artifact for paper \"Question Selection for Interactive Program Synthesis\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3750961",
        "abstract": "<p>This artifact is comprised of the appendix, source code and experiment scripts of paper \"Question Selection for Interactive Program Synthesis\". Readers can use them to reproduce the experiment results listed in our paper.</p>",
        "keywords": "Interaction, Program Synthesis",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/jiry17/IntSy/tree/v1.0"
    },
    "10.5281/zenodo.3751586": {
        "doi": "10.5281/zenodo.3751586",
        "author": "Apostolakis, Sotiris and Xu, Ziyang and Tan, Zujun and Chan, Greg and Campanoni, Simone and August, David I.",
        "title": "SCAF: A Speculation-Aware Collaborative Dependence Analysis Framework",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3751586",
        "abstract": "<p>Artifact archive for the artifact evaluation of the PLDI 2020 paper, titled \"SCAF: A Speculation-Aware Collaborative Dependence Analysis Framework\". It contains a Dockerfile along with relevant to this paper software to create a docker image used to reproduce the evaluation results presented in this PLDI 2020 paper.</p>",
        "keywords": "compilers, program analysis, speculation",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3752546": {
        "doi": "10.5281/zenodo.3752546",
        "author": "Gen\\c{c",
        "title": "Artifact for Article: Crafty: Efficient, HTM-Compatible Persistent Transactions",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3752546",
        "abstract": "<p>The artifact contains the source code of our implementation, including the microbenchmarks we evaluated and the code required to generate the graphs seen in the paper. It also contains a Docker image that includes all requirements for building and running the code. Using the Docker image is optional but highly recommended. A README file detailing how to reproduce our results is included.</p>",
        "keywords": "Crafty, non-volatile memory, persistent memory, persistent transactions",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3753963": {
        "doi": "10.5281/zenodo.3753963",
        "author": "Huang, Kangjing and Qiu, Xiaokang and Shen, Peiyuan and Wang, Yanjun",
        "title": "DryadSynth: Release as PLDI 2020 Artifact: Reconciling Enumerative and Deductive Program Synthesis",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3753963",
        "abstract": "<p>DryadSynth: A syntax-guided synthesizer</p>",
        "keywords": "deductive synthesis, divide-and-conquer, enumerative synthesis, syntax-guided synthesis",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/purdue-cap/DryadSynth/tree/pldi-2020-artifact"
    },
    "10.5281/zenodo.3754772": {
        "doi": "10.5281/zenodo.3754772",
        "author": "Kragl, Bernhard and Enea, Constantin and Henzinger, Thomas A. and Mutluergil, Suha Orhun and Qadeer, Shaz",
        "title": "Inductive Sequentialization of Asynchronous Programs (Evaluated Artifact)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3754772",
        "abstract": "<p>Inductive sequentialization is implemented as an extension of the CIVL verifier. This implementation and all examples listed in Table 1 of the paper are part of the open-source project Boogie. This artifact is for long-term archiving purposes and contains a snapshot of Boogie version 2.6.4. Since the project is under active development, we recommend to obtain the most recent version from https://github.com/boogie-org/boogie.</p>\n<p>For further information and instructions, see the included README.md file.</p>",
        "keywords": "abstraction, asynchrony, concurrency, induction, invariants, layers, movers, reduction, refinement, verification",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/boogie-org/boogie"
    },
    "10.5281/zenodo.3756283": {
        "doi": "10.5281/zenodo.3756283",
        "author": "Dasgupta, Sandeep and Dinesh, Sushant and Venkatesh, Deepan and Adve, Vikram S. and Fletcher, Christopher W.",
        "title": "Artifact for \"Scalable Validation of Binary Lifters\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3756283",
        "abstract": "<p>Snapshot of peer-evaluated artifact corresponding to the published conference paper [1].</p>\n<p>[1] Sandeep Dasgupta, Sushant Dinesh, Deepan Venkatesh, Vikram S. Adve, and Christopher W. Fletcher 2020. Scalable Validation of Binary Lifters. In Proceedings of the 2020 ACM SIGPLAN Conference on Programming Language Design and Implementation. ACM. https://doi.org/10.1145/3385412.3385964</p>",
        "keywords": "compiler-optimization, detecting-bugs, evaluation, formal-semantics, graph-matching, language-semantics, llvm-ir, mcsema, pldi, reproducing-bugs, reverse-engineering, symbolic-execution-engine, symbolic-summaries, translation-validation, validation, verification-conditions, verification-queries, virtualbox, x86-64",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/sdasgup3/PLDI20-Artifact-Evaluation/tree/v1.1"
    },
    "10.5281/zenodo.3756301": {
        "doi": "10.5281/zenodo.3756301",
        "author": "Qin, Boqin and Chen, Yilun and Yu, Zeming and Song, Linhai and Zhang, Yiying",
        "title": "Replication Package for Article: Understanding Memory and Thread Safety Practices and Issues in Real-World Rust Programs",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3756301",
        "abstract": "<p>The artifact is to support the data in our paper with programs. It contains five directories related to the corresponding sections in the paper. section-2-background-and-related-work contains scripts and raw data to plot Fig. 1 and Fig. 2. section-4-unsafe-usages contains a bench testing for safe and unsafe code, and a script to count unsafe statistics. section-5-memory-safety-issues contains the fix commits of our studied memory bugs, and our reproduced memory bugs. section-6-thread-safety-issues contains the fix commits of our studied blocking and non-blocking bugs, our reproduced blocking and non-blocking bugs, and the code to count cases where locks are manually dropped. section-7-bug-detection contains our detection tools for use-after-free and double-lock.</p>",
        "keywords": "Bug Study, Concurrency Bug, Memory Bug, Rust",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/system-pclub/rust-study/tree/1.0"
    },
    "10.5281/zenodo.3756416": {
        "doi": "10.5281/zenodo.3756416",
        "author": "Wu, Zhenwei and Lu, Kai and Nisbet, Andrew and Zhang, Wenzhe and Luj\\'{a",
        "title": "PMThreads: Persistent Memory Threads Harnessing Versioned Shadow Copies (Artifact)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3756416",
        "abstract": "<p>This is the artifact for the paper \"PMThreads: Persistent Memory Threads Harnessing Versioned Shadow Copies\", which is set to be published in PLDI 2020. The artifact contains code, and a Dockerfile for assembling a Docker image with all required dependencies to run the code and reproduce the paper results.</p>",
        "keywords": "memory persistence, non-volatile memory",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3756609": {
        "doi": "10.5281/zenodo.3756609",
        "author": "Lee, DongKwon and Lee, Woosuk and Oh, Hakjoo and Yi, Kwangkeun",
        "title": "Lobster - Optimizing Homomorphic Evaluation Circuits by Program Synthesis and Term Rewriting",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3756609",
        "abstract": "<p>Lobster optimizes homomorphic encryption circuit using aggressive rewrite rules automatically learned by program synthesis technique.</p>",
        "keywords": "Homomorphic encryption circuit, Program synthesis, Term rewriting",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/dklee0501/PLDI_20_242_artifact_publication/tree/v1.0.0"
    },
    "10.5281/zenodo.3759110": {
        "doi": "10.5281/zenodo.3759110",
        "author": "Vila, Pepe and Ganty, Pierre and Guarnieri, Marco and K\\\"{o",
        "title": "Polca: a tool for learning cache replacement policies as automata models",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3759110",
        "abstract": "<p>Polca implements the automata interface to LearnLib for automatically learning cache replacement policies. It can be connected to CacheQuery for directly interacting with hardware caches. It also contains the learned models, instructions to generate them, and the templates (and results) for (from) the program synthesis evaluation.</p>",
        "keywords": "automata, cache, cachequery, learning, learnlib, program synthesis, replacement policy, sketch",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/cgvwzq/polca/tree/v0.1"
    },
    "10.5281/zenodo.3760403": {
        "doi": "10.5281/zenodo.3760403",
        "author": "Brent, Lexi and Grech, Neville and Lagouvardos, Sifis and Scholz, Bernhard and Smaragdakis, Yannis",
        "title": "Ethainter: A Smart Contract Security Analyzer for Composite Vulnerabilities",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3760403",
        "abstract": "<p>The artifact is composed of: - A decompiler (modified Gigahorse) - Ethainter implementation - Data for recreating experiments</p>",
        "keywords": "Program Analysis, Smart Contracts",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3762236": {
        "doi": "10.5281/zenodo.3762236",
        "author": "Roemer, Jake and Gen\\c{c",
        "title": "Efficient Predictive Race Detection",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3762236",
        "abstract": "<p>This is the artifact submitted for the Artifact Evaluation process for the PLDI 2020 paper \"SmartTrack: Efficient Predictive Race Detection\" by Jake Roemer, Kaan Gen\\c{c",
        "keywords": "Data race detection, dynamic predictive analysis",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.3764961": {
        "doi": "10.5281/zenodo.3764961",
        "author": "Bichsel, Benjamin and Baader, Maximilian and Gehr, Timon and Vechev, Martin",
        "title": "silq-artifact",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3764961",
        "abstract": "<p>Artifact for PLDI'20 paper \"Silq: A High-level Quantum Programming Language with Safe Uncomputation and Intuitive Semantics\".</p>",
        "keywords": "Quantum Language, Semantics, Uncomputation",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/tgehr/silq-artifact/tree/v1.0"
    },
    "10.5281/zenodo.3765314": {
        "doi": "10.5281/zenodo.3765314",
        "author": "Gehr, Timon and Steffen, Samuel and Vechev, Martin",
        "title": "lpsi-artifact",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3765314",
        "abstract": "<p>Artifact for PLDI'20 paper \"λPSI: Exact Inference for Higher-Order Probabilistic Programs\".</p>",
        "keywords": "Exact, Higher-order, Probabilistic Programming",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/eth-sri/psi/tree/pldi20"
    },
    "10.5281/zenodo.3833964": {
        "doi": "10.5281/zenodo.3833964",
        "author": "Fourtounis, George and Triantafyllou, Leonidas and Smaragdakis, Yannis",
        "title": "Identifying Java Calls in Native Code via Binary Scanning (artifact)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3833964",
        "abstract": "<p>This is the artifact for the paper \"Identifying Java Calls in Native Code via Binary Scanning\" (ISSTA 2020). It contains a Doop installation, the benchmarks used in the \"Evaluation\" section of the paper, and instructions on how to replicate the paper results.</p>",
        "keywords": "binary, Java, native code, static analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3862978": {
        "doi": "10.5281/zenodo.3862978",
        "author": "Vanover, Jackson and Deng, Xuan and Rubio-Gonz\\'{a",
        "title": "FPDiff: Discvovering Discrepancies in Numerical Libraries",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3862978",
        "abstract": "<p>FPDiff is a tool for automated, end-to-end differential testing that, given only library source code as input, extracts numerical function signatures, synthesizes drivers, creates equivalence classes of functions that are synonymous, and executes differential tests over these classes to detect meaningful numerical discrepancies between implementations. FPDiff's current scope covers special functions across numerical libraries written in different programming languages. This artifact in particular includes the following libraries: the C library GSL (The GNU Scientific Library, version 2.6), the Python libraries SciPy (version 1.3.1) and mpmath (version 1.1.0), and the JavaScript library jmat (commit 21d15fc3eb5a924beca612e337f5cb00605c03f3).</p>",
        "keywords": "correctness, differential testing, floating point, numerical libraries, numerical methods, software testing",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/ucd-plse/FPDiff/tree/v1.0"
    },
    "10.5281/zenodo.3895271": {
        "doi": "10.5281/zenodo.3895271",
        "author": "Busse, Frank and Nowack, Martin and Cadar, Cristian",
        "title": "Replication package for: Running Symbolic Execution Forever",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3895271",
        "abstract": "<p>The artefact contains a Docker image with MoKlee, our memoization extension of KLEE, all benchmarks in LLVM bitcode format, the raw experiment results and scripts to re-create our evaluation and to re-run all experiments.</p>",
        "keywords": "binutils, coreutils, findutils, grep, KLEE, libspng, memoization, MoKlee, software testing, symbolic execution, tcpdump",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3895414": {
        "doi": "10.5281/zenodo.3895414",
        "author": "Fang, Chunrong and Liu, Zixi and Shi, Yangyang and Huang, Jeff and Shi, Qingkai",
        "title": "Replication Package for Article: Functional Code Clone Detection with Syntax and Semantics Fusion Learning",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3895414",
        "abstract": "<p>The FCDetector is a functional code clone detection tool with syntax and semantics fusion learning.</p>",
        "keywords": "code clone detection, code representation, functional clone detection",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/shiyy123/FCDetector/tree/v1.0.0"
    },
    "10.5281/zenodo.3895797": {
        "doi": "10.5281/zenodo.3895797",
        "author": "Gopinath, Rahul and Kampmann, Alexander and Havrikov, Nikolas and Soremekun, Ezekiel O. and Zeller, Andreas",
        "title": "Replication package for Abstracting Failure Inducing Inputs",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3895797",
        "abstract": "<p>This artifact contains the implementation of the algorithm in the paper \"Abstracting Failure Inducing Inputs\". The artifact is a Vagrant box (a virtual machine) that contains the complete implementation and the subjects that can be evaluated directly. A complete worked out example in a Jupyter notebook is included in the VM along with a complete Jupyter installation so that the notebook can be viewed directly.</p>",
        "keywords": "debugging, error diagnosis, failure-inducing inputs, grammars",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3897315": {
        "doi": "10.5281/zenodo.3897315",
        "author": "Riganelli, Oliviero and Mottadelli, Simone Paolo and Rota, Claudio and Micucci, Daniela and Mariani, Leonardo",
        "title": "DLD: Data Loss Detector",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3897315",
        "abstract": "<p>Android apps must work correctly even if their execution is interrupted by external events. For instance, an app must work properly even if a phone call is received, or after its layout is redrawn because the smartphone has been rotated. Since these events may require destroying, when the execution is interrupted, and recreating, when the execution is resumed, the foreground activity of the app, the only way to prevent the loss of state information is to save and restore it. This behavior must be explicitly implemented by app developers, who often miss to implement it properly, releasing apps affected by data loss problems, that is, apps that may lose state information when their execution is interrupted. Although several techniques can be used to automatically generate test cases for Android apps, the obtained test cases seldom include the interactions and the checks necessary to exercise and reveal data loss faults. Data Loss Detector (DLD) is a test case generation technique that integrates an exploration strategy, data-loss-revealing actions, and two customized oracle strategies for the detection of data loss failures.</p>",
        "keywords": "Android, Data Loss, Mobile Apps, Test Case Generation, Validation",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3901626": {
        "doi": "10.5281/zenodo.3901626",
        "author": "Hildebrandt, Carl and Elbaum, Sebastian and Bezzo, Nicola and Dwyer, Matthew B.",
        "title": "Feasible and Stressful Trajectory Generation for Mobile Robots - Artifact",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3901626",
        "abstract": "<p>This artifact can be used to replicate the results found in the paper: \"Feasible and Stressful Trajectory Generation for Mobile Robots\". For more information on the content consult the readme file.</p>",
        "keywords": "Kinematic and Dynamic Models, Robotics, Stress Testing, Test Generation",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3843611": {
        "doi": "10.5281/zenodo.3843611",
        "author": "Zhang, Yuhao and Ren, Luyao and Chen, Liqian and Xiong, Yingfei and Cheung, Shing-Chi and Xie, Tao",
        "title": "DEBAR: Detecting Numerical Bugs in Neural Network Architectures",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3843611",
        "abstract": "<p>This artifact contains the implementation of DEBAR and the evaluation in our ESEC/FSE 2020 paper: Detecting Numerical Bugs in Neural Network Architectures.</p>",
        "keywords": "Neural Network, Numerical Bugs, Static Analysis",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/ForeverZyh/DEBAR/tree/DOI"
    },
    "10.5281/zenodo.3872848": {
        "doi": "10.5281/zenodo.3872848",
        "author": "Helm, Dominik and K\\\"{u",
        "title": "Artifact for Modular Collaborative Program Analysis in OPAL",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3872848",
        "abstract": "<p>This is the artifact that was used to obtain the results of “Modular Collaborative Program Analysis in OPAL”, published at ESEC/FSE 2020.</p>\n<p>The Docker container contains the necessary tools (OPAL and DOOP), benchmarks (XCorpus, DoopBenchmarks), scripts to run the tools for the experiments performed in the paper and scripts to clean up the output of these experiments to reproduce the tables from the paper.</p>\n<p>Please note that the artifact refers to OPAL as ‘BlaSt’ as this name was used during double-blind review.</p>",
        "keywords": "Blackboard System, Composition, Modularization, Parallelization, Static Analysis",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3872902": {
        "doi": "10.5281/zenodo.3872902",
        "author": "Gaaloul, Khouloud and Menghi, Claudio and Nejati, Shiva and Briand, Lionel C. and Wolfe, David",
        "title": "Replication Package for Article: Mining Assumptions for Software Components using Machine Learning",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3872902",
        "abstract": "<p>EPIcuRus (assumPtIon geneRation approach for CPS) automatically synthesizes environment assumptions for a component under analysis. EPIcuRus combines search-based testing, machine learning, and model checking. The core of EPIcuRus is a decision tree algorithm that infers environment assumptions from a test suite including test cases and their verdicts. The test cases are generated using search-based testing, and the assumptions inferred by decision trees are validated through model checking. To improve the efficiency and effectiveness of the assumption generation process, EPIcuRus implements a novel test case generation technique, namely Important Features Boundary Test (IFBT), that guides the test generation based on the feedback produced by machine learning.</p>",
        "keywords": "Decision trees, Environment assumptions, Machine learning, Model checking, Search-based software testing",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3874077": {
        "doi": "10.5281/zenodo.3874077",
        "author": "Pan, Rangeet and Rajan, Hridesh",
        "title": "Replication Package for the Article: On Decomposing a Deep Neural Network into Modules",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3874077",
        "abstract": "<p>This repository has the source code for the paper “On Decomposing a Deep Neural Network into Modules”</p>",
        "keywords": "decomposing, deep neural networks, modularity, modules",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/rangeetpan/decomposeDNNintoModules/tree/1.0"
    },
    "10.5281/zenodo.3874834": {
        "doi": "10.5281/zenodo.3874834",
        "author": "Gao, Jun and Li, Li and Kong, Pingfan and Bissyand\\'{e",
        "title": "DICIDer",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3874834",
        "abstract": "<p>DICIDer is a tool takes as input an Android APK file and outputs a list of DICI paths that trace how direct inter-app code invocations are planned in the analyzed app.</p>",
        "keywords": "Android, DICI, Reflection",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/gaojun0816/code_access_finder/tree/v1.0"
    },
    "10.5281/zenodo.3876048": {
        "doi": "10.5281/zenodo.3876048",
        "author": "Ben Khadra, M. Ammar and Stoffel, Dominik and Kunz, Wolfgang",
        "title": "Supplemental artifacts of the paper: Efficient Binary-Level Coverage Analysis",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3876048",
        "abstract": "<p>The archive contains the artifacts accompanying the paper: “Efficient Binary-Level Coverage Analysis”. The artifacts are organized as follows:</p>\n<ul>\n<li><p><code>sample-binaries</code>. Folder that contains sample binaries patched with bcov.</p></li>\n<li><p><code>dataset.tar.gz</code>. Package that contains experimental data in csv format.</p></li>\n<li><p><code>figures</code>. Folder that contains the python script used to generate the figures of our paper. It assumes that the dataset was first extracted to the folder <code>dataset</code>.</p></li>\n<li><p><code>install.sh</code>. This script builds and installs bcov together with its dependencies.</p></li>\n<li><p><code>experiment-01.sh</code>. This script patches our sample binaries and shows how coverage data can be collected. It assumes that bcov was installed using the previous script.</p></li>\n<li><p><code>bcov.tar.gz</code>. Source code of the first public version of <code>bcov</code>. The tool is distributed under an MIT license.</p></li>\n</ul>",
        "keywords": "code coverage analysis, experimental dataset, jump table analysis, reverse engineering, static binary instrumentation, supplemental artifacts",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3876969": {
        "doi": "10.5281/zenodo.3876969",
        "author": "Gopinath, Rahul and Mathis, Bj\\\"{o",
        "title": "Replication package for Mining Input Grammars from Dynamic Control Flow",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3876969",
        "abstract": "<p>A vagrant virtual box that is sufficient for reproduction of the results in Mining Input Grammars from Dynamic Control Flow</p>",
        "keywords": "context-free grammar, fuzzing, mining, software testing",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3877079": {
        "doi": "10.5281/zenodo.3877079",
        "author": "Terragni, Valerio and Jahangirova, Gunel and Tonella, Paolo and Pezz\\`{e",
        "title": "Gassert: Evolutionary Improvement of Assertion Oracles",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3877079",
        "abstract": "<p>Gassert tool, presented in the paper “Evolutionary Improvement of Assertion Oracles” published at ESEC/FSE 2020.</p>",
        "keywords": "esec-fse2020, gasser, oracle improvement, software testing, test generation",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3877326": {
        "doi": "10.5281/zenodo.3877326",
        "author": "Chen, Qingrong and Wang, Teng and Legunsen, Owolabi and Li, Shanshan and Xu, Tianyin",
        "title": "Artifacts of Paper \"Understanding and Discovering Software Configuration Dependencies in Cloud and Datacenter Systems\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3877326",
        "abstract": "<p>This package contains all the artifacts (i.e.&nbsp;codes \\&amp; datasets) we use in our paper “Understanding and Discovering Software Configuration Dependencies in Cloud and Datacenter Systems” accepted to FSE 2020.</p>",
        "keywords": "configuration dependencies, Hadoop, OpenStack, static analysis tools",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3878164": {
        "doi": "10.5281/zenodo.3878164",
        "author": "Vassallo, Carmine and Proksch, Sebastian and Jancso, Anna and Gall, Harald C. and Di Penta, Massimiliano",
        "title": "Replication Package for \"Configuration Smells in Continuous Delivery Pipelines: A Linter and A Six-Month Study on GitLab\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3878164",
        "abstract": "<p>This is the replication package of the paper “Configuration Smells in Continuous Delivery Pipelines: A Linter and A Six-Month Study on GitLab” accepted for publication at ESEC/FSE 2020. We describe the artifacts of our paper and how to use them to replicate the results of our study. When appropriate, we also link the description of the artifacts to relevant sections in the paper.</p>",
        "keywords": "Anti-patterns, Configuration, Continuous Delivery, Continuous Integration, DevOps, GitLab, Linter",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/sealuzh/cd-linter-artifacts/tree/v2.0"
    },
    "10.5281/zenodo.3894559": {
        "doi": "10.5281/zenodo.3894559",
        "author": "P\\^{a",
        "title": "Source Code for Flexeme: Untangling Commits using Lexical Flows",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3894559",
        "abstract": "<p>This project provides several implementations for commit untagling and proposes a new representation of git patches by projecting the patch onto a PDG.</p>\n<p><em>Repository Structure</em></p>\n<p>We provide an artificial corpus and a way of building such corpora in ./tangle_concerns.</p>\n<p>We provide a reference implementation to obtain a 𝛿-PDG and augmenting a 𝛿-PDG with name-flow information to obtain a Delta Name-flow Graph (𝛿-NFG) in ./deltaPDG, the later is ./deltaPDG/Util/merge_nameflow.py.</p>\n<p>We provide the binary of the PDG extractor for C# code under ./extractor. NOTE: this requires MS Windows to run.</p>\n<p>We provide a reimplementation of the method described by Herzig et al.[1] adapted to the C# setting in ./confidence_voters. In the same folder we provide our adaptation that works on our proposed 𝛿-PDG as ./confidence_voters/confidence_voters_graph_only.py.</p>\n<p>We provide a reimplementation of the method described by Barnett et al.[2] in ./du_chain/DU_chains_closure.py. We remark that we do not provide special treatment to trivial partitions as defined by Barnett et al.&nbsp;which may impact observed performance.</p>\n<p>We provide our proposed method under ./wl_kernel/wl_kernel_untangle.py.</p>\n<p>Evaluation drivers are provided under ./Util/[cv/graph]_evaluation_driver.py.</p>\n<p>We provide our evaluation analysis scripts under ./analysis as a jupyter notebook.</p>",
        "keywords": "clustering-application, commit-untangling, graph-kernels-application, pdg",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/PPPI/Flexeme/tree/0.2"
    },
    "10.5281/zenodo.3895761": {
        "doi": "10.5281/zenodo.3895761",
        "author": "Shanker, Kripa and Joseph, Arun and Ganapathy, Vinod",
        "title": "Replication package for \"An evaluation of methods to port legacy code to SGX enclaves\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3895761",
        "abstract": "<p>This artifact contains the code of the benchmarks used in the evaluation, as well as the source code of Porpoise, the instruction wrapper prototype used in the experiments reported in the paper.</p>",
        "keywords": "enclaves, Porpoise, porting, programming, SGX",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/iisc-cssl/porpoise/tree/v0.1.0"
    },
    "10.5281/zenodo.3896795": {
        "doi": "10.5281/zenodo.3896795",
        "author": "Mandrioli, Claudio and Maggio, Martina",
        "title": "Replication package for article: Testing Self-Adaptive Software with Probabilistic Guarantees on Performance Metrics",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3896795",
        "abstract": "<p>The artifact contains the code to replicate the experiments from the paper “Testing Self-Adaptive Software with Probabilistic Guarantees on Performance Metrics”. The experiments concerns two different adaptive softwre: Self -Adaptive Video Encoder, and Tele-Assistance System. The two subdirectories of the repository contain the code for the two artifacts.</p>",
        "keywords": "Self-Adaptive Software, Testing",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/ManCla/ESEC-FSE-2020/tree/V1.1"
    },
    "10.5281/zenodo.3901405": {
        "doi": "10.5281/zenodo.3901405",
        "author": "Zhang, Ziqi and Li, Yuanchun and Guo, Yao and Chen, Xiangqun and Liu, Yunxin",
        "title": "Replication Package for artifact: Dynamic Slicing for Deep Neural Networks",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3901405",
        "abstract": "<p>This is the artifact for the paper “Dynamic Slicing for Deep Neural Networks”. More details are in README.md</p>",
        "keywords": "data flow analysis, deep neural networks, dynamic slicing, Program slicing",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/ziqi-zhang/fse20/tree/v1.0.0"
    },
    "10.5281/zenodo.3902142": {
        "doi": "10.5281/zenodo.3902142",
        "author": "Kampmann, Alexander and Havrikov, Nikolas and Soremekun, Ezekiel O. and Zeller, Andreas",
        "title": "Replication Package for Article: \"When Does My Program Do This? Learning Circumstances of Software Behavior\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3902142",
        "abstract": "<p>Alhazen is a tool which generates an explanation, in terms of input features, for program behavior. Details are given in our publication “When Does My Program Do This? Learning Circumstances of Software Behavior” The artifact consists of two parts: (1) The full data we used in our submission. (2) The program code used to obtain this data. Usage instructions are in a readme within the artifact.</p>",
        "keywords": "debugging, error diagnosis, machine learning, software behavior",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.3902978": {
        "doi": "10.5281/zenodo.3902978",
        "author": "Cha, Sooyoung and Oh, Hakjoo",
        "title": "Replication Package for Article: Making Symbolic Execution Promising by Learning Aggressive State-Pruning Strategy",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3902978",
        "abstract": "<p>This is an artifact for the paper “Making Symbolic Execution Promising by Learning Aggressive State-Pruning Strategy” submitted to FSE 2020. It provides a VirtualBox image containing all resources to reproduce the main experimental results in our paper.</p>",
        "keywords": "Online Learning, Symbolic Execution",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3905131": {
        "doi": "10.5281/zenodo.3905131",
        "author": "Shahbazian, Arman and Karthik, Suhrid and Brun, Yuriy and Medvidovic, Nenad",
        "title": "Replication package for \"eQual: Informing early design decisions\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3905131",
        "abstract": "<p>This artifact contains the replication package for the paper titled “eQual: Informing early design decisions” (http://dx.doi.org/10.1145/3368089.3409749) published in ESEC/FSE 2020. The artifact contains a proof, data, analysis scripts, and all materials used in the user studies.</p>",
        "keywords": "design analysis, design decisions, eQual, optimization, software design",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/arman2/equal_public/tree/1.0.1"
    },
    "10.5281/zenodo.3905204": {
        "doi": "10.5281/zenodo.3905204",
        "author": "Zhai, Yizhuo and Hao, Yu and Zhang, Hang and Wang, Daimeng and Song, Chengyu and Qian, Zhiyun and Lesani, Mohsen and Krishnamurthy, Srikanth V. and Yu, Paul",
        "title": "seclab-ucr/UBITect: First release of UBITect",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3905204",
        "abstract": "<p>This is the first release of UBITect, please follow the README.md to install and conduct the experiment.</p>",
        "keywords": "bug detection, symbolic execution, type qualifier, Use-before-Initialization",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/seclab-ucr/UBITect/tree/v1.0.0"
    },
    "10.5281/zenodo.3908793": {
        "doi": "10.5281/zenodo.3908793",
        "author": "Yan, Shenao and Tao, Guanhong and Liu, Xuwei and Zhai, Juan and Ma, Shiqing and Xu, Lei and Zhang, Xiangyu",
        "title": "'Replication Package for Article: Correlations between Deep Neural Network Model Coverage Criteria and Model Quality'",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3908793",
        "abstract": "<p>This artifact includes two parts: ‘all-data.zip’ and ‘DNN/Testing/CovTesting-v1.1.zip’. ‘all-data.zip’ contains the data used for the experiments. ‘DNN/Testing/CovTesting-v1.1.zip’ contains the necessary codes. Please refer to the ‘README.md’ in ‘DNN/Testing/CovTesting-v1.1.zip’ to use this software. You can also refer to https://github.com/RU-System-Software-and-Security/CovTesting for more information.</p>",
        "keywords": "Deep Neural Networks, Software Testing",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/DNNTesting/CovTesting/tree/v1.1"
    },
    "10.5281/zenodo.3911750": {
        "doi": "10.5281/zenodo.3911750",
        "author": "Uesbeck, P. Merlin and Peterson, Cole S. and Sharif, Bonita and Stefik, Andreas",
        "title": "A Randomized Controlled Trial on the Effects of EmbeddedComputer Language Switching Replication Packet",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3911750",
        "abstract": "<p>A replication packet for the paper “A Randomized Controlled Trial on the Effects of Embedded Computer Language Switching” please review the README inside the zip archive.</p>",
        "keywords": "analysis, computer language switching, data, database programming, experience, experiment software, polyglot programming, productivity, programming languages, randomized controlled trial, software",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3912064": {
        "doi": "10.5281/zenodo.3912064",
        "author": "Biswas, Sumon and Rajan, Hridesh",
        "title": "Accepted Artifact Package for ESEC/FSE 2020 paper: Do the Machine Learning Models on a Crowd Sourced Platform Exhibit Bias? An Empirical Study on Model Fairness",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3912064",
        "abstract": "<p>The artifact contains code and data for the machine learning models used to analyze fairness.</p>",
        "keywords": "fairness, machine learning, models",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/sumonbis/ML-Fairness/tree/4.0"
    },
    "10.5281/zenodo.3923232": {
        "doi": "10.5281/zenodo.3923232",
        "author": "Zhang, Mingxue and Meng, Wei",
        "title": "Compiled Binary and Analysis Scripts of JSObserver on macOS 10.14 and Debian 9.11 (stretch)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3923232",
        "abstract": "<p>This is a pre-built version of JSObserver, which is a browser-based analysis framework that collects JavaScript write operation logs and function definition logs. It also contains analysis scripts that detect JavaScript global identifier conflicts (i.e., variable value conflicts, variable type conflicts and function definition conflicts) using the logs.</p>",
        "keywords": "Analysis scripts, Compiled binary, JSObserver, Python",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3947858": {
        "doi": "10.5281/zenodo.3947858",
        "author": "Rigger, Manuel and Su, Zhendong",
        "title": "ESEC/FSE 20 Artifact for \"Detecting Optimization Bugs in Database Engines via Non-Optimizing Reference Engine Construction\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3947858",
        "abstract": "<p>The artifact consists of two main components:</p>\n<ol type=\"1\">\n<li>SQLancer, the tool which we created, and in which we implemented NoREC, to find all bugs reported in the associated paper.</li>\n<li>A SQLite database with a list of bugs that we reported and additional meta information.</li>\n</ol>",
        "keywords": "NoREC, SQLancer",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3949286": {
        "doi": "10.5281/zenodo.3949286",
        "author": "Zhao, Yixue and Chen, Justin and Sejfia, Adriana and Schmitt Laser, Marcelo and Zhang, Jie and Sarro, Federica and Harman, Mark and Medvidovic, Nenad",
        "title": "FrUITeR's artifacts",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3949286",
        "abstract": "<p>FrUITeR’s artifacts accepted at ESEC/FSE 2020 for the paper “FrUITeR: A Framework for Evaluating UI Test Reuse”</p>",
        "keywords": "Mobile Application, Open Science, Software Testing, Test Reuse",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3949340": {
        "doi": "10.5281/zenodo.3949340",
        "author": "Wang, Zan and Yan, Ming and Chen, Junjie and Liu, Shuang and Zhang, Dongdi",
        "title": "Replication Packages for Article &nbsp;\"Deep Learning Library Testing via Effective Model Generation\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3949340",
        "abstract": "<p>This artifact includes the code and datasets of LEMON. File named LEMON-V1.0.0.zip includes all the scripts in LEMON, and file named LEMON_datasets_models.zip includes datasets sampled from ImageNet or collected from GitHub by authors. More details can be seen in https://github.com/Jacob-yen/LEMON</p>",
        "keywords": "Deep Learning Testing, Library Testing, Model Generation, Mutation, Search-based Software Testing",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/Jacob-yen/LEMON/tree/V1.0.0"
    },
    "10.5281/zenodo.3951724": {
        "doi": "10.5281/zenodo.3951724",
        "author": "Hermann, Ben and Winter, Stefan and Siegmund, Janet",
        "title": "Community Expectations for Research Artifacts and Evaluation Processes (Additional Material)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3951724",
        "abstract": "<p>Raw and derived data on calls for artifacts and a survey conducted with artifact reviewers. The purpose of the artifact is to support the replicability of the conducted study, but also to allow for future studies in the same area.</p>",
        "keywords": "Artifact Evaluation, Replicability, Reproducibility, Study",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/bhermann/artifact-survey/tree/v3"
    },
    "10.5281/zenodo.3966486": {
        "doi": "10.5281/zenodo.3966486",
        "author": "Trimananda, Rahmadi and Aqajari, Seyed Amir Hossein and Chuang, Jason and Demsky, Brian and Xu, Guoqing Harry and Lu, Shan",
        "title": "IoTCheck",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3966486",
        "abstract": "<p>IoTCheck is a framework that model-checks smart home apps. Please see https://github.com/uci-plrg/iotcheck for further instructions for downloads and installation.</p>",
        "keywords": "concurrency, model checking, program analysis, smart home apps",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/uci-plrg/iotcheck/tree/1.2"
    },
    "10.5281/zenodo.3993789": {
        "doi": "10.5281/zenodo.3993789",
        "author": "Kr\\\"{u",
        "title": "Artifact for the ESEC/FSE 2020 Paper: An Empirical Analysis of the Costs of Clone- and Platform-Oriented Software Reuse",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3993789",
        "abstract": "<p>This dataset comprises the supplementary material for the paper “An Empirical Analysis of the Costs of Clone- and Platform-Oriented Software Reuse” by Jacob Kr\\\"{u",
        "keywords": "clone \\&amp; own, costs, empirical study, platform, software product line",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.4016963": {
        "doi": "10.5281/zenodo.4016963",
        "author": "Riccio, Vincenzo and Tonella, Paolo",
        "title": "Replication Package for Article: \"Model-Based Exploration of the Frontier of Behaviours for Deep Learning System Testing\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4016963",
        "abstract": "<p>This artifact contains the tools and the data of the paper “Model-Based Exploration of the Frontier of Behaviours for Deep Learning System Testing” by V. Riccio and P. Tonella, published in the Proceedings of the ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE 2020). It is structured as follows: - DeepJanus-MNIST: contains the DeepJanus tool adapted to the handwritten digit classification case study and the instructions on how to use it; - DeepJanus-BNG: contains the DeepJanus tool adapted to the self-driving car case study and the instructions on how to use it; - experiments: contains the raw experimental data reported in the paper and the scripts to obtain the data.</p>",
        "keywords": "deep learning, model based testing, search based software engineering, software testing",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/p1ndsvin/DeepJanus/tree/1.0"
    },
    "10.5281/zenodo.4021473": {
        "doi": "10.5281/zenodo.4021473",
        "author": "Harel-Canada, Fabrice and Wang, Lingxiao and Gulzar, Muhammad Ali and Gu, Quanquan and Kim, Miryung",
        "title": "Replication Package for Article: Is Neuron Coverage a Meaningful Measure for Testing Deep Neural Networks?",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4021473",
        "abstract": "<p>This artifact contains the code which generates adversarial test suites and measures its attack success, naturalness (IS + FID), and output impartiality. It also includes the notebooks used to generate figures and the correlations, which were then extracted into a google sheet. The MNIST and CIFAR10 data can be easily downloaded from source, but the udacity driving dataset was included as it may not always be available through the original competition github repo.</p>\n<p>Any potential updates will be maintained here: https://github.com/fabriceyhc/nc_diversity_attacks</p>",
        "keywords": "Adversarial Attack, Machine Learning, Neuron Coverage, Software Engineering, Testing",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4022892": {
        "doi": "10.5281/zenodo.4022892",
        "author": "Erlenhov, Linda and Neto, Francisco Gomes de Oliveira and Leitner, Philipp",
        "title": "Replication package to An Empirical Study of Bots in Software Development – Characteristics and Challenges from a Practitioner's Perspective",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4022892",
        "abstract": "<p>Replication package for the analysis from the survey results in the paper “An Empirical Study of Bots in Software Development – Characteristics and Challenges from a Practitioner’s Perspective” Read the README.MD for instructions The replication package contains both R scripts and original data collected in the study.</p>",
        "keywords": "Empirical study, Software bot, Software engineering",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4023299": {
        "doi": "10.5281/zenodo.4023299",
        "author": "Cha, Alan and Wittern, Erik and Baudart, Guillaume and Davis, James C. and Mandel, Louis and Laredo, Jim A.",
        "title": "A Principled Approach to GraphQL Query Cost Analysis Research Paper Artifact",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4023299",
        "abstract": "<p>The artifact contains 1) a GraphQL query-response corpus, containing 10,000 anonymized query and response pairs against the GitHub and Yelp APIs that were used in our experiments, 2) a randomized GraphQL query generator that was used to create the corpus, 3) configurations for the static analyses (ours as well as those we compared against) that were used in our experiments, 4) experiment data and the scripts that were used to create our plots, 5) scripts to fetch the GraphQL schemas that were used in our experiments, and 6) scripts that will use the aforementioned components to rerun our experiments.</p>",
        "keywords": "API management, cost estimation, GraphQL, query complexity, random query generation",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/Alan-Cha/graphql-complexity-paper-artifact/tree/v1.0.0"
    },
    "10.5281/zenodo.4024268": {
        "doi": "10.5281/zenodo.4024268",
        "author": "Beyer, Dirk and Friedberger, Karlheinz",
        "title": "Replication Artifact for Article 'Domain-Independent Interprocedural Program Analysis using Block-Abstraction Memoization'",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4024268",
        "abstract": "<p>This file is the replication package for the article “Domain-Independent Interprocedural Program Analysis using Block-Abstraction Memoization”, Proc. ESEC/FSE 2020. ACM. It contain the necessary tools and tasks to re-evaluate the benchmark results of the article. More details can be found in the artifact’s readme file.</p>",
        "keywords": "CPAchecker, Interprocedural Analysis, Procedure Summary, Program Analysis, Software Verification",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4028454": {
        "doi": "10.5281/zenodo.4028454",
        "author": "Baranov, Eduard and Legay, Axel and Meel, Kuldeep S.",
        "title": "Baital",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4028454",
        "abstract": "<p>Baital is a sampler generator for configurable systems. It generates a set of testing samples for large configurable systems with high t-wise coverage. The tool takes a set of constraints on features of the configurable system represented as a CNF formula in Dimacs format and provides a set of configurations of a specified size and computes their t-wise coverage.</p>",
        "keywords": "Configurable software, t-wise coverage, Weighted sampling",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/meelgroup/baital/tree/v1.0.3"
    },
    "10.5281/zenodo.4031225": {
        "doi": "10.5281/zenodo.4031225",
        "author": "Cambronero, Jos\\'{e",
        "title": "AMS Artifact",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4031225",
        "abstract": "<p>Software artifact for AMS (Generating AutoML Search Spaces from Weak Specifications), camera-ready modifications incorporated.</p>",
        "keywords": "automated machine learning, search-based software engineering, software engineering",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3973073": {
        "doi": "10.5281/zenodo.3973073",
        "author": "Fl\\\"{u",
        "title": "Artifact of \"Contextual Dispatch for Function Specialization",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3973073",
        "abstract": "<p>This is the artifact to accompany our OOPSLA 2020 submission on “Contextual Dispatch for Function Specialization”. The artifact consists of a virtual machine for the R language, called \\v{R",
        "keywords": "benchmark, contextual dispatch, R, specialization, virtual machine, \\v{R",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3975566": {
        "doi": "10.5281/zenodo.3975566",
        "author": "Turo\\v{n",
        "title": "Artifact for the OOPSLA'20 paper \"Regex Matching with Counting-Set Automata\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3975566",
        "abstract": "<p>The artifact contains a regular expression matching engine (called CsA) optimized for regular expressions with counters. It also includes other tools—RE2, grep, SRM, and the .NET default regular expression matcher—and provides comparison of CsA with these tools.</p>",
        "keywords": "counting-set automata, derivatives, malware detection, regex, regular expression matching",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4032185": {
        "doi": "10.5281/zenodo.4032185",
        "author": "Urban, Caterina and Christakis, Maria and W\\\"{u",
        "title": "Perfectly Parallel Fairness Certification of Neural Networks - Artifact",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4032185",
        "abstract": "<p>This is the artifact accompanying the published paper.</p>",
        "keywords": "Abstract Interpretation, Fairness, Neural Networks, Static Analysis",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4032401": {
        "doi": "10.5281/zenodo.4032401",
        "author": "Rigger, Manuel and Su, Zhendong",
        "title": "OOPSLA 20 Artifact for \"Finding Bugs in Database Systems via Query Partitioning\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4032401",
        "abstract": "<p>The artifact consists of two main components:</p>\n<ol type=\"1\">\n<li>SQLancer, the tool which we created and extended, and in which we implemented Ternary Logic Partitioning (TLP), to find all bugs reported in the paper.</li>\n<li>A SQLite database with a list of bugs that we reported and additional meta information.</li>\n</ol>",
        "keywords": "Query Partitioning, SQLancer, Ternary Logic Partitioning",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4032445": {
        "doi": "10.5281/zenodo.4032445",
        "author": "Smits, Jeff and Visser, Eelco",
        "title": "Replication image for paper: Gradually Typing Strategies",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4032445",
        "abstract": "<p>This is the artifact for the paper Gradually Typing Strategies, accepted at International Conference on Software Language Engineering.</p>\n<h3 id=\"table-of-contents\">Table of Contents</h3>\n<ul>\n<li>Preliminary PDF version of the accepted paper.</li>\n<li>VirtualBox image, containing:\n<ul>\n<li>A linux installation,</li>\n<li>Spoofax 2.5.11 (the latest stable Spoofax version) pre-installed,</li>\n<li>The StrategoGT Spoofax project, a prototype alternative Stratego language definition with the gradual type system,</li>\n<li>The StrategoGT Spoofax tests project with example and test files, including the examples from the paper and the case study from the paper.</li>\n</ul></li>\n</ul>",
        "keywords": "gradual types, gradual typing, Spoofax, Stratego",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4032454": {
        "doi": "10.5281/zenodo.4032454",
        "author": "Zhou, Fangyi and Ferreira, Francisco and Hu, Raymond and Neykova, Rumyana and Yoshida, Nobuko",
        "title": "Statically Verified Refinements for Multiparty Protocols",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4032454",
        "abstract": "<p>Our paper presents Session<em>, a toolchain for specifying message passing protocols using Refined Multiparty Session Types and safely implementing the distributed endpoint programs in F</em>. This is the accompanying artifact containing the toolchain sources, and examples and sources used in the evaluation of the paper. For a more detailed description, see https://github.com/sessionstar/oopsla20-artifact/blob/master/README.md</p>",
        "keywords": "Code Generation, F*, Multiparty Session Types (MPST), Refinement Types",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4032625": {
        "doi": "10.5281/zenodo.4032625",
        "author": "Flanagan, Cormac and Freund, Stephen N.",
        "title": "Software Artifact for \"The Anchor Verifier for Blocking and Non-Blocking Concurrent Software\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4032625",
        "abstract": "<p>This is the software artifact accompanying the paper “The Anchor Verifier for Blocking and Non-Blocking Concurrent Software” published at OOPSLA 2020.</p>",
        "keywords": "Anchor verifier, concurrent program verification, reduction, synchronization",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4033001": {
        "doi": "10.5281/zenodo.4033001",
        "author": "Kallas, Konstantinos and Niksic, Filip and Stanford, Caleb and Alur, Rajeev",
        "title": "Artifact for DiffStream: Differential Output Testing for Stream Processing Programs",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4033001",
        "abstract": "<p>A differential testing library for Apache Flink programs. This artifact is provided as a VM.</p>\n<p>The tool and the underlying methodology are described in the OOPSLA paper: DiffStream: Differential Output Testing for Stream Processing Programs</p>\n<p>For further information and instructions, see the README after opening the VM.</p>",
        "keywords": "Apache Flink, Differential Testing, Runtime Verification, Stream Processing",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4033220": {
        "doi": "10.5281/zenodo.4033220",
        "author": "Verano Merino, Mauricio and van der Storm, Tijs",
        "title": "Kogi– Block-Based Syntax from Context-Free Grammars",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4033220",
        "abstract": "<p>The current artifact contains Kogi’s implementation, as described in the SLE paper (Block-Based Syntax from Context-Free Grammars). Kogi is a tool for deriving a block-based environment from a context-free grammar specification described in our SLE paper. Kogi uses Google Blockly for rendering block-based environments and Rascal’s concrete syntax formalism for describing context-free grammars. Remarkably, this release contains an optimization to make BBEs more usable by simplifying grammar chain rules.</p>",
        "keywords": "app inventor, block-based environments, Blockly, DSLs, google blockly, grammars, language workbenches, Rascal, scratch, syntax, visual languages",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/cwi-swat/kogi/tree/0.1.1"
    },
    "10.5281/zenodo.4033367": {
        "doi": "10.5281/zenodo.4033367",
        "author": "Andersen, Leif and Ballantyne, Michael and Felleisen, Matthias",
        "title": "Artifact: Adding Interactive Visual Syntax to Textual Code",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4033367",
        "abstract": "<p>Many programming problems call for coding geometrical thoughts: tables, hierarchical structures, nests of objects, trees, forests, graphs, and so on. Linear text does not do justice to such thoughts. But, it has been the dominant programming medium for the past and will remain so for the foreseeable future.</p>\n<p>This paper proposes a mechanism for conveniently extending textual programming languages with problem-specific visual syntax. It argues the necessity of this language feature, demonstrates the feasibility with a robust prototype, and sketches a design plan for adapting the idea to other languages.</p>",
        "keywords": "Domain Specific Language",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4033626": {
        "doi": "10.5281/zenodo.4033626",
        "author": "Pit-Claudel, Cl\\'{e",
        "title": "Artifact for Alectryon paper at SLE 2020 (Untangling Mechanized Proofs)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4033626",
        "abstract": "<p>A virtual machine submitted to SLE 2020’s artifact evaluation committee. Includes a snapshot of the Alectryon repository and datasets and scripts to reproduce the paper’s listings and figures.</p>",
        "keywords": "formal verification, literate programming, proof presentation, proofbrowsing",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4034438": {
        "doi": "10.5281/zenodo.4034438",
        "author": "Zhou, Yaoda and Oliveira, Bruno C. d. S. and Zhao, Jinxu",
        "title": "Revisiting Iso-Recursive Subtyping",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4034438",
        "abstract": "<p>This artifact contains the Coq formulation associated with the paper “Revisiting Iso-Recursive Subtyping”. For details, please refer to readme.</p>",
        "keywords": "Coq, Formulation, Iso-recursive types",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4034724": {
        "doi": "10.5281/zenodo.4034724",
        "author": "Zhang, Hengchu and Roth, Edo and Haeberlen, Andreas and Pierce, Benjamin C. and Roth, Aaron",
        "title": "Replication Package for Article: Testing Differential Privacy with Dual Interpreters",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4034724",
        "abstract": "<p>This package contains the Haskell implementation of DPCheck — an automated testing framework for differential privacy.</p>",
        "keywords": "differential privacy, symbolic execution",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4035150": {
        "doi": "10.5281/zenodo.4035150",
        "author": "Coblenz, Michael and Aldrich, Jonathan and Myers, Brad A. and Sunshine, Joshua",
        "title": "Replication Package for Article: Can Advanced Type Systems Be Usable? An Empirical Study of Ownership, Assets, and Typestate in Obsidian",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4035150",
        "abstract": "<p>The artifact consists of all the materials one would need to replicate the experiment in the paper. It includes a copy of the Obsidian repository as well as all of the materials the experiment participants received. It also includes the data generated by the participants during the study.</p>",
        "keywords": "assets, blockchain, empirical studies of programming languages, linear types, Obsidian, ownership, permissions, smart contracts, typestate",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4036303": {
        "doi": "10.5281/zenodo.4036303",
        "author": "Brody, Shaked and Alon, Uri and Yahav, Eran",
        "title": "A Structural Model for Contextual Code Changes articat",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4036303",
        "abstract": "<p>This artifact contains the PyTorch implementation of the neural network C3PO, along with all the required code and data to reproduce our results of the paper. Our code can be easily extended to other programming languages since the PyTorch network is agnostic to the input programming language. We also provide a with C# extractor for preprocessing the (raw) input code and explain how to implement such an extractor for other input programming languages.</p>",
        "keywords": "Edit Completions, Machine Learning, Neural Models of Code",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4037278": {
        "doi": "10.5281/zenodo.4037278",
        "author": "Turcotte, Alexi and Goel, Aviral and K\\v{r",
        "title": "Designing Types for R, Empirically (Data, Software, and Experiment Artifact)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4037278",
        "abstract": "<p>This artifact supports the paper “Designing Types for R, Empirically”, which appears at OOPSLA’20. The purpose of this artifact is to showcase the tools used to infer R function types, to showcase contractr, our function-types-as-contracts assertion package for R, and detail and replicate the experiments from the paper. In the artifact, you’ll find a “Getting Started Guide” to quickly sanity check the installation, and a detailed set of instructions on how to use our tracer (Typetracer), contractr, and how to replicate the experiments at whichever scale you like.</p>",
        "keywords": "contracts, corpus analysis, dynamic analysis, empirical study, language design, R, type systems, types",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4038334": {
        "doi": "10.5281/zenodo.4038334",
        "author": "Peleg, Hila and Gabay, Roi and Itzhaky, Shachar and Yahav, Eran",
        "title": "Artifact for: Programming with a Read-Eval-Synth Loop",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4038334",
        "abstract": "<p>Contains the RESL tool and reproduction of empirical experiments.</p>",
        "keywords": "program synthesis, resl",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4039085": {
        "doi": "10.5281/zenodo.4039085",
        "author": "Bembenek, Aaron and Greenberg, Michael and Chong, Stephen",
        "title": "Formulog: Datalog for SMT-Based Static Analysis (OOPSLA 2020 Artifact)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4039085",
        "abstract": "<p>This artifact corresponds to the paper “Formulog: Datalog for SMT-Based Static Analysis” by Aaron Bembenek, Michael Greenberg, and Stephen Chong, which has been accepted at OOPSLA 2020. It includes the Formulog runtime and material for running the empirical experiments described in the paper.</p>",
        "keywords": "Datalog, Formulog, SMT solving",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4039224": {
        "doi": "10.5281/zenodo.4039224",
        "author": "Barke, Shraddha and Peleg, Hila and Polikarpova, Nadia",
        "title": "Source Code Artifact for the paper: Just-in-Time Learning for Bottom-Up Enumerative Synthesis",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4039224",
        "abstract": "<p>The artifact replicates the experiments in the first revision of the paper.</p>",
        "keywords": "Domain-specific languages, Probabilistic models, Program Synthesis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4039826": {
        "doi": "10.5281/zenodo.4039826",
        "author": "Sprenger, Christoph and Klenze, Tobias and Eilers, Marco and Wolf, Felix A. and M\\\"{u",
        "title": "Artifact for \"Igloo: Soundly Linking Compositional Refinement and Separation Logic for Distributed System Verification\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4039826",
        "abstract": "<p>This artifact contains the entire Igloo framework formalized in Isabelle/HOL 2020 as well as our case studies (in Isabelle/HOL, VeriFast and Nagini). All necessary tools are pre-installed in the virtual machine.</p>",
        "keywords": "distributed systems, formal methods, modeling, program verification, proof assistants",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4040341": {
        "doi": "10.5281/zenodo.4040341",
        "author": "Jeon, Minseok and Lee, Myungho and Oh, Hakjoo",
        "title": "Learning Graph-based Heuristics for Pointer Analysis without Handcrafting Application-Specific Features",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4040341",
        "abstract": "<p>This is the artifact of our technique Graphick in the paper “Learning Graph-based Heuristics for Pointer Analysis without Handcrafting Application-Specific Features”.</p>\n<p>The zip file (Graphick.zip) contains a bootable VirtualBox image (Graphick.ova) with all of the necessary libraries installed. To reproduce the majority of our evaluations, 50 GB of free storage and 32 GB of free memory are required. Using a smaller size of memory may not be able to reproduce the analysis results for the large programs (e.g., briss) used in our evaluation.</p>\n<p>The manual pdf file (manual.pdf) in Graphick.zip provides a getting started guide (Section 1) and step by step instructions (Section 2). Please, follow the instructions to reproduce the evaluation results.</p>\n<p>Note that this artifact is exactly the version that we submitted to OOPSLA Artifact when our paper was first conditionally accepted; the table numbers do not match with our latest revised paper. To reduce the confusion, we also include the corresponding old version of our paper (Graphick-old.pdf) in the zip file that the table numbers are matched. For the newly added evaluations of our final paper, we will upload a new implementation that reproduces all the evaluations.</p>",
        "keywords": "Context sensitivity, Data-driven static analysis, Heap abstraction, Machine learning for program analysis, Pointer analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4043041": {
        "doi": "10.5281/zenodo.4043041",
        "author": "Mukherjee, Suvam and Deligiannis, Pantazis and Biswas, Arpita and Lal, Akash",
        "title": "Learning-Based Controlled Concurrency Testing",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4043041",
        "abstract": "<p>Concurrency bugs are notoriously hard to detect and reproduce. Controlled concurrency testing (CCT) techniques aim to offer a solution, where a scheduler explores the space of possible interleavings of a concurrent program looking for bugs. Since the set of possible interleavings is typically very large, these schedulers employ heuristics that prioritize the search to “interesting” subspaces. However, current heuristics are typically tuned to specific bug patterns, which limits their effectiveness in practice.</p>\n<p>In this artifact, we present QL, a learning-based CCT framework where the likelihood of an action being selected by the scheduler is influenced by earlier explorations. We leverage the classical Q-learning algorithm to explore the space of possible interleavings, allowing the exploration to adapt to the program under test, unlike previous techniques. We have implemented and evaluated QL on a set of microbenchmarks, complex protocols, as well as production cloud services. In our experiments, we found QL to consistently outperform the state-of-the-art in CCT.</p>",
        "keywords": "concurrency, model checking, reinforcement learning, testing",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4043646": {
        "doi": "10.5281/zenodo.4043646",
        "author": "Marntirosian, Koar and Schrijvers, Tom and Oliveira, Bruno C. d. S. and Karachalias, Georgios",
        "title": "Resolution as Intersection Subtyping via Modus Ponens",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4043646",
        "abstract": "<p>This artifact consists of supplementary material for the article “Resolution as Intersection Subtyping via Modus Ponens”.</p>\n<p>It contains a prototype implementation of λiMP, a mechanization of the metatheory of our calculus (declarative) and a mechanization of the metatheory for the subtyping algorithm of our calculus.</p>",
        "keywords": "coherence, family polymorphism, intersection types, modus ponens, nested composition, resolution",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4046893": {
        "doi": "10.5281/zenodo.4046893",
        "author": "Castro-Perez, David and Yoshida, Nobuko",
        "title": "CAMP: Cost-Aware Multiparty Session Protocols (artifact)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4046893",
        "abstract": "<p>This is the artifact for the paper ‘CAMP: Cost-Aware Multiparty Session Protocols’. The artifact comprises:</p>\n<ul>\n<li>A library for specifying cost-aware multiparty protocols.</li>\n<li>The raw data used for comparing the cost models with real execution costs.</li>\n<li>The cost-aware protocol specifications of the benchmarks that we studied.</li>\n</ul>\n<p>The library for specifying cost-aware protocols also provides functions for extracting cost equations from them, and for estimating recursive protocol latencies (i.e.&nbsp;average cost per protocol iteration). We provide a script for extracting cost equations, and instantiating them using the parameters used in the paper.</p>",
        "keywords": "cost models, message optimisations, parallel programming, session types",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4048298": {
        "doi": "10.5281/zenodo.4048298",
        "author": "Griesemer, Robert and Hu, Raymond and Kokke, Wen and Lange, Julien and Taylor, Ian Lance and Toninho, Bernardo and Wadler, Philip and Yoshida, Nobuko",
        "title": "Featherweight Go (Artifact)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4048298",
        "abstract": "<p>This paper presents Featherweight Go (FG) and Featherweight Generic Go (FGG), a core calculus of Go and a proposal for extending it with generics. The calculi are in the same vein as Featherweight Java (FJ), but where Featherweight Generic Java (FGJ) was translated into FJ via erasure, FGG translates into FG via monomorphisation (which is also formalised). The two calculi are proven sound using the normal progress and preservation arguments. Additionally a bisimulation is shown to exist between a FGG program and its monomorphisation (if it exists); in other words that monomorphisation preserves the semantics of the program.</p>\n<p>The artifact consists of an implementation of type checkers and interpreters for FG and FGG, as well as a monomorphisation procedure (including the check if it is possible). It includes the examples from the paper, and a comparison using the Go compiler as reference. Type preservation and bisimulation for these programs are tested dynamically. Additionally, the same is tested for all well-typed programs up to a certain size (which are generated in a manner similar to property-based testing).</p>",
        "keywords": "Generics, Go, Monomorphisation",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4051784": {
        "doi": "10.5281/zenodo.4051784",
        "author": "Majumdar, Rupak and Yoshida, Nobuko and Zufferey, Damien",
        "title": "Multiparty Motion Coordination: From Choreographies to Robotics Programs (Artifact)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4051784",
        "abstract": "<p>Software artifact for the paper “Multiparty Motion Coordination: From Choreographies to Robotics Programs” submitted to OOPSLA 2020</p>\n<p>The artifact has been packaged into a virtual machine (Ubuntu 20.04). The username and password for the virtual machine is “pgcd”.</p>",
        "keywords": "Message-passing, Motion Primitives, Robotics, Session Types and Choreography, Verification",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4059797": {
        "doi": "10.5281/zenodo.4059797",
        "author": "Lagouvardos, Sifis and Grech, Neville and Tsatiris, Ilias and Smaragdakis, Yannis",
        "title": "Precise Static Modeling of Ethereum \"Memory\" (artifact)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4059797",
        "abstract": "<p>Our artifact is bundled as a Docker image, containing the gigahorse decompiler, as well as our client analyses for tainted ERC20 Token <code>transfer</code>, Gas of Fallback Functions, Repeated Calls. The artifact also contains the contract sources and bytecodes for the contracts that were manually inspected for the evaluation of our paper.</p>",
        "keywords": "ethereum, EVM, static analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4060109": {
        "doi": "10.5281/zenodo.4060109",
        "author": "Kabir, Ifaz and Li, Yufeng and Lhot\\'{a",
        "title": "ιDOT: A DOT Calculus with Object Initialization (Coq Formalization)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4060109",
        "abstract": "<p>This is the artifact for our OOPSLA’20 paper that presents ιDOT, a Dependent Object Types calculus with a type and effect system to ensure safe initialization of objects. This artifact contains the proof of type safety for the ιDOT calculus, formalized in the Coq proof assistant.</p>",
        "keywords": "Coq, dependent object types, DOT, effect systems, iDOT, initialization, Scala, type safety, type soundness, type systems",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4060132": {
        "doi": "10.5281/zenodo.4060132",
        "author": "Holtzen, Steven and Van den Broeck, Guy and Millstein, Todd",
        "title": "Software Artifact for: Scaling Exact Inference for Discrete Probabilistic Programs",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4060132",
        "abstract": "<p>This artifact contains a working copy of the software described in the paper, along with a guide for reproducing the key experimental results.</p>",
        "keywords": "probabilistic programming",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4060186": {
        "doi": "10.5281/zenodo.4060186",
        "author": "Bartell, Sean and Dietz, Will and Adve, Vikram S.",
        "title": "Artifact for Guided Linking: Dynamic Linking Without the Costs",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4060186",
        "abstract": "<p>Artifact for the paper “Guided Linking: Dynamic Linking Without the Costs”, conditionally accepted to OOPSLA 2020. This is the accepted version of the artifact, but the final version of the paper will include major terminology changes and improvements to the evaluation (such as Profile-Guided Optimization). An updated artifact, suitable for reproducing the results in the final paper, will be available at a later date.</p>",
        "keywords": "compiler, dynamic linking, guided linking, ld.so, llvm, nixos, nixpkgs, optimization, shared libraries",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4061106": {
        "doi": "10.5281/zenodo.4061106",
        "author": "Xiang, Tongtong and Luo, Jeff Y. and Dietl, Werner",
        "title": "PUnits: Precise Inference of Expressive Units of Measurement Types",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4061106",
        "abstract": "<p>PUnits is a pluggable type system for expressive units of measurement types and a precise, whole-program inference approach for these types. It can be used in three modes: (1) modularly check the correctness of a program, (2) ensure a possible unit typing exists, (3) annotate a program with units. Annotation mode allows human inspection and is essential since having a valid typing does not guarantee that the inferred specification expresses design intent. PUnits is the first units type system with this capability. This artifact is a docker image containing all required software and benchmarks to reproduce the results of the paper.</p>",
        "keywords": "Dimensional analysis, Pluggable type system, Scientific computing, Type inference, Units of measurements",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4061655": {
        "doi": "10.5281/zenodo.4061655",
        "author": "Fl\\\"{u",
        "title": "Artifact of \"Sampling Optimized Code for Type Feedback\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4061655",
        "abstract": "<p>This is the artifact to accompany our DLS 2020 submission on “Sampling Optimized Code for Type Feedback”. The artifact consists of a virtual machine for the R language, called \\v{R",
        "keywords": "sampling profiler, speculative optimizations, virtual machine",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.4063694": {
        "doi": "10.5281/zenodo.4063694",
        "author": "Sotiropoulos, Thodoris and Chaliasos, Stefanos and Mitropoulos, Dimitris and Spinellis, Diomidis",
        "title": "Replication Package for Article: A Model for Detecting Faults in Build Specifications",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4063694",
        "abstract": "<p>This artifact contains the source code of the system, namely BuildFS, described in the article “A Model for Detecting Faults in Build Specifications”. BuildFS was designed to detect faults in Make and Gradle build specifications. In addition to that, the artifact includes all the scripts used to re-run the evaluation of BuildFS as described in the article. Specifically, these scripts apply BuildFS to 612 open-source Make and Gradle projects taken from the Github and Debian ecosystems, and evaluate BuildFS in terms of</p>\n<ul>\n<li>Effectiveness</li>\n<li>Efficiency</li>\n<li>Comparison with the-state-of-the-art</li>\n</ul>",
        "keywords": "Build, Fault, Gradle, Make",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4067001": {
        "doi": "10.5281/zenodo.4067001",
        "author": "Ballantyne, Michael and King, Alexis and Felleisen, Matthias",
        "title": "Artifact for OOPSLA '20 \"Macros For Domain-Specific Languages\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4067001",
        "abstract": "<p>This artifact contains the library, case studies, and examples presented in the paper.</p>",
        "keywords": "extensible domain specific languages, hygiene, macros",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4068065": {
        "doi": "10.5281/zenodo.4068065",
        "author": "Rouvoet, Arjen and van Antwerpen, Hendrik and Bach Poulsen, Casper and Krebbers, Robbert and Visser, Eelco",
        "title": "Knowing when to Ask: MiniStatix implementation and case studies",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4068065",
        "abstract": "<p>We implement the small-step operational semantics of the core constraint language of Statix in Haskell and present ‘MiniStatix’. We evaluate this semantics using three case studies specifying name binding aspects of Java, Scala and Rust.</p>",
        "keywords": "case study, Haskell, MiniStatix, Name binding, Statix",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4081681": {
        "doi": "10.5281/zenodo.4081681",
        "author": "Geisler, Dietrich and Yoon, Irene and Kabra, Aditi and He, Horace and Sanders, Yinnon and Sampson, Adrian",
        "title": "Replication Package for Article: Geometry Types for Graphics Programming",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4081681",
        "abstract": "<p>The purpose of this package is to replicate the results of the paper “Geometry Types for Graphics Programming” and provide a research compiler from the Gator language to GLSL. This artifact includes, in a VM, the results included with the above paper, the tools for replicating these results, and a work-in-progress compiler from Gator to GLSL. The intent of this package is to help with replication and make the Gator language available and useable for those interested.</p>",
        "keywords": "Compilers, Graphics Programming, Language Design, Programming Languages",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4088252": {
        "doi": "10.5281/zenodo.4088252",
        "author": "Atkinson, Eric and Carbin, Michael",
        "title": "Artifact for \"Programming and Reasoning with Partial Observability\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4088252",
        "abstract": "<p>This is the artifact that accompanies the OOPSLA 2020 paper “Programming and Reasoning with Partial Observability”.</p>",
        "keywords": "partial observability, uncertainty",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4139038": {
        "doi": "10.5281/zenodo.4139038",
        "author": "Perianez-Pascual, Jorge and Rodriguez-Echeverria, Roberto and Burgue\\~{n",
        "title": "Towards the Optical Character Recognition of DSLs - Artifact (img2DSL)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4139038",
        "abstract": "<p>img2DSL is an image recognition toolkit designed to study how Optical Character Recognition can be applied to images that contain DSL snippets. Using the Object Constraint Language (OCL) as an example of textual DSL and given a dataset of Ecore models (and its OCL expressions), this toolkit encodes the OCL expressions into images and tests how different strategies improve the default OCR quality. In this project we use Tesseract as OCR engine and the different strategies are different OCR models and custom algorithms.</p>\n<p>In order to evaluate the toolkit and the quality of its different strategies, we load the recognized expressions in the USE tool to measure of how many expressions are valid after the recognition</p>",
        "keywords": "domain-specific-languages, optical character recognition, text recognition",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4139829": {
        "doi": "10.5281/zenodo.4139829",
        "author": "Oeyen, Bjarno and Van den Vonder, Sam and De Meuter, Wolfgang",
        "title": "Reactive Sorting Networks (Supplementary Material)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4139829",
        "abstract": "<p>Supplementary material for the paper titled “Reactive Sorting Networks”, published in the Proceedings of the 7th ACM SIGPLAN International Workshop on Reactive and Event-Based Languages and Systems, REBLS@SPLASH 2020.</p>",
        "keywords": "Higher-Order Programming, Reactive Programming, Reactor Composition, Sorting Networks",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.4160965": {
        "doi": "10.5281/zenodo.4160965",
        "author": "Rossouw, Christoff and Fischer, Bernd",
        "title": "Software Artifact for article: Test Case Generation from Context-Free Grammars using Generalized Traversal of LR-Automata",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4160965",
        "abstract": "<p>Python scripts used to reproduce results from paper. Output files from evaluation and grammars used.</p>",
        "keywords": "mutation testing, push-down automata, test case generation",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/TheLonelyNull/Pytomata/tree/SLE2020"
    },
    "10.5281/zenodo.4240798": {
        "doi": "10.5281/zenodo.4240798",
        "author": "de Medeiros, S\\'{e",
        "title": "RESPEG: Rewriting Semantics for PEGs",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4240798",
        "abstract": "<p>We give a rewriting logic semantics for Paring Expression Grammars (PEGs) and implement such rewrite theory in Maude (a rewriting engine). The proposed rewrite theory formalizes the notion of local and global cuts that may help the designer of the grammar to control the backtracks during parsing.</p>",
        "keywords": "Parsing Expression Grammars, Rewriting logic",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/carlosolarte/RESPEG/tree/v1.0"
    },
    "10.5281/zenodo.4244899": {
        "doi": "10.5281/zenodo.4244899",
        "author": "Coulon, Fabien and Auvolat, Alex and Combemale, Benoit and Bromberg, Y\\'{e",
        "title": "Artifact for the Paper: Modular and distributed IDE",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4244899",
        "abstract": "<p>This artifact includes Eclipse plugins allowing to generates microservices from DSL specifications, the necessary to setup a local Kubernetes cluster, and a Web application embedding a configurator to manage the deployment of the microservices on the local cluster and embedding a program editor interacting with the microservices.</p>",
        "keywords": "Generative approach, IDE, Microservice",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4067194": {
        "doi": "10.5281/zenodo.4067194",
        "author": "Lim, Jay P. and Aanjaneya, Mridul and Gustafson, John and Nagarakatte, Santosh",
        "title": "Artifact for the paper: An Approach to Generate Correctly Rounded Math Libraries for New Floating Point Variants",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4067194",
        "abstract": "<p>RLibm is a math library generator and a library that provides the correctly rounded result for all inputs. Currently, RLibm supports a number of elementary functions for bfloat16, posit16, and float representations.</p>",
        "keywords": "elementary functions, floating point, polynomial approximation, posits",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4068078": {
        "doi": "10.5281/zenodo.4068078",
        "author": "Gregersen, Simon Oddershede and Bay, Johan and Timany, Amin and Birkedal, Lars",
        "title": "Mechanized Logical Relations for Termination-Insensitive Noninterference (Artifact)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4068078",
        "abstract": "<p>A mechanized logical relations model for an expressive information-flow control type system with recursive types, existential types, label polymorphism, and impredicative type polymorphism for a higher-order programming language with higher-order state. The semantic model of the type system can be used to show that well-typed programs satisfy termination-insensitive noninterference but also to show that composing syntactically well-typed and syntactically ill-typed—but semantically sound—components is secure.</p>\n<p>The model is defined using the Iris program logic framework. To capture termination-insensitivity, we make us of our theory of Modal Weakest Precondition. All of the theory and examples are formalized in the Coq proof assistant.</p>",
        "keywords": "Coq, Information-Flow Control, Iris, Logical Relations, Program Logics",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4071954": {
        "doi": "10.5281/zenodo.4071954",
        "author": "Rouvoet, Arjen and Krebbers, Robbert and Visser, Eelco",
        "title": "Intrinsically Typed Compilation with Nameless Labels: Virtual Machine",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4071954",
        "abstract": "<p>We present the library for separation logic, the model of nameless labels, and the implementation of the compiler backend in Agda.</p>",
        "keywords": "Agda, Co-de-Bruijn, Compilation, Intrinsically-Typed, Labels, Proof relevant, Separation Logic",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4072013": {
        "doi": "10.5281/zenodo.4072013",
        "author": "Willsey, Max and Nandi, Chandrakana and Wang, Yisu Remy and Flatt, Oliver and Tatlock, Zachary and Panchekha, Pavel",
        "title": "Artifact for \"Fast and Extensible Equality Saturation\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4072013",
        "abstract": "<p>https://zenodo.org/record/4072013</p>",
        "keywords": "e-graphs, equality saturation",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4074932": {
        "doi": "10.5281/zenodo.4074932",
        "author": "Moy, Cameron and Nguy\\~{\\^e",
        "title": "Artifact: Corpse Reviver",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4074932",
        "abstract": "<p>This artifact contains a virtual machine appliance containing the SCV-CR tool and accompanying utilities for reproducing the experimental results reported in the paper.</p>",
        "keywords": "contract verification, gradual typing, Typed Racket",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4075076": {
        "doi": "10.5281/zenodo.4075076",
        "author": "Jacobs, Jules",
        "title": "Paradoxes of Probabilistic Programming: Artifact",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4075076",
        "abstract": "<p>A Julia implementation of the probabilistic programming DSL using infinitesimal probabilities, as described in the associated paper.</p>",
        "keywords": "Probabilistic programming",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4118715": {
        "doi": "10.5281/zenodo.4118715",
        "author": "Farka, Franti\\v{s",
        "title": "On Algebraic Abstractions for Concurrent Separation Logics (artefact)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4118715",
        "abstract": "<p>The artefact contains Coq sources of the developments presented in the paper. The artefact supports the developments in both a theoretical and practical way. First, it provides a complete bottom-up mechanization of partial commutative monoids (PCM), separating relations, PCM morphisms, and the related constructions. The artefact formalizes all the concepts defined in the paper, Secondly, the artifact demonstrate practical utilisation of the theory of PCMs. Using FCSL (Nanevski et al, 2019) as the opaque type theory, the artefact provides mechanical verification of Ticket lock, the running example developed in the paper. The artefact also contains additional examples that the main body submission does not discuss.</p>",
        "keywords": "Coq, Hoare/Separation Logics, Program Logics for Concurrency",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4123035": {
        "doi": "10.5281/zenodo.4123035",
        "author": "Kokologiannakis, Michalis and Kaysin, Ilya and Raad, Azalea and Vafeiadis, Viktor",
        "title": "Replication Package for \"PerSeVerE: Persistency Semantics for Verification under Ext4\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4123035",
        "abstract": "<p>This is the artifact accompanying the paper “PerSeVerE: Persistency Semantics for Verification under Ext4” which is accepted in POPL’21.</p>\n<p>We consider our paper’s artifact to be the set of benchmarks and stress tests we used in the paper, as well as the results we got by running a particular version of Persevere (and its naive counterparts) on the benchmarks set. We do not consider the artifact of the paper to be Persevere itself, as it will evolve over time, and the results obtained by running the same benchmarks may differ in the future.</p>\n<p>We have made Persevere publicly available on Github (https://github.com/MPI-SWS/genmc), as part of the GenMC tool. For any bugs, comments, or feedback regarding Persevere, please do not hesitate to contact us.</p>",
        "keywords": "Filesystems, Persistency, Software Model Checking, Weak Memory Models",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4139601": {
        "doi": "10.5281/zenodo.4139601",
        "author": "Gondelman, L\\'{e",
        "title": "Distributed Causal Memory: Modular Specification and Verification in Higher-Order Distributed Separation Logic (Artifact)",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4139601",
        "abstract": "<p>A specification and verification of an implementation of a causally-consistent distributeddatabase that supports modular verification of full functional correctness properties of clients and servers. We specify and reason about the causally-consistent distributed database in Aneris, a higher-order distributed separation logic for an ML-like programming language with network primitives for programming distributed systems. We demonstrate that our specifications are useful, by proving the correctness of small, but tricky,synthetic examples involving causal dependency and by verifying a session manager library implemented on top of the distributed database. We use Aneris’s facilities for modular specification and verification to obtain a highly modular development, where each component is verified in isolation, relying only on the specifications(not the implementations) of other components. We have used the Coq formalization of the Aneris logic to formalize all the results presented in the paper in the Coq proof assistant.</p>",
        "keywords": "causal consistency, concurrency, Coq, Distributed systems, formal verification, higher-order logic, Iris, separation logic",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4141684": {
        "doi": "10.5281/zenodo.4141684",
        "author": "Jones, Eddie and Ramsay, Steven",
        "title": "Intensional Datatype Refinement Checker",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4141684",
        "abstract": "<p>The Intensional Datatype Refinement tool is a GHC plugin that checks whether it is possible to type the program according to the refinement type system specified in our paper. This provides a guarantee of pattern-match safety but the complexity of inference is only linear in the size of the program. In addition to reporting a yes/no-instance, it also enable the user to explore a set-constraint style analysis of their program.</p>",
        "keywords": "higher-order program verification, refinement types",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4161748": {
        "doi": "10.5281/zenodo.4161748",
        "author": "Angiuli, Carlo and Cavallo, Evan and M\\\"{o",
        "title": "Internalizing Representation Independence with Univalence - Artifact",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4161748",
        "abstract": "<p>This artifact is a Docker image containing the Cubical Agda code for the paper “Internalizing Representation Independence with Univalence”.</p>\n<p>The image also includes the source code of Agda (2.6.2 prerelease) and the agda/cubical standard library, which are both needed to build our code.</p>",
        "keywords": "Cubical Type Theory, Higher Inductive Types, Proof Assistants, Representation Independence, Univalence",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4246174": {
        "doi": "10.5281/zenodo.4246174",
        "author": "Jacobs, Koen and Timany, Amin and Devriese, Dominique",
        "title": "Artifact POPL21 - Fully Abstract from Static to Gradual",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4246174",
        "abstract": "<p>This artifact contains a Coq/Iris proof of the fact that the embedding of STLCmu (the simply typed lambda calculus with equirecursive types) into GTLCmu (its gradualization) is fully abstract. It accompanies the paper “Fully abstract from Static to Gradual”.</p>",
        "keywords": "Coq, full abstraction, gradual typing, GTLC",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4265963": {
        "doi": "10.5281/zenodo.4265963",
        "author": "Ahman, Danel and Pretnar, Matija",
        "title": "Software artefact for the POPL 2021 paper \"Asynchronous Effects\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4265963",
        "abstract": "<p>This is a software artefact for the POPL 2021 paper:</p>\n<p>Danel Ahman and Matija Pretnar. 2021. Asynchronous Effects. Proc. ACM Program. Lang. 5, POPL, Article 24 (January 2021), 28 pages.</p>\n<p>This software artefact comprises:</p>\n<ul>\n<li>an Agda formalisation of the core calculus presented in the POPL submission;</li>\n<li>a prototype implementation of the core calculus in OCaml, called \\AE{",
        "keywords": "Algebraic effects, Asynchrony, Concurrency, Interrupt handling, Signals",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4268196": {
        "doi": "10.5281/zenodo.4268196",
        "author": "Mathur, Umang and Pavlogiannis, Andreas and Viswanathan, Mahesh",
        "title": "Replication package for article: Optimal Prediction of Synchronization Preserving Races",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4268196",
        "abstract": "<p>The artifact contains the implementation of the race detection algorithm presented in the above paper, as well as the experimental evaluation of the algorithm against other algorithms in the literature</p>",
        "keywords": "complexity, concurrency, dynamic analysis, race detection",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4268852": {
        "doi": "10.5281/zenodo.4268852",
        "author": "Arora, Jatin and Westrick, Sam and Acar, Umut A.",
        "title": "Replication Instructions for Article: Provably Space Efficient Parallel Functional Programming",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4268852",
        "abstract": "<p>Replication of the results presented in the article: Provably Space Efficient Parallel Functional Programming</p>",
        "keywords": "disentanglement, functional programming, memory management, parallel computing",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4268896": {
        "doi": "10.5281/zenodo.4268896",
        "author": "Hietala, Kesha and Rand, Robert and Hung, Shih-Han and Wu, Xiaodi and Hicks, Michael",
        "title": "A Verified Optimizer for Quantum Circuits -- Software Artifact",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4268896",
        "abstract": "<p>Artifact virtual machine for “A Verified Optimizer for Quantum Circuits.” Paper available at https://arxiv.org/pdf/1912.02250.pdf. See https://github.com/inQWIRE/SQIR/tree/POPL2021 for information on running our tool.</p>",
        "keywords": "Certified Compilation, Circuit Optimization, Formal Verification, Programming Languages, Quantum Computing",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4269171": {
        "doi": "10.5281/zenodo.4269171",
        "author": "Lee, Woosuk",
        "title": "Artifacts for \"Combining the Top-down Propagation and Bottom-up Enumeration for Inductive Program Synthesis\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4269171",
        "abstract": "<p>This artifact includes all things necessary􏰛 for reproducing experimental results in the paper “Combining the Top-down Propagation and Bottom-up Enumeration for Inductive Program Synthesis”. The source code for Duet, which is the tool presented in the paper, and the other baseline synthesizers (EUSolver, CVC4, and Euphony), and the scripts for running the experiments are contained.</p>",
        "keywords": "Programming-by-example, Syntax-guided synthesis",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/wslee/popl21_artifacts/tree/v1.0.0"
    },
    "10.5281/zenodo.4270313": {
        "doi": "10.5281/zenodo.4270313",
        "author": "Chen, Chao-Hong and Sabry, Amr",
        "title": "Artifact for A Computational Interpretation of Compact Closed Categories: Reversible Programming with Negative and Fractional Types",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4270313",
        "abstract": "<p>This artifact contains formalization of the abstract machines, interpreters, examples and proof of theorems in the paper.</p>",
        "keywords": "Agda",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4271370": {
        "doi": "10.5281/zenodo.4271370",
        "author": "Cockx, Jesper and Tabareau, Nicolas and Winterhalter, Th\\'{e",
        "title": "Coq formalisation for The Taming of the Rew",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4271370",
        "abstract": "<p>Fork of the MetaCoq repository extended with rewrite rules. The README explains how to build and what files are important with respect to the paper “The Taming of the Rew: A Type Theory with Computational Assumptions”.</p>",
        "keywords": "coq, foramlisation, metacoq, proof, rewrite rules",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/TheoWinterhalter/template-coq/tree/popl21-artifact"
    },
    "10.5281/zenodo.4273768": {
        "doi": "10.5281/zenodo.4273768",
        "author": "Reynaud, Alban and Scherer, Gabriel and Yallop, Jeremy",
        "title": "Artifact accompanying the paper \"A practical mode system for recursive definitions\".",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4273768",
        "abstract": "<p>The paper studies a specific feature of some functional programming languages, namely recursive definitions of things that are not immediate functions (recursive records, functions preceded by local declarations or various other language constructs, etc.). We propose a new system of inference rules to characterize valid definitions, to avoid runtime errors when evaluating the definitions. An algorithm can be directly derived from our inference rules to check the validity of recursive definitions. The check has been integrated in the OCaml compiler – more precisely, the implementation work for the OCaml compiler led to the present paper.</p>\n<p>The artifact provides evidence for the claims in the paper, principally:</p>\n<p>Do the formal system presented in the paper and the implementation in OCaml compiler correspond to each other?</p>\n<p>The artifact contains various versions of the OCaml compiler (and compilers for some other languages discussed in the paper), instructions for confirming that our system fixes the bugs claimed in the paper, examples that illustrate how the system works, references to the parts of the implementation that correspond to parts of the formal system, and evidence for the empirical claims that the paper makes about the prevalence and character of recursive value definitions in existing programs.</p>",
        "keywords": "call-by-value, functional programming, ML, OCaml, recursion, semantics, types",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4283027": {
        "doi": "10.5281/zenodo.4283027",
        "author": "Georges, A\\\"{\\i",
        "title": "Artifact of Conference Paper: Efficient and Provable Local Capability Revocation using Uninitialized Capabilities",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4283027",
        "abstract": "<p>The artifact is composed of two parts. The first part is the Iris formalization. It contains all the definitions and proofs presented in the paper, mechanized in the Iris framework of Coq. The second part of the artifact corresponds to a CHERI implementation of uninitialized capabilities. The CHERI implementation has been extended with uninitialized capabilities.</p>",
        "keywords": "CHERI, Coq, Iris",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4284088": {
        "doi": "10.5281/zenodo.4284088",
        "author": "Silver, Lucas and Zdancewic, Steve",
        "title": "Dijkstra Monads Forever: Termination-Sensitive Specifications for Interaction Trees",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4284088",
        "abstract": "<p>This artifact contains formal definitions and machine checked proofs for the objects and theorems presented in the paper.</p>",
        "keywords": "Algebraic Effects, Coinduction, Coq, Monads, Specifications",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4323505": {
        "doi": "10.5281/zenodo.4323505",
        "author": "Muller, Stefan K. and Hoffmann, Jan",
        "title": "RaCUDA software and Coq Proofs for \"Modeling and Analyzing Evaluation Cost of CUDA Kernels\"",
        "year": "2020",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4323505",
        "abstract": "<p>Software and proof artifacts for the POPL 2021 paper “Modeling and Analyzing Evaluation Cost of CUDA Kernels”. The artifact is packaged as a virtual machine image in ova format.</p>",
        "keywords": "CUDA, performance analysis, program logics, resource-aware type system, thread-level parallelism",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4317021": {
        "doi": "10.5281/zenodo.4317021",
        "author": "Vindum, Simon Friis and Birkedal, Lars",
        "title": "Coq Formalization for Contextual Refinement of the Michael-Scott Queue",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4317021",
        "abstract": "<p>The Coq Formalization accompanying the paper Contextual Refinement of the Michael-Scott Queue (Proof Pearl).</p>",
        "keywords": "concurrency, Coq, Iris, separation logic",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.4322752": {
        "doi": "10.5281/zenodo.4322752",
        "author": "Hinrichsen, Jonas Kastberg and Louwrink, Dani\\\"{e",
        "title": "Mechanisation artifact for Article: Machine-Checked Semantic Session Typing",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4322752",
        "abstract": "<p>This is the artifact corresponding to the CPP21 paper “Machine-Checked Semantic Session Typing” by Jonas Kastberg Hinrichsen, Dani\\\"{e",
        "keywords": "concurrency, Coq, Iris, Message passing, semantic typing, separation logic, session types",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.4327209": {
        "doi": "10.5281/zenodo.4327209",
        "author": "Limperg, Jannis",
        "title": "Supplement to: A Novice-Friendly Induction Tactic for Lean",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4327209",
        "abstract": "<p>The supplement contains an implementation of the new induction tactic for Lean 3 described in the associated paper. In the archive, you will find a snapshot of mathlib, Lean’s de facto standard library, which includes the induction tactic. See the file README.md at the root of the archive for details, including installation and testing instruction.</p>",
        "keywords": "induction, Lean, metaprogramming, tactic, type theory",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.4399900": {
        "doi": "10.5281/zenodo.4399900",
        "author": "Miu, Anson and Ferreira, Francisco and Yoshida, Nobuko and Zhou, Fangyi",
        "title": "Communication-Safe Web Programming in TypeScript with Routed Multiparty Session Types",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4399900",
        "abstract": "<p>Our paper presents STScript, a toolchain that generates TypeScript APIs for communication-safe web development over WebSockets, and RouST, a new session type theory that supports multiparty communications with routing mechanisms.</p>",
        "keywords": "API generation, deadlock freedom, session types, TypeScript, web programming, WebSocket",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.4416117": {
        "doi": "10.5281/zenodo.4416117",
        "author": "Silva, Anderson Faustino da and de Lima, Bernardo N. B. and Pereira, Fernando Magno Quint\\~{a",
        "title": "Replication Package for Article: Exploring the Space of Optimization Sequences for Code-Size Reduction: Insights and Tools",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4416117",
        "abstract": "<p>Predictive compilation is the problem of determining good sequences of analyses and optimizations for particular programs. Although predictive compilers have enjoyed much progress in recent years, their development still faces a difficult challenge: the vastness of the space of possible optimizations that can be matched with each program. The effective exploration of this space is a community task that must be carried out gradually and systematically. Towards this vision, this artifact provides an Docker image that contains an optimization cache for research on code-size reduction. In addition, it provides a set of building blocks so that the user can build his/her own application.</p>",
        "keywords": "code size, Compiler, sequence",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.4451492": {
        "doi": "10.5281/zenodo.4451492",
        "author": "Panchenko, Maksim and Auler, Rafael and Sakka, Laith and Ottoni, Guilherme",
        "title": "Replication Package for Article: Lightning BOLT: Powerful, Fast, and Scalable Binary Optimization",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4451492",
        "abstract": "<p>This artifact contains the software required to reproduce the experimental findings of the paper “Lightning BOLT: Powerful, Fast, and Scalable Binary Optimization”, CC 2021. This package is a copy of https://github.com/facebookincubator/BOLT/tree/master/paper/reproduce-bolt-cc2021 revision 4990ee5. Please access the github page for an updated version of this artifact, if available.</p>\n<p>The open-source workloads evaluated for this paper are clang 11 and gcc 10. These two workloads need to be bootstrapped (built with themselves). Our goal is to demonstrate reductions in wall time and memory consumption when running BOLT on these workloads with different techniques: parallelization and selective optimizations. This is accomplished with the first experiment (exp1.sh script, Figures 3, 4 and 5 in the paper). The second experiment (exp2.sh script, Figures 6 and 7 in the paper) shows how can we trade BOLT speed for output binary performance.</p>",
        "keywords": "Binary Optimization, Compilers, Performance",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4456774": {
        "doi": "10.5281/zenodo.4456774",
        "author": "Merigoux, Denis and Monat, Rapha\\\"{e",
        "title": "A Modern Compiler for the French Tax Code - Artifact",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4456774",
        "abstract": "<p>In France, income tax is computed from taxpayers’ individual returns, using an algorithm that is authored, designed and maintained by the French Public Finances Directorate (DGFiP). This algorithm relies on a legacy custom language and compiler originally designed in 1990, which unlike French wine, did not age well with time. Owing to the shortcomings of the input language and the technical limitations of the compiler, the algorithm is proving harder and harder to maintain, relying on ad-hoc behaviors and workarounds to implement the most recent changes in tax law. Competence loss and aging code also mean that the system does not benefit from any modern compiler techniques that would increase confidence in the implementation.</p>\n<p>We overhaul this infrastructure and present Mlang, an open-source compiler toolchain whose goal is to replace the existing infrastructure. Mlang is based on a reverse-engineered formalization of the DGFiP’s system, and has been thoroughly validated against the private DGFiP test suite. As such, Mlang has a formal semantics; eliminates previous hand-written workarounds in C; compiles to modern languages (Python); and enables a variety of instrumentations, providing deep insights about the essence of French income tax computation. The DGFiP is now officially transitioning to Mlang for their production system.</p>\n<p>This is the artifact accompanying the published paper at Compiler Construction 2021.</p>",
        "keywords": "compiler, legal expert system, tax code",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.4458159": {
        "doi": "10.5281/zenodo.4458159",
        "author": "Palmkvist, Viktor and Castegren, Elias and Haller, Philipp and Broman, David",
        "title": "Resolvable Ambiguity - CC Artifact",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4458159",
        "abstract": "<p>This Docker image contains the software required to reproduce the results in the paper “Resolvable Ambiguity: Principled Resolution of Syntactically Ambiguous Programs” to be published in ACM SIGPLAN 2021 International Conference on Compiler Construction (CC 2021).</p>\n<p>Note that as there is an element of randomness in the composition of language fragments, we include the same configuration used for Section 6, but also allow selecting new random combinations. For completeness, we also include the source code of our tool, but as it is not the main focus, it will not be as approachable as running the experiments.</p>",
        "keywords": "Ambiguity, Syntax",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.4471345": {
        "doi": "10.5281/zenodo.4471345",
        "author": "Abella-Gonz\\'{a",
        "title": "PolyBench/Python",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4471345",
        "abstract": "<p>PolyBench/Python is the reimplementation of PolyBench in the Python programming language. It is a benchmark suite of 30 numerical computations with static control flow, extracted from operations in various application domains (linear algebra computations, image processing, physics simulation, dynamic programming, statistics, etc.).</p>",
        "keywords": "Benchmarking, Polyhedral Compilation, Python",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/UDC-GAC/polybench-python/tree/CC21_artifact"
    },
    "10.5281/zenodo.4321197": {
        "doi": "10.5281/zenodo.4321197",
        "author": "Margaritov, Artemiy and Ustiugov, Dmitrii and Shahab, Amna and Grot, Boris",
        "title": "Artifact evaluation pack for PTEMagnet (paper #111 in ASPLOS'21)",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4321197",
        "abstract": "<p>The artifact contains a Linux kernel patch for enabling PTEMagnet, shell scripts for Linux kernel compilation, a virtual machine disk image with precompiled benchmarks, and Python/shell scripts that are expected to reproduce the results presented in Figure 6 of <a href=\"https://ease-lab.github.io/ease_website/pubs/PTEMagnet_ASPLOS21.pdf\">the paper</a> for non-SPEC benchmarks.</p>",
        "keywords": "operating system, virtual memory, virtualization",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/amargaritov/PTEMagnet_artifact_evaluation/tree/v0.5"
    },
    "10.5281/zenodo.4321310": {
        "doi": "10.5281/zenodo.4321310",
        "author": "Panwar, Ashish and Achermann, Reto and Basu, Arkaprava and Bhattacharjee, Abhishek and Gopinath, K. and Gandhi, Jayneel",
        "title": "Fast Local Page-Tables for Virtualized NUMA Servers with vMitosis",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4321310",
        "abstract": "<p>This repository contains artifacts of the paper Fast Local Page-Tables for Virtualized NUMA Servers with vMitosis by Ashish Panwar, Reto Achermann, Arkaprava Basu, Abhishek Bhattacharjee, K. Gopinath, and Jayneel Gandhi to appear in the 26th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS’21).</p>",
        "keywords": "ASPLOS'21, NUMA, Page-Tables, VMItosis-Linux",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4321431": {
        "doi": "10.5281/zenodo.4321431",
        "author": "Sartakov, Vasily A. and Vilanova, Llu\\'{\\i",
        "title": "Replication Package for Article: \"CubicleOS: A Library OS with Software Componentisation for Practical Isolation\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4321431",
        "abstract": "<p>This artefact contains the library OS, two applications, the isolation monitor, and scripts to reproduce the experiments from the ASPLOS 2021 paper by V. A. Sartakov, L. Vilanova, R. Pietzuch — ``CubicleOS: A Library OS with Software Componentisation for Practical Isolation’’, which isolates components of a monolithic library OS without the use of message-based IPC primitives.</p>",
        "keywords": "compartments, Intel MPK, inter-process communication, isolation",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4321760": {
        "doi": "10.5281/zenodo.4321760",
        "author": "Jia, Zhipeng and Witchel, Emmett",
        "title": "Nightcore: Efficient and Scalable Serverless Computing for Latency-Sensitive, Interactive Microservices (Artifacts)",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4321760",
        "abstract": "<p>Our artifact includes the prototype implementation of Nightcore, the DeathStarBench and HipsterShop microservices ported to Nightcore, and the experiment workflow to run these workloads on AWS EC2 instances.</p>",
        "keywords": "Cloud computing, function-as-a-service, microservices, serverless computing",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4321945": {
        "doi": "10.5281/zenodo.4321945",
        "author": "Huang, Yipeng and Holtzen, Steven and Millstein, Todd and Van den Broeck, Guy and Martonosi, Margaret",
        "title": "Noisy Variational Quantum Algorithm Simulation via Knowledge Compilation for Repeated Inference",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4321945",
        "abstract": "<p>This artifact demonstrates a new way to perform quantum circuit simulation. We convert quantum circuits into probabilistic graphical models, which are then compiled into a format that enables efficient repeated queries.</p>\n<p>The artifact consists of a Docker image which includes Google Cirq, a quantum programming framework, which we have extended to use our proposed approach as a quantum circuit simulation backend. Also in the Docker image are two quantum circuit simulators based on existing approaches which we compare against as evaluation baselines.</p>\n<p>We offer the Docker image via three routes: a hosted version on Docker Hub provides the latest version of our software and requires minimal setup; a Dockerfile is provided to show how to replicate our environment from scratch; and finally a stable archival version is available on Zenodo.</p>\n<p>With minimal setup, you can run test cases in our Docker container showing the validity of our approach. We test our quantum circuit simulation approach using the randomized test harness that Google Cirq uses to test its quantum circuit simulation back ends. We also demonstrate correct simulation results for a benchmark suite of quantum algorithms.</p>\n<p>The Docker image contains performance benchmarking experiments that replicate results of our paper at reduced input problem sizes. The experiment scripts generate PDFs showing graphs that plot simulation wall clock time against input quantum circuit sizes. The input problem sizes are large enough to show that our proposed approach achieves a speedup versus existing simulation tools.</p>",
        "keywords": "Bayesian networks, knowledge compilation, quantum circuit simulation, quantum computing",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4322031": {
        "doi": "10.5281/zenodo.4322031",
        "author": "Li, Rui and Xu, Yufan and Sukumaran-Rajam, Aravind and Rountev, Atanas and Sadayappan, P.",
        "title": "Replication Package for Article: Analytical Characterization and Design Space Exploration for Optimization of CNNs",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4322031",
        "abstract": "<p>This artifact includes a software implementation and benchmark specification for reproducing experiment results for paper “Analytical Characterization and Design Space Exploration for Optimization of CNNs”</p>",
        "keywords": "Design space exploration, Neural networks, Performance modeling, Tile size optimization",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4322033": {
        "doi": "10.5281/zenodo.4322033",
        "author": "Saileshwar, Gururaj and Fletcher, Christopher W. and Qureshi, Moinuddin",
        "title": "Code for Streamline Attack: A Fast, Flushless Cache Covert-Channel Attack byEnabling Asynchronous Collusion",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4322033",
        "abstract": "<p>This artifact presents the code and methodology to run the Streamline cache covert-channel attack. We provide the C++ code for the sender and receiver processes engaged in covert communication. Although the attack itself is not specific to an OS, ISA, or micro- architecture, the code is written with the assumption of an x86 Linux system and an Intel CPU that is a Skylake or a newer generation model. The code may be compiled with a standard compiler and run natively to execute the covert-communication. We also provide scripts to run the attack in several configurations demon- strated in Section-IV of our paper (with and without ECC, varying the shared array size and the synchronization period) and provide a Jupyter notebook to visualize the results.</p>\n<p>Please use the public GitHub repository of the project https://github.com/gururaj-s/streamline for the most updated version of the code.</p>",
        "keywords": "Asynchronous Protocol, Cache Side-Channels, Covert-channel Attacks, Last-Level Cache, Shared Caches",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4322105": {
        "doi": "10.5281/zenodo.4322105",
        "author": "Kasampalis, Theodoros and Park, Daejun and Lin, Zhengyao and Adve, Vikram S. and Ro\\c{s",
        "title": "Language-Parametric Compiler Validation with Application to LLVM - Artifact Evaluation for ASPLOS 2020",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4322105",
        "abstract": "<p>A VirtualBox VM image that is fully set up to reproduce experiments mentioned in the ASPLOS 2021 paper titled “Language-Parametric Compiler Validation with Application to LLVM”. The included README.md file contains detailed instructions on how to use the artifact both for reproduction of experiments and for general use.</p>",
        "keywords": "Compilers, Program Equivalence, Simulation, Translation Validation",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4322233": {
        "doi": "10.5281/zenodo.4322233",
        "author": "Xu, Yi and Izraelevitz, Joseph and Swanson, Steven",
        "title": "Clobber-NVM: Log Less, Re-execute More",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4322233",
        "abstract": "<p>Clobber-NVM is a failure-atomicity library that ensures data consistency by reexecution. Clobber-NVM’s novel logging strategy, clobber logging, records only those transaction inputs that are overwritten during transaction execution. Then, after a failure, it recovers to a consistent state by restoring overwritten inputs and reexecuting any interrupted transactions. Clobber-NVM utilizes a clobber logging compiler pass for identifying the minimal set of writes that need to be logged.</p>\n<p>This artifact includes the Clobber-NVM compiler passes, as well as necessary runtime components. It contains code of all seven benchmarks (four data structures and three applications) reported in the paper. The evaluation results can be reproduced by running the experiments on a machine equipped with at least 24 physical cores per socket and 32 GB of memory. In absence of access to real NVMM (e.g., Intel Optane DC), you need to reserve 32 GB of memory to emulate NVMM. The artifacts also includes a script to download and install main software dependencies. We have evaluated Clobber-NVM on Ubuntu 18.04, with GNU7.3.1, and LLVM 7.0.0.</p>",
        "keywords": "Clobber Logging, Compiler, Non-volatile Memory, Persistent Memory, Storage Systems, Undo Logging",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4322285": {
        "doi": "10.5281/zenodo.4322285",
        "author": "Liu, Sihang and Mahar, Suyash and Ray, Baishakhi and Khan, Samira",
        "title": "PMFuzz: Test Case Generation for Persistent Memory Programs",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4322285",
        "abstract": "<p>PMFuzz is a test case generator for PM programs, aiming to generate high-value test cases for PM testing tools. The generated test cases include both program inputs and initial PM images (normal images and crash images). The key idea of PMFuzz is to perform a targeted fuzzing on PM-related code regions and generate valid PM images by reusing the program logic. After generating the test cases, PMFuzz feeds them to the PM program and uses existing testing tools (XFDetector and PMemcheck) to detect crash consistency and performance bugs. The archived version of this artifact can be accessed using this DOI. We also maintain a GitHub repository at https://pmfuzz.persistentmemory.org/. For the latest version, please check our GitHub repository.</p>",
        "keywords": "Crash Consistency, Debugging, Fuzzing, Persistent Memory, Testing",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4329804": {
        "doi": "10.5281/zenodo.4329804",
        "author": "Tang, Wei and Tomesh, Teague and Suchara, Martin and Larson, Jeffrey and Martonosi, Margaret",
        "title": "Replication Package for Article: CutQC: Using Small Quantum Computers for Large Quantum Circuit Evaluations",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4329804",
        "abstract": "<p>Our artifact provides the source codes for the end-to-end CutQC toolflow. We also provide the benchmarking codes for several sample runtime and fidelity experiments. The HPC parallel version of the code is not provided, as different HPC platforms require very different setups.</p>",
        "keywords": "Hybrid Computing, Quantum Circuit Cutting, Quantum Computing (QC)",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4331404": {
        "doi": "10.5281/zenodo.4331404",
        "author": "VanHattum, Alexa and Nigam, Rachit and Lee, Vincent T. and Bornholt, James and Sampson, Adrian",
        "title": "Diospyros Software Artifact: Vectorization for Digital Signal Processors via Equality Saturation",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4331404",
        "abstract": "<p>Our artifact packages an environment to reproduce the main empirical results of our paper. Specifically, we package: (1) the Diospyros compiler: a search-aided compiler for generating vectorized DSP kernels, (2) implementations of a range of benchmarks in Diospyros, (3) implementation of the Theia open-source application case study, and (4) scripts for recreating the experiments and charts in the paper.</p>",
        "keywords": "DSPs, Equality Saturation, Program Synthesis, Vectorization",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/cucapra/diospyros/tree/v1.1"
    },
    "10.5281/zenodo.4331660": {
        "doi": "10.5281/zenodo.4331660",
        "author": "Jayarajan, Anand and Hau, Kimberly and Goodwin, Andrew and Pekhimenko, Gennady",
        "title": "LifeStream",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4331660",
        "abstract": "<p>This artifact contains code and a synthetic data set to evaluate LifeStream, Trill, and numerical library-based data processing pipelines.</p>",
        "keywords": "LifeStream, Numpy, Python, Scikit-learn, SciPy, stream data analytics, temporal query processing, Trill",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/anandj91/LifeStream/tree/v1.5"
    },
    "10.5281/zenodo.4429956": {
        "doi": "10.5281/zenodo.4429956",
        "author": "Skarlatos, Dimitrios and Zhao, Zirui Neil and Paccagnella, Riccardo and Fletcher, Christopher W. and Torrellas, Josep",
        "title": "Replication for article: Jamais Vu: Thwarting Microarchitectural Replay Attacks",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4429956",
        "abstract": "<p>Our artifact provides a complete gem5 implementation of Jamais Vu, along with scripts to evaluate the SPEC’17 benchmarks. We also provide a GitHub repository with the gem5 implementation and required scripts to reproduce our simulation results. Finally, we provide a binary analysis infrastructure based on Radare2 that allows the compilation of binaries with the proposed Epoch markings.</p>",
        "keywords": "Gem5, Processor design, Replay attack, Side-channel countermeasures",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4432747": {
        "doi": "10.5281/zenodo.4432747",
        "author": "Nigam, Rachit and Thomas, Samuel and Li, Zhijing and Sampson, Adrian",
        "title": "Replication Package for Article: Compiler Infrastructure for Accelerator Generators",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4432747",
        "abstract": "<p>Our artifact packages an environment that can be used to reproduce the figures in the paper and perform similar evaluations. It is available at the following link:https://zenodo.org/record/4432747</p>\n<p>It includes the following: - futil: The Calyx compiler. - fud: Driver for the futil compiler and hardware tools. - Linear algebra PolyBench written in Dahlia</p>",
        "keywords": "Accelerator Design, Intermediate Language",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4435970": {
        "doi": "10.5281/zenodo.4435970",
        "author": "Farshin, Alireza and Barbette, Tom and Roozbeh, Amir and Maguire Jr., Gerald Q. and Kosti\\'{c",
        "title": "PacketMill: Toward Per-Core 100-Gbps Networking - Artifact for ASPLOS'21",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4435970",
        "abstract": "<p>This is the artifact for the “PacketMill: Toward per-core 100-Gbps Networking” paper published at ASPLOS’21.</p>\n<p>PacketMill is a system that optimizes the performance of network functions via holistic inter-stack optimizations. More specifically, PacketMill provides a new metadata management model, called X-Change, enabling the packet processing frameworks to provide their custom buffer to DPDK and fully bypass rte_mbuf. Additionally, PacketMill performs a set of source-code \\&amp; intermediate representation (IR) code optimizations.</p>\n<p>Our paper’s artifact contains the source code, the experimental workflow, and additional information to (i) set upPacketMill \\&amp; its testbed, (ii) perform some of the experiments presented in the paper, and (iii) validates the reusability \\&amp; effectiveness of PacketMill.</p>\n<p>For more information, please refer to https://github.com/aliireza/packetmill</p>",
        "keywords": "DPDK., FastClick, LLVM, Middleboxes, Packet Processing, PacketMill, X-Change",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4446702": {
        "doi": "10.5281/zenodo.4446702",
        "author": "Bl\\\"{o",
        "title": "Switches for HIRE: Resource Scheduling for Data Center In-Network Computing",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4446702",
        "abstract": "<p>The artifact consists of three parts. (1) the source code of the HIRE simulator, including the implementations of Yarn++, Sparrow++, K8++, and CoCo++; (2) the runner tool (a Python3 program) that runs the experiments with the configurations presented in the paper and plotting scripts; and (3) Docker configurations to ease the setup. Users can reproduce all simulation results (Fig. 8 and Fig. 7). Furthermore, the artifact can be easily extended/modified to bench- mark other schedulers, INC configurations, and workloads.</p>",
        "keywords": "data center, heterogeneity, in-network computing, non-linear resource usage, scheduling",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4501773": {
        "doi": "10.5281/zenodo.4501773",
        "author": "Chen, Daming D. and Lim, Wen Shih and Bakhshalipour, Mohammad and Gibbons, Phillip B. and Hoe, James C. and Parno, Bryan",
        "title": "Artifact for 'HerQules: Securing Programs via Hardware-Enforced Message Queues'",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4501773",
        "abstract": "<p>Source code, experiment data, and virtual machines with precompiled benchmarks</p>",
        "keywords": "compiler, fpga, ipc, llvm, nginx, ripe, spec, zsim",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/secure-foundations/herqules"
    },
    "10.5281/zenodo.4504602": {
        "doi": "10.5281/zenodo.4504602",
        "author": "Calciu, Irina and Imran, M. Talha and Puddu, Ivan and Kashyap, Sanidhya and Maruf, Hasan Al and Mutlu, Onur and Kolli, Aasheesh",
        "title": "Artifacts for Article: Rethinking Software Runtimes for Disaggregated Memory",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4504602",
        "abstract": "<p>These artifacts have been developed for the ASPLOS 2021 article “Rethinking Software Runtimes for Disaggregated Memory”. The artifacts provide tools to track applications and determine their memory accesses: cache-line granularity memory writes and average memory access time (AMAT).</p>",
        "keywords": "average memory access time, cache-line granularity dirty data tracking",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4527305": {
        "doi": "10.5281/zenodo.4527305",
        "author": "Patel, Tirthak and Tiwari, Devesh",
        "title": "QRAFT ASPLOS 21 Code and Dataset",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4527305",
        "abstract": "<p>The artifacts can be divided into three categories: (1) Raw data: circuit metadata and output generated as a direct result of running quantum circuits. (2) Processed and Trained data: the data processed to be fed as input to the machine learning model training, as well as the output data of testing samples using the trained model. (3) Tools: code and scripts used for running circuits on quantum computers, processing the output, as well as training models and generating the final output (prediction of state probabilities).</p>",
        "keywords": "NISQ Computing, Quantum Computing, Quantum Error Mitigation",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4537132": {
        "doi": "10.5281/zenodo.4537132",
        "author": "Zhang, Yanqi and Hua, Weizhe and Zhou, Zhuangzhuang and Suh, G. Edward and Delimitrou, Christina",
        "title": "Replication package for article: Sinan: ML-Based and QoS-Aware Resource Management for Cloud Microservices",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4537132",
        "abstract": "<p>The artifact includes codes and documentation to reproduce the google cloud experiments presented in Sinan: ML-Based and QoS-Aware Resource Management for Cloud Microservices</p>",
        "keywords": "cloud computing, cluster management, datacenter, machine learn-ing for systems, mi-croservices, quality of service, resource efficiency, tail latency",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/zyqCSL/sinan-gcp/tree/v1.0.0"
    },
    "10.5281/zenodo.4539728": {
        "doi": "10.5281/zenodo.4539728",
        "author": "Zhang, Mengchi and Alawneh, Ahmad and Rogers, Timothy G.",
        "title": "Replication package for Article: Judging a Type by Its Pointer: Optimizing Virtual Function Calls on GPUs",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4539728",
        "abstract": "<p>The artifact contains the source code for the SharedOA, COAL, and TypePointer that applied to all workloads. We also include the instructions to configure, build, run, and acquire the workload’s performance. Users can reproduce the results in Figure 6. We also contain a tutorial with examples to apply SharedOA, COAL and TypePointer to show that the three techniques are reusable on other CUDA applications.</p>",
        "keywords": "GPU, Object-oriented Programming, Virtual Function Call",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4539743": {
        "doi": "10.5281/zenodo.4539743",
        "author": "Hoseinzadeh, Morteza and Swanson, Steven",
        "title": "Replication Package for Artifact: Corundum: Statically-Enforced Persistent Memory Safety",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4539743",
        "abstract": "<p>Corundum is a persistent memory programming library in Rust which enforces safety rules statically. The artifact contains the source code of Corundum, the installation scripts for Corundum and other libraries listed in the paper, source code of the workloads, and experiments run scripts.</p>",
        "keywords": "debugging, formal verification, persistent memory programming",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/NVSL/Corundum/tree/0.3.1"
    },
    "10.5281/zenodo.4540633": {
        "doi": "10.5281/zenodo.4540633",
        "author": "Meng, Xiaozhu and Liu, Weijie",
        "title": "Software Artifact for Incremental CFG Patching for Binary Rewriting",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4540633",
        "abstract": "<p>Software artifact needed for paper “Incremental CFG Patching for Binary Rewriting”. It includes scripts for setting environments, software dependencies, and running experiments, and template configuration files for SPEC CPU 2017.</p>",
        "keywords": "Docker, Dyninst, Firefox, Spack",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4540866": {
        "doi": "10.5281/zenodo.4540866",
        "author": "Li, Guangpu and Chen, Dongjie and Lu, Shan and Musuvathi, Madanlal and Nath, Suman",
        "title": "SherLock-v2",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4540866",
        "abstract": "<p>Synchronizations are fundamental to the correctness and performance of concurrent software. They determine which operations can execute concurrently and which can-not—the key to detecting and fixing concurrency bugs, as well as understanding and tuning performance. Unfortunately, correctly identifying all synchronizations has become extremely difficult in modern software systems due to the various forms of concurrency and various types of synchronizations.</p>\n<p>Previous work either only infers specific type of synchronization by code analysis or relies on manual effect to annotate the synchronization. This paper proposes SherLock, a tool that automatically infers synchronizations without code analysis or annotation. SherLock leverages the fact that most synchronizations appear around the conflicting operations and encodes the inference problem into a linear system with properties and hypotheses about how synchronizations are typically used. To collect useful observations, SherLock runs the target problem for a small number of runs with feedback-guided delay injection.</p>\n<p>We have applied SherLock on 8 C# open-source applications. Without any prior knowledge, SherLock automatically inferred more than 120 unique synchronizations, with few false positives. These inferred synchronizations cover a wide variety of types, including lock operations, fork-join operations, asynchronous operations, framework synchronization, and custom synchronization.</p>",
        "keywords": "Happens-before inducing, Synchronization Detection",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4541351": {
        "doi": "10.5281/zenodo.4541351",
        "author": "Duta, Victor and Giuffrida, Cristiano and Bos, Herbert and van der Kouwe, Erik",
        "title": "Replication Package for Article \"PIBE: Practical Kernel Control-Flow Hardening with Profile-Guided Indirect Branch Elimination\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4541351",
        "abstract": "<p>Our artifact provides x86-64 kernel binaries for most of the kernel configurations we evaluated in the paper, along with scripts to configure LMBench, run and benchmark each kernel configuration and regenerate the syscall latencies and overheads discussed in the main tables of the paper. This allows the evaluation of our results on an Intel i7-8700K (Skylake) CPU or similar micro-architectures.</p>\n<p>We also provide source code for the tools used during the kernel build process (e.g., binutils, LLVM 10), the code of our LLVM optimization passes and the kernel source code to regenerate the kernel binaries used in the workflow of our evaluation. We sup- ply the user with scripts to regenerate our Apache and LMBench profiling workloads, rebuild the kernel binaries provided in the evaluation or customize the kernels with a user-specified selection of transient mitigations and optimization strategies.</p>\n<p>Furthermore, we also provide portable Apache and LMBench profiling workloads to speedup the customization process without the necessity of creating your own profiling workloads.</p>",
        "keywords": "kernel, LMBench, profile-guided optimizations, transient execution",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/victorduta/pibe-reproduction/tree/v1.0.5"
    },
    "10.5281/zenodo.4546175": {
        "doi": "10.5281/zenodo.4546175",
        "author": "Hadidi, Ramyad and Asgari, Bahar and Jijina, Sam and Amyette, Adriana and Shoghi, Nima and Kim, Hyesoon",
        "title": "Paper Quantifying the Design-Space Tradeoffs in Autonomous Drones artifact, including software, data, and build giude for the open-source drone",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4546175",
        "abstract": "<p>This artifact describes our open-source experimental drone framework that is customizable across its hardware-software stack. The main and first portion of the artifact focuses on building the drone, which compliments the beginning sections of the paper. The build guide consists of two parts: hardware and software. Second, as an example of possible experiments, we provide sample scripts for important metrics measurements such as Linux perf and SLAM. Third, the artifact contains raw data for graphs in the paper.</p>",
        "keywords": "autonomous drones, build guide, design-space analysis, open-source platform, power measurements, SLAM",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/ramyadhadidi/ASPLOS21-Drone/tree/v1.0"
    },
    "10.5281/zenodo.4556045": {
        "doi": "10.5281/zenodo.4556045",
        "author": "Qiu, Junqiao and Sun, Xiaofan and Sabet, Amir Hossein Nodehi and Zhao, Zhijia",
        "title": "Replication Package for Article: Scalable FSM Parallelization via Path Fusion and Higher-Order Speculation",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4556045",
        "abstract": "<p>This artifact contains the source code of BoostFSM, including the five FSM parallelization schemes discussed in the paper and some benchmarks along with their inputs used for evaluation. In addition, this artifact provides bash scripts to compile the source code and reproduce the key experimental results reported in the paper. Considering the software dependencies, a software environment with Linux Centos 7 or other similar Linux distributions, GCC, Bash, Pthread, CMake and Boost library, is needed before the evaluation. Moreover, to reproduce all results reported in the paper, especially the speedup comparison and scalability analysis, the artifact needs to run on Intel Xeon Phi processor (Knights Landing/KNL).</p>",
        "keywords": "Finite State Machine, FSM, Parallelization, Scalability, Speculation",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.1307248": {
        "doi": "10.5281/zenodo.1307248",
        "author": "Wei, Guannan and Decker, James and Rompf, Tiark",
        "title": "Kraks/RefuncAAM: Release v1.0.0",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1307248",
        "abstract": "<p>This is the release for the camera-ready submission of ICFP ’18.</p>",
        "keywords": "Artifact, Functional Programming",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/Kraks/RefuncAAM/tree/v1.0.0"
    },
    "10.5281/zenodo.1400702": {
        "doi": "10.5281/zenodo.1400702",
        "author": "Henkel, Jordan and Lahiri, Shuvendu K. and Liblit, Ben and Reps, Thomas",
        "title": "Artifact for Code Vectors: Understanding Programs Through Embedded Abstracted Symbolic Traces",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1400702",
        "abstract": "<p>This release is to track the Code Vectors: Understanding Programs Through Embedded Abstracted Symbolic Traces artifact submission. Updated to align with camera ready version.</p>",
        "keywords": "Embeddings, Program Understanding, Software Engineering Research",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/jjhenkel/code-vectors-artifact/tree/v1.1.1"
    },
    "10.5281/zenodo.1419788": {
        "doi": "10.5281/zenodo.1419788",
        "author": "Valiev, Marat and Vasilescu, Bogdan and Herbsleb, James",
        "title": "Ecosystem-Level Determinants of Sustained Activity in Open-Source Projects: A Case Study of the PyPI Ecosystem",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1419788",
        "abstract": "<p>Replication pack, FSE2018 submission #164</p>",
        "keywords": "Software Engineering",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.3898483": {
        "doi": "10.5281/zenodo.3898483",
        "author": "Xu, Rongchen and He, Fei and Wang, Bow-Yaw",
        "title": "xurongchen/fse20: Artifacts for FSE2020 paper#633",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3898483",
        "abstract": "<p>artifacts track, fse20</p>",
        "keywords": "Software Engineering",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/xurongchen/fse20/tree/Artifacts"
    },
    "10.5281/zenodo.3903727": {
        "doi": "10.5281/zenodo.3903727",
        "author": "Mirhosseini, Samim and Parnin, Chris",
        "title": "docable/docable v1.1",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3903727",
        "abstract": "<p>No description provided.</p>",
        "keywords": "Software Engineering",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/docable/docable/tree/v1.1"
    },
    "10.5281/zenodo.3907232": {
        "doi": "10.5281/zenodo.3907232",
        "author": "Sharma, Vaibhav and Hussein, Soha and Whalen, Michael W. and McCamant, Stephen and Visser, Willem",
        "title": "java-ranger: v1.0.0",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3907232",
        "abstract": "<p>This is the version of Java Ranger that was used in the evaluation accepted to FSE 2020.</p>",
        "keywords": "Java, Software Engineering, Software Verification",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/vaibhavbsharma/java-ranger/tree/fse2020"
    },
    "10.5281/zenodo.3923023": {
        "doi": "10.5281/zenodo.3923023",
        "author": "Palmer, Zachary and Park, Theodore and Smith, Scott and Weng, Shiwei",
        "title": "Higher-Order Demand-Driven Symbolic Evaluation",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3923023",
        "abstract": "<p>The artifact for the paper includes the source code and a ready-to-use qemu image.</p>",
        "keywords": "Functional Programming, OCaml",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4649822": {
        "doi": "10.5281/zenodo.4649822",
        "author": "Sammler, Michael and Lepigre, Rodolphe and Krebbers, Robbert and Memarian, Kayvan and Dreyer, Derek and Garg, Deepak",
        "title": "Artifact and Appendix of \"RefinedC: Automating the Foundational Verification of C Code with Refined Ownership Types\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4649822",
        "abstract": "<p>This is the artifact for the PLDI’21 paper “RefinedC: Automating the Foundational Verification of C Code with Refined Ownership Types”. It contains the RefinedC tool including its Coq development and the appendix for the paper.</p>",
        "keywords": "C programming language, Coq, Iris, ownership types, proof automation, refinement types, separation logic",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4663105": {
        "doi": "10.5281/zenodo.4663105",
        "author": "Kostyukov, Yurii and Mordvinov, Dmitry and Fedyukovich, Grigory",
        "title": "Artifact Evaluation for \"Beyond the Elementary Representations of Program Invariants over Algebraic Data Types\" paper",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4663105",
        "abstract": "<p>An <code>Ubuntu20.04.ova</code> file provided is the VM snapshot with an artifact installed.</p>\n<p>The artifact is provided to support the result of the Evaluation section of the paper “Beyond the Elementary Representations of Program Invariants over Algebraic Data Types” submitted to PLDI 2021.</p>\n<p>Paper results reproduction instructions are contained in the <code>README.txt</code> file.</p>",
        "keywords": "algebraic data types, finite models, first-order definability, invariant representation, invariants, tree automata",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4663292": {
        "doi": "10.5281/zenodo.4663292",
        "author": "Stein, Benno and Chang, Bor-Yuh Evan and Sridharan, Manu",
        "title": "Artifact for Article: Demanded Abstract Interpretation",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4663292",
        "abstract": "<p>The artifact is a docker image containing source code and binaries needed to reproduce the paper’s experiments.</p>",
        "keywords": "Abstract interpretation, demand-driven analysis, incremental analysis",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4665859": {
        "doi": "10.5281/zenodo.4665859",
        "author": "Paradis, Anouk and Bichsel, Benjamin and Steffen, Samuel and Vechev, Martin",
        "title": "Replication Package for Article: Unqomp: Synthesizing Uncomputation in Quantum Circuits",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4665859",
        "abstract": "<p>This is a snapshot of Unqomp, providing the artifact for the PLDI’21 paper “Unqomp: Synthesizing Uncomputation in Quantum Circuits”. For the latest version of Unqomp, refer to https://github.com/eth-sri/Unqomp.</p>\n<p>It contains the implementation of Unqomp for Qiskit, as well as all the necessary material to reproduce the evaluation of our paper.</p>",
        "keywords": "Quantum Circuits, Synthesis, Uncomputation",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/eth-sri/Unqomp/tree/pldi21-artifact"
    },
    "10.5281/zenodo.4668317": {
        "doi": "10.5281/zenodo.4668317",
        "author": "Shariffdeen, Ridwan and Noller, Yannic and Grunske, Lars and Roychoudhury, Abhik",
        "title": "Replication Package for: Concolic Program Repair",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4668317",
        "abstract": "<p>This is the artifact for the PLDI’2021 submission “Concolic Program Repair”. It includes the following content: * the tool CPR, which implements our concolic program repair concept, * all benchmark subjects and scripts to reproduce our evaluation, and * additional documentation to allow the re-usage of CPR, as well as helpful examples.</p>",
        "keywords": "patch overfitting, program repair, program synthesis, symbolic execution",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/rshariffdeen/CPR/tree/v1.0.0"
    },
    "10.5281/zenodo.4671078": {
        "doi": "10.5281/zenodo.4671078",
        "author": "Ringer, Talia and Porter, RanDair and Yazdani, Nathaniel and Leo, John and Grossman, Dan",
        "title": "PUMPKIN Pi",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4671078",
        "abstract": "<p>This is the artifact for the PLDI 2021 paper “Proof Repair Across Type Equivalences.” The anonymized version has been vetted by AEC as functional and reusable. A deanonymized version corresponding to the links in the paper has been uploaded as a second version (version “deanonymized”).</p>",
        "keywords": "Coq, interactive theorem provers, proof assistants, proof engineering, proof evolution, proof repair",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4674301": {
        "doi": "10.5281/zenodo.4674301",
        "author": "P\\^{\\i",
        "title": "CoSplit (PLDI 2021 Artefact)",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4674301",
        "abstract": "<p>Virtual machine: The CoSplit.ova file is a virtual machine image containing the full artefact, including the CoSplit static analysis, its integration with the Zilliqa blockchain, the benchmark suite used for evaluation, the Ethereum dataset, and the Jupyter notebook used to analyse the dataset. This is the artefact that was evaluated during the PLDI 2021 Artifact Evaluation process.</p>\n<p>The virtual machine image was generated using Virtual Box Version 6.1.18 r142142 and is known to work with that version of the software.</p>\n<p>Source code: Please download cosplit-artefact-archive.zip. This includes the full source code, including dependencies, and the Ethereum dataset. The archive produced by GitHub (dranov/cosplit-artefact-v0.1-beta.zip) does not include the dependencies and dataset.</p>",
        "keywords": "automatic parallelisation, blockchain, sharding, smart contracts, static analysis",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/dranov/cosplit-artefact/tree/v0.1-beta"
    },
    "10.5281/zenodo.4678051": {
        "doi": "10.5281/zenodo.4678051",
        "author": "Ye, Guixin and Tang, Zhanyong and Tan, Shin Hwei and Huang, Songfang and Fang, Dingyi and Sun, Xiaoyang and Bian, Lizhong and Wang, Haibo and Wang, Zheng",
        "title": "COMFORT: v1.0",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4678051",
        "abstract": "<p>COMFORT is a deep-learning-based compiler fuzzer for testing JavaScript engine bugs, including conformance bugs (JS compiler implementations that violate a specification defined in the relevant ECMAScript-262 standard). The corresponding research paper, “Automated Conformance Testing for JavaScript Engines via Deep Compiler Fuzzing,” appeared in PLDI 2021.</p>",
        "keywords": "Compiler Fuzzing, Conformance bugs, Deep Learning, JavaScript",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/NWU-NISL-Fuzzing/COMFORT"
    },
    "10.5281/zenodo.4678459": {
        "doi": "10.5281/zenodo.4678459",
        "author": "Tao, Runzhou and Shi, Yunong and Yao, Jianan and Hui, John and Chong, Frederic T. and Gu, Ronghui",
        "title": "Artifact for PLDI 2021 Paper Gleipnir: Toward Practical Error Analysis for Quantum Programs",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4678459",
        "abstract": "<p>Artifact for PLDI 2021 Paper Gleipnir: Toward Practical Error Analysis for Quantum Programs The artifact contains the docker image file needed to reproduce the results presented in the paper.</p>",
        "keywords": "approximate computing, error analysis, Quantum programming",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4678520": {
        "doi": "10.5281/zenodo.4678520",
        "author": "Xu, Dongpeng and Liu, Binbin and Feng, Weijie and Ming, Jiang and Zheng, Qilong and Li, Jing and Yu, Qiaoyan",
        "title": "Artifact Evaluation for \"Boosting SMT Solver Performance on Mixed-Bitwise-Arithmetic Expressions\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4678520",
        "abstract": "<p>The artifact is for evaluating the result from the paper “Boosting SMT Solver Performance on Mixed-Bitwise-Arithmetic Expressions.” Please read the README file before you run the program.</p>",
        "keywords": "Mixed Boolean Arithmetic, Simplification, SMT Solvers",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4679316": {
        "doi": "10.5281/zenodo.4679316",
        "author": "Kalhauge, Christian Gram and Palsberg, Jens",
        "title": "Artifact from \"Logical Bytecode Reduction\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4679316",
        "abstract": "<p>The artifact is a Virtual Box containing the results and everything to reproduce the results of the paper. Furthermore, it contains the source code of jreduce.</p>\n<p>More information can be found in the REAMDE file in the artifact or at https://github.com/ucla-pls/pldi21-artifact/blob/master/README.md</p>",
        "keywords": "input reduction",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4679743": {
        "doi": "10.5281/zenodo.4679743",
        "author": "Itzhaky, Shachar and Peleg, Hila and Polikarpova, Nadia and Rowe, Reuben N. S. and Sergey, Ilya",
        "title": "Cypress (PLDI 2021 Artifact): Code and Benchmarks",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4679743",
        "abstract": "<p>Artifact accompanying the the paper Cyclic Program Synthesis published in proceedings of PLDI 2021.</p>",
        "keywords": "cyclic proofs, program synthesis, program verification, separation logic",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/TyGuS/suslik/tree/v0.4-cypress"
    },
    "10.5281/zenodo.4679931": {
        "doi": "10.5281/zenodo.4679931",
        "author": "Cho, Minki and Lee, Sung-Hwan and Hur, Chung-Kil and Lahav, Ori",
        "title": "Artifact for the paper \"Modular Data-Race-Freedom Guarantees in the Promising Semantics\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4679931",
        "abstract": "<p>The artifact for the paper “Modular Data-Race-Freedom Guarantees in the Promising Semantics” (PLDI 2021). It contains mechanized proofs in Coq and script code for performance evaulation.</p>",
        "keywords": "Compiler Optimizations, Data Race Freedom, Operational Semantics, Relaxed Memory Concurrency",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/snu-sf/promising-ldrf-coq/tree/v1.0"
    },
    "10.5281/zenodo.4679983": {
        "doi": "10.5281/zenodo.4679983",
        "author": "Christensen, Michael and Sherwood, Timothy and Balkind, Jonathan and Hardekopf, Ben",
        "title": "Replication Package for Artifact: \"Wire Sorts: A Language Abstraction for Safe Hardware Composition\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4679983",
        "abstract": "<p>This artifact contains the code for reproducing the results in the paper “Wire Sorts: A Language Abstraction for Safe Hardware Composition.” Its purpose is to demonstrate how our tool can analyze and annotate hardware modules in order to determine their input and output wire sorts (and check these sorts against any user ascriptions), as well as use these sorts to improve intermodular connection checks.</p>",
        "keywords": "combinational cycle detection, composition, hardware description languages, modules",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4680045": {
        "doi": "10.5281/zenodo.4680045",
        "author": "Vega, Luis and McMahan, Joseph and Sampson, Adrian and Grossman, Dan and Ceze, Luis",
        "title": "Replication package for Reticle: A Virtual Machine for Programming Modern FPGAs",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4680045",
        "abstract": "<p>Virtual machine image containing all necessary dependencies for running the evaluation in the paper</p>",
        "keywords": "compilers, FPGAs",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4680245": {
        "doi": "10.5281/zenodo.4680245",
        "author": "Friedman, Michal and Petrank, Erez and Ramalhete, Pedro",
        "title": "Mirror: Making Lock-Free Data Structures Persistent",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4680245",
        "abstract": "<p>This artifact provides a way to test different concurrent, persistent and lock-free data structures that were specifically designed for non-volatile memory.</p>",
        "keywords": "concurrent data structures, lock-free, Non-volatile memory",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4680470": {
        "doi": "10.5281/zenodo.4680470",
        "author": "Donaldson, Alastair F. and Thomson, Paul and Teliman, Vasyl and Milizia, Stefano and Maselco, Andr\\'{e",
        "title": "Artifact for \"Test-Case Reduction and Deduplication Almost for Free with Transformation-Based Compiler Testing\", PLDI 2021",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4680470",
        "abstract": "<p>Artifact associated with PLDI paper, providing the version of the spirv-fuzz tool that was used for evaluation in the paper, together with the ability to reproduce a number of results using the SwiftShader implementation of SPIR-V, as well as data sets associated with the full set of experiments reported in the paper.</p>",
        "keywords": "Compilers, metamorphic testing, SPIR-V",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4680746": {
        "doi": "10.5281/zenodo.4680746",
        "author": "Spies, Simon and G\\\"{a",
        "title": "Coq Development for \"Transfinite Iris: Resolving an Existential Dilemma of Step-Indexed Separation Logic\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4680746",
        "abstract": "<p>This is the artifact for the paper “Transfinite Iris: Resolving an Existential Dilemma of Step-Indexed Separation Logic”. It contains the Coq mechanization of Transfinite Iris, in particular its soundness proof, program logics, and the examples presented in the paper. The artifact contains the Transfinite Iris development both in a VM image with pre-built sources and as a .zip source archive.</p>",
        "keywords": "Coq, Iris, mechanized proofs, separation logic, transfinite step-indexing",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4681027": {
        "doi": "10.5281/zenodo.4681027",
        "author": "Castro-Perez, David and Ferreira, Francisco and Gheri, Lorenzo and Yoshida, Nobuko",
        "title": "Zooid: a DSL for Certified Multiparty Computation",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4681027",
        "abstract": "<p>This is the implementation and Coq mechanisation of the metathory of Multiparty Session Types (MPST) as described on the paper.</p>",
        "keywords": "concur- rent processes, Coq, deadlock freedom, liveness, mechanisation, multiparty session types, protocol compliance",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4681598": {
        "doi": "10.5281/zenodo.4681598",
        "author": "Lasser, Sam and Casinghino, Chris and Fisher, Kathleen and Roux, Cody",
        "title": "CoStar parser implementation, correctness proofs, and performance evaluation",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4681598",
        "abstract": "<p>Artifact submitted for evaluation along with the PLDI 2021 paper \"CoStar: A Verified ALL(*) Parser.\"</p>",
        "keywords": "interactive theorem proving, parsing",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4682081": {
        "doi": "10.5281/zenodo.4682081",
        "author": "Liu, Bozhen and Liu, Peiming and Li, Yanze and Tsai, Chia-Che and Da Silva, Dilma and Huang, Jeff",
        "title": "Artifact: When Threads Meet Events: Efficient and Precise Static Race Detection with Origins",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4682081",
        "abstract": "<p>This is the artifact of O2 from paper “When Threads Meet Events: Efficient and Precise Static Race Detection with Origins” published in PLDI’21 (https://doi.org/10.1145/3453483.3454073). O2 detects data races in large complex multithreaded and event-driven software. O2 is powered by “origins”, an abstraction that unifies threads and events by treating them as entry points of code paths attributed with data pointers. We have implemented O2 for both C/C++ and JVM applications and applied it to a wide range of open source software (e.g., DaCapo Benchmarks, HDFS, Yarn, Zookeeper, Firefox Focus, Memcached, Linux kernel).</p>",
        "keywords": "Data Race Detection, Origins, Pointer Analysis, Static Analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4682172": {
        "doi": "10.5281/zenodo.4682172",
        "author": "Bruno, Rodrigo and Jovanovic, Vojin and Wimmer, Christian and Alonso, Gustavo",
        "title": "Compiler-Assisted Object Inlining with Value Fields",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4682172",
        "abstract": "<p>Object Oriented Programming has flourished in many areas ranging from web-oriented microservices, data processing, to databases. However, while representing domain entities as objects is appealing to developers, it leads to high data fragmentation as data is loaded into applications as large collections of data objects, resulting in high memory footprint and poor locality.</p>\n<p>To minimize memory footprint and increase memory locality, embedding the payload of an object into another object (object inlining) has been considered before but existing techniques present severe limitations that prevent it from becoming a widely adopted technique. We argue that object inlining is mostly useful to optimize the application data-path and that objects in the data-path have value semantics, which unlocks great potential for inlining objects. We therefore propose value fields, an abstraction which allows fields to be marked as having value semantics.</p>\n<p>We implement value fields for GraalVM Native Image. Object inlining is implemented as a compiler pipeline phase that mutates both object layouts and application code to access inlined fields. Experimental evaluation shows that applying value fields in real-world frameworks such as Apache Spark, Spring Boot, and Micronaut, requires minimal or even no effort at all from developers. Results show improvements in throughput of up to 3x, memory footprint reduction of up to 40\\% and reduced GC pause times of up to 35\\%.</p>",
        "keywords": "Compiler Optimization, Language Implementation, Memory Management, Object Oriented, Programming Runtime Systems",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4682681": {
        "doi": "10.5281/zenodo.4682681",
        "author": "Prabhu, Sumanth and Fedyukovich, Grigory and Madhukar, Kumar and D'Souza, Deepak",
        "title": "Artifact for the paper Specification Synthesis with Constrained Horn Clauses",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4682681",
        "abstract": "<p>The artifact is a zip file consisting of: pldi21.ova - a VirtualBox image consisting of tools to reproduce the data from the paper pldi21.md5 - md5sum of pldi21.ova README - instructions on how to use the artifact</p>",
        "keywords": "automated verification, inductive invariants, SMT solvers, specification synthesis",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4682811": {
        "doi": "10.5281/zenodo.4682811",
        "author": "Beutner, Raven and Ong, Luke",
        "title": "Probabilistic Termination Analysis Tools for: On Probabilistic Termination of Functional Programs with Continuous Distributions",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4682811",
        "abstract": "<p>Tools for computing lower bounds on the probability of termination (called LowerBound) and verification of AST of non-affine recursive programs (called astnar) for programs with continuous distributions. The tools build upon the theoretical results in the PLDI paper “On Probabilistic Termination of Functional Programs with Continuous Distributions”.</p>",
        "keywords": "almost-sure termination, functional programs, lower bounds, Probabilistic programs, termination",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/ravenbeutner/astnar/tree/v1.0.0"
    },
    "10.5281/zenodo.4685966": {
        "doi": "10.5281/zenodo.4685966",
        "author": "Lim, Jay P. and Nagarakatte, Santosh",
        "title": "High Performance Correctly Rounded Math Libraries for 32-bit Floating Point Representations",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4685966",
        "abstract": "<p>RLIBM-32 is both a math library that provides correctly rounded result for all inputs and tools used to generate the correct polynomials. The techniques behind the tools will be appearing at PLDI 2021. Currently, RLIBM-32 supports a number of elementary functions for float and posit32 representations.</p>\n<h4 id=\"list-of-float-functions-supported-by-rlibm-32\">List of float functions supported by RLIBM-32</h4>\n<ol type=\"1\">\n<li><p>log(x), log2(x), log10(x)</p></li>\n<li><p>exp(x), exp2(x), exp10(x)</p></li>\n<li><p>sinh(x), cosh(x)</p></li>\n<li><p>sinpi(x), cospi(x)</p></li>\n</ol>\n<h4 id=\"list-of-posit32-functions-supported-by-rlibm-32\">List of posit32 functions supported by RLIBM-32</h4>\n<ol type=\"1\">\n<li><p>log(x), log2(x), log10(x)</p></li>\n<li><p>exp(x), exp2(x), exp10(x)</p></li>\n<li><p>sinh(x), cosh(x)</p></li>\n</ol>",
        "keywords": "correctly rounded results, elementary functions, floating point, posits",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4763118": {
        "doi": "10.5281/zenodo.4763118",
        "author": "Farzan, Azadeh and Nicolet, Victor",
        "title": "Phased Synthesis of Divide and Conquer Programs (Software Artifact)",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4763118",
        "abstract": "<p>This software artifact implements the automatic methodology described in the paper. A README.md file has been provided with instructions on how to reproduce the results presented in the paper, as well as instructions on how to build the software from the provided sources.</p>",
        "keywords": "Divide-And-Conquer Algorithms, Program Synthesis",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4697392": {
        "doi": "10.5281/zenodo.4697392",
        "author": "Schuster, Simon and W\\\"{a",
        "title": "PragMetis Source Code",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4697392",
        "abstract": "<p>This is the source code of the paper “Annotate Once - Analyze Anywhere: Context-Aware WCET Analysis by User-Defined Abstractions” [1]. Contains the modified T-Crest toolchain (llvm, clang, the platin WCET-analyzer and annotation language interpreter), distirbuted as a single derived work available under the GPLv3.</p>\n<p>[1] Simon Schuster, Peter W\\\"{a",
        "keywords": "annotations, pragmetis, source code, toolchain, wcet analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.4698901": {
        "doi": "10.5281/zenodo.4698901",
        "author": "Pusz, Oskar and Dietrich, Christian and Lohmann, Daniel",
        "title": "Source Code and Evaluation Data for the Paper: Data-Flow–Sensitive Fault-Space Pruning for the Injection of Transient Hardware Faults",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4698901",
        "abstract": "<p>We provide the data-flow pruner (DFP) presented in our paper. First, we would like to describe the concrete evaluation scenario shortly. We use the fault-injection tool FAIL* (https://github.com/danceos/fail) and have extended it with our pruner. To evaluate DFP we ran FAIL* with a generic experiment after pruning the fault space with the well-known def-use pruner which is already implemented in FAIL<em>. After the execution of the campaign, FAIL</em> created a database with all relevant information about the programs under investigation as well as the results of the fault-injection campaign. The databases are the baseline of our evaluation and can be found in the database-dump/ directory.</p>",
        "keywords": "bit flip, fault injection, fault-space pruning, functional correctness, reliability, single event upset",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/luhsra/lctes21/tree/1.0"
    },
    "10.5281/zenodo.4737731": {
        "doi": "10.5281/zenodo.4737731",
        "author": "Monniaux, David and Six, Cyril",
        "title": "Replication package for \"Simple, Light, Yet Formally Verified, Global Common Subexpression Elimination and Loop-Invariant Code Motion\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4737731",
        "abstract": "<p>A virtual machine in OVA (Open Virtualization) format containing * The version of CompCert used to perform the experiments, for compiling to x86-64, AArch64, Risc-V and Kalray KV3. * The benchmarks. * Scripts to recreate the tables and figures of the paper.</p>",
        "keywords": "AArch64, common subexpression elimination, KV3, Polybench, Risc-V, verified compilation, x86-64",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.4740299": {
        "doi": "10.5281/zenodo.4740299",
        "author": "Cai, Xuyi and Wang, Ying and Zhang, Lei",
        "title": "Replication Package for Article: Optimus: Towards Optimal Layer-Fusion on Deep Learning Processors",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4740299",
        "abstract": "<p>This is the implementation of the paper “Optimus: Towards Optimal Layer-Fusion on Deep Learning Processors”</p>",
        "keywords": "embedded processor, layer fusion, memory, neural network",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/SheaCai/optimus/tree/v0.0.1"
    },
    "10.5281/zenodo.4744197": {
        "doi": "10.5281/zenodo.4744197",
        "author": "Oh, Deok-Jae and Moon, Yaebin and Lee, Eojin and Ham, Tae Jun and Park, Yongjun and Lee, Jae W. and Ahn, Jung Ho",
        "title": "Replication Package for Article: MaPHeA: A Lightweight Memory Hierarchy-Aware Profile-Guided Heap Allocation Framework",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4744197",
        "abstract": "<p>MaPHeA (pronounced like “mafia”) is a lightweight memory hierarchy-aware profile-guided heap allocation framework. It is lightweight as it profiles the memory access information of an application via hardware-event sampling instead of heavyweight instrumentation. MaPHeA is memory hierarchy-aware by utilizing a data access profile, which provides detailed information of a memory access, such as the address and the type of the access as well as where the data resides. Using this profiling information, it analyzes which heap objects are performance-critical. For example, MaPHeA can identify the objects that are frequently accessed (i.e., hot) from a certain memory hierarchy (e.g., LLC or main memory) or cause frequent TLB misses. Then, it can guide these hot data to be allocated to fast memory or allocate the TLB-miss-prone objects to a huge page. To realize this, we modify the intermediate representation of the gcc compiler and use a wrapper to replace the default malloc functions with the ones supporting tiered memory.</p>",
        "keywords": "heap allocation, heterogeneous memory system, huge page, Profile-guided optimization",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4771438": {
        "doi": "10.5281/zenodo.4771438",
        "author": "Li, Yao and Xia, Li-yao and Weirich, Stephanie",
        "title": "Artifact for Reasoning about the Garden of Forking Paths",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4771438",
        "abstract": "<p>This is the artifact for the ICFP’21 paper&nbsp;Reasoning about the garden of forking paths.</p>\n<p>The source file of the artifact can also be found at:&nbsp;https://github.com/lastland/ClairvoyanceMonad</p>\n<p>The artifact contains two files: the source Coq files (ClairvoyanceSrc.tar.gz) and a QEMU-based VM image that contains everything you need to run the proof scripts (ClairvoyanceVM.tar.gz). Detailed instructions on how to use them&nbsp;can be found in a README file within each individual package.</p>\n<p>The abstract of the paper:</p>\n<p>Lazy evaluation is a powerful tool for functional programmers. It enables the concise expression of on-demand computation and a form of compositionality not available under other evaluation strategies. However, the stateful nature of lazy evaluation makes it hard to analyze a program’s computational cost, either informally or formally. In this work, we present a novel and simple framework for formally reasoning about lazy computation costs based on a recent model of lazy evaluation: clairvoyant call-by-value. The key feature of our framework is its simplicity, as expressed by our definition of the clairvoyance monad. This monad is both simple to define (around 20 lines of Coq) and simple to reason about. We show that this monad can be effectively used to mechanically reason about the computational cost of lazy functional programs written in Coq.</p>",
        "keywords": "computation cost, Coq, formal verification, lazy evaluation, monad",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/lastland/ClairvoyanceMonad"
    },
    "10.5281/zenodo.4774332": {
        "doi": "10.5281/zenodo.4774332",
        "author": "Chlipala, Adam",
        "title": "Code for \"Skipping the Binder Bureaucracy with Mixed Embeddings in a Semantics Course (Functional Pearl)\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4774332",
        "abstract": "<p>The associated conference paper introduces a technique used in a course on mechanized semantics and program proof. This artifact is a snapshot of the course’s online textbook, including Coq code illustrating all the main ideas with examples.</p>",
        "keywords": "binder encodings, Coq, mechanized semantics, program verification, proof assistants",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4776802": {
        "doi": "10.5281/zenodo.4776802",
        "author": "Handa, Shivam and Kallas, Konstantinos and Vasilakis, Nikos and Rinard, Martin C.",
        "title": "Artifact for ``An Order-Aware Dataflow Model for Parallel Unix Pipelines''",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4776802",
        "abstract": "<p>The artifact contains the frozen icfp-ae branch of the PaSh git repository. PaSh aims at the correct and automated parallelization of POSIX shell scripts, and was used to generate the results presented in the paper. It includes three key components: (1) a compiler that, given as input a POSIX shell script, emits a POSIX shell script that includes explicit data-parallel fragments for which PaSh has deemed such parallelization semantics-preserving, (2) a set of PaSh-related runtime primitives for supporting the execution of the parallel script fragments, available as in the PATH as normal commands, and (3) a crowd-sourced library of annotations characterizing several properties of common Unix/Linux commands relevant to parallelization.</p>",
        "keywords": "Dataflow, Order-awareness, Parallelism, POSIX, Scripting, Shell, Unix",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4777196": {
        "doi": "10.5281/zenodo.4777196",
        "author": "Zakowski, Yannick and Beck, Calvin and Yoon, Irene and Zaichuk, Ilia and Zaliva, Vadim and Zdancewic, Steve",
        "title": "Specific release of the Vellvm project for the ICFP'21 paper titled: \"Modular, Compositional, and Executable Formal Semantics for LLVM IR\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4777196",
        "abstract": "<p>This artifact contains a snapshot of the stable parts of the Vellvm project as described at the time of ICFP’21 in the “Modular, Compositional, and Executable Formal Semantics for LLVM IR”. It contains in particular: - the definition of our formal semantics for LLVM IR - the definition of the executable interpreter for LLVM IR - all the surrounding infrastructure (unverified parsers and interpreters, test suite, etc..) - the associated meta-theory: equational theory of the language, rewriting-based symbolic interpreter, proof of correctness of the interpreter w.r.t. the semantics - QuickChick-based test-infrastructure - Elementary verified optimizations</p>",
        "keywords": "Coq, Denotational Semantics, LLVM IR, Verified Compiler",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4777648": {
        "doi": "10.5281/zenodo.4777648",
        "author": "Li, John M. and Appel, Andrew W.",
        "title": "Replication Package for Article: Deriving Efficient Program Transformations from Rewrite Rules",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4777648",
        "abstract": "<p>The artifact contains (1) an implementation of the tool described in the paper “Deriving Efficient Program Transformations from Rewrite Rules”, (2) three examples that illustrate the use of the tool, and (3) a benchmark suite that supports claims in Section 5 of the paper. The tool is implemented in Coq and is bundled along with the Certicoq compiler.</p>",
        "keywords": "compiler correctness, compiler optimization, domain-specific languages, interactive theorem proving, metaprogramming, shrink reduction",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4818970": {
        "doi": "10.5281/zenodo.4818970",
        "author": "Maltbie, Nicholas and Niu, Nan and Van Doren, Matthew and Johnson, Reese",
        "title": "CSO Dataset Analysis for Article: XAI Tools in the Public Sector: A Case Study on Predicting Combined Sewer Overflows",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4818970",
        "abstract": "<p>This repository is provided as supplementary material for the paper “XAI Tools in the Public Sector: A Case Study on Predicting Combined Sewer Overflows” by Nicholas Maltbie, Nan Niu, Reese Johnson, and Matthew VanDoren.</p>\n<p>These are the notes for the CSO case study, how the data is prepared, ML models are tuned and created, and the final interpretability analysis.</p>\n<p>This repository contains instructions on how to use the code required to create models for the dataset and then how to apply these models to a sample dataset and gather expandability results for our research.</p>",
        "keywords": "AI, Explainability, Goal Question Metric, LSTM, Machine Learning, Requirements Engineering",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.4835786": {
        "doi": "10.5281/zenodo.4835786",
        "author": "Soto-Valero, C\\'{e",
        "title": "Data and script for the paper \"A Longitudinal Analysis of Bloated Java Dependencies\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4835786",
        "abstract": "<p>This repository contains the data and script for the paper “A Longitudinal Analysis of Bloated Java Dependencies”</p>\n<p>Repository structure:</p>\n<ul>\n<li>dataset\n<ul>\n<li>projects.csv # list of 500 projects used in the paper</li>\n<li>commits.csv # list of commits that are analyzed</li>\n<li>project_dependabot.json # dependabot commits for each project</li>\n<li>project_releases.json # commits associated to a release for each project</li>\n</ul></li>\n<li>dependency_usage_tree\n<ul>\n<li><project>\n<ul>\n<li><commit>\n<ul>\n<li>depclean.json # the dependency usage tree extracted by Deplean</li>\n<li>compile.log.zip # Maven compilation log</li>\n<li>depClean.log.zip # Deplean log</li>\n</ul></commit></li>\n</ul></project></li>\n</ul></li>\n<li>script\n<ul>\n<li>create_dataset.js # ceate projects.csv and commits.csv based on project_releases.json and project_dependabot.json</li>\n<li>read_dependency_usage_tree.js # extract the information from dependency_usage_tree and generate a csv file</li>\n<li>analysis.py # read dependency_usage_tree.csv and generate the macro and table for the paper</li>\n</ul></li>\n</ul>",
        "keywords": "Dependencies, Java, Software bloat",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.4885001": {
        "doi": "10.5281/zenodo.4885001",
        "author": "Oh, Jeho and Y\\i{",
        "title": "Artifact from \"Finding Broken Linux Configuration Specifications by Statically Analyzing the Kconfig Language\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4885001",
        "abstract": "<p>Artifact from “Finding Broken Linux Configuration Specifications by Statically Analyzing the Kconfig Language”</p>",
        "keywords": "formal verification, Kconfig, software configuration, static analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4888908": {
        "doi": "10.5281/zenodo.4888908",
        "author": "Sokolowski, Daniel and Weisenburger, Pascal and Salvaneschi, Guido",
        "title": "Automating Serverless Deployments for DevOps Organizations: Root Artifact",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4888908",
        "abstract": "<p>This artifact bundles all material supplementing:</p>\n<p>[1] Daniel Sokolowski, Pascal Weisenburger, and Guido Salvaneschi. 2021. Automating Serverless Deployments for DevOps Organizations. In Proceedings of the 29th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE ’21), August 23–28, 2021, Athens, Greece. ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/3468264.3468575</p>\n<ol type=\"1\">\n<li>Dependencies in DevOps Survey 2021</li>\n</ol>\n<p>https://doi.org/10.5281/zenodo.4873909 provides the dataset, a detailed report, and all analysis and content creation scripts for the contained technical report and all survey-related content in [1]. It supplements Section 2 in [1].</p>\n<ol start=\"2\" type=\"1\">\n<li>µs Infrastructure as Code</li>\n</ol>\n<p>https://doi.org/10.5281/zenodo.4902323 is the implementation of µs. It is reusable for IaC deployments and sets the base for future research on reactive IaC deployments. We suggest looking at the contained webpage example project and running it using the provided mjuz/mjuz Docker image. For this, follow the instructions in the README in the webpage’s subdirectory, showcasing an example setup using µs and plain Pulumi with both a centralized and a decentralized deployment. The “decentralized-mjuz” version uses the automated deployment coordination proposed in [1]. The Docker image is available on Docker Hub, but for long-term archiving, it is also included in this root artifact in mjuz-mjuz-docker-image.tar.zip. You can load and register it locally with the tags mjuz/mjuz:latest and mjuz/mjuz:1.0.0 by unzipping the file and running docker load -i mjuz-mjuz-docker-image.tar.</p>\n<p>The µs implementation uses – and its Docker image builds upon – the Pulumi for µs CLI: https://doi.org/10.5281/zenodo.4902319. Its demonstration is already covered by the µs artifact in the previous paragraph; still, we include it here for completeness. Its Docker image is available on Docker Hub, too, and included in this artifact in mjuz-pulumi-docker-image.tar.zip. You can load and register it locally with the tags mjuz/pulumi:latest and mjuz/pulumi:1.0.0 by unzipping the file and running docker load -i mjuz-pulumi-docker-image.tar.</p>\n<ol start=\"3\" type=\"1\">\n<li>µs Performance Evaluation</li>\n</ol>\n<p>http://doi.org/10.5281/zenodo.4902330 contains the materials used for the performance evaluation of µs in Subsection 8.2 in [1]. It includes the deployment definitions, the measurement scripts, the measured data, and the scripts to generate the paper’s plots from the data.</p>\n<ol start=\"4\" type=\"1\">\n<li>Pulumi TypeScript Projects using Stack References</li>\n</ol>\n<p>https://doi.org/10.5281/zenodo.4878577 is the dataset of public GitHub repositories that contain Pulumi TypeScript projects using stack references. It supplements Subsection 8.3 in [1].</p>\n<ol start=\"5\" type=\"1\">\n<li>Pulumi TypeScript Stack References to µs Converter</li>\n</ol>\n<p>https://doi.org/10.5281/zenodo.4902171 converts existing stack references and outputs in Pulumi TypeScript projects to µs remotes, wishes, and offers. It supplements Subsection 8.3 in [1], where it is applied to the Pulumi TypeScript Projects using Stack References dataset.</p>",
        "keywords": "DevOps, Infrastructure as Code, Software Dependencies, Software Engineering",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.4895186": {
        "doi": "10.5281/zenodo.4895186",
        "author": "Kahn, David M. and Hoffmann, Jan",
        "title": "Prototype Tool from Automatic Amortized Resource Analysis with the Quantum Physicist's Method",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4895186",
        "abstract": "<p>This is a QEmu image and source tarball for running the typechecker from “Automatic Amortized Resource Analysis with the Quantum Physicist’s Method”. The image comes with RaML and the Coin-Or LP solver pre-installed to recreate the experiments from the paper.</p>",
        "keywords": "AARA, amortized analysis, automatic amortized resource analysis, physicist's method, potential method, quantum physicist's method, RaML, resource, resource aware ml, type, type inference, typechecker",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4898774": {
        "doi": "10.5281/zenodo.4898774",
        "author": "Vierhauser, Michael and Islam, Md Nafee Al and Agrawal, Ankit and Cleland-Huang, Jane and Mason, James",
        "title": "Hazard Trees for Human-on-the-Loop Interactions in sUAS Systems",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4898774",
        "abstract": "<p>Traditional safety analysis for Cyber-Physical Systems in general, and for sUAS (small unmanned aerial systems) in particular, typically focuses on system-level hazards with little focus on user-related or user-induced hazards that can cause critical system failures. To address this issue, we have constructed domain-level safety analysis assets for sUAS applications following a rigorous process. In this process, we explicitly, and systematically identified Human Interaction Points (HiPs), Hazard Factors, and Mitigations from system hazards.</p>\n<p>We have created eight different hazard trees, each covering a specific aspect of sUAS safety: Collisions: Addresses hazards related to collisions between sUAS, other objects, and terrain. Communication: Addresses hazards related to the loss of communication with sUAS during flight. Hardware/Sensors: Addresses hazards related to sUAS hardware such as cameras used for object detection, GPS, parachutes, etc. Mission Awareness: Addresses hazards related to a mission executed by an sUAS, its mission status, and decision-making during a mission. Mission Planning: Addresses hazards related to mission planning - before the mission is executed, such as planning and assigning flight routes and sUAS task allocation. Preflight Configuration: Addresses hazards related to preflight configuration properties such as geofence settings, or launch parameters. Regulatory Compliance: Addresses hazards related to airspace, flight constraints, and regulations for operating sUAS in an airspace. Weather: Addresses hazards related to weather conditions, temperature, wind or reduced visibility due to adverse weather conditions.</p>",
        "keywords": "hazard analysis, Human-sUAS interaction, safety analysis, sUAS",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/SAREC-Lab/sUAS-UseCases/tree/FSE2021"
    },
    "10.5281/zenodo.4899710": {
        "doi": "10.5281/zenodo.4899710",
        "author": "Jiang, Yanjie and Liu, Hui and Zhang, Yuxia and Niu, Nan and Zhao, Yuhai and Zhang, Lu",
        "title": "Replication Package for smartExpander",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4899710",
        "abstract": "<p>SmartExpander is a tool to decide whether a given abbreviation needs to be expanded at all. The rationale of the approach is that abbreviations should not be expanded if the expansion would result in lengthy identifiers or if developers/maintainers can easily figure out the meaning of the abbreviations. Consequently, we design a sequence of heuristics according to the rationale to pick up such abbreviations that do not require expansion.</p>",
        "keywords": "Abbreviation, Cliques, Data Mining, Expansion, Software Quality",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/jiangyanjie/smartExpander/tree/v1.0"
    },
    "10.5281/zenodo.4899935": {
        "doi": "10.5281/zenodo.4899935",
        "author": "Vu, Duc-Ly and Massacci, Fabio and Pashchenko, Ivan and Plate, Henrik and Sabetta, Antonino",
        "title": "LastPyMile Replication Package",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4899935",
        "abstract": "<p>The artifact consists of several CSV files generated by LastPyMile and the existing security scanning tools (e.g., bandit and PyPI MalwareChecks) and a Jupyter notebook to reproduce the table of comparison between LastPyMile and the current tools (Table 11 in the paper).</p>",
        "keywords": "Open source software, PyPI, Python, software supply chain",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.4901843": {
        "doi": "10.5281/zenodo.4901843",
        "author": "Patra, Jibesh and Pradel, Michael",
        "title": "Source code package for 'Semantic Bug Seeding: A Learning-Based Approach for Creating Realistic Bugs'",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4901843",
        "abstract": "<p>The package contains source code and documentation that may be used to run experiments mentioned in the paper.</p>",
        "keywords": "bug injection, bugs, dataset, machine learning, token embeddings",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4902179": {
        "doi": "10.5281/zenodo.4902179",
        "author": "Luo, Yicheng and Filieri, Antonio and Zhou, Yuan",
        "title": "Replication Package for Paper: Symbolic Parallel Adaptive Importance Sampling for Probabilistic Program Analysis",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4902179",
        "abstract": "<p>Replication package and reference implementation for</p>\n<p>Yicheng Luo, Antonio Filieri, and Yuan Zhou. Symbolic Parallel Adaptive Importance Sampling for Probabilistic Program Analysis. In Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE 2021). arXiv:2010.05050.</p>",
        "keywords": "importance sampling, JAX, MCMC, probabilistic programming, symbolic execution",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/ethanluoyc/sympais/tree/v0.0.1"
    },
    "10.5281/zenodo.4902383": {
        "doi": "10.5281/zenodo.4902383",
        "author": "Su, Ting and Wang, Jue and Su, Zhendong",
        "title": "Replication Package for Article: Benchmarking Automated GUI Testing for Android against Real-World Bugs",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4902383",
        "abstract": "<p>Our artifact is named Themis. Themis is a collection of real-world, reproducible crash bugs (collected from open-source Android apps) and a unified, extensible infrastructure for benchmarking automated GUI testing for Android and beyond. Themis now contains 52 critical crash bugs and integrates six state-of-the-art/practice GUI testing tools.</p>",
        "keywords": "Android apps, Benchmarking, Crash bugs, GUI testing",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/the-themis-benchmarks/home/tree/v0.1"
    },
    "10.5281/zenodo.4902728": {
        "doi": "10.5281/zenodo.4902728",
        "author": "Zhang, Changjian and Wagner, Ryan and Orvalho, Pedro and Garlan, David and Manquinho, Vasco and Martins, Ruben and Kang, Eunsuk",
        "title": "Benchmark for Paper: AlloyMax: Bringing Maximum Satisfaction to Relational Specifications",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4902728",
        "abstract": "<p>This is the reproduction package of the benchmarks used in the work AlloyMax: Bringing Maximum Satisfaction to Relational Specifications. This package contains AlloyMax executable, the necessary libraries, the models used in the paper, and the scripts for running the benchmark.</p>",
        "keywords": "Alloy, MaxSAT, Model synthesis, Relational specifications, SAT",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/SteveZhangBit/alloy-maxsat-benchmark/tree/v1.0"
    },
    "10.5281/zenodo.4902806": {
        "doi": "10.5281/zenodo.4902806",
        "author": "Vasilakis, Nikos and Ntousakis, Grigoris and Heller, Veit and Rinard, Martin C.",
        "title": "Efficient Module-Level Dynamic Analysis for Dynamic Languages with Module Recontextualization (Lya Artifact)",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4902806",
        "abstract": "<p>Lya uses a novel set of module transformation techniques, collectively termed module recontextualization, to bolt a high-performance analysis and instrumentation infrastructure onto a conventional production runtime. Lya achieves high performance by analyzing code at a coarser-that-usual granularity, meaning that Lya’s analyses operate at a lower resolution than conventional analysis frameworks but at a significantly better performance—enabling always-on operation on production environments. Such coarse-grained, high-performance analyses have been shown to infer useful information about the execution of multi-library programs. Examples include identifying security vulnerabilities, highlighting performance bottlenecks, and applying corrective actions.</p>",
        "keywords": "Analysis, Dynamic, Instrumentation, Performance, Recontextualization, Runtime, Security",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4902828": {
        "doi": "10.5281/zenodo.4902828",
        "author": "Chen, Tianyi and Heo, Kihong and Raghothaman, Mukund",
        "title": "Boosting Static Analysis Accuracy With Instrumented Test Executions (Paper Artifact)",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4902828",
        "abstract": "<p>Artifact associated with the paper “Boosting Static Analysis Accuracy with Instrumented Test Executions”, recently accepted to FSE 2021.</p>",
        "keywords": "alarm ranking, Bayesian inference, belief networks, dynamic analysis, Static analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4959920": {
        "doi": "10.5281/zenodo.4959920",
        "author": "Kate, Sayali and Chinn, Michael and Choi, Hongjun and Zhang, Xiangyu and Elbaum, Sebastian",
        "title": "Artifact for \"PHYSFRAME: Type Checking Physical Frames of Reference for Robotic Systems\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4959920",
        "abstract": "<p><strong>Summary</strong></p>\n<p>PHYSFRAME is a static analysis tool for detecting reference frame inconsistencies and violations of common practices (i.e., implicit frame conventions) in C/C++ projects that build against the <a href=\"http://www.ros.org/\">Robot Operating System</a>. It requires nothing from the developers except running the tool on their project. The tool automatically models the project, and checks for problems.</p>\n<p><strong>Contents</strong></p>\n<p>This repository contains the following files and folders:</p>\n<ul>\n<li>README.md : This file.</li>\n<li>LICENSE.txt : BSD 2-Clause license.</li>\n<li>STATUS.txt : Describes the ACM artifact badges sought for this artifact.</li>\n<li>REQUIREMENTS.md : Describes the hardware and software requirements.</li>\n<li>INSTALL.txt : Describes how to install PHYSFRAME using Docker and a minimal working example.</li>\n<li>HOWTO.txt: Describes how to use PHYSFRAME with the provided data.</li>\n<li>HOWTO-WITH-SCRIPT.txt : Describes how to run scripts to evaluate PHYSFRAME with the provided data.</li>\n<li>untar_data.sh : Script to untar files in data/.</li>\n<li>evaluate_data.sh : Script to run PHYSFRAME on the provided data.</li>\n<li>evaluate_z-score.sh : Script to run PHYSFRAME on the provided data with z-score = 2, 5 or 10.</li>\n<li>Dockerfile : a Docker install file for PHYSFRAME.</li>\n<li>requirements.txt : List of python dependencies required by PHYSFRAME. Referenced by the Dockerfile.</li>\n<li>src/ : The python source code for PHYSFRAME, files containing implicit frame conventions.</li>\n<li>data/ : Dataset of C/C++ projects (downloaded from public GitHub repositories) used to evaluate PHYSFRAME.</li>\n<li>USER-GUIDE.txt : Helpful notes for user.</li>\n</ul>",
        "keywords": "Frame Consistency, Physical Frame of Reference, ROS, Static Analysis, Type Checking, z-score Mining",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.4968451": {
        "doi": "10.5281/zenodo.4968451",
        "author": "Houshmand, Farzin and Lesani, Mohsen and Vora, Keval",
        "title": "Artifact for article: \"Grafs: Declarative Graph Analytics\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4968451",
        "abstract": "<p>Grafs is a synthesizer that automatically generates graph analytics code for five graph processing frameworks: Ligra [Shun and Blelloch 2013], GridGraph [Zhu et al.&nbsp;2015], PowerGraph [Gonzalez et al.&nbsp;2012], Gemini [Zhu et al. 2016], and GraphIt [Zhang et al.&nbsp;2018]. The package already contains the runtime for the frameworks.</p>",
        "keywords": "Fusion, Graph Analytics, Synthesis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.4968705": {
        "doi": "10.5281/zenodo.4968705",
        "author": "Mathew, George and Stolee, Kathryn T.",
        "title": "Code and Data Repository for Article: Cross-Language Code Search using Static and Dynamic Analyses",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4968705",
        "abstract": "<p>Code repository with code for the COSAL tool which performs code search across Java and Python. COSAL uses static and dynamic similarity measures to identify similar code across languages. For static similarity, COSAL uses token based and AST based similarity while it uses Input-Output behavior of code for dynamic similarity.</p>",
        "keywords": "code-to-code search, cross-language code search, dynamic analysis, non-dominated sorting, static analysis",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/DynamicCodeSearch/COSAL/tree/1.0"
    },
    "10.5281/zenodo.4970239": {
        "doi": "10.5281/zenodo.4970239",
        "author": "B\\\"{o",
        "title": "Estimating Residual Risk in Greybox Fuzzing - Artifacts",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4970239",
        "abstract": "<p>We make publicly available the tool used to produce the data, the data used to validate the claims made in the paper, and the simulation+evaluation scripts to produce from the data the figures shown in the paper. In the context of our paper, we conducted several simulation studies and evaluated the performance of the classical and proposed estimators of residual risk in the presence of adaptive bias in greybox fuzzing.</p>\n<p>The data for the empirical evaluation were generated through fuzzing campaigns with a modified version of LibFuzzer. In this experimental setup, we establish ground truth for discovery probability to evaluate estimator performance with respect to the ground truth.</p>\n<p>The workbooks and source code for experimental setup are available at https://github.com/Adaptive-Bias/fse21_paper270.</p>",
        "keywords": "estimation, fuzzing, probability, software testing, statistics",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.4975033": {
        "doi": "10.5281/zenodo.4975033",
        "author": "Biswas, Sumon and Rajan, Hridesh",
        "title": "Replication Package for \"Fair Preprocessing: Towards Understanding Compositional Fairness of Data Transformers in Machine Learning Pipeline\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4975033",
        "abstract": "<p>The artifact contains the benchmark, source code and data used in our ESEC/FSE 2021 paper on “Fair Preprocessing”. The benchmark can be used by other researchers and practitioners to evaluate the fairness of real-world machine learning (ML) pipelines collected from Kaggle. In addition, we released our implementation of the novel metrics proposed to measure component level fairness in the pipelines. The artifact also contains five popular datasets used in fairness research.</p>",
        "keywords": "fairness, machine learning, models, pipeline, preprocessing",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/sumonbis/FairPreprocessing/tree/1.1"
    },
    "10.5281/zenodo.4988150": {
        "doi": "10.5281/zenodo.4988150",
        "author": "Kellogg, Martin and Shadab, Narges and Sridharan, Manu and Ernst, Michael D.",
        "title": "Artifact for \"Lightweight and Modular Resource Leak Verification\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4988150",
        "abstract": "<p>This upload is a docker image containing the artifact accompanying our ESEC/FSE’21 paper “Lightweight and Modular Resource Leak Verification”.</p>\n<p>To run the image,</p>\n<p>0.) Install Docker following the directions at [https://www.docker.com/get-started] for your OS, if it is not already installed. We have tested the artifact with Docker Desktop on MacOS, but it should work for other operating systems.</p>\n<p>1.) Unzip the provided Docker image. <code>gunzip -c path/to/resource-leak-checker.tar.gz &gt; resource-leak-checker.tar</code></p>\n<p>2.) Load it into Docker. <code>docker load &lt; resource-leak-checker.tar</code></p>\n<p>3.) Run the image. This should open a bash shell, at the home directory of user <code>fse</code>. <code>docker run -it msridhar/rlc:latest</code></p>\n<p>Instructions for how to run the paper’s experiments are inside the container in the <code>object-construction-checker/fse-2021/README.md</code> file in the <code>fse</code> user’s home directory.</p>",
        "keywords": "accumulation analysis, Pluggable type systems, resource leaks, static analysis, type- state analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5005829": {
        "doi": "10.5281/zenodo.5005829",
        "author": "Watanabe, Yasunari and Gopinathan, Kiran and P\\^{\\i",
        "title": "Certified SuSLik (ICFP 2021 Artifact): Code and Benchmarks",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5005829",
        "abstract": "<p>Artifact accompanying the the paper “Certifying the Synthesis of Heap-Manipulating Programs”, published in proceedings of ICFP 2021.</p>",
        "keywords": "Mechanized Proofs, Program Synthesis, Proof Assistants, Separation Logic",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/TyGuS/suslik/tree/icfp21-artifact"
    },
    "10.5281/zenodo.5035645": {
        "doi": "10.5281/zenodo.5035645",
        "author": "Koparkar, Chaitanya and Rainey, Mike and Vollmer, Michael and Kulkarni, Milind and Newton, Ryan R.",
        "title": "Artifact for \"Efficient Tree-Traversals: Reconciling Parallelism and Dense Data Representations\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5035645",
        "abstract": "<p>The artifact for our paper is the Gibbon compiler. Where the paper makes a distinction between “Parallel Gibbon” and “Sequential Gibbon”, here we will enable parallel execution by passing in command-line flags to the compiler, as the work presented in our paper was in fact an extension of work on the Gibbon project, but this was obscured by the double-blind requirement.</p>\n<p>Besides the compiler, this artifact includes the benchmarks presented in the paper, and some scripts to run them on your machine.</p>",
        "keywords": "compilers, data representation, parallelism",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5037493": {
        "doi": "10.5281/zenodo.5037493",
        "author": "Rocha, Pedro and Caires, Lu\\'{\\i",
        "title": "Propositions-as-Types and Shared State (Artifact)",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5037493",
        "abstract": "<p>This is the companion artifact for the <em>Propositions-as-Types and Shared State</em> (submission #97).</p>\n<p>The artifact consists of a proof-of-concept type-checker and an interpreter for the language described in the paper. The interpreter is a fully (fine grain) concurrent runtime system, using the java threads library.</p>\n<p>The artifact is distributed as a Debian QEmu image that bundles the source code, all its dependencies, the code examples from the paper and many other additional code examples and tests.</p>",
        "keywords": "Propositions-as-Types, Session Types, Shared State",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5043233": {
        "doi": "10.5281/zenodo.5043233",
        "author": "Yanovski, Joshua and Dang, Hoang-Hai and Jung, Ralf and Dreyer, Derek",
        "title": "GhostCell: Separating Permissions from Data in Rust (Artifact)",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5043233",
        "abstract": "<p>This contains a snapshot of the GhostCell development. More updated information can be found at http://plv.mpi-sws.org/rustbelt/ghostcell/.</p>\n<p>PAPER ABSTRACT</p>\n<p>The Rust language offers a promising approach to safe systems programming based on the principle of aliasing XOR mutability: a value may be either aliased or mutable, but not both at the same time. However, to implement pointer-based data structures with internal sharing, such as graphs or doubly-linked lists, we need to be able to mutate aliased state. To support such data structures, Rust provides a number of APIs that offer so-called interior mutability: the ability to mutate data via method calls on a shared reference. Unfortunately, the existing APIs sacrifice flexibility, concurrent access, and/or performance, in exchange for safety.</p>\n<p>In this paper, we propose a new Rust API called GhostCell which avoids such sacrifices by separating permissions from data: it enables the user to safely synchronize access to a collection of data via a single permission. GhostCell repurposes an old trick from typed functional programming: branded types (as exemplified by Haskell’s ST monad), which combine phantom types and rank-2 polymorphism to simulate a lightweight form of state-dependent types. We have formally proven the soundness of GhostCell by adapting and extending RustBelt, a semantic soundness proof for a representative subset of Rust, mechanized in Coq.</p>",
        "keywords": "Coq, Iris, Rust, RustBelt",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5054898": {
        "doi": "10.5281/zenodo.5054898",
        "author": "Birkedal, Lars and Dinsdale-Young, Thomas and Gu\\'{e",
        "title": "Theorems for Free from Separation Logic Specifications: ICFP'21 artifact",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5054898",
        "abstract": "<p>This artifact contains the Coq formalization associated with the paper “Theorems for Free from Separation Logic Specifications”. It provides both a zip archive containing the source files (free-theorems-sl-archive.zip) and a QEmu VM image (VM.zip) which has been setup with the required dependencies and the source files, and can be used to run Coq to check the proof scripts.</p>",
        "keywords": "coq, iris, linearizability, separation logic",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5060213": {
        "doi": "10.5281/zenodo.5060213",
        "author": "Stucki, Sandro and Giarrusso, Paolo G.",
        "title": "A Theory of Higher-Order Subtyping with Type Intervals — Agda Formalization",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5060213",
        "abstract": "<p>This artifact contains the mathematical proofs for the associated paper, formalized in the Agda proof assistant, both as a source archive, and as a virtual machine image containing the necessary dependencies to check the proofs.</p>",
        "keywords": "Agda, bounded polymorphism, bounded type operators, dependent kinds, hereditary substitution, higher-kinded types, Scala, singleton kinds, subtyping, type intervals, type safety",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5064045": {
        "doi": "10.5281/zenodo.5064045",
        "author": "M\\'{e",
        "title": "Formal Verification of a Concurrent Bounded Queue in a Weak Memory Model — proof artifact",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5064045",
        "abstract": "<p>This is the artifact that accompanies the paper “Formal Verification of a Concurrent Bounded Queue in a Weak Memory Model“, published at the ICFP 2021 conference.</p>\n<p>The artifact consists in a set of Coq proof scripts. A plain source code archive is provided, as well as a virtual machine in which all dependencies are already installed and the project already compiled.</p>\n<p>This project is developped in this git repository, which also contains the paper: https://gitlab.inria.fr/gmevel/cosmo</p>",
        "keywords": "concurrency, concurrent queue, Coq, program verification, separation logic, weak memory",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5081240": {
        "doi": "10.5281/zenodo.5081240",
        "author": "Zhang, Minjian and Mathur, Umang and Viswanathan, Mahesh",
        "title": "Replication of checking LTL[F,G,X] on compressed traces in polynomial time",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5081240",
        "abstract": "<p>The artifact contains all tools to reproduce the experiment result of the corresponding paper, which includes the algorithm introduced, manually encoded automata, graphs and formal descriptions of tested properties, and the compressed, uncompressed traces.</p>",
        "keywords": "Model checking, software engineering, verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/minjian233/LTLCompressed/tree/1"
    },
    "10.5281/zenodo.5084000": {
        "doi": "10.5281/zenodo.5084000",
        "author": "Song, Dowon and Lee, Woosuk and Oh, Hakjoo",
        "title": "Replication Package for Article: Context-Aware and Data-Driven Feedback Generation for Programming Assignments",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5084000",
        "abstract": "<p>It is an artifact to reproduce the experimental results of the paper “Context-Aware and Data-Driven Feedback Generation for Programming Assignments”. The artifact contains the codes, benchmarks, and python scripts to reproduce the results easily.</p>\n<p>The detailed description (e.g., Install, Usage) of the tool is available on the public repository: https://github.com/kupl/LearnML</p>",
        "keywords": "Program Repair, Program Synthesis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5084364": {
        "doi": "10.5281/zenodo.5084364",
        "author": "An, Gabin and Yoo, Shin",
        "title": "Replication Package for Article: Reducing the Search Space of Bug Inducing Commits using Failure Coverage",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5084364",
        "abstract": "<p>This artifact contains a replication package accompanying the paper “Reducing the Search Space of Bug Inducing Commits using Failure Coverage”. It contains the full experimental results and provides a docker environment in which one can easily replicate the whole experiment described in the paper. The detailed guide to replication is provided in the artifact’s README.md file. It also provides a script for analyzing the experimental results to support the reproduction of all result figures in the paper.</p>",
        "keywords": "Bug Inducing Commit, Code Coverage, Software Debugging, Test Coverage",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/coinse/FSE2021-IVR-BIC/tree/v1.0.0"
    },
    "10.5281/zenodo.5084655": {
        "doi": "10.5281/zenodo.5084655",
        "author": "Kuznetsov, Konstantin and Fu, Chen and Gao, Song and Jansen, David N. and Zhang, Lijun and Zeller, Andreas",
        "title": "Frontmatter dataset",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5084655",
        "abstract": "<p>This artifact represents the Frontmatter data set containing UI models (UI hierarchy and API calls) for about 160,000 Android applications, which was obtained with help of Frontmatter tool – a static analysis framework to automatically mine both user interface models and behavior of Android apps at a large scale with high precision. For apps that could not be processed the reason is given. The applications were downloaded from the AndroZoo repository.</p>",
        "keywords": "Android, App mining, app stores, static analysis, user interfaces",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.5086293": {
        "doi": "10.5281/zenodo.5086293",
        "author": "Pei, Kexin and Guan, Jonas and Broughton, Matthew and Chen, Zhongtian and Yao, Songchen and Williams-King, David and Ummadisetty, Vikas and Yang, Junfeng and Ray, Baishakhi and Jana, Suman",
        "title": "Code for Article: StateFormer: Fine-Grained Type Recovery from Binaries using Generative State Modeling",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5086293",
        "abstract": "<p>StateFormer is a tool that aims to recover source-level type information from stripped binary executable based on transfer learning. Inspired by how human analyzer reason about the program, we propose a pretraining task called Generative State Modeling (GSM) to teach an ML model assembly code operational semantics, and then transfer the learned knowledge for type inference. See our paper for details.</p>",
        "keywords": "Machine Learning for Program Analysis, Reverse Engineering, Transfer Learning, Type Inference",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/CUMLSec/stateformer/tree/v1.0"
    },
    "10.5281/zenodo.5088948": {
        "doi": "10.5281/zenodo.5088948",
        "author": "Hu, Yang and Wang, Wenxi and Hunger, Casen and Wood, Riley and Khurshid, Sarfraz and Tiwari, Mohit",
        "title": "Software tools for the paper - ACHyb: A Hybrid Analysis Approach to Detect Kernel Access Control Vulnerabilities",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5088948",
        "abstract": "<p>The artifact includes four software tools developed in our work: 1) a cve analysis tool to conduct our KACV study 2) a static analysis tool to detect potentially vulnerable paths, 3) a clustering-base seed distillation tool to generate high-quality seed programs, and 4) a kernel fuzzer to reduce false positives of the potential paths reported our static analysis tool. For each tool, we document setup procedures and usage, and provide the corresponding datasets.</p>",
        "keywords": "Access Control, Operating System, Program Analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/githubhuyang/achyb/tree/v1.0"
    },
    "10.5281/zenodo.5089077": {
        "doi": "10.5281/zenodo.5089077",
        "author": "Park, Joonyoung and Park, Jihyeok and Youn, Dongjun and Ryu, Sukyoung",
        "title": "Accelerating JavaScript Static Analysis via Dynamic Shortcuts (Artifact Evaluation)",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5089077",
        "abstract": "<p>We present dynamic shortcuts, a new technique to flexibly switch between abstract and concrete execution during JavaScript static analysis in a sound way. SAFEDS is the actual instance of dynamic shortcuts (DS) based on Jalangi2 in order to accelerate the static analyzer SAFE. It can significantly improve the analysis performance and precision by using highly-optimized commercial JavaScript engines (V8 in Node.js in our setting) and lessen the modeling efforts for opaque code. We apply our artifact for the Reusable badge and Artifacts Available badge. Our artifact provides the reproducible experimental environment, the full results of the experiments presented in the paper, and the commands of SAFEDS to analyze a new input program. A user can reproduce the experiments presented in the paper that is the comparison of analysis performances of SAFE and SAFEDS on Lodash4 tests. There are script files to juxtapose experimental results for each RQs with numbers in the paper. The README file on the root directory describes the above in detail. This package is forked from SAFE and imports Jalangi2 as a git submodule. The license of this package is under the BSD license. We added the option “ds” to the original SAFE to trigger dynamic shortcuts. When the option is turned on, SAFEDS communicates with the Node.js server in the dynamic-shortcut directory and the server runs Jalangi2 for dynamic analysis of functions in the target program on the concrete engine. The requirements of SAFEDS are inherited from SAFE and Jalangi2 and specified in the REQUIREMENTS file. The INSTALL file will guide to initialize the submodule, SAFE, and Jalangi2.</p>",
        "keywords": "dynamic analysis, dynamic shortcut, JavaScript, sealed execution, static analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/kaist-plrg/safe-ds/tree/v1.0.0"
    },
    "10.5281/zenodo.5089521": {
        "doi": "10.5281/zenodo.5089521",
        "author": "Zhu, Qihao and Sun, Zeyu and Xiao, Yuan-an and Zhang, Wenjie and Yuan, Kang and Xiong, Yingfei and Zhang, Lu",
        "title": "A Replication of \"A Syntax-Guided Edit Decoder for Neural Program Repair\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5089521",
        "abstract": "<p>A PyTorch Implementation of “A Syntax-Guided Edits Decoder for Neural Program Repair”</p>",
        "keywords": "Neural Network, Program Repair",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.5090536": {
        "doi": "10.5281/zenodo.5090536",
        "author": "Wang, Dinghua and Li, Shuqing and Xiao, Guanping and Liu, Yepang and Sui, Yulei",
        "title": "UAV bugs dataset and taxonomy",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5090536",
        "abstract": "<p>In our paper, we conducted a large-scale empirical study to characterize UAV-specific bugs in two open-source UAV platforms, namely PX4 and Ardupilot. We identified 168 UAV-specific bugs from 569 collected real bugs on GitHub. By analyzing these bugs (including bug reports, patches, and project development history), we proposed a taxonomy of UAV-specific bugs and summarized five challenges for detecting and fixing bugs in UAV systems. We believe that this study can facilitate future research and the development of UAV systems. Both UAV developers and users can receive useful guidance from our study.</p>\n<p>The link to our replication package is：https://doi.org/10.5281/zenodo.4898868</p>\n<p>This data set contains 569 real-world bugs, 168 UAV-specific bugs, and their taxonomy. Our replication package consists of two maim folders：bugSet and bugTaxonomy.</p>",
        "keywords": "Bug, Taxonomy, UAV",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.5091384": {
        "doi": "10.5281/zenodo.5091384",
        "author": "He, Hao and He, Runzhi and Gu, Haiqiao and Zhou, Minghui",
        "title": "Replication Package for ESEC/FSE 2021 Paper \"A Large-Scale Empirical Study of Java Library Migrations: Prevalence, Trends, and Rationales\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5091384",
        "abstract": "<p>This is the replication package for our ESEC/FSE 2021 paper A Large-Scale Empirical Study on Java Library Migrations: Prevalence, Trends, and Rationales. It can be used to replicate all three research questions in the paper using our preprocessed and manually labeled data. Please refer to this GitHub repository (https://github.com/hehao98/LibraryMigration) or the git repository archive (gitrepo.zip) in this package for detailed documentation about how to use this replication package.</p>\n<p>It consists of the following files:</p>\n<p>cache.zip: This file contains some most important datasets used in this paper, including the GitHub repositories and Maven libraries used, the set of all dependency changes, and the migration graph. Data related to thematic analysis can be found in the git repository. dbdata.tar.xz: This file contains the raw MongoDB data folder that will be used if you choose to install the required environment using Docker. dbdump.zip: This file contains the MongoDB data dump which will be used if you choose to manually install the required environment. gitrepo.zip: A git repository archive for the scripts, notebooks, and spreadsheets we used for this paper. Note that this archive may be somewhat older than the GitHub repository (https://github.com/hehao98/LibraryMigration). We recommend referring to the latest version at GitHub and only resort to this archive if the GitHub repository becomes unavailable in the unforeseeable future. We hope the provided scripts and dataset can be used to facilitate further research.</p>",
        "keywords": "empirical software engineering, evolution and maintenance, library migration, mining software repositories",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5091634": {
        "doi": "10.5281/zenodo.5091634",
        "author": "Zhang, Mingxue and Meng, Wei",
        "title": "zhangmx1997/fse21-jsisolate-artifact: JSIsolate version 1.1.0",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5091634",
        "abstract": "<p>The artefact contains the implementation of JSIsolate, as well as our analysis scripts. Detailed description can be found in the README file. Please refer to the supplementary material for the pre-built version of JSIsolate and the dataset we collected.</p>",
        "keywords": "JavaScript isolation, JSIsolate",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/zhangmx1997/fse21-jsisolate-artifact/tree/v1.1.0"
    },
    "10.5281/zenodo.5092307": {
        "doi": "10.5281/zenodo.5092307",
        "author": "Rahaman, Sydur and Neamtiu, Iulian and Yin, Xin",
        "title": "Replication package for article: Algebraic-Datatype Taint Tracking, with Applications to Understanding Android Identifier Leaks",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5092307",
        "abstract": "<p>Given a list of sources, this TaintTracker tool produces algebric leak signatures of the sources and also categorize the leak as third party or own code leak.</p>\n<p>CFG-Generator.jar (extension of Amandroid) will generate CFG (Control Flow Graph) given an apk</p>\n<p>App_Wise_Signature.py will create the leak signature given the CFG file as text input</p>",
        "keywords": "android, fingerprinting, identifier leak, mobile security, static analysis, taint analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/sujon335/AlgebraicDatatypeTaintTracker/tree/1.0"
    },
    "10.5281/zenodo.5092777": {
        "doi": "10.5281/zenodo.5092777",
        "author": "Li, Song and Kang, Mingqing and Hou, Jianwei and Cao, Yinzhi",
        "title": "ObjLupAnsys",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5092777",
        "abstract": "<p>ObjLupAnsys is a tool to detect prototype pollution vulnerabilities in Node.js packages. This project is written in Python and JavaScript.</p>",
        "keywords": "ESEC, FSE, NodeJS, ObjLupAnsys, prototype pollution, Vulnerability",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/Song-Li/ObjLupAnsys/tree/1.0"
    },
    "10.5281/zenodo.5094851": {
        "doi": "10.5281/zenodo.5094851",
        "author": "Chowdhary, Sangeeta and Nagarakatte, Santosh",
        "title": "PFPSanitizer - A Parallel Shadow Execution Tool for Debugging Numerical Errors",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5094851",
        "abstract": "<p>This is the artifact for the FSE 2021 paper - Parallel Shadow Execution to Accelerate the Debugging of Numerical Errors appearing at FSE 2021. This artifact provides the link to the source code and step-by-step instructions to reproduce the performance graphs and case study from the accepted paper. We also provide the test harness to evaluate the correctness of our tool. In this artifact, we provide the scripts and instructions required to execute the different parts of the experiment automatically.</p>",
        "keywords": "FPSanitizer, numerical errors, parallel execution, PFPSanitizer",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5103655": {
        "doi": "10.5281/zenodo.5103655",
        "author": "Paraskevopoulou, Zoe and Li, John M. and Appel, Andrew W.",
        "title": "Source code and Proof Mechanization for the Article: Compositional Optimizations for CertiCoq",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5103655",
        "abstract": "<p>The source code of the CertiCoq compiler, containing the formally verified λANF pipeline, which is presented in this article</p>",
        "keywords": "compilers, compositional compiler correctness, Coq, formal verification, logical relations",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5109043": {
        "doi": "10.5281/zenodo.5109043",
        "author": "Shen, Qingchao and Ma, Haoyang and Chen, Junjie and Tian, Yongqiang and Cheung, Shing-Chi and Chen, Xiang",
        "title": "Replication Package for Article: \"A Comprehensive Study of Deep Learning Compiler Bugs\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5109043",
        "abstract": "<p>This artifact has two components: the labeled dataset in our empirical study and our bug detection tool TVMFuzz. Folder named dataset includes the basic information of 603 bugs collected from GitHub by authors. Folder name TVMfuzz is a tool designed by us to fuzz the TVM, one of the most widely-used deep learning compilers. More details can be seen in README.md or https://github.com/ShenQingchao/DLCstudy</p>",
        "keywords": "DL Compiler Bugs, TVMFuzz",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/ShenQingchao/DLCstudy/tree/Artifact"
    },
    "10.5281/zenodo.5109338": {
        "doi": "10.5281/zenodo.5109338",
        "author": "Wang, Bo and Baluta, Teodora and Kolluri, Aashish and Saxena, Prateek",
        "title": "SynGuar: Guaranteeing Generalization in Programming by Example (Artifact)",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5109338",
        "abstract": "<p>This is the artifact accompanying the paper SynGuar: Guaranteeing Generalization in Programming by Example accepted by the conference ESEC/FSE 2021. It is a framework for PBE synthesizers that guarantees to achieve low generalization error with high probability. It contains a tool named SynGuar that dynamically calculates how many additional examples suffice to theoretically guarantee generalization. It also contains two string program synthesizers StrPROSE and StrSTUN to show how SynGuar can be used in well-known program synthesis approaches such as the PROSE framework and STUN (synthesis through unification).</p>",
        "keywords": "Program Synthesis, Programming by Example",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5109867": {
        "doi": "10.5281/zenodo.5109867",
        "author": "Bittner, Paul Maximilian and Schulthei\\ss{",
        "title": "Library and Demo for Article: Feature Trace Recording",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5109867",
        "abstract": "<p>The artefact mainly consists of a library written in the Haskell language that implements feature trace recording. The library is accompanied with a demo application that uses the library to reproduce our motivating example (Alice and Bob using feature trace recording in Section 2 in our paper) as well as examples of the edit patterns we used to evaluate feature trace recording (Section 5).</p>",
        "keywords": "clone-and-own, feature location, feature traceability, software evolution, software product lines, variability mining",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/pmbittner/FeatureTraceRecording/tree/ArtefactCameraReady"
    },
    "10.5281/zenodo.5110878": {
        "doi": "10.5281/zenodo.5110878",
        "author": "Winkler, Jordan and Agarwal, Abhimanyu and Tung, Caleb and Ugalde, Dario Rios and Jung, Young Jin and Davis, James C.",
        "title": "Replication Package for A Replication of ‘DeepBugs: A Learning Approach to Name-based Bug Detection’",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5110878",
        "abstract": "<p>Replication process, source code, and longer technical report for this paper.</p>",
        "keywords": "deep learnining, Defect detection, machine learning, replication",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/PurdueDualityLab/deepbugs-jr/tree/v1.1"
    },
    "10.5281/zenodo.5111183": {
        "doi": "10.5281/zenodo.5111183",
        "author": "Wang, Xiao and Xiao, Lu and Yu, Tingting and Woepse, Anne and Wong, Sunny",
        "title": "JMocker: An Automatic Refactoring Framework for ReplacingTest-Production Inheritance by Mocking Mechanism",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5111183",
        "abstract": "<p>JMocker is an Eclipse plugin for automatically identifying and refactoring the usage of inheritance for mocking by using Mockito-a well received mocking framework. The refactoring performed by JMocker can improve the quality of the unit test cases in various aspects, including improving the cohesion/concise, readability/understandability, and maintainability of unit test cases.</p>",
        "keywords": "Software Refactoring, Software Testing",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/wx930910/JMocker/tree/v1.0.2"
    },
    "10.5281/zenodo.5111494": {
        "doi": "10.5281/zenodo.5111494",
        "author": "Bhandari, Guru and Naseer, Amara and Moonen, Leon",
        "title": "CVEfixes: Automated Collection of Vulnerabilities and Their Fixes from Open-Source Software",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5111494",
        "abstract": "<p>CVEfixes is a comprehensive vulnerability dataset that is automatically collected and curated from Common Vulnerabilities and Exposures (CVE) records in the public U.S. National Vulnerability Database (NVD). The goal is to support data-driven security research based on source code and source code metrics related to fixes for CVEs in the NVD by providing detailed information at different interlinked levels of abstraction, such as the commit-, file-, and method level, as well as the repository- and CVE level.</p>\n<p>This repository includes the code to replicate the data collection. The complete process has been documented in the paper “CVEfixes: Automated Collection of Vulnerabilities and Their Fixes from Open-Source Software”, published at PROMISE 2021.</p>",
        "keywords": "dataset, security vulnerabilities, software repository mining, source code repair, vulnerability classification, vulnerability prediction",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/secureIT-project/CVEfixes"
    },
    "10.5281/zenodo.5111541": {
        "doi": "10.5281/zenodo.5111541",
        "author": "Zhang, Wuqi and Wei, Lili and Li, Shuqing and Liu, Yepang and Cheung, Shing-Chi",
        "title": "Implementation of the Detection Tool: \\DH{",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5111541",
        "abstract": "<p>undefinedArcher is an automated testing framework aiming to test on-chain-off-chain synchronization bugs in decentralized applications (DApps). A detailed introduction to undefinedArcher can be found in the README.md file inside the artifact.</p>",
        "keywords": "dapp, ethereum, testing, testing-framework, testing-tools",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/Troublor/darcher/tree/v1.0.1"
    },
    "10.5281/zenodo.5111654": {
        "doi": "10.5281/zenodo.5111654",
        "author": "Shen, Bo and Zhang, Wei and K\\\"{a",
        "title": "Artifact for Article: SmartCommit: A Graph-Based Interactive Assistant for Activity-Oriented Commits",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5111654",
        "abstract": "<p>This artifact is the core algorithm of SmartCommit—an assistant tool to lead and help developers follow the best practice of cohesive commits, which is advocated by many companies (like Google and Facebook) and open source communities (like Git and Angular). A cohesive commit should specifically focus on a development or maintenance activity, such as feature addition, bugfix or refactoring. Cohesive commits form a clear change history that facilitates software maintenance and team collaboration. To help the developer make cohesive commits, SmartCommit can suggest a decomposition (groups of related and self-contained code changes) to the code changes, and allows the developer to interactively adjust the suggested decomposition, until it reaches a state that the developer feels reasonable to submit code change groups as commits.</p>",
        "keywords": "changes decomposition, code commit, collaboration in software development, revision control system",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/Symbolk/SmartCommitCore/tree/fse21-artifact-2021-07-15"
    },
    "10.5281/zenodo.5112878": {
        "doi": "10.5281/zenodo.5112878",
        "author": "Lukes, Dylan and Sarracino, John and Coleman, Cora and Peleg, Hila and Lerner, Sorin and Polikarpova, Nadia",
        "title": "Replication package for FSE '21, Synthesis of Web Layouts from Examples",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5112878",
        "abstract": "<p>Contains all code, experiments, and data, as well as instructions for installation, usage and replication of our experiments.</p>\n<p>This package contains:</p>\n<p>In ./implementation:</p>\n<ul>\n<li>mockdown, Our main tool, written in Python.</li>\n<li>mockdown-client, A JavaScript client for mockdown, intended for use in writing benchmarks, or integrating mockdown into web applications. Used by auto-mock.</li>\n<li>auto-mock (placed in implementation/web), Evaluation for the web backend (RQ1-RQ3).</li>\n<li>inferui-eval (placed in implementation/android), Evaluation for the Android backend (RQ4).</li>\n<li>flightlessbird.js, A fork of the kiwi.js constraint solver, with some bug fixes and changes to facilitate adding multiple constraints at once. Used by mockdown-client.</li>\n</ul>\n<p>In ./layouts, there is a variety of JSON files. These correspond to our scraped websites (input data).</p>\n<p>In ./experiments/, there is the data and scripts for our experiments:</p>\n<ul>\n<li>overall, CSV files and Excel spreadsheets for our RQ1 trials.</li>\n<li>noise, CSV files and plotting scripts for our RQ2 trials. There are two subfolders, 3/ and 10/ which correspond to the 3 and 10 training examples.</li>\n<li>scaling, a CSV file, Excel spreadsheet, and helper python script for RQ3.</li>\n<li>android, a CSV file for RQ4.</li>\n</ul>",
        "keywords": "cassowary, constraint-based layout, constraints, layout, linear constraints, program synthesis, synthesis",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/MangoTeam/replication-package/tree/fse-2021-v5"
    },
    "10.5281/zenodo.5090141": {
        "doi": "10.5281/zenodo.5090141",
        "author": "Dura, Alexandru and Reichenbach, Christoph and S\\\"{o",
        "title": "Replication Package for Article: 'JavaDL: Automatically Incrementalizing Java Bug Pattern Detection'",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5090141",
        "abstract": "<p>The artifact contains the implementation of the JavaDL language and the evaluation setup that reproduces the claims regarding: - the precision of the JavaDL analyses relative to state-of-the-practice tools; - the performance comparison between JavaDL and state-of-the-practice tools.</p>",
        "keywords": "Datalog, Software Bugs, Static Analysis Frameworks, Syntactic Patterns",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5091711": {
        "doi": "10.5281/zenodo.5091711",
        "author": "Roth, Ori",
        "title": "Treetop: A Context-Free Fluent API Generator for C#",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5091711",
        "abstract": "<p>Treetop is a proof-of-concept C# fluent API generator for context-free protocols. Treetop accepts a context-free grammar, specifying an API protocol or a domain-specific language, and embeds it in C# as a fluent API. The resulting API enforces the grammar at compile-time: A fluent API chain may compile if and only if it encodes a word derived from the grammar.</p>",
        "keywords": "context-free grammars, domain-specific languages, fluent API, nominal subtyping with variance",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5093839": {
        "doi": "10.5281/zenodo.5093839",
        "author": "Herklotz, Yann and Pollard, James D. and Ramanathan, Nadesh and Wickerson, John",
        "title": "Vericert",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5093839",
        "abstract": "<p>A formally verified high-level synthesis (HLS) tool written in Coq, building on top of CompCert. The implementation and proofs are described in the paper “Formal Verification of High-Level Synthesis”.</p>",
        "keywords": "C, CompCert, Coq, high-level synthesis, Verilog",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/ymherklotz/vericert/tree/v1.2.1"
    },
    "10.5281/zenodo.5130646": {
        "doi": "10.5281/zenodo.5130646",
        "author": "Zhou, Zhe and Dickerson, Robert and Delaware, Benjamin and Jagannathan, Suresh",
        "title": "OOPSLA2021 Artifact: Data-Driven Abductive Inference of Library Specifications",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5130646",
        "abstract": "<p>OOPSLA2021 Artifact: Data-Driven Abductive Inference of Library Specifications</p>",
        "keywords": "data-driven inference, oopsla, specifications, verification",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5139390": {
        "doi": "10.5281/zenodo.5139390",
        "author": "Park, Jiwon and Winterer, Dominik and Zhang, Chengyu and Su, Zhendong",
        "title": "OOPSLA 2021 Artifact for \"Generative Type-Aware Mutation for Testing SMT Solvers\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5139390",
        "abstract": "<p>Software artifact for the paper Generative Type-Aware Mutation for Testing SMT Solvers, in a VirtualBox image. The artifact is realized as a single VirtualBox image of three main components: (1) yinyang, the tool which we created and extended, and in which we integrated TypeFuzz. TypeFuzz realizes generative type-aware mutation to find all reported bugs in the paper, (2) A database with statistics on the bugs and Coverage data.</p>",
        "keywords": "SMT solving\nFuzzing\nFormal methods",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5141479": {
        "doi": "10.5281/zenodo.5141479",
        "author": "Phipps-Costin, Luna and Anderson, Carolyn Jane and Greenberg, Michael and Guha, Arjun",
        "title": "TypeWhich",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5141479",
        "abstract": "<p>See Zenodo for a description of the artifact.</p>",
        "keywords": "typed, untyped",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5394235": {
        "doi": "10.5281/zenodo.5394235",
        "author": "Goel, Aviral and Je\\v{c",
        "title": "Replication Package for Article: \"Promises Are Made to Be Broken: Migrating R to Strict Semantics\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5394235",
        "abstract": "<p>The artifact is a ZIP file containing code that analyzes R packages to migrate them from lazy to strict semantics. Details can be found in the README.pdf file accompanying the artifact.</p>",
        "keywords": "Code Migration, Corpus Analysis, Delayed Or Lazy Evaluation, Empirical Study, R Language",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5400508": {
        "doi": "10.5281/zenodo.5400508",
        "author": "Malewski, Stefan and Greenberg, Michael and Tanter, \\'{E",
        "title": "Gradually Structured Data: Typechecker and Interpreter",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5400508",
        "abstract": "<p>GSD is an interpreter for a gradually typed language with Gradually Structured Data.</p>\n<p>It’s main features are the following: - It can typecheck and evaluate programs with different levels of datatype definitions. From no definitions at all (for dynamic programs) to fully defined static programs, and the levels in between those two extremes. - It works with three different matching strategies: sound, exact and complete.</p>",
        "keywords": "algebraic datatypes, gradual typing, semi-structured data",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5411667": {
        "doi": "10.5281/zenodo.5411667",
        "author": "Chaliasos, Stefanos and Sotiropoulos, Thodoris and Drosos, Georgios-Petros and Mitropoulos, Charalambos and Mitropoulos, Dimitris and Spinellis, Diomidis",
        "title": "Replication Package for Article: \"Well-Typed Programs Can Go Wrong: A Study of Typing-Related Bugs in JVM Compilers\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5411667",
        "abstract": "<p>The purpose of this artifact is (1) to reproduce the results presented in the OOPSLA 2021 paper titled “Well-Typed Programs Can Go Wrong: A Study of Typing-Related Bugs in JVM Compilers”, and (2) to document the dataset and the proposed categorization in order to facilitate further research. Specifically, the artifact has the following structure:</p>\n<ul>\n<li><p><code>scripts/</code>: This is the directory that contains the scripts needed to reproduce the results, the figures, and the tables presented in the paper.</p></li>\n<li><p><code>scripts/fetch/</code>: This is the directory that contains the scripts needed to construct the dataset of typing-related bugs as described in Section 2.1 of the main paper.</p></li>\n<li><p><code>data/</code>: This is the “pre-baked” dataset of the 320 typing-related bugs under study.</p></li>\n</ul>",
        "keywords": "bug, compiler, Groovy, Java, Kotlin, Scala, static typing, study, testing",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5415230": {
        "doi": "10.5281/zenodo.5415230",
        "author": "Goel, Aviral and Donat-Bouillud, Pierre and K\\v{r",
        "title": "Replication Package for Article: \"What We Eval in the Shadows: A Large-Scale Study of Eval in R Programs\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5415230",
        "abstract": "<p>The artifact is a ZIP file containing code that performs dynamic analysis of R programs to study the use of eval. The insights yielded by this analysis are reported in the OOPSLA’21 paper - What We Eval in the Shadows: A Large-Scale Study of Eval in R Programs. The details can be found in the README.pdf file accompanying the artifact.</p>",
        "keywords": "Dynamic Analysis, Empirical Studies, Eval, R, Scripting Languages",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/PRL-PRG/evalr-experiment/tree/oopsla21-artifact"
    },
    "10.5281/zenodo.5415274": {
        "doi": "10.5281/zenodo.5415274",
        "author": "Br\\\"{a",
        "title": "Artifact of the paper \"Rich Specifications for Ethereum Smart Contract Verification\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5415274",
        "abstract": "<p>This is the artifact accompanying the OOPSLA 2021 paper “Rich Specifications for Ethereum Smart Contract Verification”.</p>\n<p>The artifact comes in the form of a VirtualBox VM image (2vyper-artifact.ova) and contains the paper’s implementation in the tool 2vyper as well as the benchmarks used in the evaluation. Instructions for running the VM image and using the artifact can be found in the README.</p>",
        "keywords": "Ethereum, resources, smart contracts, software verification, specification",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5421762": {
        "doi": "10.5281/zenodo.5421762",
        "author": "Ishimwe, Didier and Nguyen, KimHao and Nguyen, ThanhVu",
        "title": "Software Artifact for the OOPSLA'21 Paper Titled \"Dynaplex: Analyzing Program Complexity using Dynamically Inferred Recurrence Relations\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5421762",
        "abstract": "<p>This artifact contains an implementation of the dynaplex algorithm and benchmark programs, as described in the paper: <em>Dynaplex: Analyzing Program Complexity using Dynamically Inferred Recurrence Relations</em>.</p>\n<p>The development and experiment environment is provided as a single Docker image at <code>unsatx/dynaplex:oopsla21</code>. In addition to the image a <code>Dockerfile</code> as well as a zip containing the github repository are also provided as alternative source of the artifact. We recommend using the provided Docker image as it is self-contained with all the dependencies installed. A guide to set up and use this artifact from the docker image is provided in file <code>dynaplex.pdf</code>.</p>",
        "keywords": "complexity analysis, dynamic analysis, invariants, recurrence relations",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5424844": {
        "doi": "10.5281/zenodo.5424844",
        "author": "Brown, Michael D. and Pruett, Matthew and Bigelow, Robert and Mururu, Girish and Pande, Santosh",
        "title": "Artifact Package for Article: Not So Fast: Understanding and Mitigating Negative Impacts of Compiler Optimizations on Code Reuse Gadget Sets",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5424844",
        "abstract": "<p>Virtual Machine containing technical artifacts referenced in the article. Includes dataset of over 1000 binaries, recompiler passes, and evaluation tool (GSA).</p>",
        "keywords": "binary recompilation, code reuse attacks, code reuse gadgets, compiler, optimization, recompiler, return-oriented programming, ROP",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5442253": {
        "doi": "10.5281/zenodo.5442253",
        "author": "Emre, Mehmet and Schroeder, Ryan and Dewey, Kyle and Hardekopf, Ben",
        "title": "Artifact for \"Translating C to Safer Rust\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5442253",
        "abstract": "<p>The purpose of the artifact is to reproduce the data presented in the paper. The artifact contains our prototype for the method presented in the paper along with evaluation tools and scripts. It can be used to reproduce the data in all tables except the performance data. It contains instructions for how to produce the data used for Figure 1, but the artifact does not generate the figure automatically (the user needs to use a spreadsheet or plotting program to create the figure from the data).</p>",
        "keywords": "Automatic Translation, C, Empirical Study, Memory-Safety, Rust",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5449078": {
        "doi": "10.5281/zenodo.5449078",
        "author": "Kazerounian, Milod and Foster, Jeffrey S. and Min, Bonan",
        "title": "Replication Package for Paper \"SimTyper: Sound Type Inference for Ruby using Type Equality Prediction\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5449078",
        "abstract": "<p>This artifact can be used to reproduce the results presented in the paper “SimTyper: Sound Type Inference for Ruby using Type Equality Prediction.” It includes the type inference system SimTyper, and the eight programs which it is run on to produce results.</p>",
        "keywords": "dynamic languages, machine learning, ruby, type inference",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5459013": {
        "doi": "10.5281/zenodo.5459013",
        "author": "Ferdowsifard, Kasra and Barke, Shraddha and Peleg, Hila and Lerner, Sorin and Polikarpova, Nadia",
        "title": "VM Image containing software for: LooPy: Interactive Program Synthesis with Control Structures",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5459013",
        "abstract": "<p>This artifact is a VM image intended to be used with VirtualBox, which contains the source code and setup for building/running Loopy, including scripts for running the benchmarks and the GUI.</p>",
        "keywords": "Live Programming, Program Synthesis, Programming by Example",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.5459312": {
        "doi": "10.5281/zenodo.5459312",
        "author": "Nandi, Chandrakana and Willsey, Max and Zhu, Amy and Wang, Yisu Remy and Saiki, Brett and Anderson, Adam and Schulz, Adriana and Grossman, Dan and Tatlock, Zachary",
        "title": "Artifact for article: &nbsp;Rewrite Rule Inference Using Equality Saturation",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5459312",
        "abstract": "<p>This is the artifact for our paper “Rewrite Rule Inference Using Equality Saturation”. In our paper, we presented a framework, Ruler, that uses equality saturation to automatically infer small, expressive rulesets for a domain, given an interpreter. The artifact reproduces the following quantitative evaluations from the paper:</p>\n<ul>\n<li><p>Comparing with CVC4 (Section 4): We show that Ruler can infer smaller, powerful rulesets faster by comparing the rules inferred for bool, bv4, and bv32 with varying expression sizes (2, 3). The results are in Table 1.</p></li>\n<li><p>Integrating with Herbie (Section 5): We show that Ruler’s rules can be used to replace human-written rules by comparing the Herbie tool’s results in fours different configurations: <code>None</code>, <code>Herbie</code>, <code>Ruler</code>, <code>Both</code>. The results are in Figure 7.</p></li>\n<li><p>Search Parameter Analysis (Section 6.1): We profiled Ruler’s search algorithm to measure how much time is spent in each phase. Figure 8 shows the results for bv4, bv32, and rationals domains. We also compared different variations of <code>choose_eqs</code> by varying n in Figure 5, Line 3, whose default value is infinity. The results are shown in Figure 9a for bv4, bv32, and rationals. Importantly, we measure both running time and the number of rules learned. We also measured running time, number of rules learned, and number of e-classes in the egraph with and without invoking <code>run_rewrites</code> (Figure 4, Line 9) to study its effect. The results are shown in Figure 9b for bv4, bv32, and rationals.</p></li>\n<li><p>Validation Analysis (Section 6.2): We compared different rule validation methods for bv4, bv32, and rationals. The results are shown in Table 2.</p></li>\n</ul>",
        "keywords": "e-graphs, equality saturation, program synthesis, rewrite rules",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5468873": {
        "doi": "10.5281/zenodo.5468873",
        "author": "Iorga, Dan and Donaldson, Alastair F. and Sorensen, Tyler and Wickerson, John",
        "title": "The semantics of Shared Memory in Intel CPU/FPGA",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5468873",
        "abstract": "<p>The aim of this artefact is to demonstrate the claims made in the paper “The Semantics of Shared Memory in Intel CPU/FPGA Systems”.</p>\n<p>This manual is divided into two parts:&nbsp;Getting Started Guide&nbsp;which should be finished in 30 minutes and a section where we will provide the&nbsp;Step by Step Instructions&nbsp;by which the paper instructions can be reproduced.</p>",
        "keywords": "Core Cache Interface (CCI-P), CPU/FPGA, memory model",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5475211": {
        "doi": "10.5281/zenodo.5475211",
        "author": "Bartha, S\\'{a",
        "title": "Case studies for the paper: \"One Down, 699 to Go: or, Synthesising Compositional Desugarings\".",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5475211",
        "abstract": "<p>Case studies to synthesise compositional translations (desugarings), based on opaque implementations of source and target languages. The description of the case studies and its results are reported in the paper: “One Down, 699 to Go: or, Synthesising Compositional Desugarings”, S\\'{a",
        "keywords": "Haskell, Program synthesis, Semantics of programming languages",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.5476274": {
        "doi": "10.5281/zenodo.5476274",
        "author": "Honor\\'{e",
        "title": "Artifact for \"Much ADO about Failures: A Fault-Aware Model for Compositional Verification of Strongly Consistent Distributed Systems\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5476274",
        "abstract": "<p>This artifact includes the Coq source files for the Advert distributed system verification framework as well as the examples from the paper, a C implementation of multi-Paxos verified with CCAL, and the C source code for the multi-Paxos, Chain Replication, and Two-Phase Commit protocols used for the performance evaluations. Source files are included in artifact.tgz. See the README for build instructions.</p>",
        "keywords": "Coq, distributed systems, formal verification, proof assistants",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5482251": {
        "doi": "10.5281/zenodo.5482251",
        "author": "Xu, Haoran and Kjolstad, Fredrik",
        "title": "Artifact for Paper \"Copy-and-Patch Compilation: A fast compilation algorithm for high-level languages and bytecode\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5482251",
        "abstract": "<p>This is the artifact corresponding to paper</p>\n<pre><code>Copy-and-Patch Compilation: A fast compilation algorithm for high-level languages and bytecode</code></pre>\n<p>to be published in OOPSLA 2021.</p>\n<p>This artifact is judged by the Artifact Evaluation Committee as functional and reusable.</p>\n<p>List of Files</p>\n<pre><code> 'instruction.pdf' contains all instructions on how to use this artifact.\n 'artifact_vm_image.ova' is the Virtual Box VM image containing the artifact.\n 'artifact_vm_image.ova.md5sum' is the MD5 checksum for file 'artifact_vm_image.ova'.\n 'draft_paper.pdf' is the paper referred to by 'instruction.pdf'. It is NOT the camera-ready version of the paper:  for camera-ready version, please check the OOPSLA 2021 publication website. This draft version is included only for consistency of this artifact.\n 'LICENSE.txt' is the license of this artifact.</code></pre>\n<p>How to Use this Artifact</p>\n<p>Please refer to ‘instruction.pdf’ for all instructions on how to use this artifact.</p>",
        "keywords": "Artifact",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5482557": {
        "doi": "10.5281/zenodo.5482557",
        "author": "Wolff, Fabian and B\\'{\\i",
        "title": "Modular Specification and Verification of Closures in Rust (artefact)",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5482557",
        "abstract": "<p>This is the artefact accompanying our OOPSLA 2021 publication, “Modular Specification and Verification of Closures in Rust”. Please refer to the OOPSLA publication and the contained README file for more information.</p>",
        "keywords": "closures, higher-order functions, Rust, software verification",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5483138": {
        "doi": "10.5281/zenodo.5483138",
        "author": "Lanzinger, Florian and Weigl, Alexander and Ulbrich, Mattias and Dietl, Werner",
        "title": "Property Checker -- Scalability and Precision by Combining Expressive Type Systems and Deductive Verification",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5483138",
        "abstract": "<p>The Property Checker is a checker developed using the Checker Framework for Java. The Checker Framework allows programmers to leverage Java annotations to create pluggable Java type systems. Unlike other checkers in the CF, the Property Checker allows users to specify their own type qualifiers and qualifier hierarchies using a simple definition language.</p>\n<p>If the Property Checker is not able to completely prove a program’s correctness, it outputs a JML translation, in which all property qualifiers are translated into specification clauses in the Java Modeling Language (JML). This translation can be given to a deductive verification tool like KeY or OpenJML to prove the parts of the program which the checker was not able to prove. This approach combines the scalability and easy-of-use of pluggable type system with the power of deductive verification.</p>\n<p>This artifact includes the Property Checker itself and the JML deductive verification tools KeY and OpenJML. The example project in the directory property-checker-tutorial illustrates how the Property Checker can be run on your own projects; see that project’s readme for details. See this file for information on how to run KeY and OpenJML. In addition, there are some premade bash scripts to help you re-run the evaluation described in the paper; see the artifact documentation for more details.</p>",
        "keywords": "Object-oriented languages, Program specification, Program verification, Type systems",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5484436": {
        "doi": "10.5281/zenodo.5484436",
        "author": "Popescu, Natalie and Xu, Ziyang and Apostolakis, Sotiris and August, David I. and Levy, Amit",
        "title": "Artifact for 'Safer at Any Speed: Automatic Context-Aware Safety Enhancement for Rust'",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5484436",
        "abstract": "<p>This artifact is responsible for reproducing the experiments in the article “Safer at Any Speed: Automatic Context-Aware Safety Enhancement for Rust”. We populate a docker image with the open-source libraries, applications, and application-specific data that we eventually use for running experiments, as well as a driver and supporting scripts that instantiates each experiment. The experiments help support the claims we make in the paper.</p>",
        "keywords": "bounds checks, Rust, safety-performance trade-off",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5491895": {
        "doi": "10.5281/zenodo.5491895",
        "author": "Tan, Tian and Li, Yue and Ma, Xiaoxing and Xu, Chang and Smaragdakis, Yannis",
        "title": "Making Pointer Analysis More Precise by Unleashing the Power of Selective Context Sensitivity (Artifact)",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5491895",
        "abstract": "<p>This artifact is provided to reproduce the results of research questions (RQ1 and RQ2) in Section 6 of our companion paper. The artifact contains Baton (our tool, as well as Collection, Zipper-e and Scaler which are used by Baton), Doop (a state-of-the-art pointer analysis framework for Java), and the Java programs and the library used in our evaluation.</p>",
        "keywords": "Alias Analysis, Context Sensitivity, Java, Pointer Analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5493554": {
        "doi": "10.5281/zenodo.5493554",
        "author": "Yan, Pengbo and Murray, Toby",
        "title": "SecRSL: Security Separation Logic for C11 Release-Acquire Concurrency - Coq Formalisation",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5493554",
        "abstract": "<p>Formalisation, soundness proof, and example applications of SecRSL: Security Relaxed Separation Logic, a logic for reasoning about information flow security of programs in the Release-Acquire fragment of C11.</p>\n<p>Includes the Coq sources (for Coq version 8.8.1) as well as a Ubuntu Linux virtual machine in which the theories and the required Coq version are already installed.</p>\n<p>See README for instructions; LICENSE for licensing information.</p>\n<p>This artifact accompanies the paper: Pengbo Yan and Toby Murray, “SecRSL: Security Separation Logic for C11 Release-Acquire Concurrency”, OOPSLA 2021</p>",
        "keywords": "Axiomatic Semantics, Information-flow Security, Separation Logic, Weak Memory Consistency",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5494504": {
        "doi": "10.5281/zenodo.5494504",
        "author": "Yamaguchi, Masaomi and Matsuda, Kazutaka and David, Cristina and Wang, Meng",
        "title": "Synbit: Synthesizing Bidirectional Programs using Unidirectional Sketches (Implementation)",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5494504",
        "abstract": "<p>This is the artifact of a paper “Synbit: Synthesizing Bidirectional Programs using Unidirectional Sketches”. This artifact includes the implementation of Synbit and scripts for reproducing the experiments in the paper.</p>",
        "keywords": "Bidirectional Transformation, Program Synthesis",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5494813": {
        "doi": "10.5281/zenodo.5494813",
        "author": "Smaragdakis, Yannis and Grech, Neville and Lagouvardos, Sifis and Triantafyllou, Konstantinos and Tsatiris, Ilias",
        "title": "Symbolic Value-Flow Static Analysis: Deep, Precise, Complete Modeling of Ethereum Smart Contracts (Artifact)",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5494813",
        "abstract": "<p>This artifact can be used to support all claims made in the evaluation section of the corresponding paper. In particular it can be used to reproduce the results of the Controlled Evaluation Section of the paper (Section 7). These examples require running 3 analysis tools: our proposed Symvalic analysis, Manticore, and Mythril on two sets of smart contracts.</p>",
        "keywords": "ethereum, EVM, static analysis, symbolic execution",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5496104": {
        "doi": "10.5281/zenodo.5496104",
        "author": "Patel, Nisarg and Krishna, Siddharth and Shasha, Dennis and Wies, Thomas",
        "title": "Replication Package for Article: Verifying Concurrent Multicopy Search Structures",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5496104",
        "abstract": "<p>Artifact for OOPSLA’21 paper: Verifying Concurrent Multicopy Search Structures</p>\n<p>The artifact is packaged as a VirtualBox Image based on Ubuntu 20.04.2. The login is <code>templates:templates</code>.</p>\n<p>This artifact relies on two tools: Iris (a high-order concurrent separation logic built on top of Coq) and GRASShopper (a program verification tool). The artifact is packaged with these software preinstalled and the necessary files precompiled.</p>\n<p>See README for further information on how to use the artifact. See LICENSE for the license-related information.</p>",
        "keywords": "concurrent data structures, flow framework, log-structured merge trees, logic and verification, separation logic, shared memory algorithms, template-based verification, theory of computation",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5496483": {
        "doi": "10.5281/zenodo.5496483",
        "author": "Lahav, Ori and Namakonov, Egor and Oberhauser, Jonas and Podkopaev, Anton and Vafeiadis, Viktor",
        "title": "Making Weak Memory Models Fair: OOPSLA 2021 artifact",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5496483",
        "abstract": "<p>This artifact provides the supplementary Coq development for the Making Weak Memory Models Fair paper from OOPSLA’21: source code and VirtualBox image.</p>",
        "keywords": "concurrency, fairness, software verification, weak memory models",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/weakmemory/fairness/releases/tag/v1.0"
    },
    "10.5281/zenodo.5497628": {
        "doi": "10.5281/zenodo.5497628",
        "author": "Fu, Weili and Krause, Fabian and Thiemann, Peter",
        "title": "Artifact for Label Dependent Lambda Calculus and Gradual Typing",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5497628",
        "abstract": "<p>This artifact contains two parts corresponding to our claim at the end of section 1 in the paper “Label Dependent Lambda Calculus and Gradual Typing” appearing in OOPSLA 2021.</p>\n<ol type=\"1\">\n<li>An implementation of the type checker for LDLC corresponding to section 3.2 from the paper and its gradual extension for GLDLC described in section 5.1. It does <em>not</em> contain the translation described in section 5.2.</li>\n<li>A formalization of the cast calculus CCLDLC (a proper extension of LDLC) described in section 4 and an implementation of the progress proof of theorem 4.6 in Agda.</li>\n</ol>",
        "keywords": "dependent types, gradual types, subtyping",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5497756": {
        "doi": "10.5281/zenodo.5497756",
        "author": "Soethout, Tim and van der Storm, Tijs and Vinju, Jurgen J.",
        "title": "TimSoethout/cbc-artifacts: Artifacts for AGERE'21 paper \"Contract-Based Return-Value Commutativity: Safely exploiting contract-based commutativity for faster serializable transactions\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5497756",
        "abstract": "<h2 id=\"artifacts-accompanying-paper-contract-based-return-value-commutativity-safely-exploiting-contract-based-commutativity-for-faster-serializable-transactions\">Artifacts accompanying paper: Contract-Based Return-Value Commutativity: Safely exploiting contract-based commutativity for faster serializable transactions</h2>\n<h3 id=\"tla-models\">TLA+ models</h3>\n<p>Containing:</p>\n<ul>\n<li>RV-SER</li>\n<li>LoCA with CBC/SCBC</li>\n<li>2PL/2PC</li>\n</ul>\n<p>Please see <code>Readme.adoc</code> in the <code>tla</code> directory for more specifics.</p>\n<h3 id=\"smt-static-cbc\">SMT Static CBC</h3>\n<p>In the <code>SCBC</code> folder you find multiple Rascal modules. The <code>rebel-cbc</code> module contains the SCBC checks using SMT solver Z3.</p>\n<p>Tested/Run with:</p>\n<ul>\n<li>Rascal Version: 0.18.2 (https://update.rascal-mpl.org/stable)</li>\n<li>Z3 version 4.8.8 - 64 bit</li>\n</ul>\n<h4 id=\"overview\">Overview</h4>\n<p>The Rascal source code can be run using Eclipse with the Rascal plugin.</p>\n<p>This folder contains an Eclipse workspace containing all the modules required to run the Analysis.</p>\n<pre><code>rebel-core: Rebel DSL core\nrebel-eclipse: Rebel DSL tooling to use in Eclipse\nrebel-cbc: The analysis tool\nsmtlib2: Grammar and tools to output SMTLIB constraints</code></pre>\n<h4 id=\"run-the-cbc-analysis\">Run the CBC analysis</h4>\n<p>In order to run this, you require Eclipse (https://www.eclipse.org/) and Z3 (https://github.com/Z3Prover/z3/wiki). Z3 can be installed on Mac OSX via homebrew (brew cask install z3).</p>\n<p>To reproduce the results from the paper, do the following steps:</p>\n<pre><code>Open all projects in the `SCBC` folder in Eclipse.\n\nOpen the Rascal REPL in Eclipse by right clicking on source file: |project://rebel-cbc/src/cbc/tests/CbcTests.rsc| and selecting Run as &gt; Rascal Application.\n\nAfter loading type/copy: `analyse(verySimple, scoRetvalAndPostStateAssert, scoRetvalAndPostStateAssert);`. The tool will return the SCBC table as done in the paper.</code></pre>",
        "keywords": "Rascal, TLA+",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/TimSoethout/cbc-artifacts/tree/paper"
    },
    "10.5281/zenodo.5497862": {
        "doi": "10.5281/zenodo.5497862",
        "author": "Karachalias, Georgios and Koprivec, Filip and Pretnar, Matija and Schrijvers, Tom",
        "title": "Compiler and replication of results: \"Efficient Compilation of Algebraic Effect Handlers\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5497862",
        "abstract": "<p>Artifact consists of Dockerfile, instructions document and compressed docker image. The docker image includes Eff compiler presented in the paper, benchmark files and a helper scripts to run the benchmarks and produce both human readable benchmark outputs and data used to generate plots in the paper. Full instructions on building and use are available in the documentation in pdf or markdown format.</p>",
        "keywords": "Algebraic effects, Compilers, Eff, Focus on specific PL, Handlers, Transformations, Types",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5499720": {
        "doi": "10.5281/zenodo.5499720",
        "author": "Ji, Ruyi and Xia, Jingtao and Xiong, Yingfei and Hu, Zhenjiang",
        "title": "Artifact for OOPSLA'21: Generalizable Synthesis Through Unification",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5499720",
        "abstract": "<p>Artifact for OOPSLA’21: Generalizable Synthesis Through Unification</p>",
        "keywords": "generalizability, programming by example",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.5500548": {
        "doi": "10.5281/zenodo.5500548",
        "author": "Pelenitsyn, Artem and Belyakova, Julia and Chung, Benjamin and Tate, Ross and Vitek, Jan",
        "title": "Type Stability in Julia: Avoiding Performance Pathologies in JIT Compilation (Artifact)",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5500548",
        "abstract": "<p>This artifact aims to give exact directions on how to reproduce experiments reported in Section 5 (Empirical Study) of the Type Stability in Julia paper presented at OOPSLA ’21; in particular: Tables 1 and 2, Figure 11.</p>\n<p>The artifact consists of a number of scripts in Bash and Julia and have instructional comments inside. We submit the Git history of the project: the submitted version lives on the artifact branch. The same repository is available on Github (prl-julia/julia-type-stability).</p>",
        "keywords": "compilation, dynamic languages, method dispatch, type inference",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/prl-julia/julia-type-stability"
    },
    "10.5281/zenodo.5501522": {
        "doi": "10.5281/zenodo.5501522",
        "author": "Sorensen, Tyler and Salvador, Lucas F. and Raval, Harmit and Evrard, Hugues and Wickerson, John and Martonosi, Margaret and Donaldson, Alastair F.",
        "title": "Artifact for \"Specifying and Testing GPU Workgroup Progress Models\" (OOPSLA 2021)",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5501522",
        "abstract": "<p>A collection of software and data from the OOPSLA 2021 paper: Specifying and Testing GPU Workgroup Progress Models. It is provided as a docker container with as many pre-installed dependencies as possible.</p>\n<p>Software includes: formal specifications for the CADP model checker; formal specifications for synthesizing progress litmus tests; a compiler from xml litmus tests to a variety of GPU backends, including Metal, CUDA, and Vulkan.</p>\n<p>Data includes all of the test cases found after running the test case synthesis for 5 weeks. It includes running the progress litmus tests in 3 different configurations across 8 different GPUs. It also includes the results of running the progress litmus tests under various formal semi-fair models in the CADP model checker.</p>",
        "keywords": "forward progress, GPGPU, model checking, test case synthesis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5501650": {
        "doi": "10.5281/zenodo.5501650",
        "author": "Jaber, Nouraldin and Wagner, Christopher and Jacobs, Swen and Kulkarni, Milind and Samanta, Roopsha",
        "title": "QuickSilver",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5501650",
        "abstract": "<p>This artifact contains a VirtualBox VM that can be used to replicate the results in “QuickSilver: Modeling and Parameterized Verification for Distributed Agreement-Based Systems”. It includes the source code of the QuickSilver tool.</p>",
        "keywords": "modular verification., parameterized verification, QuickSilver",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5502210": {
        "doi": "10.5281/zenodo.5502210",
        "author": "Gokhale, Satyajit and Turcotte, Alexi and Tip, Frank",
        "title": "Automatic Migration from Synchronous to Asynchronous JavaScript APIs (Artifact)",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5502210",
        "abstract": "<p>This artifact contains information on setting up and evaluating the results for Desynchronizer, a tool for automatic refactoring of Synchronous Javascript API to their Asynchronous equivalents. The entire source code for the tool is also included.</p>",
        "keywords": "async/await, JavaScript, promises, refactoring, static analysis",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5502310": {
        "doi": "10.5281/zenodo.5502310",
        "author": "Moreira, Ang\\'{e",
        "title": "OOPSLA Artifact of paper VESPA: Static Profiling for Binary Optimization",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5502310",
        "abstract": "<p>This artifact contains the VESPA tool as described in the paper, as well as scripts to reproduce the experiments mentioned in each of the research questions. Everything is packaged in a Docker image. Be aware that we have observed that database management systems and their benchmarks do not work properly inside a docker container, thus you may have not see the same behaviour for performance improvements, but you should observe the same behaviour for correlation and I-Cache misses that you read in the paper.</p>",
        "keywords": "Compiler, Optimization, Prediction, Profiling",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.5504155": {
        "doi": "10.5281/zenodo.5504155",
        "author": "Paraskevopoulou, Zoe and Grover, Anvay",
        "title": "Accompanying Coq Development for the OOPLSA'21 Paper: Compiling With Continuations, Correctly.",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5504155",
        "abstract": "<p>This artifact is the source code of the CertiCoq project, part of which is the proved correct continuation-passing style transformation covered in the OOPSLA’21 paper “Compiling With Continuations Correctly”.</p>",
        "keywords": "continuation-passing style, Coq, formal verification, logical relations, simulation relations, verified compilation",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5504159": {
        "doi": "10.5281/zenodo.5504159",
        "author": "Atkinson, Eric and Baudart, Guillaume and Mandel, Louis and Yuan, Charles and Carbin, Michael",
        "title": "Statically Bounded-Memory Delayed Sampling for Probabilistic Streams",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5504159",
        "abstract": "<p>This artifact accompanies the paper “Statically Bounded-Memory Delayed Sampling for Probabilistic Streams” from OOPSLA 2021. It contains the code of the implementation and benchmarks, as well as a virtual machine that can be used to run the implementation.</p>",
        "keywords": "Probabilistic programming, program analysis, reactive programming, semantics, streaming inference",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5504362": {
        "doi": "10.5281/zenodo.5504362",
        "author": "Verbruggen, Gust and Le, Vu and Gulwani, Sumit",
        "title": "Replication Package for Article: \"Semantic programming by example with pre-trained models\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5504362",
        "abstract": "<p>This archive contains the code for our paper “Semantic programming by example with pre-trained models”. It contains the code and data required to execute the experiments, as well as cached GPT-3 output in case no key is available.</p>",
        "keywords": "flashfill, gpt-3, programming by example",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5507442": {
        "doi": "10.5281/zenodo.5507442",
        "author": "Barbar, Mohamad and Sui, Yulei",
        "title": "Compacting Points-To Sets through Object Clustering (Artifact)",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5507442",
        "abstract": "<p>Artifact packaged as a Docker image for reproducing the evaluation of “Compacting Points-To Sets Through Object Clustering” by Mohamad Barbar and Yulei Sui published at OOPSLA ’21.</p>",
        "keywords": "bit-vectors, hierarchical clustering., points-to sets, staged points-to analysis",
        "badges": [
            "available",
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5510036": {
        "doi": "10.5281/zenodo.5510036",
        "author": "De Porre, Kevin and Ferreira, Carla and Pregui\\c{c",
        "title": "Artifact for: ECROs: Building Global Scale Systems from Sequential Code",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5510036",
        "abstract": "<p>Complete software artifact for our submission “ECROs: Building Global Scale Systems from Sequential Code” by De Porre K., Ferreira C., Pregui\\c{c",
        "keywords": "data structures, eventual consistency, replication",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5518181": {
        "doi": "10.5281/zenodo.5518181",
        "author": "Muehlboeck, Fabian and Tate, Ross",
        "title": "Transitioning from Structural to Nominal Code with Efficient Gradual Typing: Artifact",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5518181",
        "abstract": "<p>This is the software artifact for the OOPSLA 2021 paper “Transitioning from Structural to Nominal Code with Efficient Gradual Typing”.</p>\n<p>It contains the source code for MonNom, the setup to reproduce all benchmark results shown in the paper, and the data for the plots presented in the paper. The artifact is a virtual machine where everything is already compiled and set up to run the benchmarks. For up-to-date source code, please check https://github.com/fabianmuehlboeck/monnom/tree/release/oopsla21 . The password for the user of the virtual machine is “monnom”. The artifact was packaged with Oracle VirtualBox 6.1.22 .</p>",
        "keywords": "Gradual Typing, MonNom",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5519606": {
        "doi": "10.5281/zenodo.5519606",
        "author": "He, Paul and Westbrook, Eddy and Carmer, Brent and Phifer, Chris and Robert, Valentin and Smeltzer, Karl and \\c{S",
        "title": "Artifact: A Type System for Extracting Functional Specifications from Memory-Safe Imperative Programs",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5519606",
        "abstract": "<p>The artifact is a docker image which contains the Coq formalization of the metatheory presented in the paper, as well as the source code for the Heapster tool described in the paper. The example code that the Heapster tool is included along with the source code.</p>",
        "keywords": "memory safety, pointers, Specification extraction, type systems",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5530883": {
        "doi": "10.5281/zenodo.5530883",
        "author": "Biswas, Ranadeep and Kakwani, Diptanshu and Vedurada, Jyothi and Enea, Constantin and Lal, Akash",
        "title": "Replication Package for Article: MonkeyDB: Effectively Testing Correctness under Weak Isolation Levels",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5530883",
        "abstract": "<p>The artifact includes an implementation of the tool reported in the paper and the benchmark used for the experimental evaluation.</p>",
        "keywords": "Applications of Storage Systems, Testing, Transactional Databases, Weak Isolation Levels",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/rnbguy/oopsla21artifact/tree/snapshot-20210927"
    },
    "10.5281/zenodo.5534113": {
        "doi": "10.5281/zenodo.5534113",
        "author": "Verano Merino, Mauricio and Beckmann, Tom and van der Storm, Tijs and Hirschfeld, Robert and Vinju, Jurgen J.",
        "title": "Skogi",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5534113",
        "abstract": "<p>S/Kogi is an extension of Kog that implements some simplification rules of context-free grammars as described in the SLE paper Getting Grammars into Shape for Block-based Editors. This tool allows users to derive block-based environments from a context-free grammar specification. S/Kogi uses on Google Blockly for rendering block-based environments, and Squeak/Smalltalk</p>",
        "keywords": "app inventor, blockly, grammars, kogi, language workbench, rascal, scratch, smalltalk, snap",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/maveme/skogi/tree/0.1.0"
    },
    "10.5281/zenodo.5544353": {
        "doi": "10.5281/zenodo.5544353",
        "author": "Hlad, Nicolas and Lemoine, B\\'{e",
        "title": "Original Data and AOC-Poset from Article : Leveraging Relational Concept Analysis for Automated Feature Location in Software Product Lines",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5544353",
        "abstract": "<p>This file contains the data we use to perform the experiment described in our article. This data can be reused to verify the results of our extraction algorithms.</p>\n<p>The content of the folder is described in a README</p>",
        "keywords": "Case Studies, experiment, feature location, formal context, formal context analysis",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.5572916": {
        "doi": "10.5281/zenodo.5572916",
        "author": "Leroy, Dorian and Lelandais, Beno\\^{\\i",
        "title": "Artifact for Article: Monilogging for Executabel DSLs",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5572916",
        "abstract": "<p>The artifact is a Vagrant script building a VM that runs NabLab with MoniLog, allowing to instrument the execution of NabLab models with moniloggers. The resulting VM provides a NabLab workspace with 6 MoniLog specifications illustrating the different ways MoniLog can be used to perform logging and monitoring.</p>",
        "keywords": "executable DSLs, logging, runtime monitoring",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5573543": {
        "doi": "10.5281/zenodo.5573543",
        "author": "Yedidia, Zachary and Chong, Stephen",
        "title": "Artifact for Fast Incremental PEG Parsing",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5573543",
        "abstract": "<p>This artifact contains the source code for our GPeg incremental parser, the Flare syntax highlighting engine, an example text editor that uses both libraries, and our benchmarks and experiments from the paper, along with scripts to auto-generate the figures.</p>",
        "keywords": "incremental parsing, packrat parsing, parsing expression grammars",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5549765": {
        "doi": "10.5281/zenodo.5549765",
        "author": "Madiot, Jean-Marie and Pottier, Fran\\c{c",
        "title": "A Separation Logic for Heap Space under Garbage Collection - Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5549765",
        "abstract": "<p>This is the artifact corresponding to the article entitled A Separation Logic for Heap Space under Garbage Collection, and its associated documentation.</p>",
        "keywords": "live data, program verification, separation logic, tracing garbage collection",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5550765": {
        "doi": "10.5281/zenodo.5550765",
        "author": "Kokologiannakis, Michalis and Marmanis, Iason and Gladstein, Vladimir and Vafeiadis, Viktor",
        "title": "Replication Package for \"Truly Stateless, Optimal Dynamic Partial Order Reduction\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5550765",
        "abstract": "<p>We consider our paper’s artifact to be the included version of TruSt, as well as the results we got by running the various tools on our benchmarks set. We stress that the results obtained for the same benchmarks by TruSt in the future might differ, as the tool will evolve.</p>\n<p>We have made TruSt publicly available as part of GenMC: https://github.com/MPI-SWS/genmc. For any bugs, comments, or feedback regarding TruSt, please do not hesitate to contact us.</p>",
        "keywords": "Dynamic Partial Order Reduction, Model Checking, Weak Memory Models",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5553753": {
        "doi": "10.5281/zenodo.5553753",
        "author": "Wang, Yuting and Zhang, Ling and Shao, Zhong and Koenig, J\\'{e",
        "title": "Artifact: Verified Compilation of C Programs with a Nominal Memory Model",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5553753",
        "abstract": "<p>This is the artifact for the POPL 2022 paper “Verified Compilation of C Programs with a Nominal Memory Model”.</p>\n<p>The artifact is a VM image in .ova format. We have tested the VM in VirtualBox 6.1.26 running on a host linux machine with 64-bit Ubuntu LTS 20.04. The source code can be found in the directory ‘/home/authors/nominal-compcert-popl22-artifact’. Follow the ‘READM.md’ file to evaluate the artifact. You can also open the README file with Firefox browser for improved readability.</p>\n<p>If you prefer to compile from the source code on your local machine (Linux or Mac), please find the source code at the following address:</p>\n<p>https://github.com/SJTU-PLV/nominal-compcert-popl22-artifact</p>\n<p>The prerequisites are the same as for CompCert. You need to setup Coq 8.12, install necessary software (e.g., menhir), and run the configuration and make files in each directory as follows:</p>\n<p>./configure x86_64-linux make</p>\n<p>See CompCert’s user manual for more details.</p>",
        "keywords": "Memory Models, Nominal Techniques, Verified Compilation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5553759": {
        "doi": "10.5281/zenodo.5553759",
        "author": "Li, Yuanbo and Satya, Kris and Zhang, Qirun",
        "title": "Implementation for \"Efficient Algorithms for Dynamic Bidirected Dyck-Reachability\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5553759",
        "abstract": "<p>The artifact includes the implementation for the algorithm proposed in the paper “Efficient Algorithms for Dynamic Bidirected Dyck-Reachability”. It also include the necessary componenet of DDlog Data solver for the evaluation.</p>\n<p>The artifact contains two main parts: The DynDyck implementation and the DDlog tool. We implement the dynamic Dyck-reachability algorithm for bidirected graphs in the directory <code>/root/popl_2022/dynamic</code>. The <code>/root/popl_2022/ddlog</code> directory contains the DDlog tool. The <code>/root/popl_2022/benchmark</code> directory contains the two benchmarks evaluated in our experiments.</p>",
        "keywords": "bidirected graphs, Dyck-reachability, Dynamic graph algorithms, incremental analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5568850": {
        "doi": "10.5281/zenodo.5568850",
        "author": "Blanvillain, Olivier and Brachth\\\"{a",
        "title": "Type-Level Programming with Match Types Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5568850",
        "abstract": "<p>This VM contains everything necessary to run the supplementary material of the “Type-Level Programming with Match Types” paper. To run this VM in VirtualBox:</p>\n<ol type=\"1\">\n<li>Install Oracle VM VirtualBox (see instructions: Downloads – Oracle VM VirtualBox)</li>\n<li>Click on the .ova file to import it into VirtualBox</li>\n<li>Start the VM, then open the README.md file on the desktop for further instructions</li>\n</ol>",
        "keywords": "Match Types, Scala",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5576388": {
        "doi": "10.5281/zenodo.5576388",
        "author": "Yuan, Charles and McNally, Christopher and Carbin, Michael",
        "title": "Artifact for Article: Twist: Sound Reasoning for Purity and Entanglement in Quantum Programs",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5576388",
        "abstract": "<p>This artifact supports the POPL’22 paper “Twist: Sound Reasoning for Purity and Entanglement in Quantum Programs” by Charles Yuan, Chris McNally, and Michael Carbin.</p>\n<p>The artifact contains necessary materials to reproduce the evaluation of the paper, including sources of the interpreter for the Twist language, benchmark programs, and scripts to execute the evaluation.</p>",
        "keywords": "entanglement, purity, quantum programming, type systems",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5576679": {
        "doi": "10.5281/zenodo.5576679",
        "author": "Lim, Jay P. and Nagarakatte, Santosh",
        "title": "RLIBM-ALL: One Polynomial Approximation to Produce Correctly Rounded Results of an Elementary Function for Multiple Representations and Rounding Modes",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5576679",
        "abstract": "<p>We present the artifact for the accepted paper, One Polynomial Approximation to Produce Correctly Rounded Results of an Elementary Function for Multiple Representations and Rounding Modes. We describe the list of claims made by the paper, the installation instructions, and evaluation instructions. To ease the installation effort, we provide a docker image with all required softwares installed already. Additionally, we provide complete instructions to manually install the artifact on Ubuntu 20.04.</p>",
        "keywords": "Correctly Rounded Elementary Functions, RLIBM, RLIBM-ALL, Round-to-odd",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5586354": {
        "doi": "10.5281/zenodo.5586354",
        "author": "Hirsch, Andrew K. and Garg, Deepak",
        "title": "Coq Code for 'Pirouette: Higher-Order Typed Functional Choreographies'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5586354",
        "abstract": "<p>Coq code describing Pirouette, a higher-order typed functional choreography language. Contains code for all constructions in the paper along with formal proofs of every theorem in the paper. Pirouette is defined with reference to a local language, which can be given as a module.</p>",
        "keywords": "choreographies, concurrent programming, coq, formal proofs, Functional languages",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5598485": {
        "doi": "10.5281/zenodo.5598485",
        "author": "Tan, Bryan and Mariano, Benjamin and Lahiri, Shuvendu K. and Dillig, Isil and Feng, Yu",
        "title": "Replication Package for for SolType: Refinement Types for Arithmetic Overflow in Solidity",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5598485",
        "abstract": "<p>A collection of scripts and benchmarks for (partially) reproducing the results of the SolType evaluation.</p>",
        "keywords": "automated verification, integer overflow, refinement type inference, smart contracts",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/Technius/soltype-artifact-public/tree/rev-5"
    },
    "10.5281/zenodo.5604551": {
        "doi": "10.5281/zenodo.5604551",
        "author": "Liu, Amanda and Bernstein, Gilbert Louis and Chlipala, Adam and Ragan-Kelley, Jonathan",
        "title": "Verified Scheduling Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5604551",
        "abstract": "<p>This artifact contains a virtual machine containing the source code and dependencies for building our Coq framework and running the tests and benchmarks as described in our accompanying paper. It also includes a README containing documentation and instructions for building and running components of this artifact.</p>",
        "keywords": "Coq, formal verification, Halide, image processing, optimization, proof assistants",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5628699": {
        "doi": "10.5281/zenodo.5628699",
        "author": "Ikebuchi, Mirai and Erbsen, Andres and Chlipala, Adam",
        "title": "Code Artifact for Certifying Derivation of State Machines from Coroutines",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5628699",
        "abstract": "<p>This artifact is for the paper “Certifying Derivation of State Machines from Coroutines” to appear at POPL 2022.</p>\n<p>The code tarball includes our Coq development, the TLS case study, and supporting infrastructure for running extracted code using dependencies implemented in Haskell. The Virtual machine image also contains all dependencies for development and evaluation.</p>",
        "keywords": "coroutines, cryptographic protocols, interaction trees, nested state machines, program derivation, proof assistants",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5652106": {
        "doi": "10.5281/zenodo.5652106",
        "author": "Ye, Qianchuan and Delaware, Benjamin",
        "title": "Oblivious Algebraic Data Types: POPL22 Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5652106",
        "abstract": "<p>This artifact holds the Coq formalization of Oblivious Algebraic Data Types, a language for writing secure computation with recursive data types whose structures are protected. More specifically, it formalizes the two core calculi, λOADT and λOADT✚, from the POPL22 paper Oblivious Algebraic Data Types, and proves their soundness and obliviousness.</p>\n<p>This artifact contains 3 files:</p>\n<ul>\n<li><p>oadt-pure-popl22.zip: λOADT formalization. It is a snapshot of tag pure-popl22 (commit b34546f).</p></li>\n<li><p>oadt-tape-popl22.zip: λOADT✚ formalization. It is a snapshot of tag tape-popl22 (commit 32d8fc4).</p></li>\n<li><p>oadt-popl22.ova: virtual machine image.</p></li>\n</ul>",
        "keywords": "algebraic data types, coq, dependent types, multiparty computation, oblivious computation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5652640": {
        "doi": "10.5281/zenodo.5652640",
        "author": "Jeon, Minseok and Oh, Hakjoo",
        "title": "Return of CFA: Call-Site Sensitivity Can Be Superior to Object Sensitivity Even for Object-Oriented Programs",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5652640",
        "abstract": "<p>This artifact aims to reproduce the results in Table 2~6, which experimentally show that call-site sensitivity is more precise than existing state-of-the-art object sensitivities. POPL_2022_paper586.ova is a bootable VirtualBox image with all of the necessary libraries installed. ArtifactManual.pdf provides instructions to check whether the artifact is installed correctly (Section 1). Section 2 presents how to reproduce the results in our paper. Section 3 illustrates how to analyze other programs with our artifact and how to analyze a program with a user-defined tunneling abstraction.</p>",
        "keywords": "Context sensitivity, Machine learning for program analysis, Pointer analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5655530": {
        "doi": "10.5281/zenodo.5655530",
        "author": "Heunen, Chris and Kaarsgaard, Robin",
        "title": "Artifact for 'Quantum Information Effects'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5655530",
        "abstract": "<p>This is an implementation of the languages UPi, UPi_a, and UPi^chi_a and all related constructions, described in the paper Quantum Information Effects by Chris Heunen and Robin Kaarsgaard.</p>\n<p>This artifact contains the implementation of the constructions and translations relating to UPi, UPi_a, and UPi^chi_a. These languages are implemented as eDSLs in (heavily extended Glasgow) Haskell. They have been tested to work with the GHC Haskell compilation system version 8.10.1 on macOS 11.6 Big Sur, as well as 8.6.5 on Ubuntu 20.04.</p>\n<p>Though Haskell supports arrows via the Arrow type class, the implementation in Haskell only permits arrows over Haskell functions (i.e., over the type a -&gt; b) rather than over an arbitrary Category instance. For this reason, though the and constructions are arrows, they cannot be implemented as such. Instead, we have chosen to name the arrow combinators with suggestive but non-conflicting names, such as arr’, first’, left’, and so forth.</p>\n<p>The code is structured as follows:</p>\n<p>UPiBase.hs: Contains the data type declaration for UPi combinators. UPi.hs: Implementation of all (derived) UPi combinators, including the quantum gates described in Section 3.2. UPiaBase.hs: Contains the data type declaration for UPi_a combinators, as well as the declaration of the type classes Cloneable and Inhabited used to define the clone and inhab combinators respectively. Since all UPi_a types have a Cloneable instance, the Cloneable constraint is trivial (but Haskell doesn’t know that). UPia.hs: Contains the implementation of all (derived) combinators of UPi_a, as described in Section 3.3. UPichiaBase.hs: Contains the data type declaration for UPi^chi_a combinators, as well as the declaration of the Discardable type class used to handle projections. Again, all UPi^chi_a types have Discardable instances, so the constraint is trivial, but Haskell doesn’t know that. UPichia.hs: Contains the implementation of all (derived) combinators relating to UPi^chi_a, see Section 3.4. QFC.hs: Contains the translation from quantum flow charts to UPi^chi_a as described in Section 6.2.</p>",
        "keywords": "arrows, information effects, quantum computing, reversible computing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5662349": {
        "doi": "10.5281/zenodo.5662349",
        "author": "Lepigre, Rodolphe and Sammler, Michael and Memarian, Kayvan and Krebbers, Robbert and Dreyer, Derek and Sewell, Peter",
        "title": "Artifact and Appendix of \"VIP: Verifying Real-World C Idioms with Integer-Pointer Casts\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5662349",
        "abstract": "<p>This is the artifact for the POPL’22 paper “VIP: Verifying Real-World C Idioms with Integer-Pointer Casts”. It contains an extended version of the RefinedC and Cerberus tools with the presented VIP memory model, as well as examples, evaluation data, and the technical appendix for the paper.</p>",
        "keywords": "C programming language, Coq, Iris, memory model, pointer provenance, proof automation, separation logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5662717": {
        "doi": "10.5281/zenodo.5662717",
        "author": "Loehr, Devon and Walker, David",
        "title": "POPL22 Pipe AEC Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5662717",
        "abstract": "<p>This artifact contains a copy of the source code for the Lucid executable, as of POPL22’s AEC evaluation period. It also contains a vagrant box with the necessary tools to build the executable, as well as instructions for running the artifact and a link to the github repo containing the most up-to-date source code. Full instructions are contained in the README file included with the artifact.</p>",
        "keywords": "Network programming languages, P4, PISA, type and effect systems",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5662934": {
        "doi": "10.5281/zenodo.5662934",
        "author": "Porncharoenwase, Sorawee and Nelson, Luke and Wang, Xi and Torlak, Emina",
        "title": "\"A formal foundation for symbolic evaluation with merging\" Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5662934",
        "abstract": "<p>The artifact contains: - mechanization of our symbolic semantics and proof of its correctness - a reference interpreter named Leanette, which is proven correct. - solver-aided differential testing setup to test that Leanette agrees with Rosette 4 (https://github.com/emina/rosette), a new Rosette system that implements the symbolic semantics with an optimized symbolic factory - tools that test performance and compare interface of Rosette 4 vs Rosette 3 (the previous Rosette system)</p>",
        "keywords": "state merging, symbolic evaluation",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/uw-unsat/leanette-popl22-artifact/tree/v1.0.0"
    },
    "10.5281/zenodo.5667545": {
        "doi": "10.5281/zenodo.5667545",
        "author": "G\\\"{a",
        "title": "Coq development and technical documentation for \"Simuliris: A Separation Logic Framework for Verifying Concurrent Program Optimizations\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5667545",
        "abstract": "<p>This is the artifact for the paper “Simuliris: A Separation Logic Framework for Verifying Concurrent Program Optimizations”. It contains the Coq mechanization of Simuliris, in particular the logic, its soundness proof, and the examples described in the paper. The artifact contains the Simuliris development both in a VM image with pre-built sources and as a .zip source archive. In addition, the technical appendix is included.</p>",
        "keywords": "Coq, data races, Iris, program optimizations, separation logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5668206": {
        "doi": "10.5281/zenodo.5668206",
        "author": "Fiore, Marcelo and Szamozvancev, Dmitrij",
        "title": "Source code repository for article: Formal Metatheory of Second-Order Abstract Syntax",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5668206",
        "abstract": "<p>GitHub repository for the Agda source of the language-formalisation framework. Includes the formalisation of the abstract metatheory along with initiality proofs, the Python code generation script, and a wide range of examples.</p>",
        "keywords": "abstract syntax, Agda, category theory, language formalisation",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/DimaSamoz/agda-soas/tree/v1.0.0"
    },
    "10.5281/zenodo.5668357": {
        "doi": "10.5281/zenodo.5668357",
        "author": "Pujet, Lo\\\"{\\i",
        "title": "A Logical Relation for Setoid Type Theory in Agda",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5668357",
        "abstract": "<h2 id=\"a-logical-relation-for-setoid-type-theory-in-agda\">A Logical Relation for Setoid Type Theory in Agda</h2>\n<p>This is a formalized proof of the decidability of conversion for an extension of Martin L\\\"{o",
        "keywords": "Agda, Logical Relations, Type Theory",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5668384": {
        "doi": "10.5281/zenodo.5668384",
        "author": "Perera, Roly and Nguyen, Minh and Petricek, Tomas and Wang, Meng",
        "title": "Implementation for article: Linked Visualisations via Galois Dependencies",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5668384",
        "abstract": "<p>Proof-of-concept implementation of data-linked visualisations.</p>",
        "keywords": "data visualisation, dependency analysis, program slicing, provenance",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/explorable-viz/fluid/tree/v0.4.2"
    },
    "10.5281/zenodo.5671746": {
        "doi": "10.5281/zenodo.5671746",
        "author": "Choudhury, Vikraman and Karwowski, Jacek and Sabry, Amr",
        "title": "Artifact for Symmetries in Reversible Programming",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5671746",
        "abstract": "<p>This artifact contains the accompanying formalisation for the POPL’22 paper “Symmetries in Reversible Programming: From Symmetric Rig Groupoids to Reversible Programming Languages”.</p>\n<p>The purpose of this artifact is to:</p>\n<ul>\n<li><p>Provide a partial formalisation of the semantics presented in the paper and related results.</p></li>\n<li><p>Show applications of the semantics, using a collection of examples showing normalisation-by-evaluation, synthesis, and equivalence of reversible circuits written in the Pi language.</p></li>\n</ul>",
        "keywords": "categorical semantics, computational group theory, denotational semantics, homotopy type theory, reversible computing, reversible programming languages",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/vikraman/popl22-symmetries-artifact/tree/v0.2"
    },
    "10.5281/zenodo.5675056": {
        "doi": "10.5281/zenodo.5675056",
        "author": "Jeffrey, Alan and Riely, James and Batty, Mark and Cooksey, Simon and Kaysin, Ilya and Podkopaev, Anton",
        "title": "Formalization in Coq. The Leaky Semicolon: Compositional Semantic Dependencies for Relaxed-Memory Concurrency",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5675056",
        "abstract": "<p>This artifact contains Coq code supplementing the paper Leaky Semicolon: Compositional Semantic Dependencies for Relaxed-Memory Concurrency.</p>",
        "keywords": "Coq, weak memory models",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/weakmemory/pwt/tree/1.0.0"
    },
    "10.5281/zenodo.5675249": {
        "doi": "10.5281/zenodo.5675249",
        "author": "Jacobs, Jules and Balzer, Stephanie and Krebbers, Robbert",
        "title": "Connectivity Graphs: A Method for Proving Deadlock Freedom Based on Separation Logic (Artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5675249",
        "abstract": "<p>The artifact for the paper “Connectivity Graphs: A Method for Proving Deadlock Freedom Based on Separation Logic”. It contains the Coq sources for the connectivity graph framework and a mechanisation of the deadlock freedom property of a binary session typed lambda calculus. The file readme.pdf contains a full description.</p>",
        "keywords": "Coq, deadlock freedom, formal proof, graphs., mechanised proof, separation logic, Session types",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5676412": {
        "doi": "10.5281/zenodo.5676412",
        "author": "K, Hari Govind V and Shoham, Sharon and Gurfinkel, Arie",
        "title": "Replication Instructions for paper: CHCs modulo ADTs and RF",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5676412",
        "abstract": "<p>The artifact contains instructions to replicate results from the paper titled Constrained Horn Clauses modulo Algebraic Data Types and Recursive Functions. It also contains links to the source code, a docker image will all necessary executables, and benchmarks.</p>",
        "keywords": "Algebraic Data Types, Formal verification, Model Checking, Recursive Functions",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5703081": {
        "doi": "10.5281/zenodo.5703081",
        "author": "Padon, Oded and Wilcox, James R. and Koenig, Jason R. and McMillan, Kenneth L. and Aiken, Alex",
        "title": "Artifact for POPL 2022 Paper: Induction Duality: Primal-Dual Search for Invariants",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5703081",
        "abstract": "<p>The artifact is provided as a virtual machine, and includes input files (benchmarks) and results (log files) for all experiments reported in the paper. The VM also includes a version of mypyvy that matches the one used in the paper for the experiments of primal-dual Houdini and UPDR.</p>\n<p>For more details, see induction-duality-popl-2022-artifact.txt.</p>",
        "keywords": "counterexample-guided abstraction refinement, Houdini, IC3, induction duality, invariant inference, primal-dual Houdini, property directed reachability",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5707114": {
        "doi": "10.5281/zenodo.5707114",
        "author": "Kjelstr\\o{",
        "title": "Replication package for article: The Decidability and Complexity of Interleaved Bidirected Dyck Reachability",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5707114",
        "abstract": "<p>Paper : The Decidability and Complexity of Interleaved Bidirected Dyck Reachability, POPL’22</p>\n<p>Artifact Outline - In the above paper, we present an algorithm for solving interleaved, bidirected <span class=\"math inline\"><em>D</em><sub>1</sub> ⊙ <em>D</em><sub>1</sub></span> reachability in <span class=\"math inline\"><em>O</em>(<em>n</em><sup>3</sup><em>α</em>(<em>n</em>))</span>, where a is the inverse Ackermann function. We have implemented this algorithm along with techniques for pre-processing and simplifying input graphs and run it on Dacapo Benchmarks.</p>\n<p>We also present an algorithm for solving interleaved, bidirected <span class=\"math inline\"><em>D</em><sub>1</sub> ⊙ <em>D</em><sub><em>k</em></sub></span> reachability in <span class=\"math inline\"><em>O</em>(<em>n</em><sup>2</sup><em>α</em>(<em>n</em>))</span> with <span class=\"math inline\"><em>O</em>(<em>n</em>)</span> bounded counters. We have also implemented this algorithm along with pre-processing and simplification and run it on Dacapo Benchmarks.</p>\n<p>We have implemented the algorithms in C++.</p>",
        "keywords": "bidirected graphs, CFL/Dyck reachability, complexity, static analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/adamkjelstroem/Inter_Dyck_implementation/tree/v1.0.0"
    },
    "10.5281/zenodo.5733989": {
        "doi": "10.5281/zenodo.5733989",
        "author": "Zheng, Zhen and Yang, Xuanda and Zhao, Pengzhan and Long, Guoping and Zhu, Kai and Zhu, Feiwen and Zhao, Wenyi and Liu, Xiaoyong and Yang, Jun and Zhai, Jidong and Song, Shuaiwen Leon and Lin, Wei",
        "title": "ASPLOS22 Artifact - AStitch Machine Learning Optimizing Compiler",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5733989",
        "abstract": "<p>The artifact contains the necessary software components to validate the main results in AStitch paper. We provide a docker image to ease the environment setup. The docker image contains the compiled binary of AStitch, scripts to evaluate the inference and training performance, and scripts to draw the figures. It requires a Linux system with NVIDIA driver (capable to run CUDA 10.0) running on a NVIDIA V100 GPU equipped x86_64 machine to create the docker container. After launching the docker container, people can run one script to collect all performance numbers. It requires some manual finishing to fill the performance numbers into several python scripts to draw the most important figures in the paper, showing the speedup of AStitch and breakdown information.</p>",
        "keywords": "Compiler Optimization, Kernel Fusion, Machine Learning System, Memory-intensive Computation",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5735634": {
        "doi": "10.5281/zenodo.5735634",
        "author": "Zhao, Mark and Gao, Mingyu and Kozyrakis, Christos",
        "title": "Artifact for Article: ShEF: Shielded Enclaves for Cloud FPGAs",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5735634",
        "abstract": "<p>In our artifact, we provide the entirety of the ShEF source code, including the Shield and implementations of the Secure Boot and Remote Attestation protocols. Our artifacts also include a number of reference benchmarks that we use to evaluate ShEF. We provide instructions on how to build, run, and evaluate Shield benchmarks on AWS F1 instances. Our archival and GitHub repository also provides a README containing more details on using ShEF.</p>",
        "keywords": "cloud computing, enclaves, FPGAs, reconfigurable computing, trusted execution",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5746392": {
        "doi": "10.5281/zenodo.5746392",
        "author": "Guo, Zhiyuan and Shan, Yizhou and Luo, Xuhao and Huang, Yutong and Zhang, Yiying",
        "title": "Replication Package for Article: Clio: A Hardware-Software Co-Designed Disaggregated Memory System",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5746392",
        "abstract": "<p>This artifact provides the source code of Clio, a hardware software co-designed disaggregated memory system. The Clio artifact has a C-based host-side library, a C-based ARM SoC management path, and a SpinalHDL-based FPGA data path along with a set of comprehensive FPGA building scripts. The artifact suite also has a set of microbenchmark examples and ported applications</p>",
        "keywords": "FPGA, Hardware Software Co-design, Resource Disaggregation, Virtual Memory",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5746505": {
        "doi": "10.5281/zenodo.5746505",
        "author": "Zhang, Haotian and Ren, Mengfei and Lei, Yu and Ming, Jiang",
        "title": "uTrimmer: Security Hardening of MIPS Embedded Systems via Static Binary Debloating for Shared Libraries",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5746505",
        "abstract": "<p>This abstract is used to evaluate performance of our debloating framework uTrimmer on SPEC CPU2017, MIPS firmware applications, and a real MIPS embedded application. uTrimmer is built on top of angr to identify and wipe out unused basic blocks from shared libraries’ binary code in MIPS firmware applications. For a given MIPS binary program and its dependent shared libraries, uTrimmer can export a debated shared libraries of the program. uTrimmer itself does not need additional software to work. However, to evaluate the debloating result, It requires IDA pro for function boundary detection and QEMU to emulate execution environment for programs under the test. The required execution scripts to reproduce the experiment results are provided in the VM image.</p>\n<p>We performed several experiments to evaluate uTrimmer’s performance. The first experiment evaluates debloating capability of uTrimmer on SPEC CPU2017 and real firmware applications. The result is shown in Table 3 on page 10. The second experiment compares uTrimmer with the static linker about the debloating efficiency, which is shown in Table 4 on page 10. The third experiment demonstrates uTrimmer’s ability to reduce ROP gadgets on SPEC 2017 and firmware applications. We show the execution results in Table 5 on page 10. We also conducted an experiment on real firmware to evaluate uTrimmer’s performance, shown in Table 6 on page 12.</p>",
        "keywords": "embeded system, shared library debloating, static binary analysis",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5746945": {
        "doi": "10.5281/zenodo.5746945",
        "author": "Gonzalez-Guerrero, Patricia and Bautista, Meriam Gay and Lyles, Darren and Michelogiannakis, George",
        "title": "Artifacts for article: Temporal and SFQ Pulse-Streams Encoding for Area-Efficient Superconducting Accelerators",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5746945",
        "abstract": "<p>This artifact contains WRSPICE circuit netlists and Octave scripts that implement key circuits and analysis in our article. In the “library” folder you can find netlists for cells and building blocks that we use in our designs. In directory “spice_netlist” you can find WRSPICE netlists for some of our key circuits that we propose in the article. Directory “octave” contains scripts for error and other design space exploration that we perform in our article. Finally, directory “perl” contains auxiliary scripts. You can find more info in the README.md file.</p>",
        "keywords": "FIR, Josephson junctions, netlist, processing elements, superconducting digital, WRSPICE",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/PatriGonzalez/SuperC-FIR/tree/v1.0.0-1"
    },
    "10.5281/zenodo.5747666": {
        "doi": "10.5281/zenodo.5747666",
        "author": "Kannan, Tejas and Hoffmann, Henry",
        "title": "Replication Package for Article: Protecting Adaptive Sampling from Information Leakage on Low-Power Sensors",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5747666",
        "abstract": "<p>This artifact provides an implementation of Adaptive Group Encoding (AGE). AGE is a framework that protects adaptive sampling procedures on low-power sensors from leaking information through the size of batched messages. The system works by encoding all measurement batches as fixed-length messages, thereby breaking the relationship between the message size and the adaptive policy’s collection rate. This repository implements AGE both in a simulated environment and on a microcontroller (MCU). The simulator, written in Python, represents the sensor and server as individual processes. These components communicate using a local (encrypted) socket, and the simulator tracks the sensor’s energy consumption using traces from a TI MSP430 MCU. The hardware setting executes AGE on a TI MSP430 FR5994. The MCU transmits measurement batches to a separate server over a Bluetooth link. These experimental settings confirm AGE’s ability to maintain the low error of adaptive sampling while preventing information leakage and incurring negligible energy overhead. The repository https://github.com/tejaskannan/adaptive-group-encoding contains all the code for this work.</p>",
        "keywords": "Adaptive Sampling, Data Privacy, Embedded Systems, Lossy Data Encoding",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5748202": {
        "doi": "10.5281/zenodo.5748202",
        "author": "Chen, Yanju and Liu, Junrui and Feng, Yu and Bodik, Rastislav",
        "title": "Tree Traversal Synthesis Using Domain-Specific Symbolic Compilation",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5748202",
        "abstract": "<p>Tree Traversal Synthesis Using Domain-Specific Symbolic Compilation - Artifact for ASPLOS 2022 Submission</p>",
        "keywords": "program synthesis, symbolic compilation, tree traversal",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5748274": {
        "doi": "10.5281/zenodo.5748274",
        "author": "Pismenny, Boris and Liss, Liran and Morrison, Adam and Tsafrir, Dan",
        "title": "Artifact for 'The Benefits of General-Purpose On-NIC Memory'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5748274",
        "abstract": "<p>This repository contains scripts for ASPLOS’22 artifact evaluation of the The Benefits of General-Purpose on-NIC Memory paper by Boris Pismenny, Liran Liss, Adam Morrison, and Dan Tsafrir.</p>",
        "keywords": "NFV acceleration, NIC memory, nicmem",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/BorisPis/nicmem-asplos22-artifact/tree/v0.1"
    },
    "10.5281/zenodo.5748410": {
        "doi": "10.5281/zenodo.5748410",
        "author": "Zhang, Qian and Wang, Jiyuan and Xu, Guoqing Harry and Kim, Miryung",
        "title": "Artifact for Article: HeteroGen: Transpiling C to Heterogeneous HLS Code with Automated Test Generation and Program Repair",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5748410",
        "abstract": "<p>This artifact includes an error study, a fuzzing-based test generation tool, and an automated code edit tool for error removal.</p>",
        "keywords": "heterogeneous applications, program repair, test generation",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5748606": {
        "doi": "10.5281/zenodo.5748606",
        "author": "Deutsch, Peter W. and Yang, Yuheng and Bourgeat, Thomas and Drean, Jules and Emer, Joel S. and Yan, Mengjia",
        "title": "Gem5/Rosette Simulation Packages for DAGguise",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5748606",
        "abstract": "<p>Our artifact comprises of two distinct parts: a unified gem5 / DRAMSim2 model (for performance evaluation), and a Rosette model (for security verification). The unified gem5/DRAMSim2 model is able to evaluate the performance of DAGguise and FS-BTA against an insecure baseline. We use gem5’s OoO core to perform baseline measurements, profile candidate rDAGs, and report final performance numbers. We also include the sample victim programs (DocDist and DNA) as described in the paper, in addition to an rDAG generation tool, and plotting scripts for Figures 7 and 9. The Rosette model symbolically executes the DAGguise system and verifies the Security Property with K-Induction as described in Section 5 of the paper.</p>",
        "keywords": "dagguise, dramsim2, gem5, rosette",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5748667": {
        "doi": "10.5281/zenodo.5748667",
        "author": "Roy, Rohan Basu and Patel, Tirthak and Tiwari, Devesh",
        "title": "IceBreaker: Warming Serverless Functions Better with Heterogeneity",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5748667",
        "abstract": "<p>IceBreaker is technique that reduces the service time and keep-alive cost of serverless functions, which are executed on a heterogeneous system consisting of costly and cheaper nodes. IceBreaker’s design consists of two major components: (1) Function Invocation Prediction Scheme (FIP), and (2) Placement Decision Maker (PDM). The FIP uses a Fourier transform based approach to determine the invocation concurrency of a function. The PDM decides where to warm up a serverless function: on a high-end server, or on a low- end server, or no warm up at all. This decision is made based upon an utility score which is calculated by considering several factors like probability of function invocation, speedup of a function on a high-end server, etc. Our artifact packages the scripts for setting up and invoking IceBreaker. It also contains the data obtained in our experimentation.</p>",
        "keywords": "Cloud Computing, Cold Start, Heterogeneous Hardware, Keep-alive Cost, Serverless Computing",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5780204": {
        "doi": "10.5281/zenodo.5780204",
        "author": "Li, Gushu and Wu, Anbang and Shi, Yunong and Javadi-Abhari, Ali and Ding, Yufei and Xie, Yuan",
        "title": "Artifact for Article: Paulihedral: A Generalized Block-Wise Compiler Optimization Framework for Quantum Simulation Kernels",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5780204",
        "abstract": "<p>See appendix for artifact description</p>",
        "keywords": "compiler, quantum computing, quantum simulation",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5785310": {
        "doi": "10.5281/zenodo.5785310",
        "author": "Wang, Bangyan and Deng, Lei and Sun, Fei and Dai, Guohao and Liu, Liu and Wang, Yu and Xie, Yuan",
        "title": "Replication package for paper \"A One-for-All and $O(V\\log(V))$-Cost Solution for Parallel Merge Style Operations on Sorted Key-Value Arrays\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5785310",
        "abstract": "<p>It contains the necessary source code to reproduce the result in paper “A One-for-All and <span class=\"math inline\"><em>O</em>(<em>V</em>log (<em>V</em>))</span>-Cost Solution for Parallel Merge Style Operations on Sorted Key-Value Arrays”. It contains:</p>\n<ol type=\"1\">\n<li>A modified GCC compiler that support the new SIMD primitives</li>\n<li>A modified Gem5 simulator that support the new SIMD primitives</li>\n<li>A collection of kernels written in C++ that use the new SIMD primitives. It should be compiled using the modified GCC.</li>\n<li>A dockerfile to help you setup the environement.</li>\n</ol>",
        "keywords": "GCC, Gem5, Graph, Join, Key-value array, Merge sort, SIMD, Sparse linear algebra, SpGEMM",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5790730": {
        "doi": "10.5281/zenodo.5790730",
        "author": "Chen, Zhangyu and Hua, Yu and Zhang, Yongle and Ding, Luochangqi",
        "title": "Replication Package for Article: Efficiently Detecting Concurrency Bugs in Persistent Memory Programs",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5790730",
        "abstract": "<p>This is the finalized artifact of PMRace, a debugging tool for PM concurrency bugs. The artifact is maintained at <a href=\"https://github.com/yhuacode/pmrace-vagrant\">GitHub</a> and developed by Zhangyu and Luochangqi.</p>",
        "keywords": "Concurrency, Crash Consistency, Debugging, Persistent Memory, Testing",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5792458": {
        "doi": "10.5281/zenodo.5792458",
        "author": "Zhao, Shixiong and Li, Fanxin and Chen, Xusheng and Shen, Tianxiang and Chen, Li and Wang, Sen and Zhang, Nicholas and Li, Cheng and Cui, Heming",
        "title": "Replication Package for Article: NASPipe: High Performance and Reproducible Pipeline Parallel Supernet Training via Causal Synchronous Parallelism",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5792458",
        "abstract": "<p>The artifact provides the availability, functionality, and key reproducible results of the paper (NASPipe: High Performance and Reproducible Pipeline Parallel Supernet Training via Causal Synchronous Parallelism): a causal parallel training execution framework. The artifact requires a host with at least 100GB CPU RAM and 4 Nvidia GPUs, and each GPU requires at least 11GB memory. The runtime environment is installed by docker with a few command lines. The experiments contain a throughput evaluation and reproducible training evaluation. The artifact provides one-click shell scripts to conduct the experiments.</p>",
        "keywords": "Distributed Training, Neural Architecture Search, Pipeline training",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/hku-systems/naspipe/tree/v0.2-ae-functional-fixed"
    },
    "10.5281/zenodo.5796083": {
        "doi": "10.5281/zenodo.5796083",
        "author": "Zhou, Keren and Hao, Yueming and Mellor-Crummey, John and Meng, Xiaozhu and Liu, Xu",
        "title": "Replication Package for Article: ValueExpert, Exploring Value Patterns in GPU-Accelerated Applications",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5796083",
        "abstract": "<p>Our artifact includes ValueExpert and benchmark code in this paper, along with instructions to use benchmarks to generate results for Figure 2, Figure 6, and Table 3 on NVIDIA A100 and RTX 2080 Ti GPUs. The speedup and overhead of each benchmark are averaged among 10 runs.</p>\n<p>We provide a docker image with pre-installed prerequisites to simplify the experiment workflow. Users can also use a script to install all software from scratch.</p>",
        "keywords": "GPU profilers, GPUs, Profiling Tools, Value Analysis, Value Patterns",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5799180": {
        "doi": "10.5281/zenodo.5799180",
        "author": "Zhao, Zirui Neil and Ji, Houxiang and Morrison, Adam and Marinov, Darko and Torrellas, Josep",
        "title": "Pinned Loads: Taming Speculative Loads in Secure Processors",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5799180",
        "abstract": "<p>Our artifact provides a complete gem5 implementation of Pinned Loads, along with scripts to evaluate Pinned Loads’ performance on SPEC17, PARSEC, and SPLASH2X benchmark suites. We further provide access to a server with SPEC17 SimPoint checkpoints, PARSEC&amp;SPLASH2X checkpoints and disk images that allow a recreation of all the evaluation figures of the paper. Finally, we open sourced our implementation and scripts on GitHub.</p>",
        "keywords": "Cache coherence protocol, Memory consistency, Processor design, Speculative execution defense",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5802292": {
        "doi": "10.5281/zenodo.5802292",
        "author": "Cock, David and Ramdas, Abishek and Schwyn, Daniel and Giardino, Michael and Turowski, Adam and He, Zhenhao and Hossle, Nora and Korolija, Dario and Licciardello, Melissa and Martsenko, Kristina and Achermann, Reto and Alonso, Gustavo and Roscoe, Timothy",
        "title": "The Enzian Research Computer; Altium Design Sources",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5802292",
        "abstract": "<p>CAD design sources for the computer</p>",
        "keywords": "cache coherence., FPGAs, heterogeneous systems",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5826357": {
        "doi": "10.5281/zenodo.5826357",
        "author": "Yang, Boyuan and Chen, Ruirong and Huang, Kai and Yang, Jun and Gao, Wei",
        "title": "Replication package of paper: Eavesdropping User Credentials via GPU Side Channels on Smartphones",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5826357",
        "abstract": "<p>This repository contains artifacts of the paper Eavesdropping User Credentials via GPU Side Channels on Smartphones. It contains 1) the source codes of smartphone app and backend server program that are needed to launch the eavesdropping attack; 2）the mobile user apps that are listed as the victims of this attack; 3) the automated scripts that operate the attacking programs for replicating the experiment results reported in the paper.</p>",
        "keywords": "Input Eavesdropping, Mobile GPU, Performance Counters, Side Channel, Smartphones",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5830832": {
        "doi": "10.5281/zenodo.5830832",
        "author": "Miano, Sebastiano and Sanaee, Alireza and Risso, Fulvio and R\\'{e",
        "title": "Morpheus: Domain Specific Run Time Optimization for Software Data Planes - Artifact for ASPLOS'22",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5830832",
        "abstract": "<p>This is the artifact for the “Morpheus: Domain Specific Run Time Optimization for Software Data Planes” paper published at ASPLOS’22. This artifact contains the source code, the experimental workflow, and additional information to 1) compile and build Morpheus, 2) install the software dependencies and setup the testbed to run all the experiments, 3) the scripts that can be used to perform some of the experiments presented in the paper, and 4) the scripts to generate the plots based on the obtained results.</p>",
        "keywords": "Data Plane Compilation, DPDK, eBPF, LLVM, XDP",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5831327": {
        "doi": "10.5281/zenodo.5831327",
        "author": "Nikolaev, Ruslan and Nadeem, Hassan and Stone, Cathlyn and Ravindran, Binoy",
        "title": "Adelie: Continuous Address Space Layout Re-randomization for Linux Drivers - Artifact for ASPLOS'22",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5831327",
        "abstract": "<p>Artifact for ASPLOS’22 paper “Adelie: Continuous Address Space Layout Re-randomization for Linux Drivers”. The artifact contains source code, benchmark scripts, and preinstalled VM images that should be used with VirtualBox. The server VM image is in Adelie.zip, and the client (load generator) VM image is in Client.zip. Please see README.txt for more information. Please also see the licensing terms in LICENSE.</p>",
        "keywords": "ASLR, PIC, ROP",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5838527": {
        "doi": "10.5281/zenodo.5838527",
        "author": "Patel, Tirthak and Younis, Ed and Iancu, Costin and de Jong, Wibe and Tiwari, Devesh",
        "title": "QUEST (ASPLOS'22) Code and Data",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5838527",
        "abstract": "<p>This appendix describes the code and data artifacts related to QUEST. The artifacts are open-source at https://doi.org/10.5281/zenodo.5747894. They include the input files for the executed benchmarks, the code for partitioning, synthesis, dual annealing, and simulation, as well as a docker image set up with the code. Please see the following sections for more details, especially the Experiment Workflow section to read in detail about how the artifact directories and code files are organized.</p>",
        "keywords": "Quantum Circuit Approximation, Quantum Circuit Synthesis, Quantum Computing",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5842408": {
        "doi": "10.5281/zenodo.5842408",
        "author": "Mathur, Umang and Pavlogiannis, Andreas and Tun\\c{c",
        "title": "Replication Package for Article: A Tree Clock Data Structure for Causal Orderings in Concurrent Executions",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5842408",
        "abstract": "<p>This artifact contains all the source codes and experimental data for replicating our evaluation in the paper. We implemented the analyses programs as part of the tool Rapid. The provided experimental data contains all the 153 trace logs used in our evaluation. In our artifact we also provide Python scripts that fully automate the process of replicating our evaluation.</p>",
        "keywords": "concurrency, dynamic analyses, happens-before, vector clocks",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5846419": {
        "doi": "10.5281/zenodo.5846419",
        "author": "Ahmad, Hammad and Huang, Yu and Weimer, Westley",
        "title": "CirFix: Automatically Repairing Defects in Hardware Design Code (Artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5846419",
        "abstract": "<p>We provide the public repository for CirFix, both on Zenodo and GitHub. The artifact includes instructions for installing and running CirFix, as well as scripts and instructions used to reproduce core results from our paper.</p>\n<p>Please contact Hammad Ahmad (hammada@umich.edu) if you have any questions.</p>",
        "keywords": "automated program repair, hardware bugs, hardware designs, HDL benchmark",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5847956": {
        "doi": "10.5281/zenodo.5847956",
        "author": "Pandey, Shweta and Kamath, Aditya K and Basu, Arkaprava",
        "title": "Replication Package for Article: GPM: Leveraging Persistent Memory from a GPU",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5847956",
        "abstract": "<p>GPM is a system which allows a GPU to leverage Persistent Memory and enables writing highly performant recoverable GPU applications. The repository contains the source of our benchmark suite: GPMBench and a CUDA library: LibGPM. GPMBench comprises of 9 benchmarks categorized as transactional, native and checkpointing. LibGPM contains the source of our CUDA library which provides a user-friendly interface for GPU-accelerated recoverable applications. More details about the work can be found in our paper ASPLOS’22 paper: Leveraging Persistent Memory from a GPU. The artifact also allows a user to reproduce some of the key results published in the paper.</p>",
        "keywords": "GPU, Persistent Memory",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/csl-iisc/GPM-ASPLOS22/tree/Release"
    },
    "10.5281/zenodo.5848404": {
        "doi": "10.5281/zenodo.5848404",
        "author": "Bandara, Thilini Kaushalya and Wijerathne, Dhananjaya and Mitra, Tulika and Peh, Li-Shiuan",
        "title": "REVAMP: A Systematic Framework for Heterogeneous CGRA Realization",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5848404",
        "abstract": "<p>REVAMP artifact includes the complete framework comprising the heterogeneous architecture generator, heterogeneous CGRA mapper, parameterized RTL and scripts for power, area calculation. We elaborate on the REVAMP tool flow with an example of generating a pareto-optimal heterogeneous CGRA from a 4x4 homogeneous CGRA targeting five application kernels.</p>",
        "keywords": "CGRA design space exploration, Coarse Grained Reconfigurable Arrays (CGRAs), Heterogeneous CGRAs",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5848986": {
        "doi": "10.5281/zenodo.5848986",
        "author": "Theodoridis, Theodoros and Grosser, Tobias and Su, Zhendong",
        "title": "ASPLOS 2022 Artifact for \"Understanding and Exploiting Optimal Function Inlining\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5848986",
        "abstract": "<p>The artifact contains the code and dataset we used for our experiments, as well as scripts to generate the numbers, figures, and tables of our evaluation. Specifically, it includes (a) the LLVM-IR files we used both for exhaustive search and autotuning (b) a modified LLVM that we use for exhaustive search and autotuning; (c) scripts to run exhaustive search and autotuning; (d) the expected outputs; (e) scripts to generate the tables and figures of our paper; (f) scripts to perform exhaustive search and autotuning only on smaller callgraphs and to validate the results against the provided ones. Everything is packaged and pre-built as a docker image. A standard X86 Linux machine running docker is necessary to evaluate this artifact.</p>",
        "keywords": "autotuning, compiler optimization, optimal inlining, program size",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5855030": {
        "doi": "10.5281/zenodo.5855030",
        "author": "Ma, Jiacheng and Zuo, Gefei and Loughlin, Kevin and Zhang, Haoyang and Quinn, Andrew and Kasikci, Baris",
        "title": "Replication Package for Paper: Debugging in the Brave New World of Reconfigurable Hardware",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5855030",
        "abstract": "<p>20 hardware bugs and the debugging tools mentioned in the paper “Debugging in the Brave New World of Reconfigurable Hardware”.</p>",
        "keywords": "Bug Study, Debugging, FPGA, Reconfigurable Hardware",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5856289": {
        "doi": "10.5281/zenodo.5856289",
        "author": "Erd\\H{o",
        "title": "Research data supporting \"MineSweeper: a \"clean sweep\" for drop-in use-after-free prevention\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5856289",
        "abstract": "<p>This artifact contains our MineSweeper implementation, an allocator extension implemented on top of JeMalloc to mitigate use-after-free attacks, together with scripts to evaluate its running time and memory overheads on the SPEC CPU2006 benchmarks. The base implementation itself and a minimally modified JeMalloc memory allocator are fetched from their own repositories, compiled, and dynamically loaded in the SPEC config scripts. The dynamically linked libraries can be used to evaluate SPEC CPU2006 overheads using our scripts (benchmarks not included), or they can be loaded to protect a pre-compiled program from use-after-reallocate and double-free exploits.</p>",
        "keywords": "programming language security, temporal safety, use-after-free",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5863686": {
        "doi": "10.5281/zenodo.5863686",
        "author": "Asmussen, Nils and Haas, Sebastian and Weinhold, Carsten and Miemietz, Till and Roitzsch, Michael",
        "title": "ASPLOS'22 artifact for Efficient and Scalable Core Multiplexing with M³v",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5863686",
        "abstract": "<p>This is the artifact for the ASPLOS’22 paper “Efficient and Scalable Core Multiplexing with M³v”. The archive contains the source code of the software part, including the modified Linux kernel we compared M³v against, and all scripts to run the benchmarks. The archive also contains the FPGA bitfiles for the hardware platform.</p>",
        "keywords": "communications management, operating systems, operating-systems security, process management, tiled architecture",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5865606": {
        "doi": "10.5281/zenodo.5865606",
        "author": "Oleksenko, Oleksii and Fetzer, Christof and K\\\"{o",
        "title": "Replication Package for Article: Revizor - Testing Black-Box CPUs against Speculation Contracts",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5865606",
        "abstract": "<p>The artifact includes the source code of Revizor, a set of scripts for reproducing the results, and a description of how to use them. They help to reproduce the contract violations described in the paper and validate the claimed fuzzing speed.</p>",
        "keywords": "contracts, spectre, Speculation, testing",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/hw-sw-contracts/revizor-artifact/tree/v1.3"
    },
    "10.5281/zenodo.5870184": {
        "doi": "10.5281/zenodo.5870184",
        "author": "Theodoridis, Theodoros and Rigger, Manuel and Su, Zhendong",
        "title": "ASPLOS 2022 Artifact for \"Finding Missed Optimizations through the Lens of Dead Code Elimination\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5870184",
        "abstract": "<p>The artifact contains the code and dataset we used for our experiments, as well as scripts to generate the numbers and tables of our evaluation. Specifically, it includes (a) the corpus of randomly generated programs that we used in Section 4’s evaluation; (b)scripts for generating a new corpus and validating the existing one; (c) our LLVM-based optimization marker instrumenter; (d) scripts for generating the missed optimization statistics presented in Section 4; (e) the full list of submitted bug reports with links to the respective compiler bug trackers; (f) end-to-end examples that led to bug reports. Everything is packaged and pre-built as a docker image. A standard X86 Linux machine running docker is necessary to evaluate this artifact.</p>",
        "keywords": "compilers, missed optimizations, testing",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5874548": {
        "doi": "10.5281/zenodo.5874548",
        "author": "Cheng, Xiang and Devecsery, David",
        "title": "Artifact for: Creating Concise and Efficient Dynamic Analyses with ALDA",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5874548",
        "abstract": "<p>This artifact description contains information about the complete workflow required to set up and reproduce experiments in ALDA. We describe how the software can be obtained and the build process as well as necessary preprocessing steps to generate the test program and baseline. All the programs and benchmarks are publicly available except for the SPEC 2006 benchmark. In addition, we provide a VM with all the programs and input data pre-pared and as well as instructions on how to build such a VM.</p>",
        "keywords": "compiler optimization, domain specific language, dynamic analysis",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5893373": {
        "doi": "10.5281/zenodo.5893373",
        "author": "Liu, Ziheng and Xia, Shihao and Liang, Yu and Song, Linhai and Hu, Hong",
        "title": "Replication Package for Article: Who Goes First? Detecting Go Concurrency Bugs via Message Reordering",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5893373",
        "abstract": "<p>The source code of GFuzz, an effective bug detector for Golang.</p>",
        "keywords": "bug, concurrent, fuzzing, golang",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5900766": {
        "doi": "10.5281/zenodo.5900766",
        "author": "Li, Zijun and Liu, Yushi and Guo, Linsong and Chen, Quan and Cheng, Jiagan and Zheng, Wenli and Guo, Minyi",
        "title": "Artifact for Article: FaaSFlow: Enable Efficient Workflow Execution for Function-as-a-Service",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5900766",
        "abstract": "<p>FaaSFlow is a serverless workflow engine that enables efficient workflow execution in 2 ways: a worker-side workflow schedule pattern to reduce scheduling overhead, and an adaptive storage library to use local memory to transfer data between functions on the same node.</p>",
        "keywords": "FaaS, graph partition, master-worker, serverless workflows",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/lzjzx1122/FaaSFlow/tree/v1.1"
    },
    "10.5281/zenodo.5902507": {
        "doi": "10.5281/zenodo.5902507",
        "author": "Lefeuvre, Hugo and B\\u{a",
        "title": "FlexOS: Towards Flexible OS Isolation",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5902507",
        "abstract": "<p>This artifact contains the source code of FlexOS, the proof of-concept of our flexible isolation approach presented at ASPLOS’22 (“FlexOS: Towards Flexible OS Isolation”), along with all scripts necessary to reproduce the paper’s measurements and plots. The goal of this artifact is to allow readers to reproduce the paper’s results, and build new research on top of FlexOS.</p>\n<p>Abstract of the paper:</p>\n<p>At design time, modern operating systems are locked in a specific safety and isolation strategy that mixes one or more hardware/software protection mechanisms (e.g.&nbsp;user/kernel separation); revisiting these choices after deployment requires a major refactoring effort. This rigid approach shows its limits given the wide variety of modern applications’ safety/performance requirements, when new hardware isolation mechanisms are rolled out, or when existing ones break.</p>\n<p>We present FlexOS, a novel OS allowing users to easily specialize the safety and isolation strategy of an OS at compilation/deployment time instead of design time. This modular LibOS is composed of fine-grained components that can be isolated via a range of hardware protection mechanisms with various data sharing strategies and additional software hardening. The OS ships with an exploration technique helping the user navigate the vast safety/performance design space it unlocks. We implement a prototype of the system and demonstrate, for several applications (Redis/Nginx/SQLite), FlexOS’ vast configuration space as well as the efficiency of the exploration technique: we evaluate 80 FlexOS configurations for Redis and show how that space can be probabilistically subset to the 5 safest ones under a given performance budget. We also show that, under equivalent configurations, FlexOS performs similarly or better than several baselines/competitors.</p>",
        "keywords": "compartmentalization, isolation, operating system, operating system security",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5942213": {
        "doi": "10.5281/zenodo.5942213",
        "author": "Saileshwar, Gururaj and Wang, Bolin and Qureshi, Moinuddin and Nair, Prashant J.",
        "title": "Randomized Row-Swap: Mitigating Row Hammer by Breaking Spatial Correlation between Aggressor and Victim Rows",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5942213",
        "abstract": "<p>This artifact presents the code and methodology to simulate Randomized Row-Swap (RRS), our defense against Rowhammer attacks. We provide the C code for the implementation of RRS which is encapsulated within the USIMM, a memory system simulator. The RRS structures and operations are implemented within the memory controller module in our artifact. We provide scripts to compile our simulator, and run the baseline and RRS. We also provide scripts to parse the results and collate the performance results.</p>",
        "keywords": "DRAM, Fault-Injection Attacks, Memory System, Row Hammer",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5982794": {
        "doi": "10.5281/zenodo.5982794",
        "author": "Groce, Alex and van Tonder, Rijnard and Kalburgi, Goutamkumar Tulajappa and Le Goues, Claire",
        "title": "Making No-Fuss Compiler Fuzzing Effective: CC 2022 Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5982794",
        "abstract": "<p>This is the artifact for the paper “Making No-Fuss Compiler Fuzzing Effective” by Alex Groce, Rijnard van Tonder, Goutamkumar Tulajappa Kalburg, and Claire Le Goues, for the 2022 International Conference on Compiler Construction.</p>",
        "keywords": "fuzzing mutation compilers",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.5988606": {
        "doi": "10.5281/zenodo.5988606",
        "author": "Peduri, Anurudh and Bhat, Siddharth and Grosser, Tobias",
        "title": "QSSA: An SSA-based IR for Quantum Computing - Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5988606",
        "abstract": "<p>This is the artifact for our CC’22 paper “QSSA: An SSA-based IR for Quantum Computing”. It consists of a docker image containing full source code of our compiler, benchmarks and scripts for reproducing main experiments of the paper. We supply instructions on how to run the artifact evaluation in the appendix of our paper.</p>",
        "keywords": "compilers, intermediate representations, optimization, quantum circuits, SSA",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6313660": {
        "doi": "10.5281/zenodo.6313660",
        "author": "Wang, Huanting and Tang, Zhanyong and Zhang, Cheng and Zhao, Jiaqi and Cummins, Chris and Leather, Hugh and Wang, Zheng",
        "title": "Reproduction Package for Article 'Automating Reinforcement Learning Architecture Design for Code Optimization'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6313660",
        "abstract": "<p>The research artifact enables the reproduction of the main results of the paper. It provides instructions to download and run a preconfigured Docker image to reproduce the results and customize the experiments.</p>",
        "keywords": "code optimization, Compiler optimization, reinforcement learning",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6330043": {
        "doi": "10.5281/zenodo.6330043",
        "author": "Xu, Yufan and Raje, Saurabh and Rountev, Atanas and Sabin, Gerald and Sukumaran-Rajam, Aravind and Sadayappan, P.",
        "title": "Reproduction package for \"Training of Deep Learning Pipelines on Memory-Constrained GPUs via Segmented Fused-Tiled Execution\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6330043",
        "abstract": "<p>The artifact contains all the scripts and data required to reproduce the experimental results in the CC 2022 paper titled “ Training of Deep Learning Pipelines on Memory-Constrained GPUs via Segmented Fused-Tiled Execution”. The git repository contains: 1)The SFT source code; 2)The scripts to measure execution time of default PyTorch, PyTorch checkpoint, and SFT; 3)Raw data that we used to plot Fig. 8 (for comparison).</p>",
        "keywords": "Checkpointing, DNN, Fusion, GPU, Large image training, Memory-constrained execution, Tiling",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6330172": {
        "doi": "10.5281/zenodo.6330172",
        "author": "Sahebolamri, Arash and Gilray, Thomas and Micinski, Kristopher",
        "title": "Ascent",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6330172",
        "abstract": "<p>Source code of Ascent, a logic programming language (similar to Datalog) embedded in Rust via macros.</p>",
        "keywords": "Datalog, Logic Programming, Program Analysis, Rust",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6337971": {
        "doi": "10.5281/zenodo.6337971",
        "author": "Ryu, Jaehun and Park, Eunhyeok and Sung, Hyojin",
        "title": "One-Shot Tuner for Deep Learning Compilers (Artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6337971",
        "abstract": "<p>Our artifact includes an implementation of the One-Shot Tuner predictor model and a variant of the TVM compiler modified to use One-Shot Tuner. We provide a fully trained One-Shot Tuner predictor model, along with model source codes, training data samples obtained using PGS and EBS methods, and scripts to use the data to re-train the model. For the compiler, we provide binaries and source codes for the TVM compiler modified to use the trained One-Shot Tuner predictor model for a single iteration of search and validation in place of its AutoTVM-based auto-tuning process. This will allow evaluation and reproduction of our results on the NVIDIA GPU and Intel CPU systems described in the paper.</p>",
        "keywords": "autotuning, deep neural networks, optimizing compilers, performance models",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6345727": {
        "doi": "10.5281/zenodo.6345727",
        "author": "Gerard, Blake and Grosser, Tobias and Kong, Martin",
        "title": "BlakeGerard/qrane-artifact:",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6345727",
        "abstract": "<p>This artifact contains a version of our proposed tool, Qrane, along with all of the data and scripts needed to run each experiment in the paper. The artifact is presented as a public GitHub repository. It also comes with a Dockerfile to load the repository onto a Docker image with all dependencies installed, if the user wishes to take that route. Within the repository, you will find a README with instructions to run the one wrapper script that will automatically run all experiments. The wrapper script will invoke Qrane on the provided datasets used in the paper, and dump all intermediate files to a specified directory. It will then generate similar plots to those found in the Experiment and Supplemental sections of the paper (with some variation from machine thread-usage and optional tweaking of Qrane flags, if desired).</p>",
        "keywords": "delinearization, polyhedral model, quantum affine computing., quantum assembly",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/BlakeGerard/qrane-artifact/tree/v1.1"
    },
    "10.5281/zenodo.6335690": {
        "doi": "10.5281/zenodo.6335690",
        "author": "Chow, Ka-Ho and Deshpande, Umesh and Seshadri, Sangeetha and Liu, Ling",
        "title": "Implementation of the article \"DeepRest: Deep Resource Estimation for Interactive Microservices\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6335690",
        "abstract": "<p>Deep Learning for API-aware Resource Estimation</p>",
        "keywords": "capability machines, CHERI, compilation, Coq, full abstraction, Iris, logical relations, separation logic",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/IBM/api-tracing-app-management/tree/v1.0"
    },
    "10.5281/zenodo.5834281": {
        "doi": "10.5281/zenodo.5834281",
        "author": "Paltenghi, Matteo and Pradel, Michael",
        "title": "Reproduction Package for \"Bugs in Quantum Computing Platforms: An Empirical Study\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5834281",
        "abstract": "<p>It contains the bugs inspected in the study together with the minimized bug-fixing commits and a jupyter notebook to reproduce the result of the analysis.</p>",
        "keywords": "braket, bug patterns, bug study, c# bugs, c++ bugs, circ, commit, dwave-system, empirical study, github, mitiq, open source quantum platforms, open source software, openql, oss, pennylane, projectq, pyquil, python bugs, q#, qalcs, qdk, qiskit, qiskit-aer, qiskit-ignis, qiskit-terra, quantum bug, quantum computing, quantum computing platforms, quantum programming languages, quantum programs, quantum software, quantum-specific bugs, software bug, software engineering, strawberryfields, tequila, xacc",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/MattePalte/Bugs-Quantum-Computing-Platforms/tree/v1.0.0"
    },
    "10.5281/zenodo.6329773": {
        "doi": "10.5281/zenodo.6329773",
        "author": "Jacobs, Koen and Devriese, Dominique and Timany, Amin",
        "title": "Artifact OOPSLA22 - Purity of an ST Monad - Full Abstraction by Semantically Typed Back-Translation",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6329773",
        "abstract": "<p>Coq formalization of the results presented in the paper.</p>",
        "keywords": "Coq, full abstraction, Iris, semantic typing, ST",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6341551": {
        "doi": "10.5281/zenodo.6341551",
        "author": "Labrada, Elizabeth and Toro, Mat\\'{\\i",
        "title": "Plausible Sealing for Gradual Parametricity: Supporting Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6341551",
        "abstract": "<p>This is the artifact accompanying the paper “Plausible Sealing for Gradual Parametricity”, to be published at OOPSLA 2022.</p>\n<p>Graduality and parametricity have proven to be extremely challenging notions to bring together. Intuitively, enforcing parametricity gradually requires possibly sealing values in order to detect violations of uniform behavior. Toro et al.&nbsp;(2019) argue that the two notions are incompatible in the context of System F, where sealing is transparently driven by potentially imprecise type information, while New et al.&nbsp;(2020) reconcile both properties at the cost of abandoning the syntax of System F and requiring user-provided sealing annotations, which are not subject to graduality guarantees. Furthermore, all current proposals rely on a global form of dynamic sealing in order to enforce parametric behavior at runtime, which weakens parametric reasoning and breaks equivalences in the static language. Based on the observation that the tension between graduality and parametricity comes from the early commitment to seal values based on type information, we propose plausible sealing as a new intermediate language mechanism that allows postponing such decisions to runtime. We propose an intermediate language for gradual parametricity, Funky, which supports plausible sealing in a simplified setting where polymorphism is restricted to instantiations with base and variable types. We prove that Funky satisfies both parametricity and graduality, mechanizing key lemmas in Agda. Additionally, we avoid global dynamic sealing and instead propose a novel lexically-scoped form of sealing realized using a representation of evidence inspired by the category of spans. As a consequence, Funky satisfies a standard formulation of parametricity that does not break System F equivalences. In order to show the practicality of plausible sealing, we describe a translation from Funk, a source language without explicit sealing, to Funky, that takes care of inserting plausible sealing forms. We establish graduality of Funk, subject to a restriction on type applications, and explain the source-level parametric reasoning it supports. Finally, we provide an interactive prototype along with illustrative examples both novel and from the literature.</p>",
        "keywords": "gradual parametricity\nplausible sealing\nparametricity\ngradual typing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6342311": {
        "doi": "10.5281/zenodo.6342311",
        "author": "Le, Quang Loc and Raad, Azalea and Villard, Jules and Berdine, Josh and Dreyer, Derek and O'Hearn, Peter W.",
        "title": "Artifact and Appendix of \"Finding Real Bugs in Big Programs with Incorrectness Logic\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6342311",
        "abstract": "<p>This is the artifact for the OOPSLA’22 paper “Finding Real Bugs in Big Programs with Incorrectness Logic”. It contains the scripts reproducing the results and proofs of the paper.</p>",
        "keywords": "bug catching, compositionality, incorrectness logic, incorrectness proving",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6342476": {
        "doi": "10.5281/zenodo.6342476",
        "author": "Lesani, Mohsen and Xia, Li-yao and Kaseorg, Anders and Bell, Christian J. and Chlipala, Adam and Pierce, Benjamin C. and Zdancewic, Steve",
        "title": "Coq formalization of C4: Verified Transactional Objects",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6342476",
        "abstract": "<p>A framework for Verified Transactional Objects in Coq.</p>\n<ul>\n<li>Formalization of concurrent objects, linearizability, strict serializability, and associated proof techniques.</li>\n<li>Verified linearizable concurrent hash map</li>\n<li>Verified strictly serializable TML</li>\n<li>Verified strictly serializable transaction-predicated map</li>\n</ul>",
        "keywords": "concurrency, coq, formal verification, library",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6366579": {
        "doi": "10.5281/zenodo.6366579",
        "author": "Benzaken, V\\'{e",
        "title": "Translating Canonical SQL to Imperative Code in Coq Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6366579",
        "abstract": "<p>This artifact is associated to the paper <code>Translating Canonical SQL to Imperative Code in Coq</code> by V\\'{e",
        "keywords": "Coq, Formal proof, JavaScript, Query compiler, Semantics preserving compiler, SQL",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6367565": {
        "doi": "10.5281/zenodo.6367565",
        "author": "Pelsmaeker, Daniel A. A. and van Antwerpen, Hendrik and Poulsen, Casper Bach and Visser, Eelco",
        "title": "Artifact for \"Language-Parametric Static Semantic Code Completion\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6367565",
        "abstract": "<p>This is the artifact submitted alongside our OOPSLA’22 paper “Language-Parametric Static Semantic Code Completion”. The artifact contains a VirtualBox image and guide that were evaluated, and the relevant source and benchmark/test files.</p>",
        "keywords": "code completion, semantics, Spoofax, Statix",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/metaborg/devenv"
    },
    "10.5281/zenodo.6370152": {
        "doi": "10.5281/zenodo.6370152",
        "author": "Dyer, Tristan and Nelson, Tim and Fisler, Kathi and Krishnamurthi, Shriram",
        "title": "Applying Cognitive Principles to Model-Finding Output: The Positive Value of Negative Information (artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6370152",
        "abstract": "<p>This artifact includes an experimental model-finder that demonstrates the “2+1-” visualization mode from the paper. Additionally, working versions of all user interfaces used in the studies are included, as well as the raw and anonymized data for all participants in the quantitative studies and the anonymized audio transcripts for participants in the qualitative studies. In-depth instructions for how to access and use the included items are included in the artifact README.</p>",
        "keywords": "Alloy, cognitive science, formal methods, Human-centered computing, model finding, user studies",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6371291": {
        "doi": "10.5281/zenodo.6371291",
        "author": "Liu, Jiawei and Wei, Yuxiang and Yang, Sen and Deng, Yinlin and Zhang, Lingming",
        "title": "Coverage-Guided Tensor Compiler Fuzzing with Joint IR-Pass Mutation",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6371291",
        "abstract": "<p>This artifact is for the paper “Coverage-Guided Tensor Compiler Fuzzing with Joint IR-Pass Mutation” accepted by OOPSLA’22. It contains the original experimental statistics presented in the paper and source code to reproduce it with guidance.</p>",
        "keywords": "fuzzing, machine learning system, tensor compiler",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6372033": {
        "doi": "10.5281/zenodo.6372033",
        "author": "Li, Jialin and Lattuada, Andrea and Zhou, Yi and Cameron, Jonathan and Howell, Jon and Parno, Bryan and Hawblitzel, Chris",
        "title": "Linear VeriBetrKV Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6372033",
        "abstract": "<p>This artifact includes the VeribetrKV-DF and VeriBetrKV-LT described in the case study of the paper. It also includes details for the formalization of Linear Dafny.</p>",
        "keywords": "linear types, system verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6372830": {
        "doi": "10.5281/zenodo.6372830",
        "author": "Brachth\\\"{a",
        "title": "Artifact of the paper \"Effects, Capabilities, and Boxes: From Scope-based Reasoning to Type-based Reasoning and Back\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6372830",
        "abstract": "<p>The artifact consists of two parts:</p>\n<ol type=\"1\">\n<li>Coq proofs, proving soundness of the calculus System C.</li>\n<li>A website featuring an implementation of System C with examples that can be typechecked, edited, and run.</li>\n</ol>",
        "keywords": "coq proofs, effect handlers, effect safety, type systems",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/se-tuebingen/oopsla-2022-artifact/tree/v1.0"
    },
    "10.5281/zenodo.6384379": {
        "doi": "10.5281/zenodo.6384379",
        "author": "Machiry, Aravind and Kastner, John and McCutchen, Matt and Eline, Aaron and Headley, Kyle and Hicks, Michael",
        "title": "Reproduction and Source Code for the paper \"C to Checked C by 3C\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6384379",
        "abstract": "<p>This artifact contains all the necessary instructions and software to reproduce the results in the paper along with instructions to re-use/re-purpose the software.</p>",
        "keywords": "C, Checked C, Rewriting, Type Inference",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6390003": {
        "doi": "10.5281/zenodo.6390003",
        "author": "Cl\\'{e",
        "title": "Reproduction Package for Article `End-to-End Translation Validation for the Halide Language`",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6390003",
        "abstract": "<p>This artifact contains a checking tool that allows to verify the correctness of affine implementations of affine Halide specifications, using the techniques described in the paper “End-to-End Translation Validation for the Halide language”. It also contains a patched version of the Halide compiler that generates prophetic annotations as described in the paper, and the examples used in the experiments, adapted from the official Halide benchmark suite.</p>\n<p>The artifact is intended for the reproduction of the results in the paper, and to allow further experimentation with the techniques of the paper.</p>",
        "keywords": "affine program, Halide, ocaml, tensor compiler, translation-validation, verification",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5703630": {
        "doi": "10.5281/zenodo.5703630",
        "author": "Vishwanathan, Harishankar and Shachnai, Matan and Narayana, Srinivas and Nagarakatte, Santosh",
        "title": "Artifact for submission \"Sound, Precise, and Fast Abstract Interpretation with Tristate Numbers\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5703630",
        "abstract": "<p>In this artifact, we provide instructions to reproduce and validate the following claims in the paper.</p>\n<ol type=\"1\">\n<li><p>Verification of tnum operations using the Z3 SMT solver</p></li>\n<li><p>Precision improvements in our tnum multiplication algorithm compared to the Linux kernel’s tnum multiplication.</p></li>\n<li><p>Performance improvements in our tnum multiplication algorithm compared to Linux kernel’s tnum multiplication.</p></li>\n<li><p>Precision of tnum multiplication compared to the Linux kernel’s tnum multiplication as a function of increasing bitwidth of input tnums.</p></li>\n</ol>",
        "keywords": "Abstract domains, eBPF, Kernel extensions, Program verification, Static\nanalysis",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5710526": {
        "doi": "10.5281/zenodo.5710526",
        "author": "Kallwies, Hannes and Leucker, Martin and Scheffel, Torben and Schmitz, Malte and Thoma, Daniel",
        "title": "Artifact (Docker Image) for paper \"Aggregate Update Problem for Multi-Clocked Dataflow Languages\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5710526",
        "abstract": "<p>The artifact contains a TeSSLa to Scala compiler with the optimization described in the paper “Aggregate Update Problem for Multi-Clocked Dataflow Languages” and the benchmarks from the paper. The artifact is packaged as a Docker image for x86 64 Bit architectures. It provides shell scripts to compile and execute the synthetic as well as the real-world benchmarks described in the paper. The artifact further contains the source code of the implemented compiler phase and additional examples.</p>",
        "keywords": "Aggregate Update Problem, Compiler Optimization, Dataflow Languages",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5784251": {
        "doi": "10.5281/zenodo.5784251",
        "author": "Cummins, Chris and Wasti, Bram and Guo, Jiadong and Cui, Brandon and Ansel, Jason and Gomez, Sahir and Jain, Somya and Liu, Jia and Teytaud, Olivier and Steiner, Benoit and Tian, Yuandong and Leather, Hugh",
        "title": "CompilerGym Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5784251",
        "abstract": "<p>This is a supporting code artifact for the publication: “CompilerGym: Robust, Performant Compiler Optimization Environments for AI Research”. This is a snapshot of the CompilerGym repository, created at the time of publication.</p>\n<p>For the most up-to-date release of CompilerGym, see GitHub: https://github.com/facebookresearch/CompilerGym.</p>\n<p>For further information on CompilerGym, see our documentation site: https://compilergym.ai/.</p>",
        "keywords": "compiler optimization, machine learning, reinforcement learning",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5784768": {
        "doi": "10.5281/zenodo.5784768",
        "author": "Saumya, Charitha and Sundararajah, Kirshanthan and Kulkarni, Milind",
        "title": "Replication Package for Article: DARM: Control-Flow Melding for SIMT Thread Divergence Reduction",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5784768",
        "abstract": "<p>This artifact provides the source code that implements DARM, a compiler optimization technique for reducing SIMT thread divergence by control-flow melding. Our approach is implemented on top of the ROCm LLVM compiler. We also provide a benchmark suite to evaluate the effectiveness of our technique. This benchmark suite consists of well-known open-source GPGPU applications and optimized reference implementations of certain GPGPU applications. We provide a README file that describes how to build DARM and perform the experimental evaluation described in the initial version of our paper.</p>",
        "keywords": "Compiler Optimizations, Control-Flow Divergence, GPGPUs",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5785485": {
        "doi": "10.5281/zenodo.5785485",
        "author": "Tian, Linan and Shi, Yangyang and Chen, Liwei and Yang, Yanqi and Shi, Gang",
        "title": "Gadgets Splicing: Dynamic Binary Transformation for Precise Rewriting (CGO 2022 Artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5785485",
        "abstract": "<p>This document describes the artifact for paper “Gadgets Splicing: Dynamic Binary Transformation for Precise Rewriting” at CGO 2022. The artifact is in the form of a virtual machine running Ubuntu 18.04. It contains all software dependencies and compiled GRIN rewriter, benchmark binaries and scripts. You can directly run the scripts for reproducing main experiments.</p>",
        "keywords": "Binary analysis, Binary rewriting, Dynamic execution, Static analysis",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5785832": {
        "doi": "10.5281/zenodo.5785832",
        "author": "Park, Sunghyun and Latifi, Salar and Park, Yongjun and Behroozi, Armand and Jeon, Byungsoo and Mahlke, Scott",
        "title": "SRTuner: Effective Compiler Optimization Customization by Exposing Synergistic Relations",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5785832",
        "abstract": "<p>SRTuner is a tuning strategy that searches for the best possible optimization setting for the given run-time environment. Within the tuning budget, SRTuner endeavors to expose important inter-relatonship between optimizations and leverage them to focus on the promising search subspace. To allow fast integration, SRTuner is built in the form of python library that provides tuning primitives. Users can build a standalone tuning framework with these primitives or adopt them into the existing tuning framework as a new tuning method. Latest version of SRTuner is available at: https://github.com/sunggg/SRTuner</p>",
        "keywords": "autotuner, compiler, optimization",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5786074": {
        "doi": "10.5281/zenodo.5786074",
        "author": "Bhat, Siddharth and Grosser, Tobias",
        "title": "Lambda the Ultimate SSA: Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5786074",
        "abstract": "<p>This is the artifact in the form of a docker image for our CGO’22 paper “Lambda the ultimate SSA”. It contains full source code of our compiler, benchmarks and scripts for reproducing main experiments of the paper. We supply instructions on how to run the artifact evaluation in the appendix of our paper.</p>",
        "keywords": "compilers, functional programming",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5787482": {
        "doi": "10.5281/zenodo.5787482",
        "author": "Wang, Xudong and Xu, Xuezheng and Li, Qingan and Yuan, Mengting and Xue, Jingling",
        "title": "Artifact for Article: Recovering Container Class Types in C++ Binaries",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5787482",
        "abstract": "<p>The artifact provides all non-proprietary components of TIARA.</p>",
        "keywords": "Binary Code Analysis, Containers, Template Classes, Type Inference",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5788478": {
        "doi": "10.5281/zenodo.5788478",
        "author": "Kurhe, Vaibhav Kiran and Karia, Pratik and Gupta, Shubhani and Rose, Abhishek and Bansal, Sorav",
        "title": "Artifact for \"Automatic Generation of Debug Headers through BlackBox Equivalence Checking\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5788478",
        "abstract": "<p>The artifact contains source code for our tool, along with shell scripts and a dockerfile to install it inside a docker container. It also contains the output files from an equivalence checker (the .proof files) that are taken as input by our tool, along with the source and object files for TSVC benchmarking suite compiled with three different compilers – gcc, clang/llvm and icc. It can be used to reproduce the experimental results in Tables 2 and 3 of our CGO’22 paper – <strong>Automatic Generation of Debug Headers through BlackBox Equivalence Checking</strong>.</p>",
        "keywords": "Compiler Optimizations, Debug Headers, Equivalence Checking",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5788581": {
        "doi": "10.5281/zenodo.5788581",
        "author": "Brahmakshatriya, Ajay and Amarasinghe, Saman",
        "title": "Replication Package for the paper 'GraphIt to CUDA Compiler in 2021 LOC: A Case for High-Performance DSL Implementation via Staging with BuilDSL'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5788581",
        "abstract": "<p>The artifact contains the source code and the evaluation scripts for the evaluations in the paper. The attached README has step-by-step instructions to clone, build and run BuilDSL. The README also has steps on how to obtain the dataset, build the comparison framework GraphIt and run the experiments that compare the performance of the generated code on 9 datasets and 5 applications.</p>\n<p>The second part of the README provides step-by-step instructions to write a new DSL with BuilDSL for matrix multiplication and implement a simple analysis on top of it before generating CPU and GPU code.</p>",
        "keywords": "code generation, data-flow analysis, domain-specific languages, meta-programming, multi-stage programming",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5789242": {
        "doi": "10.5281/zenodo.5789242",
        "author": "Li, Ao and Zheng, Bojian and Pekhimenko, Gennady and Long, Fan",
        "title": "Replication Packet for Article: Automatic Horizontal Fusion for GPU Kernels",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5789242",
        "abstract": "<p>This replication package provides the source code for article: Automatic Horizontal Fusion for GPU Kernels.</p>",
        "keywords": "CUDA, GPU, Kernel Fusion, LLVM",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5789400": {
        "doi": "10.5281/zenodo.5789400",
        "author": "Matni, Angelo and Deiana, Enrico Armenio and Su, Yian and Gross, Lukas and Ghosh, Souradip and Apostolakis, Sotiris and Xu, Ziyang and Tan, Zujun and Chaturvedi, Ishita and Homerding, Brian and McMichen, Tommy and August, David I. and Campanoni, Simone",
        "title": "Replication Package For Article: NOELLE Offers Empowering LLVM Extensions",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5789400",
        "abstract": "<p>This artifact generates three sets of results.</p>\n<p>MINIMAL: Data that supports the version of the paper that was submitted in September. This experiment does not include HELIX and DSWP, which both take a significant amount of time to transform each benchmark.</p>\n<p>SUBMISSION: HELIX and DSWP are included.</p>\n<p>FINAL: New results that were not included in the submitted version of the paper (extra 5 days). Also, HELIX and DSWP are included in this experiment.</p>",
        "keywords": "automatic parallelization, dependence analysis, loop invariant analysis",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.5791919": {
        "doi": "10.5281/zenodo.5791919",
        "author": "Huber, Joseph and Cornelius, Melanie and Georgakoudis, Giorgis and Tian, Shilei and Monslave Diaz, Jose M and Dinel, Kuter and Chapman, Barbara and Doerfert, Johannes",
        "title": "Replication Package for Article: Efficient Execution of OpenMP on GPUs",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5791919",
        "abstract": "<p>Our artifact provides the benchmarks used to evaluate the inter-procedural OpenMP optimizations implemented for this work. These benchmarks were evaluated using LLVM 12.0.1 as the baseline against a development branch of LLVM containing our changes with CUDA version 11.0. All but one of these patches have landed upstream, so any build of LLVM containing the commit hash 29a3e3dd7bed should be sufficient for general testing. Evaluation was done on a single Nvidia V100 GPU node, only kernel time was considered for benchmarking to measure the impact of our optimizations on the GPU.</p>",
        "keywords": "GPU, LLVM, Offloading, OpenMP, Optimization",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/jhuber6/cgo2022-artifacts/tree/v1.0"
    },
    "10.5281/zenodo.5792202": {
        "doi": "10.5281/zenodo.5792202",
        "author": "Rivera, Joao and Franchetti, Franz and P\\\"{u",
        "title": "Artifact: A Compiler for Sound Floating-Point using Affine Arithmetic",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5792202",
        "abstract": "<p>The artifact is in the form of a virtual machine running Ubuntu 20.04. It contains source code of SafeGen, benchmarks and scripts for reproducing main experiments of the paper.</p>",
        "keywords": "affine arithmetic, floating-point arithmetic, guaranteed computations, source-to-source compiler",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5866935": {
        "doi": "10.5281/zenodo.5866935",
        "author": "Vesely, Jan and Pothukuchi, Raghavendra Pradyumna and Joshi, Ketaki and Gupta, Samyak and Cohen, Jonathan D. and Bhattacharjee, Abhishek",
        "title": "Distill: Domain-Specific Compilation for Cognitive Models Evaluation Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5866935",
        "abstract": "<p>This artifact contains an image with the environments and experiments presented in: “Distill: Domain-Specific Compilation for Cognitive Models” [CGO’22, Seoul, South Korea].</p>\n<p>This artifact is based on an older version of PsyNeuLink (April 2021), and no longer represents the latest version. For up-to-date information on PsyNeuLink, as well as any support with developing cognitive models please visit https://github.com/PrincetonUniversity/PsyNeuLink.</p>",
        "keywords": "cognitive models, Domain-specific compilation, human brain, JIT compilers, LLVM, PsyNeuLink, Python.",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6326451": {
        "doi": "10.5281/zenodo.6326451",
        "author": "Zagieboylo, Drew and Sherk, Charles and Suh, Gookwon Edward and Myers, Andrew C.",
        "title": "Reproduction Package for 'PDL: A High-Level Hardware Design Language for Pipelined Processors'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6326451",
        "abstract": "<p>A Docker container which can be used to recreate the results from the PLDI ’22 paper, PDL: A High-Level Hardware Design Language for Pipelined Processors.</p>\n<p>This includes:</p>\n<ul>\n<li>The source code of the PDL compiler and its test suite</li>\n<li>A simulator for the baseline Chisel processor used in our evaluation</li>\n<li>The PDL programs describing the RISC-V architectures described in our evaluation</li>\n<li>A build system to generate the CPI results reported in the paper for the above architectures</li>\n</ul>",
        "keywords": "Computer Architecture, Language Design",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6326513": {
        "doi": "10.5281/zenodo.6326513",
        "author": "Greenberg, Michael and Beckett, Ryan and Campbell, Eric",
        "title": "Implementation of the KMT framework in OCaml",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6326513",
        "abstract": "<p>Kleene algebra modulo theories (KMT) is a framework for deriving concrete Kleene algebras with tests (KATs)—an algebraic framework for While-like programs with decidable program equivalence.</p>\n<p>More plainly: KMT is a framework for building simple programming languages with structured control (if, while, etc.) where we can algorithmically decide whether or not two programs are equivalent. You can use equivalence to verify programs. If a is a nice property to have after running your program, then if p;a == p, you know that p satisfies a. Kleene algebra with tests subsumes Hoare logic: if a;p;~b == 0 then all runs starting from a either diverge or end with b, i.e., that equation corresponds to the partial correctness specification {a",
        "keywords": "algebraic models, functors, kleene algebra, modules, program equivalence, tracing semantics, verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/mgree/kmt/tree/pldi2022-aec"
    },
    "10.5281/zenodo.6327186": {
        "doi": "10.5281/zenodo.6327186",
        "author": "Jones, Eddie and Ong, C.-H. Luke and Ramsay, Steven",
        "title": "CycleQ",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6327186",
        "abstract": "<p>CycleQ is an efficient basis for automatic equation reasoning with cyclic proofs, rather than traditional induction, that is aimed at verifying the behaviour of functional programs. Specifically, the tool is implemented as a plugin for GHC.</p>",
        "keywords": "cyclic proofs, equational reasoning, program verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6327595": {
        "doi": "10.5281/zenodo.6327595",
        "author": "Tang, Shizhi and Zhai, Jidong and Wang, Haojie and Jiang, Lin and Zheng, Liyan and Yuan, Zhenhao and Zhang, Chen",
        "title": "Artifact: FreeTensor: A Free-form DSL with Holistic Optimizations for Irregular Tensor Programs",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6327595",
        "abstract": "<p>Artifact for PLDI ’22 paper “FreeTensor: A Free-form DSL with Holistic Optimizations for Irregular Tensor Programs”. The tensor compiler described in the paper is included, and the performance number can be reproduced.</p>",
        "keywords": "DSL, optimizing compilers, tensor computing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6327882": {
        "doi": "10.5281/zenodo.6327882",
        "author": "Crichton, Will and Patrignani, Marco and Agrawala, Maneesh and Hanrahan, Pat",
        "title": "Artifact for \"Modular Information Flow through Ownership\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6327882",
        "abstract": "<p>This is a Docker image that contains the codebase and evaluation scripts for our PLDI 2022 paper “Modular Information Flow Through Ownership”.</p>",
        "keywords": "information flow, modular program analysis, rust",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6329754": {
        "doi": "10.5281/zenodo.6329754",
        "author": "Farzan, Azadeh and Lette, Danya and Nicolet, Victor",
        "title": "Software Artifact for \"Recursion Synthesis with Unrealizability Witnesses\" Paper",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6329754",
        "abstract": "<p>This software artifact is provided to support the experimental claims made in the PLDI’22 paper <em>Recursion Synthesis with Unrealizability Witnesses</em>. All the results given in the paper are reproducible modulo experimental error. The artifact also contains a reusable version of Synduce, the tool implementing the synthesis algorithms presented in the paper.</p>",
        "keywords": "Abstraction, Functional Programming, Invariants, Program Synthesis, Recursion, Unrealizability",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6330157": {
        "doi": "10.5281/zenodo.6330157",
        "author": "Woodruff, Jackson and Armengol-Estap\\'{e",
        "title": "Reproducing package for Bind the Gap: Compiling Software to Hardware FFT Accelerators",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6330157",
        "abstract": "<p>#FACC Artifact Evaluation</p>\n<p>This set of instructions is split into several sections. First, we cover the generic build process. We then cover steps required to reproduce each figure. The main directory is FACC. Other sub-directories should be used as refered to in the README.</p>",
        "keywords": "Compiler, FFT, Hardware Accelerator",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6330164": {
        "doi": "10.5281/zenodo.6330164",
        "author": "Chabbi, Milind and Ramanathan, Murali Krishna",
        "title": "Data race examples",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6330164",
        "abstract": "<p>Examples of the data races discussed in the PLDI 22 paper titled “A Real World Study of Data Races in Golang”</p>",
        "keywords": "data races, dynamic analysis, golang",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6330174": {
        "doi": "10.5281/zenodo.6330174",
        "author": "Milano, Mae and Turcotti, Joshua and Myers, Andrew C.",
        "title": "A Flexible Type System for Fearless Concurrency: Accompanying Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6330174",
        "abstract": "<p>An implementation of a type-checker (with efficient proof search/inference) for the language described in the PLDI 2022 paper “A Flexible Type System for Fearless Concurrency,” available with DOI 10.1145/3519939.3523443 at the The ACM DL in June of 2022. Includes an accompanying virtual machine, with all dependencies installed, capable of building the type checker.</p>",
        "keywords": "aliasing, compiler, concurrency, coq, linear types, ocaml, regions, type systems",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6330208": {
        "doi": "10.5281/zenodo.6330208",
        "author": "Briggs, Ian and Panchekha, Pavel",
        "title": "OpTuner Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6330208",
        "abstract": "<p>Instructions and a virtual machine image to verify the claims in the paper “Choosing Math Function Implementations for Speed and Accuracy”</p>",
        "keywords": "accuracy, floating point, ILP, optimization",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6330232": {
        "doi": "10.5281/zenodo.6330232",
        "author": "Zhou, Xiangyu and Bodik, Rastislav and Cheung, Alvin and Wang, Chenglong",
        "title": "Reproduction Package for Synthesizing Analytical SQL Queries from Computation Demonstration",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6330232",
        "abstract": "<p>In this artifact, we included implementations of an analytical query synthesizer that uses enumerative synthesis algorithm and provenance abstraction for pruning the search space. In addition, we included the implementation of baselines synthesizers that use value abstraction, and type abstraction for experiments. Running the experimental scripts reproduces graph results in Synthesizing Analytical SQL Queries from Computation Demonstration. We also included 80 real-world benchmarks on solving analytical SQL problems with synthesizer.</p>",
        "keywords": "Program Synthesis, Query by Demonstration",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/KevinXiangyuZhou/Sickle_Artifact_Pldi22/tree/v1.0.0"
    },
    "10.5281/zenodo.6330461": {
        "doi": "10.5281/zenodo.6330461",
        "author": "Choi, Wonhyuk and Finkbeiner, Bernd and Piskac, Ruzica and Santolucito, Mark",
        "title": "Artifact Package for \"Can Reactive Synthesis and Syntax-Guided Synthesis Be Friends?\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6330461",
        "abstract": "<p>Instructions to download and run the tool temos, the artifact for the paper “Can Reactive Synthesis and Syntax-Guided Synthesis Be Friends?”</p>",
        "keywords": "Program Synthesis, Reactive Synthesis, Syntax-Guided Synthesis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6330573": {
        "doi": "10.5281/zenodo.6330573",
        "author": "Verbeek, Freek and Bockenek, Joshua and Fu, Zhoulai and Ravindran, Binoy",
        "title": "Artifact for Article `Formally Verified Lifting of C-compiled x86-64 Binaries'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6330573",
        "abstract": "<p>This artifact accompanies the PLDI’22 article `Formally Verified Lifting of C-compiled x86-64 Binaries’. It can be used to disassemble x86-64 binaries and export proofs of correctness to the Isabelle/HOL theorem prover.</p>",
        "keywords": "binary verification, disassembly, formal methods",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/jabocken/SSM-Construction/tree/v2.0.0.2"
    },
    "10.5281/zenodo.6330707": {
        "doi": "10.5281/zenodo.6330707",
        "author": "Tao, Runzhou and Shi, Yunong and Yao, Jianan and Li, Xupeng and Javadi-Abhari, Ali and Cross, Andrew W. and Chong, Frederic T. and Gu, Ronghui",
        "title": "Artifact for PLDI 2022 paper Giallar: Push-button Verification for the Qiskit Quantum Compiler",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6330707",
        "abstract": "<p>The artifact contains the docker image file needed to reproduce the results presented in the paper.</p>",
        "keywords": "automated verification, compiler verification, quantum computing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6330740": {
        "doi": "10.5281/zenodo.6330740",
        "author": "Pit-Claudel, Cl\\'{e",
        "title": "Artifact for \"Relational Compilation for Performance-Critical Applications\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6330740",
        "abstract": "<p>A virtual machine submitted to PLDI 2022’s artifact evaluation committee.</p>",
        "keywords": "compilation, theorem proving, verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6351111": {
        "doi": "10.5281/zenodo.6351111",
        "author": "Guo, Zheng and Cao, David and Tjong, Davin and Yang, Jean and Schlesinger, Cole and Polikarpova, Nadia",
        "title": "Reproduction package of \"Type-Directed Program Synthesis for RESTful APIs\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6351111",
        "abstract": "<p>This package includes a VMware virtual machine to reproduce results reported in the paper “Type-Directed Program Synthesis for RESTful APIs”.</p>",
        "keywords": "Program Synthesis, RESTful API, Type Inference",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6354482": {
        "doi": "10.5281/zenodo.6354482",
        "author": "Doenges, Ryan and Kapp\\'{e",
        "title": "Leapfrog: Certified Equivalence for Protocol Parsers",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6354482",
        "abstract": "<p>This is the artifact accompanying the paper “Leapfrog: Certified Equivalence for Protocol Parsers”, to appear at PLDI 2022. See the README.md file for more details and installation instructions.</p>",
        "keywords": "automata, certified parsers, Coq, equivalence, foundational verification, network protocol parsers, P4",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6366190": {
        "doi": "10.5281/zenodo.6366190",
        "author": "Fehr, Mathieu and Niu, Jeff and Riddle, River and Amini, Mehdi and Su, Zhendong and Grosser, Tobias",
        "title": "IRDL: An IR Definition Language for SSA Compilers - PLDI 2022 Artifact Evaluation",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6366190",
        "abstract": "<p>The artifact provides: * A python tool to extract an IRDL representation of the 28 dialects available in MLIR. Each dialect can be extracted in two variants: (1) contains constraints that can currently be enforced by our IRDL implementation, (2) contains additional IRDL constraints that demonstate the full expressiveness of IRDL. The reader can manually inspect the IRDL file of each dialect to get a visual impression of the IRDL files for typical MLIR dialects. * Scripts to reproduce all plots (except Figure 3) from the evaluation section of the paper. In particular, Figure 3 is not reproduced * An implementation of the key language constructs of IRDL for MLIR, which can be registered at runtime and supports the following constructs: * Definition of dialects * Operations with operands, results, and constraint variables * Types * The following type constraints: <code>Any</code>, <code>AnyOf</code>, equality constraint, base constraint, parametric constraint</p>",
        "keywords": "Compilers, Intermediate Representation, MLIR",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6366296": {
        "doi": "10.5281/zenodo.6366296",
        "author": "Ahrens, Willow and Kjolstad, Fredrik and Amarasinghe, Saman",
        "title": "Autoscheduling for Sparse Tensor Algebra with an Asymptotic Cost Model (The Artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6366296",
        "abstract": "<p>An artifact to replicate the results of “Autoscheduling for Sparse Tensor Algebra with an Asymptotic Cost Model”, Willow Ahrens, Fredrik Kjolstad, and Saman Amarasinghe. PLDI 2022.</p>",
        "keywords": "Asymptotic Analysis, Automatic Scheduling, Compilers, Conjunctive Query Containment, Query Optimization, Sparse Tensors",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6374369": {
        "doi": "10.5281/zenodo.6374369",
        "author": "Dang, Hoang-Hai and Jung, Jaehwang and Choi, Jaemin and Nguyen, Duc-Than and Mansky, William and Kang, Jeehoon and Dreyer, Derek",
        "title": "Compass: Strong and Compositional Library Specifications in Relaxed Memory Separation Logic (Artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6374369",
        "abstract": "<p>This contains a snapshot of the Compass development.</p>\n<p>More updated information can be found at https://plv.mpi-sws.org/compass/.</p>",
        "keywords": "C11, Coq, Iris, Linearizabliity, Logical Atomicity, Relaxed Memory, Separation Logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6392272": {
        "doi": "10.5281/zenodo.6392272",
        "author": "Chen, Yishen and Mendis, Charith and Amarasinghe, Saman",
        "title": "Reproduction Package for \"All You Need Is Superword-Level Parallelism: Systematic Control-Flow Vectorization with SLP\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6392272",
        "abstract": "<p>Artifact to reproduce the result in the paper.</p>",
        "keywords": "Compiler, Optimization, SIMD, Vectorization",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6394618": {
        "doi": "10.5281/zenodo.6394618",
        "author": "Fl\\\"{u",
        "title": "Artifact of \"Deoptless: Speculation with Dispatched On-Stack Replacement and Specialized Continuations\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6394618",
        "abstract": "<p>This is the artifact to accompany our PLDI 2022 submission on “Deoptless: Speculation with Dispatched On-Stack Replacement and Specialized Continuations”. The artifact consists of a virtual machine for the R language, called \\v{R",
        "keywords": "virtual machine",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6395059": {
        "doi": "10.5281/zenodo.6395059",
        "author": "Gorjiara, Hamed and Luo, Weiyu and Lee, Alex and Xu, Guoqing Harry and Demsky, Brian",
        "title": "Replication Package for Article: Checking Robustness to Weak Persistency Models",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6395059",
        "abstract": "<p>This artifact contains a vagrant repository that downloads and compiles the source code for PSan(a plugin for Jaaru), its companion compiler pass, and benchmarks. The artifact enables users to reproduce the bugs that are found by PSan in PMDK and RECIPE (Table 2",
        "keywords": "Crash Consistency Bugs, Jaaru, Persistency Bugs, Persistent Memory Model Checker, PMDK, PSan, RECIPE, Robustness Violations",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6402134": {
        "doi": "10.5281/zenodo.6402134",
        "author": "Honor\\'{e",
        "title": "Artifact For \"Adore: Atomic Distributed Objects with Certified Reconfiguration\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6402134",
        "abstract": "<p>This is the Coq implementation of the Adore model, safety proof, and refinement described in the paper. It also includes an executable instantiation of the abstract model using OCaml extraction. Refer to the README for build instructions and additional details.</p>",
        "keywords": "consensus protocols, Coq, distributed systems, formal verification, reconfiguration, refinement",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6408463": {
        "doi": "10.5281/zenodo.6408463",
        "author": "Rocha, Rodrigo C. O. and Sprokholt, Dennis and Fink, Martin and Gouicem, Redha and Spink, Tom and Chakraborty, Soham and Bhatotia, Pramod",
        "title": "Lasagne: A Static Binary Translator for Weak Memory Model Architectures",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6408463",
        "abstract": "<p>Artifact for the paper titled “Lasagne: A Static Binary Translator for Weak Memory Model Architectures” published in the Conference on Programming Language Design and Implementation, 2022. It contains the automated proofs presented in the paper as well as the software for the Lasagne system and its evaluation.</p>",
        "keywords": "LLVM, Memory Model, Static Binary Translation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6409577": {
        "doi": "10.5281/zenodo.6409577",
        "author": "Morelli, Canberk and Reineke, Jan",
        "title": "Replication Package for Warping Cache Simulation of Polyhedral Programs",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6409577",
        "abstract": "<p>This is the artifact of the conference paper “Warping Cache Simulation of Polyhedral Programs” at PLDI 2022.</p>\n<p>The artifact structure is as follows: - <code>benchmark</code>: The <a href=\"https://web.cse.ohio-state.edu/~pouchet.2/software/polybench/\">PolyBench</a> benchmark that is used in our experiments. - <code>data</code>: The data we obtained from our experiments (<code>data/existing</code>) which are presented in our paper as plots. The data that you will reproduce will also be available here (<code>data/reproduced</code>). - <code>haystack-artifact</code>: The <a href=\"https://dl.acm.org/do/10.1145/332599\">artifact</a> provided by the related work <a href=\"https://dl.acm.org/doi/10.1145/3314221.3314606\">HayStack</a>. - <code>plots</code>: The plots you will generate (<code>plots/from-existing-data</code> and <code>plots/from-reproduced-data</code>). - <code>scripts</code>: The scripts for repeating our experiments and generating our figures. - <code>warping-cache-simulation</code>: The source code of our cache simulation tool. - <code>d4-7.tar.gz</code>: DineroIV package, used only if the ftp server used in <code>haystack-artifact/Dockerfile</code> is down. - <code>Dockerfile</code>: File to build our Docker image, which will be used to repeat our experiments and generate our plots. - <code>README.md</code>: This file. We suggest using a “markdown capable” viewer to read the file. - <code>paper-submission-version.pdf</code>: The submission version of our accepted paper.</p>\n<p>Please refer to the README.md for more information.</p>",
        "keywords": "cache model, cache simulation, data independence, performance analysis, simulation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6410434": {
        "doi": "10.5281/zenodo.6410434",
        "author": "Chaliasos, Stefanos and Sotiropoulos, Thodoris and Spinellis, Diomidis and Gervais, Arthur and Livshits, Benjamin and Mitropoulos, Dimitris",
        "title": "Replication Package for Article: \"Finding Typing Compiler Bugs\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6410434",
        "abstract": "<p>The purpose of this artifact is to reproduce the results presented in the PLDI 2022 paper titled “Finding Typing Compiler Bugs”. The artifact contains the instructions, tool, and scripts to re-run the evaluation described in the paper. The artifact has the following structure:</p>\n<ul>\n<li>scripts/: This directory contains the scripts needed to re-run the experiments presented in our paper.</li>\n<li>data/: This is the directory that contains the precomputed results of our evaluation.</li>\n<li>database/bug_schema.sql: This is the database schema that contains the bugs discovered by our approach.</li>\n<li>database/bugdb.sqlite3: This is the sqlite3 database file corresponding to our bug database.</li>\n<li>database/bugs.json: This JSON file contains the bugs of database/bugdb.sqlite.</li>\n<li>hephaestus/: Contains the source code of the tool (provided as a git submodule) used for testing the compilers of Java, Kotlin, and Groovy. The name of our tool is Hephaestus.</li>\n<li>installation_scripts/: Contains helper scripts used to install all dependencies (e.g., compiler versions from SDKMAN).</li>\n<li>figures/: This directory will be used to save figure 8 of the paper.</li>\n<li>Dockerfile: The Dockerfile used to create a Docker image of our artifact. This image contains all data and dependencies.</li>\n</ul>",
        "keywords": "compiler bugs, compiler testing, Groovy, Java, Kotlin, static typing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6412048": {
        "doi": "10.5281/zenodo.6412048",
        "author": "Guria, Sankha Narayan and Vazou, Niki and Guarnieri, Marco and Parker, James",
        "title": "Replication package for \"ANOSY: Approximated Knowledge Synthesis with Refinement Types for Declassification\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6412048",
        "abstract": "<p>The artifact is a Docker image that contains all of the source code, benchmarks, and experiment harnesses used in the development of the paper (set-up and ready to run). The README contains instructions to reproduce results from the paper, as well as pointers for how to use, extend or modify the tool and benchmarks.</p>",
        "keywords": "knowledge-based privacy, program synthesis, program verification, refinement types",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6413018": {
        "doi": "10.5281/zenodo.6413018",
        "author": "Kortbeek, Vito and Ghosh, Souradip and Hester, Josiah and Campanoni, Simone and Pawe\\l{",
        "title": "WARio: Efficient Code Generation for Intermittent Computing - PLDI 2022 Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6413018",
        "abstract": "<p>This is the PLDI 2022 artifact for WARio, a compiler-support runtime for intermittently-powered platforms with non-volatile main memory.</p>\n<p>This artifact is separated into three downloadable objects: * docker.zip, which holds all the Dockerfiles and prebuilt Docker containers. * code.zip, which holds all the source code (also available at: https://github.com/TUDSSL/WARio) * README.md, a markdown file containing more details about this artifact and how to evaluate it properly.</p>\n<p>The docker containers can go through all the steps required to reproduce WARio, from building WARio and its dependencies to generating the figures and tables presented in the paper (and more).</p>\n<p>For more information, please download the README.md file in this artifact.</p>\n<p>Accompanying GitHub repository: https://github.com/TUDSSL/WARio</p>\n<p>Supporting grants: NWO: P15-06 NSF: CNS-1850496, CNS-2145584, CCF-1908488, CNS-1763743</p>",
        "keywords": "ARM, battery-free, compiler-support, embedded, intermittent computing, mixed-memory architecture, non-volatile memory, PLDI",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6413290": {
        "doi": "10.5281/zenodo.6413290",
        "author": "Cho, Minki and Lee, Sung-Hwan and Lee, Dongjae and Hur, Chung-Kil and Lahav, Ori",
        "title": "Coq Development for the article `Sequential Reasoning for Optimizing Compilers Under Weak Memory Concurrency`",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6413290",
        "abstract": "<p>This artifact contains Coq development of the promising semantics model extended with non-atomic accesses, the SEQ model and its soundness theorem, and the certified optimizer.</p>",
        "keywords": "Compiler Optimizations, Operational Semantics, Relaxed Memory Concurrency",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6413814": {
        "doi": "10.5281/zenodo.6413814",
        "author": "\\v{Z",
        "title": "Differential Cost Analysis with Simultaneous Potentials and Anti-potentials (Artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6413814",
        "abstract": "<p>The artifact contains a prototype tool for differential cost analysis of numerical C programs with polynomial arithmetic and possibly with non-determinism. Given two programs together with their input sets, the tool computes an upper bound on the maximal difference in cost usage between the two programs on any initial variable valuation that is contained in both input sets. Cost may take both positive and negative values, and we assume that each program has a special variable “cost” that is initialized to 0 and that is updated whenever cost is incurred in the program. It could be used to track program runtime, memory usage, the number of object allocations, or any other program property of interest that could be tracked by a program variable.</p>\n<p>The artifact is provided both as a docker image and as a zip of all source files. The reason for providing both is that, in our experimental evaluation, we use Gurobi for linear programming (LP) which is licensed and is free only for academic use. Thus, we cannot install Gurobi in our docker image but replace it with the GLPK solver. GLPK allows reproducing our experimental results with slightly longer runtimes (details are provided in README). To reproduce our reported experimental results with Gurobi, one needs to build the tool from source files and instructions for doing so are provided in README.</p>",
        "keywords": "Cost analysis, Differential cost analysis, Potential functions, Relational reasoning",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6414469": {
        "doi": "10.5281/zenodo.6414469",
        "author": "Grewal, Karuna and D'Antoni, Loris and Hsu, Justin",
        "title": "Reproduction Package for Article \"P4BID: Information Flow Control in P4\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6414469",
        "abstract": "<p>The artifact contains the main Readme.txt describing how to reproduce the evaluation presented in the paper using the baseline original P4c compiler and its IFC extension.</p>",
        "keywords": "IFC, P4",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6414787": {
        "doi": "10.5281/zenodo.6414787",
        "author": "Mulder, Ike and Krebbers, Robbert and Geuvers, Herman",
        "title": "Artifact and Appendix of 'Diaframe: Automated Verification of Fine-Grained Concurrent Programs in Iris'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6414787",
        "abstract": "<p>This is the artifact for the PLDI ‘22 paper ’Diaframe: Automated Verification of Fine-Grained Concurrent Programs in Iris’. It contains the Diaframe source code, a VM containing a compiled version of this source code, the appendix for the paper, and instructions for evaluation.</p>",
        "keywords": "Coq, fine-grained concurrency, Iris, proof automation, Separation logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6416420": {
        "doi": "10.5281/zenodo.6416420",
        "author": "Paraskevopoulou, Zoe and Eline, Aaron and Lampropoulos, Leonidas",
        "title": "Artifact for Computing Correctly with Inductive Relations",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6416420",
        "abstract": "<p>VM containing ready-to-build experiments for the paper.</p>",
        "keywords": "Coq, Inductive relations, QuickChick",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6416442": {
        "doi": "10.5281/zenodo.6416442",
        "author": "Christensen, Michael and Tzimpragos, Georgios and Kringen, Harlan and Volk, Jennifer and Sherwood, Timothy and Hardekopf, Ben",
        "title": "Reproduction Package for Article \"PyLSE: A Pulse-Transfer Level Language for Superconductor Electronics\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6416442",
        "abstract": "<p>PyLSE is a Python-embedded pulse-transfer level language for the design and simulation of superconductor electronics (SCE). The purpose of PyLSE is to make it easier to create precise and composable models of the basic SCE cells (i.e.&nbsp;gates), use these models to create larger systems, quickly get up and running in the built-in simulation framework, and finally prove various properties about these cells and systems using a state-of-the-art model checker. This artifact will show you how to do so, as well as show you how to get the results in the tables and figures found in the evaluation section of our paper.</p>",
        "keywords": "hardware description language, superconductor electronics, timed automata",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6416483": {
        "doi": "10.5281/zenodo.6416483",
        "author": "O'Connor, Liam and Wickstr\\\"{o",
        "title": "Reproduction Package for 'Quickstrom: Property-based acceptance testing with LTL specifications'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6416483",
        "abstract": "<p>This artifact contains the software, source code, and experimental results for the paper ‘Quickstrom: Property-based acceptance testing with LTL specifications’ at PLDI 2022. See README.TXT for more details.</p>",
        "keywords": "programming, property-based testing, results, software, web applications",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6417959": {
        "doi": "10.5281/zenodo.6417959",
        "author": "Sammler, Michael and Hammond, Angus and Lepigre, Rodolphe and Campbell, Brian and Pichon-Pharabod, Jean and Dreyer, Derek and Garg, Deepak and Sewell, Peter",
        "title": "Artifact for \"Islaris: Verification of Machine Code Against Authoritative ISA Semantics\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6417959",
        "abstract": "<p>This is the artifact for the PLDI’22 paper “Islaris: Verification of Machine Code Against Authoritative ISA Semantics”. It contains the Coq development for the paper.</p>",
        "keywords": "Arm, assembly, Coq, Iris, Isla, proof automation, RISC-V, Sail, separation logic, verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6419124": {
        "doi": "10.5281/zenodo.6419124",
        "author": "Ikarashi, Yuka and Bernstein, Gilbert Louis and Reinking, Alex and Genc, Hasan and Ragan-Kelley, Jonathan",
        "title": "Exocompilation for Productive Programming of Hardware Accelerators",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6419124",
        "abstract": "<p>This artifact consists of a Docker image capable of reproducing our AVX-512 benchmarks on compatible hardware (e.g.&nbsp;Skylake-X or Tiger Lake). To use the latest Exo system for practical development, we refer readers to our GitHub repository at: https://github.com/ChezJrk/exo and our Python package at: https://pypi.org/project/exo-lang/</p>",
        "keywords": "Code optimization, Computer architecture, High performance computing, Language design",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6450309": {
        "doi": "10.5281/zenodo.6450309",
        "author": "Farzan, Azadeh and Klumpp, Dominik and Podelski, Andreas",
        "title": "Artifact for PLDI'22 paper \"Sound Sequentialization for Concurrent Program Verification\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6450309",
        "abstract": "<p>This artifact for the PLDI’22 paper “Sound Sequentialization for Concurrent Program Verification” consists of a docker image that contains source code for the evaluated verifiers, compiled binaries of the verifiers, benchmark programs to compare the verifiers, and the raw evaluation results that form the basis for the discussion in the paper.</p>",
        "keywords": "Concurrency, Partial Order Reduction, Sequentialization",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6460021": {
        "doi": "10.5281/zenodo.6460021",
        "author": "Bendrissou, Bachir and Gopinath, Rahul and Zeller, Andreas",
        "title": "Reproduction package for “Synthesizing Input Grammars”: A Replication Study",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6460021",
        "abstract": "<p>This is a virtual box image that contains all experiments necessary to reproduce the results of the paper “Synthesizing Input Grammars”: A Replication Study.</p>",
        "keywords": "glade, grammar mining, replication",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6466911": {
        "doi": "10.5281/zenodo.6466911",
        "author": "Dhulipala, Laxman and Blelloch, Guy E. and Gu, Yan and Sun, Yihan",
        "title": "CPAM (Compressed Parallel Augmented Maps), an implementation of \"PaC-Trees: Supporting Parallel and Compressed Purely-Functional Collections\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6466911",
        "abstract": "<p>CPAM (Compressed Parallel Augmented Maps) is a parallel C++ library providing an implementation of the PaC-tree data structure, which is used to provide an interface for augmented maps that supports blocking of the nodes and applying user-defined compression schemes on the underlying data. CPAM’s interface is an extension of the interface from the PAM (Parallel Augmented Maps) library. CPAM is designed for maintaining ordered map data structures on potentially large and compressed datasets while efficiently answering queries (e.g., range queries) and performing dynamic updates on the data.</p>\n<p>In the experiments, we use the interface in four examples: an inverted index, interval-queries, 2d range-queries, and graph processing. This artifact provides a self-contained docker image, includes examples and scripts for running the main experiments reported in the paper. It has also been designed to make it easy to try many other scenarios (e.g., different sizes, different datasets, different numbers of cores, and other operations described in the paper, but not reported in the experiments).</p>\n<p>More details, examples, and discussion can be found in our paper.</p>",
        "keywords": "parallel data structures, purely-functional data structures, space-efficient data structures",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6468999": {
        "doi": "10.5281/zenodo.6468999",
        "author": "Anderson, Daniel and Blelloch, Guy E. and Wei, Yuanhao",
        "title": "Artifact for \"Turning Manual Concurrent Memory Reclamation into Automatic Reference Counting\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6468999",
        "abstract": "<p>This artifact contains our code and experiments as they were at the time of <strong>submission</strong>, and hence, at the time that they were validated by the artifact evaluation comittee. The latest version of our code can always be obtained from <a href=\"https://github.com/cmuparlay/concurrent_deferred_rc\">here</a>. If you wish to build on our code for your own research, we highly recommend obtaining the latest version.</p>\n<p>Note that this artifact does not contain the commercial <a href=\"https://www.stdthread.co.uk/\">just::threads</a> library, which we compare with in Figure 13 of our paper, due to copyright. This artifact is still able to plot Figure 13, but without the line for just::threads.</p>",
        "keywords": "automatic memory reclamation, concurrency, lock-free, smart pointers",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6470820": {
        "doi": "10.5281/zenodo.6470820",
        "author": "Beutner, Raven and Ong, C.-H. Luke and Zaiser, Fabian",
        "title": "Artifact for: Guaranteed Bounds for Posterior Inference in Universal Probabilistic Programming (PLDI 2022)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6470820",
        "abstract": "<p>This is the artifact for “Guaranteed Bounds for Posterior Inference in Universal Probabilistic Programming” (PLDI 2022). It contains the implementation of the GuBPI tool, which can compute Guaranteed Bounds for Posterior Inference. It also includes the benchmarks from the paper and scripts to reproduce the reported data. For convenience, Docker images are also provided to allow for quick experimentation.</p>",
        "keywords": "abstract interpretation, Bayesian inference, interval arithmetic, operational semantics, probabilistic programming, symbolic execution, type system, verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6501665": {
        "doi": "10.5281/zenodo.6501665",
        "author": "Matsushita, Yusuke and Denis, Xavier and Jourdan, Jacques-Henri and Dreyer, Derek",
        "title": "RustHornBelt: A Semantic Foundation for Functional Verification of Rust Programs with Unsafe Code, Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6501665",
        "abstract": "<p>It is the artifact for the PLDI 2022 paper “RustHornBelt: A Semantic Foundation for Functional Verification of Rust Programs with Unsafe Code”. It contains the Coq mechanization of RustHornBelt’s type-spec system and its semantic soundness proof, as well as the benchmarks that evaluate RustHornBelt’s specs using a semi-automated Rust verifier Creusot.</p>",
        "keywords": "Coq mechanization, Iris, Rust, semi-automated verification, separation logic, Why3",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6501899": {
        "doi": "10.5281/zenodo.6501899",
        "author": "Zhao, Wenyu and Blackburn, Stephen M. and McKinley, Kathryn S.",
        "title": "[PLDI'22 Artifact] #132 Low-Latency, High-Throughput Garbage Collection",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6501899",
        "abstract": "<p>Artifact for PLDI 2022 paper: Low-Latency, High-Throughput Garbage Collection</p>\n<p>Please check https://github.com/wenyuzhao/lxr-pldi-2022-artifact/blob/main/README.md for instructions on building and evaluating the artifact.</p>\n<p>Please refer to https://github.com/wenyuzhao/mmtk-core/tree/lxr for the latest implementation.</p>",
        "keywords": "Garbage collection, Reference counting",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6503045": {
        "doi": "10.5281/zenodo.6503045",
        "author": "Zha, Junpeng and Liang, Hongjin and Feng, Xinyu",
        "title": "Artifact of \"Verifying Optimizations of Concurrent Programs in the Promising Semantics\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6503045",
        "abstract": "<p>This is the artifact of PLDI22-paper984 “Verifying Optimizations of Concurrent Programs in the Promising Semantics”. We package our artifact (mechanized proof of the verification framework introduced in our paper in the Coq) in the virtual machine VirtualBox-6.1.32 as <code>pldi22-paper984.ova</code>. Detailed descriptions of the artifact can be found in the README.txt.</p>",
        "keywords": "Code optimizations, Concurrency, Coq, Verification, Weak memory models",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6503142": {
        "doi": "10.5281/zenodo.6503142",
        "author": "Chen, Yanju and Yan, Xifeng and Feng, Yu",
        "title": "Research Artifact for PLDI'22 Paper: Visualization Question Answering Using Introspective Program Synthesis",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6503142",
        "abstract": "<p>Research Artifact for PLDI’22 Paper: Visualization Question Answering Using Introspective Program Synthesis</p>",
        "keywords": "Machine Learning, Program Synthesis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6508992": {
        "doi": "10.5281/zenodo.6508992",
        "author": "Xu, Mingkuan and Li, Zikun and Padon, Oded and Lin, Sina and Pointing, Jessica and Hirth, Auguste and Ma, Henry and Palsberg, Jens and Aiken, Alex and Acar, Umut A. and Jia, Zhihao",
        "title": "Artifact for PLDI 2022 Paper: Quartz: Superoptimization of Quantum Circuits",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6508992",
        "abstract": "<p>Quartz is a quantum circuit optimizer that automatically generates and verifies circuit transformations for an arbitrary quantum gate set. To optimize an input quantum circuit, Quartz uses these auto-generated circuit transformations to construct a search space of functionally equivalent quantum circuits. Quartz uses a cost-based search algorithm to explore the space and discovers highly optimized quantum circuits.</p>\n<p>Quartz is open-source and developed on GitHub: https://github.com/quantum-compiler/quartz.</p>\n<p>This artifact supports the PLDI 2022 paper about Quartz, and contains the implementation and scripts used to obtain the results reported in the paper. See also the extended version of the paper at https://arxiv.org/abs/2204.09033.</p>",
        "keywords": "quantum computing, superoptimization",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/quantum-compiler/quartz-artifact/tree/v1.2.3"
    },
    "10.5281/zenodo.6509997": {
        "doi": "10.5281/zenodo.6509997",
        "author": "Aanjaneya, Mridul and Lim, Jay P. and Nagarakatte, Santosh",
        "title": "Artifact for Progressive Polynomial Approximations for Fast Correctly Rounded Math Libraries",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6509997",
        "abstract": "<p>We present the artifact for the paper, “Progressive Polynomial Approximations for Fast Correctly Rounded Math Libraries.” We describe the list of claims made by the paper, evaluation instructions, and instructions on how to use RLIBM-PROG. To ease the installation effort, we provide a docker image with all but one required softwares installed already (with instructions on how to build the remaining required software in the docker image). Additionally, we provide complete instructions to manually install the artifact on Ubuntu 20.04.</p>",
        "keywords": "Correct rounded elementary functions, progressive polynomials, RLIBM, RLIBM-PROG",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6512301": {
        "doi": "10.5281/zenodo.6512301",
        "author": "Ma, Haoran and Liu, Shi and Wang, Chenxi and Qiao, Yifan and Bond, Michael D. and Blackburn, Stephen M. and Kim, Miryung and Xu, Guoqing Harry",
        "title": "Mako -- A Low-Pause, High-Throughput Evacuating Collector for Memory-Disaggregated Datacenters",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6512301",
        "abstract": "<p>Mako contains the following three components:</p>\n<ul>\n<li>the Linux kernel with functionalities required by Mako - kernel</li>\n<li>the CPU-server Java Virtual Machine - Mako-CPU</li>\n<li>the Memory-server Java Virtual Machine - Mako-Memory</li>\n</ul>",
        "keywords": "Disaggregation, Garbage Collection",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6514315": {
        "doi": "10.5281/zenodo.6514315",
        "author": "Greenman, Ben",
        "title": "Deep and Shallow Types for Gradual Languages",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6514315",
        "abstract": "<p>Data, analysis scripts, and source code.</p>",
        "keywords": "complete monitoring, gradual typing, migratory typing, type enforcement strategies",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6385800": {
        "doi": "10.5281/zenodo.6385800",
        "author": "Dolby, Julian and Tsay, Jason and Hirzel, Martin",
        "title": "Replication kit for \"Automatically Debugging AutoML Pipelines Using Maro: ML Automated Remediation Oracle\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6385800",
        "abstract": "<p>This archive contains our tool, data, and experimental results used for the evaluation for our MAPS 2022 paper entitled “Automatically Debugging AutoML Pipelines Using Maro: ML Automated Remediation Oracle.”</p>",
        "keywords": "AI Debugging, Automated Debugging, Automated Remediation, AutoML",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6598647": {
        "doi": "10.5281/zenodo.6598647",
        "author": "Liu, Fengyun and Prokopec, Aleksandar",
        "title": "Artifact for paper implicit state machines LCTES 2022",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6598647",
        "abstract": "<p>This is the artefact for the paper “implicit state machines” at LCTES 2022.</p>\n<p>Note that DSL is an old version and thus deprecated. We are working on a newer version with a better design.</p>",
        "keywords": "digital design, DSL, implicit state machine",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6605099": {
        "doi": "10.5281/zenodo.6605099",
        "author": "Wang, Tianyu and Shen, Zhaoyan and Shao, Zili",
        "title": "Reproduction package of \"Co-mining: A Processing-in-Memory Assisted Framework for Memory-Intensive PoW Acceleration\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6605099",
        "abstract": "<p>A simple simulator that can simulate hashrate for different NVIDIA graphic cards with GDDR6 or HBM-PIM. Content: /configs: All the configurations of different graphic cards. /build: The trace file and result analysis scripts. /src: Main logic of the simulator.</p>",
        "keywords": "GPU-PIM simulator",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6607837": {
        "doi": "10.5281/zenodo.6607837",
        "author": "Chen, Zizhan and Shang, Siqi and Wu, Qihong and Xue, Jin and Shen, Zhaoyan and Shao, Zili",
        "title": "AE Package for \"An Old Friend Is Better Than Two New Ones: Dual-Screen Android\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6607837",
        "abstract": "<p>The artifact is for “An Old Friend Is Better Than Two New Ones: Dual-Screen Android”. App_List.pdf contains the Corpus-L application list.</p>\n<p>Modifications/ folder contains the modified files.</p>\n<p>Scripts/ folder contains the scripts.</p>\n<p>Expected_outputs/ folder contains the expected outputs.</p>\n<p>Link to the demo Videos: https://mycuhk-my.sharepoint.com/:f:/g/personal/1155107934_link_cuhk_edu_hk/EmUhtXbQ5I5EqrmK66yOrDQBS7948nAc2ye-JFsBp5xd5w?e=bbP3gw</p>\n<p>AE_Addition/ contains the python scripts to generate the experimental results.</p>",
        "keywords": "display energy optimization, Embedded system, mobile system",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6630188": {
        "doi": "10.5281/zenodo.6630188",
        "author": "Rabin, Md Rafiqul Islam and Hussain, Aftab and Alipour, Mohammad Amin",
        "title": "Artifact for Article (CI-DD-PERSES): Syntax-Guided Program Reduction for Understanding Neural Code Intelligence Models",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6630188",
        "abstract": "<p>This artifact contains the prediction-preserving program reduction code and the experimental reduced data using the DD and Perses algorithms for our paper ‘Syntax-Guided Program Reduction for Understanding Neural Code Intelligence Models’ accepted at MAPS’22. For extracting key features in the model’s prediction, we integrate the Perses \\&amp; DD simplification algorithms with the CI model as a black-box framework into SIVAND-Perses and SIVAND-DD, respectively. The main insight is that, by reducing some input programs of a target label, we can better understand what key input features a CI model learns from the training dataset.</p>",
        "keywords": "Feature Engineering, Interpretability, Neural Models of Source Code, Program Reduction, Transparency",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/mdrafiqulrabin/CI-DD-Perses/tree/v1.0"
    },
    "10.5281/zenodo.5734090": {
        "doi": "10.5281/zenodo.5734090",
        "author": "Ngo, Chanh-Duc and Pastore, Fabrizio and Briand, Lionel C.",
        "title": "Reproduction package for \"Automated, Cost-effective, and Update-driven App Testing\" paper",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5734090",
        "abstract": "<p>This repository contains the replicability package for the evaluation conducted in the paper “Chanh Duc Ngo, Fabrizio Pastore, and Lionel Briand. 2021. Automated, Cost-effective, and Update-driven App Testing. ACM Trans. Softw. Eng. Methodol. Just Accepted (November 2021). https://dl.acm.org/doi/10.1145/3502297”. The most recent version of the tool can also be found at https://github.com/SNTSVV/ATUA</p>",
        "keywords": "Android Testing, Model-based Testing, Regression Testing, Upgrade Testing",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6480633": {
        "doi": "10.5281/zenodo.6480633",
        "author": "Lu, Yifei and Pan, Minxue and Pei, Yu and Li, Xuandong",
        "title": "The reproduction package for 'Detecting Resource Utilization Bugs Induced by Variant Lifecycles in Android'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6480633",
        "abstract": "<p>VALA is a static analyzer to detect resource utilization bugs in Android applications induced by variant lifecycles. The VALA artifact has three components: (1) the executable jar file with configuration files in the folder ‘bin’; (2) the benchmark including 35 apps and all the experiment results in the folder ‘BenchmarkAndResults’; (3) a ‘README.md’ and demonstration video to teacher users how to use VALA and reproduce the experiment. With the three components, users can easily reproduce the experiment and get the results claimed in our paper ‘Detecting Resource Utilization Bugs Induced by Variant Lifecycles in Android’ within around 10 minutes. If provided with APK files of other Android apps as input, VALA can also detect the resource utilization bugs induced by variant lifecycles in the apps.</p>",
        "keywords": "Android applications, resource utilization bugs, static analysis, variant lifecycles",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6481927": {
        "doi": "10.5281/zenodo.6481927",
        "author": "Wang, Tao and Zhang, Kangkang and Chen, Wei and Dou, Wensheng and Zhu, Jiaxin and Wei, Jun and Huang, Tao",
        "title": "Dataset for ISSTA'22 Understanding Device Integration Bugs in Smart Home System",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6481927",
        "abstract": "<p>This is the dataset for the ISSTA`22 submission “Understanding Device Integration Bugs in Smart Home System”. It contains 330 device integration bugs collected from the most popular open source SmartHome system, i.e., Home Assistant.</p>",
        "keywords": "Home Assistant, integration bug, smart home system",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6508469": {
        "doi": "10.5281/zenodo.6508469",
        "author": "Pang, Qi and Yuan, Yuanyuan and Wang, Shuai",
        "title": "Reproduction package for article \"MDPFuzz: Testing Models Solving Markov Decision Processes\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6508469",
        "abstract": "<p>Official implementation of ISSTA 2022 paper: MDPFuzz: Testing Models Solving Markov Decision Processes.</p>",
        "keywords": "Deep learning testing, Markov decision procedure",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/Qi-Pang/MDPFuzz/tree/v0.0.1"
    },
    "10.5281/zenodo.6515687": {
        "doi": "10.5281/zenodo.6515687",
        "author": "Lipp, Stephan and Banescu, Sebastian and Pretschner, Alexander",
        "title": "Artifacts for the ISSTA 2022 Paper: An Empirical Study on the Effectiveness of Static C Code Analyzers for Vulnerability Detection",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6515687",
        "abstract": "<p>This artifact contains the evaluation script and the corresponding data of the ISSTA’22 paper “An Empirical Study on the Effectiveness of Static C Code Analyzers for Vulnerability Detection”. It can be used to replicate the evaluation results as well as to perform further analyses on the effectiveness of static code analyzers.</p>",
        "keywords": "empirical study, static code analysis, vulnerability detection",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6516024": {
        "doi": "10.5281/zenodo.6516024",
        "author": "Zhong, Ziyuan and Hu, Zhisheng and Guo, Shengjian and Zhang, Xinyang and Zhong, Zhenyu and Ray, Baishakhi",
        "title": "AIasd/FusED",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6516024",
        "abstract": "<p>MIT License</p>\n<p>Copyright (c) 2022 Ziyuan Zhong</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>",
        "keywords": "advanced driving assistance system, causal analysis, multi-sensor fusion, software testing",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/AIasd/FusED/tree/v0.0.1"
    },
    "10.5281/zenodo.6516441": {
        "doi": "10.5281/zenodo.6516441",
        "author": "Liu, Pei and Zhao, Yanjie and Cai, Haipeng and Fazzini, Mattia and Grundy, John and Li, Li",
        "title": "Reproduction Packages for \"Automatically Detecting API-induced Compatibility Issues in Android Apps: A Comparative Analysis (Replicability Study)\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6516441",
        "abstract": "<p>This artefact provides the experimental datasets and results presented in our paper.</p>",
        "keywords": "Android, API, Compatibility Issues, Fragmentation",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6517515": {
        "doi": "10.5281/zenodo.6517515",
        "author": "Chen, Weimin and Sun, Zihan and Wang, Haoyu and Luo, Xiapu and Cai, Haipeng and Wu, Lei",
        "title": "WASAI: Uncovering Vulnerabilities in Wasm Smart Contracts",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6517515",
        "abstract": "<p>WASAI is a concolic fuzzer for identifying vulnerabilities in Wasm smart contracts, taking EOSIO as the mainly Wasm favored blockchain. The source code is uploaded to 10.5281/zenodo.6517515.</p>",
        "keywords": "concolic fuzzing, dynamic software analysis, smart contracts",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6519572": {
        "doi": "10.5281/zenodo.6519572",
        "author": "Li, Yu and Chen, Muxi and Xu, Qiang",
        "title": "Reproduction package for article \"HybridRepair: Towards Annotation-Efficient Repair for Deep Learning Models\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6519572",
        "abstract": "<p>This is an implementation of our paper “HybridRepair: Towards Annotation-Efficient Repair for Deep Learning Models”.HybridRepair is a holistic approach that combines the use of a small amount of labelled data and a large amount of unlabeled data for model repair, based on the observation that model repair requires sufficient local training data density. This artifact contains all the experiment codes in the paper.</p>",
        "keywords": "deep neural networks, model repairing, model testing, semi-supervised learning",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6520942": {
        "doi": "10.5281/zenodo.6520942",
        "author": "Weiss, Michael and Tonella, Paolo",
        "title": "Reproduction Package for Paper `Simple Techniques Work Surprisingly Well for Neural Network Test Prioritization and Active Learning (Replicability Study)`",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6520942",
        "abstract": "<p>This is the reproduction package of the paper Simple Techniques Work Surprisingly Well for Neural Network Test Prioritization and Active Learning by M.Weiss and P.Tonella, published at ISSTA 2022.</p>\n<p>For uses other than reproduction, we also extracted three standalone, general-purpose artifacts: - fashion-mnist-c dataset (Github: https://github.com/testingautomated-usi/fashion-mnist-c) - text corruptor (Github: https://github.com/testingautomated-usi/corrupted-text) - tip implementations (Github: https://github.com/testingautomated-usi/dnn-tip)</p>",
        "keywords": "neural networks, Test prioritization, uncertainty quantification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6529828": {
        "doi": "10.5281/zenodo.6529828",
        "author": "Andronidis, Anastasios and Cadar, Cristian",
        "title": "Artefact for SnapFuzz: High-Throughput Fuzzing of Network Applications",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6529828",
        "abstract": "<p>This is the artefact submitted for the SnapFuzz: High-Throughput Fuzzing of Network Applications paper. The artefact includes a README file with full details on how to run and reproduce our results.</p>\n<p>A latest version can always be found in: https://github.com/srg-imperial/SnapFuzz-artefact</p>",
        "keywords": "afl, aflnet, artefact, binary rewriting, fuzzing, snapfuzz",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6530839": {
        "doi": "10.5281/zenodo.6530839",
        "author": "Kapugama, Charaka Geethal and Pham, Van-Thuan and Aleti, Aldeida and B\\\"{o",
        "title": "Grammar2Fix:Human-in-the-Loop Oracle Learning for Semantic Bugs in String Processing Programs",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6530839",
        "abstract": "<p>GRAMMAR2FIX is an active oracle learning technique for programs processing string inputs. Given a single failing input of a bug, it learns a grammar describing the pattern of all the failing inputs of the bug, interacting with a bug oracle systematically. GRAMMAR2FIX returns this grammar as a collection of Deterministic Finite Automata(DFA), and the grammar can serve as an automated test oracle for the bug. GRAMMAR2FIX also produces a test suite in grammar learning, which can be used as a repair test suite in Automated Program Repair.</p>",
        "keywords": "Automated Test Oracle, Grammar Inference, Software Debugging",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6534062": {
        "doi": "10.5281/zenodo.6534062",
        "author": "Ghaleb, Asem and Rubin, Julia and Pattabiraman, Karthik",
        "title": "Reproduction Package for Article 'eTainter: Detecting Gas-Related Vulnerabilities in Smart Contracts'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6534062",
        "abstract": "<p>The execution of smart contracts on the Ethereum blockchain consumes gas paid for by users submitting contracts’ invocation requests. A contract execution proceeds as long as the users dedicate enough gas for execution and the total gas for the execution is under the block gas limit set by Ethereum. Otherwise, the contract execution halts, and changes made during execution get reverted. Unfortunately, smart contracts may contain code patterns that increase their execution gas cost, causing them to run out of gas. These patterns can be manipulated by malicious attackers to induce unwanted behavior in the targeted victim contracts, e.g., Denial-of-Service (DoS) attacks. We call these gas-related vulnerabilities. The paper proposes eTainter, a static analyzer for detecting gas-related vulnerabilities based on taint tracking in the bytecode of smart contracts.</p>\n<p>In this artifact, we provide the implementation of the proposed approach and the scripts to reproduce results shown in the paper. Further, we provide 3 datasets we have used in our experiments, one of the datasets is annotated dataset.</p>",
        "keywords": "Ethereum, security, Solidity, taint analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6534173": {
        "doi": "10.5281/zenodo.6534173",
        "author": "Rak-amnouykit, Ingkarat and Milanova, Ana and Baudart, Guillaume and Hirzel, Martin and Dolby, Julian",
        "title": "The Raise of Machine Learning Hyperparameter Constraints in Python Code (Artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6534173",
        "abstract": "<p>The artifact for the paper “The Raise of Machine Learning Hyperparameter Constraints in Python Code”.</p>",
        "keywords": "interprocedural analysis, machine learning libraries, Python",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6534229": {
        "doi": "10.5281/zenodo.6534229",
        "author": "Lahiri, Sumit and Roy, Subhajit",
        "title": "Almost Correct Invariants: Synthesizing Inductive Invariants by Fuzzing Proofs",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6534229",
        "abstract": "<p>The artifact is a tar zip file containing the README along with install script to set the tool up and other assets which have been detailed in the README file.</p>",
        "keywords": "fuzzing, inductive invariant synthesis, testing, verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6534292": {
        "doi": "10.5281/zenodo.6534292",
        "author": "Liu, Ye and Li, Yi and Lin, Shang-Wei and Artho, Cyrille",
        "title": "Replication Data for: Finding Permission Bugs in Smart Contracts with Role Mining",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6534292",
        "abstract": "<p>Smart contracts deployed on permissionless blockchains, such as Ethereum, are accessible to any user in a trustless environment. Therefore, most smart contract applications implement access control policies to protect their valuable assets from unauthorized accesses. A difficulty in validating the conformance to such policies, i. e., whether the contract implementation adheres to the expected behaviors, is the lack of policy specifications. In this paper, we mine past transactions of a contract to recover a likely access control model, which can then be checked against various information flow policies and identify potential bugs related to user permissions. We implement our role mining and security policy validation in tool SPCon. The experimental evaluation on labeled smart contract role mining benchmark demonstrates that SPCon effectively mines more accurate user roles compared to the state-of-the-art role mining tools. Moreover, the experimental evaluation on real-world smart contract benchmark and access control CVEs indicates SPCon effectively detects potential permission bugs while having better scalability and lower false-positive rate compared to the state-of-the-art security tools, finding 11 previously unknown bugs and detecting six CVEs that no other tool can find.</p>",
        "keywords": "access control, information flow policy, role mining, Smart contract",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6534329": {
        "doi": "10.5281/zenodo.6534329",
        "author": "Li, Zhiming and Xie, Xiaofei and Li, Haoliang and Xu, Zhengzi and Li, Yi and Liu, Yang",
        "title": "Reproduction Package for Cross-Lingual Transfer Learning for Statistical Type Inference",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6534329",
        "abstract": "<p>The artifact contains data and code for the reproduction of Cross-Lingual Transfer Learning for Statistical Type Inference.</p>",
        "keywords": "Deep Learning, Transfer Learning, Type Inference",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6534525": {
        "doi": "10.5281/zenodo.6534525",
        "author": "Zhou, Hao and Wu, Shuohan and Luo, Xiapu and Wang, Ting and Zhou, Yajin and Zhang, Chao and Cai, Haipeng",
        "title": "Artifacts for \"NCScope: Hardware-Assisted Analyzer for Native Code in Android Apps\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6534525",
        "abstract": "<p>The artifacts contains the code and dataset associated with the ISSTA’22 paper “NCScope: Hardware-Assisted Analyzer for Native Code in Android Apps”.</p>",
        "keywords": "Android, App Analysis, Dynamic Analysis",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6534554": {
        "doi": "10.5281/zenodo.6534554",
        "author": "Kim, Myeongsoo and Xin, Qi and Sinha, Saurabh and Orso, Alessandro",
        "title": "Reproduction Package for Article `Automated Test Generation for REST APIs: No Time to Rest Yet`",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6534554",
        "abstract": "<p>This artifact is for reproducing the results of the article <code>Automated Test Generation for REST APIs: No Time to Rest Yet.</code> It has an automated script to run the ten state-of-the-art REST API testing tools for 20 RESTful services. Users can analyze the result using the provided script.</p>",
        "keywords": "Automated software testing, RESTful APIs",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/codingsoo/REST_Go/tree/v0.4"
    },
    "10.5281/zenodo.6534721": {
        "doi": "10.5281/zenodo.6534721",
        "author": "Zheng, Yingying and Dou, Wensheng and Wang, Yicheng and Qin, Zheng and Tang, Lei and Gao, Yu and Wang, Dong and Wang, Wei and Wei, Jun",
        "title": "ISSTA 22 Artifact for \"Finding Bugs in Gremlin-Based Graph Database Systems via Randomized Differential Testing\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6534721",
        "abstract": "<p>Grand is a tool for finding logic bugs in Gremlin-Based Graph Database Systems (GDBs). We refer to logic bugs as those bugs that GDBs return an unexpected result (e.g., incorrect query result or unexpected error) without crashing the GDBs for a given query.</p>\n<p>Grand operates in the following three phases: 1. Graph database generation: The goal of this phase is to generate a populated graph database for each target GDB. Specially, Grand first randomly generates the graph schema to define the types of vertices and edges. Then, the detailed vertices and edges can be randomly generated according to the generated graph schema. Finally, the generated database will be written into target GDBs. 2. Gremlin query generation: This phase is aimed to generate syntactically correct and valid Gremlin queries. We first construct a traversal model for Gremlin APIs, and then generate Gremlin queries based on the constructed traversal model. 3. Differential Testing: Grand executes the generated Gremlin queries and validates the query results by differential testing.</p>",
        "keywords": "differential testing, Graph database systems, Gremlin",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6534755": {
        "doi": "10.5281/zenodo.6534755",
        "author": "Yang, Shuaihao and Zeng, Zigang and Song, Wei",
        "title": "Reproduction package for Article `PermDroid: Automatically Testing Permission-Related Behaviour of Android Applications'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6534755",
        "abstract": "<p>We propose PermDroid, an automatic testing method and open-source tool to testing permission-related behavior of Android apps. For more information, please read the readme file in the zip file uploaded.</p>",
        "keywords": "Android, dynamic permission model, permission combinations, software testing, static analysis",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6534803": {
        "doi": "10.5281/zenodo.6534803",
        "author": "Huang, Pei and Yang, Yuting and Liu, Minghao and Jia, Fuqi and Ma, Feifei and Zhang, Jian",
        "title": "Reproduction Package for Article \"ε-Weakened Robustness of Deep Neural Networks\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6534803",
        "abstract": "<p>The artifact is used for reproducing the experimental results in the article “ε-Weakened Robustness of Deep Neural Networks”, including the attack algorithm PGD, robustness enhancement algorithm FPP, ε-Weakened robustness evaluation and decision algorithms (EWRE and EWRD) for several neural networks (resnet18, densenet121, dpn92, regnetx_200, etc.)</p>",
        "keywords": "adversarial attack, neural networks, robustness, testing",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6535073": {
        "doi": "10.5281/zenodo.6535073",
        "author": "Guo, Wunan and Dong, Zhen and Shen, Liwei and Tian, Wei and Su, Ting and Peng, Xin",
        "title": "Reproduction Package for Article 'Detecting and Fixing Data Loss Issues in Android Apps'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6535073",
        "abstract": "<p>This tool(iFixDataloss) consists of three components: static analyzer, dynamic explorer and patch generator. It works as follows: In the first step, iFixDataloss uses the static analyzer to build an activity transition graph and get persistent data for the app under test; In the second step, iFixDataloss runs dynamic explorer to detect data loss issues in the app. The relevant data for the data loss issue is stored in a database. Lastly, iFixDataloss takes the source code of the app and the data obtained in the dynamic exploration to generate a patch.</p>",
        "keywords": "dynamic analysis, mobile testing, patching",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6535361": {
        "doi": "10.5281/zenodo.6535361",
        "author": "Zheng, Yaowen and Li, Yuekang and Zhang, Cen and Zhu, Hongsong and Liu, Yang and Sun, Limin",
        "title": "Reproduction Package for 'Efficient Greybox Fuzzing of Applications in Linux-Based IoT Devices via Enhanced User-Mode Emulation'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6535361",
        "abstract": "<p>To easily use our prototype, you can follow the README.md to run the docker images and perform the testing. Source code is also included in EQUAFL_code.zip, so that others can extend it for further research.</p>",
        "keywords": "Enhanced User-mode Emulation, Greybox Fuzzing, Linux-based IoT Devices",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6535525": {
        "doi": "10.5281/zenodo.6535525",
        "author": "Song, Xuezhi and Lin, Yun and Ng, Siang Hwee and Wu, Yijian and Peng, Xin and Dong, Jin Song and Mei, Hong",
        "title": "RegMiner: Towards Constructing Large Regression Dataset from Code Evolution History",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6535525",
        "abstract": "<p>Bug datasets lay significant empirical and experimental foundation for various SE/PL researches such as fault localization, software testing, and program repair. All well-known datasets are constructed manually, which inevitably limits their scalability, representativeness, and the support for the emerging data-driven research. In this work, we propose an approach to automate the process of harvesting replicable regression bugs from the code evolution history. We focus on regression bugs, as they (1) manifest how a bug is introduced and fixed (as non-regression bugs), (2) support regression bug analysis, and (3) incorporate a much stronger specification (i.e., the original passing version) than non-regression bug dataset for bug analysis. Technically, we address an information retrieval problem on code evolution history. Given a code repository, we search for regressions where a test can pass a regression-fixing commit, fail a regression-inducing commit, and pass a previous working commit. In this work, we address the challenges of (1) identifying potential regression-fixing commits from the code evolution history, (2) migrating the test and its code dependencies over the history, and (3) minimizing the compilation overhead during the regression search. We build our tool, RegMiner, which harvested 1035 regressions over 147 projects for 8 weeks, creating the largest replicable regression dataset within the shortest period, to the best of our knowledge. Our extensive experiments show that (1) RegMiner can construct the regression dataset with very high precision and acceptable recall, and (2) the constructed regression dataset is of high authenticity and diversity. We foresee that a continuously growing regression dataset opens many data-driven research opportunities in the SE/PL communities.</p>",
        "keywords": "bug collection, mining code repository, regression bug",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6535557": {
        "doi": "10.5281/zenodo.6535557",
        "author": "Zhang, Yuntong and Gao, Xiang and Duck, Gregory J. and Roychoudhury, Abhik",
        "title": "Reproduction Package for Article `Program Vulnerability Repair via Inductive Inference'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6535557",
        "abstract": "<p>Contains source code, experimental subjects, and instructions to reproduce main results for the article `Program Vulnerability Repair via Inductive Inference’.</p>",
        "keywords": "Automated program repair, Inductive inference, Snapshot fuzzing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6539575": {
        "doi": "10.5281/zenodo.6539575",
        "author": "Busse, Frank and Gharat, Pritam and Cadar, Cristian and Donaldson, Alastair F.",
        "title": "Artefact for the ISSTA 2022 Paper: \"Combining Static Analysis Error Traces with Dynamic Symbolic Execution (Experience Paper)\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6539575",
        "abstract": "<p>The artefact provides a Docker image that contains the source code and binaries of our instrumentation/bug injection tools and KLEE extension, all benchmarks with their bitcode files, scripts to reproduce our experiments, and the static analysis reports for investigated real-world applications.</p>",
        "keywords": "Clang Static Analyzer, Infer, KLEE, software testing, static analysis, symbolic execution",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6564504": {
        "doi": "10.5281/zenodo.6564504",
        "author": "Perretta, James and DeOrio, Andrew and Guha, Arjun and Bell, Jonathan",
        "title": "Artifact for \"On the Use of Mutation Analysis For Evaluating Student Test Suite Quality\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6564504",
        "abstract": "<p>Contains data and analysis scripts accompanying the paper “On the Use of Mutation Analysis For Evaluating Student Test Suite Quality.”</p>",
        "keywords": "mutation analysis, testing, testing education",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6575363": {
        "doi": "10.5281/zenodo.6575363",
        "author": "An, Gabin and Yoo, Shin",
        "title": "Replication Package for Article: \"FDG: A Precise Measurement of Fault Diagnosability Gain of Test Cases\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6575363",
        "abstract": "<p>This artifact contains a replication package for the paper “FDG: A Precise Measurement of Fault Diagnosability Gain of Test Cases”. It provides the scripts and documents to replicate the experiment described in the paper. The detailed guide to replication is provided in the artifact’s README.md file.</p>",
        "keywords": "fault diagnosability, fault localisation, test augmentation, test generation",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/agb94/FDG-artifact/tree/v1.0.6"
    },
    "10.5281/zenodo.6579248": {
        "doi": "10.5281/zenodo.6579248",
        "author": "Kim, Geunwoo and Hong, Sanghyun and Franz, Michael and Song, Dokyung",
        "title": "XBA",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6579248",
        "abstract": "<p>XBA is a deep learning tool for generating platform-agnostic binary code embeddings. XBA applies Graph Convolutional Network (GCN) on the graph representation of binary which we call Binary Disassembly Graph (BDG). XBA can learn semantic matchings of binary code compiled for different platforms that are not included in the training dataset. It outperformed prior works in aligning binary code blocks for different platforms, which shows the embeddings generated by XBA indeed are useful in the cross binary analysis. XBA is implemented with Python v3.8 and Tensorflow v2.7.0.</p>",
        "keywords": "Binary analysis, Cross-platform, Graph alignment",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6668446": {
        "doi": "10.5281/zenodo.6668446",
        "author": "Koppel, James and Guo, Zheng and de Vries, Edsko and Solar-Lezama, Armando and Polikarpova, Nadia",
        "title": "Artifact for \"Searching Entangled Program Spaces\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6668446",
        "abstract": "<p>This artifact is to reproduce results reported in the paper “Searching Entangled Program Spaces”. It includes a virtual machine in <code>ecta-artifact.tar</code> and the source code in <code>icfp-artifact-source-code.*</code>. Run the virtual machine with the script <code>start.sh</code> and there is a README file inside, which tells you how to run the commands and reproduce our figures.</p>",
        "keywords": "synthesis, tree automata",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6671887": {
        "doi": "10.5281/zenodo.6671887",
        "author": "Westrick, Sam and Arora, Jatin and Acar, Umut A.",
        "title": "Entanglement Detection With Near-Zero Cost: Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6671887",
        "abstract": "<p>This artifact provides code and scripts for reproducing the empirical evaluation in the paper “Entanglement Detection with Near-Zero Cost” at ICFP’22. Running these experiments requires access to a modern multi-core x86_64 machine. The experiments in the paper use up to 72 cores and 110GB RAM, but partial results can be obtained using a smaller machine. In particular, 8 cores and 8 GB RAM is sufficient for a small set of experiments. A full set of experiments requires 110 GB RAM and a decent number of cores (preferably at least 32 cores).</p>",
        "keywords": "disentanglement, functional programming, memory management, parallelism",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6672939": {
        "doi": "10.5281/zenodo.6672939",
        "author": "Ho, Son and Protzenko, Jonathan",
        "title": "Aeneas: Rust Verification by Functional Translation",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6672939",
        "abstract": "<p>We present Aeneas, a new verification toolchain for Rust programs based on a lightweight functional translation. We leverage Rust’s rich region-based type system to eliminate memory reasoning for a large class of Rust programs, as long as they do not rely on interior mutability or unsafe code. Doing so, we relieve the proof engineer of the burden of memory-based reasoning, allowing them to instead focus on functional properties of their code.</p>\n<p>The first contribution of Aeneas is a new approach to borrows and controlled aliasing. We propose a pure, functional semantics for LLBC, a Low-Level Borrow Calculus that captures a large subset of Rust programs. Our semantics is value-based, meaning there is no notion of memory, addresses or pointer arithmetic. Our semantics is also ownership-centric, meaning that we enforce soundness of borrows via a semantic criterion based on loans rather than through a syntactic type-based lifetime discipline. We claim that our semantics captures the essence of the borrow mechanism rather than its current implementation in the Rust compiler.</p>\n<p>The second contribution of Aeneas is a translation from LLBC to a pure lambda-calculus. This allows the user to reason about the original Rust program through the theorem prover of their choice, and fulfills our promise of enabling lightweight verification of Rust programs. To deal with the well-known technical difficulty of terminating a borrow, we rely on a novel approach, in which we approximate the borrow graph in the presence of function calls. This in turn allows us to perform the translation using a new technical device called backward functions.</p>\n<p>We implement our toolchain in a mixture of Rust and OCaml; our chief case study is a low-level, resizing hash table, for which we prove functional correctness, the first such result in Rust. Our evaluation shows significant gains of verification productivity for the programmer. This paper therefore establishes a new point in the design space of Rust verification toolchains, one that aims to verify Rust programs simply, and at scale.</p>\n<p>Rust goes to great lengths to enforce static control of aliasing; the proof engineer should not waste any time on memory reasoning when so much already comes “for free”!</p>",
        "keywords": "program verification, rust",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6678339": {
        "doi": "10.5281/zenodo.6678339",
        "author": "Li, Yao and Weirich, Stephanie",
        "title": "Program Adverbs and Tl\\\"{o",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6678339",
        "abstract": "<p>This artifact contains the Coq formalization of the paper Program Adverbs and Tl\\\"{o",
        "keywords": "Coq, embedding, formal verification, mechanized reasoning, program adverbs",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6684085": {
        "doi": "10.5281/zenodo.6684085",
        "author": "Ullrich, Sebastian and de Moura, Leonardo",
        "title": "Supplement of \"'do' Unchained: Embracing Local Imperativity in a Purely Functional Language\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6684085",
        "abstract": "<p>This supplement consists of a Lean 4 package containing translation rules and example proofs of equivalence as described in the paper. Each extension is declared in a separate <code>.lean</code> file in the <code>Do</code> directory. <code>Do/Formal.lean</code> contains the formalization of the equivalence proof written in a literate style explaining more details not mentioned in the paper. Each Lean file comes with a corresponding <code>.html</code> file rendered using Alectryon that allows for exploring the file including type and goal information in any browser without installing Lean. The directory <code>gh-survey</code> contains simple scripts for aggregating the use of extended <code>do</code> notation from Lean projects on GitHub.</p>",
        "keywords": "formal verification, Lean, macros",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6685674": {
        "doi": "10.5281/zenodo.6685674",
        "author": "Ostermann, Klaus and Binder, David and Skupin, Ingo and S\\\"{u",
        "title": "Introduction and Elimination, Left and Right - Coq Formalization",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6685674",
        "abstract": "<p>Coq formalization of the ICFP 2022 paper “Introduction and Elimination, Left and Right”.</p>",
        "keywords": "Abstract machines, Duality, Lambda calculus, Linear logic, Natural Deduction, Proof theory, Sequent Calculus, Type theory",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6689803": {
        "doi": "10.5281/zenodo.6689803",
        "author": "Koppel, James and Kearl, Jackson and Solar-Lezama, Armando",
        "title": "Automatically Deriving Control-Flow Graph Generators from Operational Semantics",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6689803",
        "abstract": "<p>This artifact contains information needed to evaluate all claims in the paper. Specifically, it contains a QEMU image and sources containing Mandate, along with instructions for running. It also features pre-generated control-flow graphs and generators.</p>",
        "keywords": "control flow, haskell, program synthesis, term rewriting",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6702804": {
        "doi": "10.5281/zenodo.6702804",
        "author": "Spies, Simon and G\\\"{a",
        "title": "Coq development for \"Later Credits: Resourceful Reasoning for the Later Modality\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6702804",
        "abstract": "<p>This is the artifact for the ICFP’22 paper “Later Credits: Resourceful Reasoning for the Later Modality”. It contains the Coq development mechanizing the results of the paper. The artifact contains the development both in a VM image (QEMU) with pre-built sources and as a .zip source archive. In addition, the technical appendix is included.</p>",
        "keywords": "Iris, later modality, Separation logic, step-indexing, transfinite",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6710298": {
        "doi": "10.5281/zenodo.6710298",
        "author": "Vasilenko, Elizaveta and Vazou, Niki and Barthe, Gilles",
        "title": "Library Implementation for Article \"Safe Couplings: Coupled Refinement Types\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6710298",
        "abstract": "<p>This artifact includes an appendix with the soundness proof and source code of safe-coupling library and case studies.</p>",
        "keywords": "Haskell, program verification, refinement types, relational types",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6727752": {
        "doi": "10.5281/zenodo.6727752",
        "author": "Ramsey, Norman",
        "title": "Reproduction Package for Article \"Beyond Relooper: Recursive Translation of Unstructured Control Flow to Structured Control Flow\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6727752",
        "abstract": "<p>A development branch of the Glasgow Haskell Compiler extended with a translation from arbitrary control flow to WebAssembly control flow. Includes source code, compiled binary, and test cases. Packaged as a QEMU virtual machine.</p>",
        "keywords": "compilers, control-flow analysis, dominator\ntree, functional languages, GHC, Glasgow Haskell Compiler, Haskell, reverse postorder numbering, WebAssembly",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6757373": {
        "doi": "10.5281/zenodo.6757373",
        "author": "Kov\\'{a",
        "title": "Supplementary artifact for the paper \"Staged Compilation with Two-Level Type Theory\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6757373",
        "abstract": "<p>A demo implementation of the type theory described in the titular paper.</p>",
        "keywords": "staged compilation, two-level type theory, type theory",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6767057": {
        "doi": "10.5281/zenodo.6767057",
        "author": "Escot, Lucas and Cockx, Jesper",
        "title": "Generics, a library for datatype-generic programming in Agda",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6767057",
        "abstract": "<p>This artifact contains the source code for the Generics library for safe, typed datatype-generic programming in Agda.</p>",
        "keywords": "Agda, Datatype, Dependent, Generic Programming, Types, Universe",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6778257": {
        "doi": "10.5281/zenodo.6778257",
        "author": "Hoang, Tram and Trunov, Anton and Lampropoulos, Leonidas and Sergey, Ilya",
        "title": "ICFP-2022 Artifact for the paper \"Random Testing of a Higher-Order Blockchain Language (Experience Report)\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6778257",
        "abstract": "<p>The artifact contains Scilla-Chick – a QuickChick-based tool for property-based randomized testing of the Scilla smart-contract language.</p>\n<p>The tool developed for the paper is located in the <code>~/scilla-chick</code> directory. The (pseudo)random type-and-term generator is located in the file <code>~/scilla-chick/src/scilla.v</code> and is written in Coq (see <code>gen_type</code> and <code>gen_term</code> functions) using the QuickChick framework. QuickChick works by translating Coq code into OCaml for the sake of performance (it runs compiled OCaml code). We translate between Coq and OCaml representations using some glue OCaml code in <code>~/scilla-chick/src/extr/extr.ml</code> file. Various kinds of tests are located in the <code>X_test.v</code> files: <code>gen_test.v</code>, <code>eval_test.v</code>, etc.</p>\n<p>The rest of the files and directories in the home directory are used to pin particular dependency versions needed to build the Scilla-Chick project. In particular, we re-use the Scilla implementation as an OCaml library.</p>\n<p>For more information, please see the <code>~/scilla-chick/README.md</code> file in the <code>master</code> branch of the <code>~/scilla-chick</code> repository (note that the other branches contain an outdated version of <code>README.md</code>).</p>",
        "keywords": "definitional interpreters, functional languages, higher-order control-flow analysis, property-based testing, QuickChick, random testing, Scilla, smart contracts",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6786796": {
        "doi": "10.5281/zenodo.6786796",
        "author": "Biernacka, Ma\\l{",
        "title": "Abstract Machines Workshop",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6786796",
        "abstract": "<p>This project contains the code accompanying the paper <em>A Simple and Efficient Implementation of Strong Call by Need by an Abstract Machine</em>.</p>\n<p>This research is supported by the National Science Centre of Poland, under grant number 2019/33/B/ST6/00289.</p>",
        "keywords": "Abstract Machines, Computational Complexity, Normalization by Evaluation, Reduction Strategies, λ-calculus",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6794696": {
        "doi": "10.5281/zenodo.6794696",
        "author": "Bahr, Patrick and Hutton, Graham",
        "title": "Supplementary Material for \"Monadic Compiler Calculation\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6794696",
        "abstract": "<p>This artifact includes Agda formalisations of all calculations in the paper. In addition, we also include Agda formalisations for calculations that were mentioned but not explicitly carried out in the paper.</p>",
        "keywords": "bisimilarity, divergence, non-determinism, program calculation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6865817": {
        "doi": "10.5281/zenodo.6865817",
        "author": "Keuchel, Steven and Huyghebaert, Sander and Lukyanov, Georgy and Devriese, Dominique",
        "title": "Source Code, Case Study and Reproduction for 'Verified Symbolic Execution with Kripke Specification Monads (and No Meta-programming)'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6865817",
        "abstract": "<p>The provided artifact contains the source code for our verifier Katamaran and instructions how to reproduce and verify all claims of the paper. Furthermore, we provide a QEMU VM-image of Debian that comes with all dependencies preinstalled and that does not require any additional online resources.</p>",
        "keywords": "coq, iris, logical relations, predicate transformers, program verification, refinement, separation logic, symbolic execution",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6874025": {
        "doi": "10.5281/zenodo.6874025",
        "author": "Materzok, Marek",
        "title": "Reproduction Package for Article 'Generating Circuits with Generators'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6874025",
        "abstract": "<p>The artifact source archive contains four repositories:</p>\n<ul>\n<li><code>yieldfsm</code> – the implementation of the YieldFSM compiler.</li>\n<li><code>yieldfsm-hd44780</code> – the implementation of the HD44780 display driver described in the paper.</li>\n<li><code>yieldfsm-riscv</code> – the implementation of RISC-V cores described in the paper.</li>\n<li><code>yieldfsm-icfp2022</code> – various examples from the paper and calculation of the data in Table 2.</li>\n</ul>\n<p>Each of the repositories contains its own README file. Building requires <code>stack</code> (https://haskellstack.org). When additional packages are needed, this is described in a README for a given repository.</p>\n<p>The <code>stack.yaml</code> files in the <code>yieldfsm-hd44780</code> and <code>yieldfsm-riscv</code> repositories were modified to use the local version of <code>yieldfsm</code> rather than the version on Github.</p>",
        "keywords": "generators, hardware description languages, haskell, yieldfsm",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6884760": {
        "doi": "10.5281/zenodo.6884760",
        "author": "Jacobs, Jules and Balzer, Stephanie and Krebbers, Robbert",
        "title": "Multiparty GV: Functional Multiparty Session Types With Certified Deadlock Freedom (Coq mechanization)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6884760",
        "abstract": "<p>This artifact contains mechanized Coq proofs of the theorems in the associated paper.</p>",
        "keywords": "concurrency, deadlocks, memory leaks, multi-party., Session types",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6913915": {
        "doi": "10.5281/zenodo.6913915",
        "author": "Yoon, Irene and Zakowski, Yannick and Zdancewic, Steve",
        "title": "Artifact for \"Formal Reasoning about Layered Monadic Interpreters\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6913915",
        "abstract": "<p>This is the artifact for the paper submission of “Formal Reasoning About Layered Monadic Interpreters”. We have mechanized and proved all claims made in the paper in Coq.</p>",
        "keywords": "Coq (language), Functional Programming, Monads, Program Verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6946310": {
        "doi": "10.5281/zenodo.6946310",
        "author": "Lorenzen, Anton and Leijen, Daan",
        "title": "Implementation and Benchmarks for \"Reference Counting with Frame Limited Reuse\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6946310",
        "abstract": "<p>Contains the implementation of Koka with the new frame-limited reuse algorithm, and the various benchmarks and language implementations we compare against. All benchmark results in the paper were produced using this software.</p>",
        "keywords": "frame-limited, koka, reference counting, reuse",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6954977": {
        "doi": "10.5281/zenodo.6954977",
        "author": "Ko, Hsiang-Shang and Chen, Liang-Ting and Lin, Tzu-Chi",
        "title": "Repository and virutal machine image for paper \"Datatype-Generic Programming Meets Elaborator Reflection\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6954977",
        "abstract": "<p>There are three files in the artifact package: The tarball “NDGP.tar.gz” consists of a patch for compiling Agda, necessary libraries, metaprograms, and examples mentioned in the main text; “vm-image.tar.gz” is a disk image file of a working operating system, on which a patched Agda is installed, and an exact same repository is presented in the home directory; “README.md” contains the documentation for patching and compiling Agda, as well as how to execute our proofs, metaprograms, and examples.</p>",
        "keywords": "datatype-generic programming, dependently typed programming, elaborator reflection, inductive families, metaprogramming, universe polymorphism",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6957191": {
        "doi": "10.5281/zenodo.6957191",
        "author": "Valliappan, Nachiappan and Ruch, Fabian and Tom\\'{e",
        "title": "Artifact for \"Normalization for Fitch-Style Modal Calculi\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6957191",
        "abstract": "<p>The artifact contains the Agda mechanization of the normalization functions for the Fitch-style modal calculi λ<sub>IK</sub> and λ<sub>IS4</sub> as described in the article.</p>\n<p>See <code>README.md</code> in <code>source.tar.xz</code> for details.</p>",
        "keywords": "Fitch-style lambda calculi, Normalization by Evaluation, Possible-world semantics",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6928465": {
        "doi": "10.5281/zenodo.6928465",
        "author": "Maillard, Kenji and Lennon-Bertrand, Meven and Tabareau, Nicolas and Tanter, \\'{E",
        "title": "A Reasonably Gradual Type Theory – Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6928465",
        "abstract": "<p>Accompanying artifact to the article A Reasonably Gradual Type Theory.</p>\n<p>It consists of two parts:</p>\n<ul>\n<li><p>a Coq formalization of the model described in the article,</p></li>\n<li><p>a proof of concept using rewrite rules in Agda to present the source system of the article and the examples of usage of that source system.</p></li>\n</ul>\n<p>A virtual machine is also available, where all the necessary components needed to immediately check these two parts are installed. The artefact already available in the virtual machine is the one of the first uploaded version (with only minor differences with the post-reviewing one). If one wishes to check the newer version, they should simply upload this newer version into the virtual machine and build it.</p>",
        "keywords": "Agda, Coq",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.3731856": {
        "doi": "10.5281/zenodo.3731856",
        "author": "Beyer, Dirk and Dangl, Matthias and Dietsch, Daniel and Heizmann, Matthias and Lemberger, Thomas and Tautschnig, Michael",
        "title": "Reproduction Package for TOSEM Article `Verification Witnesses'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.3731856",
        "abstract": "<p>This is the reproduction package for the TOSEM article DOI:10.1145/3477579. The archive contains the tools that we executed and the data that we produced.</p>",
        "keywords": "Certifying algorithm, Correctness witness, Data-flow analysis, Formal methods, Model checking, Program analysis, Software verification, Violation witness, Witness validation",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6818171": {
        "doi": "10.5281/zenodo.6818171",
        "author": "Ritter, Fabian and Hack, Sebastian",
        "title": "AnICA: Analyzing Inconsistencies in Microarchitectural Code Analyzers (Artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6818171",
        "abstract": "<p>This artifact consists of a Vagrant virtual machine providing a functional version of our software development with extensive documentation, the AnICA campaigns produced in our evaluation, as well as (where permitted by licenses) installed versions of the throughput predictors used in our evaluation. Its purpose is to demonstrate our approach (with the provided throughput predictors and the possibility to integrate new ones), to show AnICA’s results in more detail than possible in the paper, and to allow researchers to build upon our work.</p>",
        "keywords": "Abstraction, Basic Blocks, Differential Testing, Throughput Prediction",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6819031": {
        "doi": "10.5281/zenodo.6819031",
        "author": "Yuan, Charles and Carbin, Michael",
        "title": "Tower: Data Structures in Quantum Superposition",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6819031",
        "abstract": "<p>The artifact contains: README.md, a description document tower.tgz, a Docker image containing source code, pre-built binaries, and tests tower.dockerfile, a Dockerfile that generates the above image from scratch The directory oopsla22-artifact, a copy of the contents of the Docker image, containing the source code of the Tower language interpreter (src/) and the tests (tests/)</p>",
        "keywords": "data structures, history independence, quantum programming, quantum random-access memory, reversible programming",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6826341": {
        "doi": "10.5281/zenodo.6826341",
        "author": "Moiseenko, Evgenii and Kokologiannakis, Michalis and Vafeiadis, Viktor",
        "title": "Replication Package for \"Model Checking for a Multi-Execution Memory Model",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6826341",
        "abstract": "<p>The artifact contains WMC, as well as the other tools and benchmarks used in the paper.</p>",
        "keywords": "software verification, stateless model checking, weak memory models",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6885003": {
        "doi": "10.5281/zenodo.6885003",
        "author": "Zhao, Zihan and Beillahi, Sidi Mohamed and Song, Ryan and Cai, Yuxi and Veneris, Andreas and Long, Fan",
        "title": "Artifact for the OOPSLA 2022 paper: SigVM: Enabling Event-Driven Execution for Truly Decentralized Smart Contracts",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6885003",
        "abstract": "<p>The artifact consists of a VM image that is based on an Ubuntu-20.04-desktop-LTS image. It was tested using Oracle VM VirtualBox Manager Version 6.1 (and the default config: 4 processors and 8192 MB base memory). The admin password is <code>test</code>. The image includes all the tools (with their dependencies) and the benchmarks (and tool parameters) used to carry out the experiments in the paper.</p>",
        "keywords": "Blockchain Client, Conflux, Ethereum Virual Machine (EVM), Event-Driven, Smart Contracts, Solidity Compiler (solc)",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6899919": {
        "doi": "10.5281/zenodo.6899919",
        "author": "Dalvandi, Sadegh and Dongol, Brijesh",
        "title": "Implementing and Verifying Release-Acquire Transactional Memory (Artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6899919",
        "abstract": "<p>Isabelle / HOL theories for all proofs and C++ implementation of TML and TML-RA (a release-acquire version of TML).</p>",
        "keywords": "C11, Refinement, Transactional Memory, Verification, Weak Memory",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7051651": {
        "doi": "10.5281/zenodo.7051651",
        "author": "Dexter, Philip and Liu, Yu David and Chiu, Kenneth",
        "title": "The Essence of Online Data Processing - Coq Mechanization",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7051651",
        "abstract": "<p>Coq mechanization for the paper “The Essence of Online Data Processing” appearing in OOPSLA 22</p>",
        "keywords": "Coq, Incremental Evaluation, Online Data Optimization, Online Data Processing",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7054373": {
        "doi": "10.5281/zenodo.7054373",
        "author": "Liu, Hongming and Fu, Hongfei and Yu, Zhiyong and Song, Jiaxin and Li, Guoqiang",
        "title": "StInGX: An extension of StInG",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7054373",
        "abstract": "<p>StInGX is an invariant generator extended and modified from original StInG (https://theory.stanford.edu/~srirams/Software/sting.html), so that to be more scalable and efficient.</p>",
        "keywords": "Constraint Solving, Farkas' Lemma, Invariant Generation",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7055010": {
        "doi": "10.5281/zenodo.7055010",
        "author": "Nieto, Abel and Gondelman, L\\'{e",
        "title": "Modular Verification of Op-Based CRDTs in Separation Logic (Proof Artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7055010",
        "abstract": "<p>Coq implementation of the libraries described in the paper, as well mechanized safety proofs.</p>",
        "keywords": "causal broadcast, Coq, CRDT, distributed systems, Iris, separation logic, verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7055030": {
        "doi": "10.5281/zenodo.7055030",
        "author": "Moosbrugger, Marcel and Stankovi\\v{c",
        "title": "This is the Moment for Probabilistic Loops - Artifact (Polar)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7055030",
        "abstract": "<p>The artifact contains the tool “Polar” together with scripts to reproduce all the scientific claims from the corresponding paper “This Is the Moment for Probabilistic Loops” published at OOPSLA 2022.</p>\n<p>The artifact consists of a single ZIP-file. The ZIP-file comes with a Docker image and a README-file containing all information necessary to reproduce the results from the corresponding paper.</p>\n<p>The tool “Polar” - central to the artifact and the paper - is a program analysis tool capable of exactly computing higher moments of program variables for a class of probabilistic loops.</p>",
        "keywords": "Distribution\nRecovery, Higher Moments, Linear Recurrences, Loops, Probabilistic Programs",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7058421": {
        "doi": "10.5281/zenodo.7058421",
        "author": "Chen, Adam and Fathololumi, Parisa and Koskinen, Eric and Pincus, Jared",
        "title": "Veracity: Declarative Multicore Programming with Commutativity",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7058421",
        "abstract": "<p>Veracity is a c-like language that features the commute statement, which can describe conditional commutativity of sequential code. When such code’s commutativity condition is satisfied, and proper (scoped) serializability constraints are met, it may be run in parallel, benefiting from multi-core architecture.</p>\n<p>Veracity is provided as an interpreter that is implemented in Multicore OCaml. The artifact contains a version of the interpreter, provided with Servois2 to drive the commutativity analysis. The benchmark suite used in the paper is provided, as well as the programs/scripts used to generate the benchmarks seen in the paper.</p>\n<p>The extended technical report can be found of Arxiv and is linked at http://www.veracity-lang.org/.</p>",
        "keywords": "commutativity analysis, commutativity conditions, parallelization, pre-condition synthesis, serializability",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7061819": {
        "doi": "10.5281/zenodo.7061819",
        "author": "Susag, Zachary and Lahiri, Sumit and Hsu, Justin and Roy, Subhajit",
        "title": "Artifact for Symbolic Execution for Randomized Programs",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7061819",
        "abstract": "<p>This is the primary artifact for ‘Symbolic Execution for Randomized Programs’. It contains the source code for Plinko and our modified version of KLEE. Plinko is our prototype tool to verify probabilistic properties of randomized programs which universally quantify over all inputs. Additionally, it contains C++ source code for each of the case studies presented in the paper. Scripts to reproduce all of the experiments in the paper are also included.</p>",
        "keywords": "probabilistic programs, symbolic execution, Verification",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7062933": {
        "doi": "10.5281/zenodo.7062933",
        "author": "Xie, Ningning and Cong, Youyou and Ikemori, Kazuki and Leijen, Daan",
        "title": "OOPSLA'22 Paper Artifact: First Class Names for Effect Handlers",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7062933",
        "abstract": "<p>The artifact is a docker image that contains a Koka implementation of named handlers as well as examples in the paper. Also available at: https://hub.docker.com/repository/docker/daanx/oopsla22-namedh</p>",
        "keywords": "Algebraic Effect Handlers, Koka, Named Handlers",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7065424": {
        "doi": "10.5281/zenodo.7065424",
        "author": "Sun, Yaozhu and Dhandhania, Utkarsh and Oliveira, Bruno C. d. S.",
        "title": "Compositional Embeddings of Domain-Specific Languages (Artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7065424",
        "abstract": "<p>This is the artifact of the OOPSLA’22 paper Compositional Embeddings of Domain-Specific Languages. The artifact contains an in-browser interpreter of the CP language with support for the ExT DSL. The code examples and applications mentioned in the paper are also included.</p>",
        "keywords": "Domain-Specific Languages, Interpreter",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7065694": {
        "doi": "10.5281/zenodo.7065694",
        "author": "Mishra, Ashish and Jagannathan, Suresh",
        "title": "Cobalt tool and reproduction package accompanied with OOPLSA' 22 paper \"Specification-Guided Component-Based Synthesis from Effectful Libraries\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7065694",
        "abstract": "<p>This Oopsla22_artifact.md file contains two sections. The <strong>Getting Started</strong> section gives the main steps for installing the dependencies using OCaml package manager (opam) followed by introducing small scripts for building and running Cobal on a sample test case.</p>\n<p>The second section <strong>Step-by-step Instructions</strong> explains the structure of the directory, how to run Cobalt on all the benchmarks in the paper?, understanding the results and how to run Cobal on an individual synthesis task in different ablation modes.</p>",
        "keywords": "Component-based Synthesis, Conflict-Driven Learning, Effects, Type Specifications",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7066264": {
        "doi": "10.5281/zenodo.7066264",
        "author": "Muduli, Sujit Kumar and Roy, Subhajit",
        "title": "Satisfiability Modulo Fuzzing: A Synergistic Combination of SMT Solving and Fuzzing (Artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7066264",
        "abstract": "<p>This repository contains the artifact for the paper “Satisfiability Modulo Fuzzing: A Synergistic Combination of SMT Solving and Fuzzing” accepted at the OOPSLA’22 conference.</p>\n<p>The docker image saadhak-image.tar.gz has the source code and executable of our tool Sundefineddhak installed. A manual README.pdf provides step-by-step instructions on how to evaluate our tool on the benchmarks. The license file LICENSE.txt provides permission to copy, modify and re-distribute Sundefineddhak.</p>",
        "keywords": "Closed-Box Functions, Fuzzing, Program Verification, SMT Solver, Testing Conflict-Driven Fuzz Loop",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7066401": {
        "doi": "10.5281/zenodo.7066401",
        "author": "Lei, Yuxiang and Sui, Yulei and Ding, Shuo and Zhang, Qirun",
        "title": "Artifact of \"Taming Transitive Redundancy for Context-Free Reachability\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7066401",
        "abstract": "<p>This is the artifact of the paper “Taming Transitive Redundancy for Context-Free Reachability” accepted to OOPSLA 2022. The artifact is packaged as a Docker image “pocr-release.tar.gz”, which is to reproduce the experiment results of the paper. Please see README.pdf for detailed usage of the artifact.</p>",
        "keywords": "CFL-reachability, performance, redundancy, transitive relation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7067362": {
        "doi": "10.5281/zenodo.7067362",
        "author": "Ellis, Stephen and Zhu, Shuofei and Yoshida, Nobuko and Song, Linhai",
        "title": "Artifact of \"Generic Go to Go: Dictionary-Passing, Monomorphisation, and Hybrid\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7067362",
        "abstract": "<p>This artifact is a docker image that contains the implementation of the two translators and the benchmark set used in the paper. For more information, please refer to the README document.</p>",
        "keywords": "Artifact, Benchmark, Dictionary-passing translation, Generic types",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7068972": {
        "doi": "10.5281/zenodo.7068972",
        "author": "Li, Liyi and Voichick, Finn and Hietala, Kesha and Peng, Yuxiang and Wu, Xiaodi and Hicks, Michael",
        "title": "Reproduction Package for \"Verified Compilation of Quantum Oracles\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7068972",
        "abstract": "<p>This repository contains the code used in our paper “Verified Compilation of Quantum Oracles.” This includes OQASM, PQASM, and OQIMP. It includes programs implemented in these languages, Coq proofs, and QuickChick tests.</p>",
        "keywords": "Compiler Verification, Programming Language Design, Quantum Oracle, Type System",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7071281": {
        "doi": "10.5281/zenodo.7071281",
        "author": "Chaliasos, Stefanos and Gervais, Arthur and Livshits, Benjamin",
        "title": "Artifact: A Study of Inline Assembly in Solidity Smart Contracts",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7071281",
        "abstract": "<p>This is the artifact for the OOPSLA’22 paper “A Study of Inline Assembly in Solidity Smart Contracts”. You can also find the latest version of this artifact at https://github.com/StefanosChaliasos/solidity-inline-assembly.</p>",
        "keywords": "Blockchain, Corpus Study, Ethereum, Inline Assembly, Solidity, YUL",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7071393": {
        "doi": "10.5281/zenodo.7071393",
        "author": "Zwaan, Aron and van Antwerpen, Hendrik and Visser, Eelco",
        "title": "Incremental Type-Checking for Free: Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7071393",
        "abstract": "<p>The artifact consists of the following: - An executable JAR of the benchmark. - Sources of the incremental type checker framework. - Sources of the Statix implementation based on the incremental type checker framework. - Sources of the Statix specifications, of a subset of Java and WebDSL, that is used in the benchmark. - Sources of the Java and WebDSL projects that are used in the benchmark.</p>\n<p>The artifact is executable on the host machine as well as in a VirtualBox/QEMU virtual machine.</p>\n<p>The artifact allows executing the benchmarks, in order to reproduce the performance results reported in the paper.</p>",
        "keywords": "incremental type-checking, name binding, reference resolution, scope graphs, Statix, type systems, type-checker",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7071693": {
        "doi": "10.5281/zenodo.7071693",
        "author": "Liu, Si and Meseguer, Jose and \\\"{O",
        "title": "Reproduction package for article \"Bridging the Semantic Gap between Qualitative and Quantitative Models of Distributed Systems\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7071693",
        "abstract": "<p>This package contains the artifacts used to (re)produce the experimental results in the article “Bridging the Semantic Gap between Qualitative and Quantitative Models of Distributed Systems”.</p>",
        "keywords": "actors, distributed systems, formal model transformation, Maude, rewriting logic, statistical model checking",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7072457": {
        "doi": "10.5281/zenodo.7072457",
        "author": "Dardinier, Thibault and M\\\"{u",
        "title": "Fractional Resources in Unbounded Separation Logic (artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7072457",
        "abstract": "<p>This artifact contains an Isabelle/HOL (version 2021-1) formalisation that proves the technical claims of the paper “Fractional Resources in Unbounded Separation Logic”.</p>",
        "keywords": "(co)inductive predicates, automatic deductive verifiers, combinability, fractional permissions, Isabelle, magic\nwands, separation logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7072506": {
        "doi": "10.5281/zenodo.7072506",
        "author": "Krogmeier, Paul and Lin, Zhengyao and Murali, Adithya and Madhusudan, P.",
        "title": "Reproduction Docker Image for Article `Synthesizing Axiomatizations using Logic Learning'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7072506",
        "abstract": "<p>This is the Docker image for the paper `Synthesizing Axiomatizations using Logic Learning’. It contains detailed instructions on how to reproduce the experiments performed in the paper. Please see the README.md file inside the compressed tarball for usage of the artifact.</p>",
        "keywords": "Axiomatization, Inductive Synthesis, Learning Logics",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7074690": {
        "doi": "10.5281/zenodo.7074690",
        "author": "van der Rest, Cas and Poulsen, Casper Bach and Rouvoet, Arjen and Visser, Eelco and Mosses, Peter",
        "title": "Intrinsically-Typed Definitional Interpreters \\`{a",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7074690",
        "abstract": "<p>Formalization of the code shown/discussed in the paper + the case study discussed in Section 5.</p>",
        "keywords": "Definitional Interpreters, Dependently Typed Programming, Modularity, Reuse, Type Safety",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7079022": {
        "doi": "10.5281/zenodo.7079022",
        "author": "Zhu, Fengmin and Sammler, Michael and Lepigre, Rodolphe and Dreyer, Derek and Garg, Deepak",
        "title": "Artifact of \"BFF: Foundational and Automated Verification of Bitfield-Manipulating Programs\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7079022",
        "abstract": "<p>This is the artifact for the OOPSLA’22 paper “BFF: Foundational and Automated Verification of Bitfield-Manipulating Programs”.</p>\n<p>After unzipping the archive <code>bff_artifact.zip</code>, the <code>README.md</code> provides instructions on how to use this artifact.</p>",
        "keywords": "bit vectors, bitfield manipulation, C programming language, Coq, Iris, proof automation, refinement types",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7079463": {
        "doi": "10.5281/zenodo.7079463",
        "author": "Boruch-Gruszecki, Aleksander and Wa\\'{s",
        "title": "Mechanized proof of «A case for DOT: Theoretical Foundations for Objects With Pattern Matching and GADT-style Reasoning»",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7079463",
        "abstract": "<p>This artifact contains: - mechanized proofs of soundness for cDOT and our variant of λ2,Gµ - mechanized proofs of lemmas related to our translation from λ2,Gµ to cDOT</p>",
        "keywords": "classes, Coq, DOT, GADT, pattern matching",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7079674": {
        "doi": "10.5281/zenodo.7079674",
        "author": "Haas, Thomas and Meyer, Roland and Ponce de Le\\'{o",
        "title": "CAAT: Consistency as a Theory (Artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7079674",
        "abstract": "<p>This artifact allows to reproduce the results from Section 7 of the paper CAAT: Consistency as a Theory published at OOPSLA 2022.</p>",
        "keywords": "BMC, concurrency, SMT, weak memory models",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7079830": {
        "doi": "10.5281/zenodo.7079830",
        "author": "Blaudeau, Cl\\'{e",
        "title": "Coq formalization of the Celsius language",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7079830",
        "abstract": "<p>This artifact contains the Coq project that supports the paper. The calculus is defined, semantics and typing rules are given. It contains all the results presented in the paper.</p>",
        "keywords": "annotations, Celsius, Coq, initialization, object, soundness, typing",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/clementblaudeau/celsius/tree/v1.0.0"
    },
    "10.5281/zenodo.7079930": {
        "doi": "10.5281/zenodo.7079930",
        "author": "Abuah, Chik\\'{e",
        "title": "Implementation of the Solo Library",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7079930",
        "abstract": "<p>Solo is a Haskell library for static verification of differential privacy. Our paper makes the following claims supported by the artifact:</p>\n<ul>\n<li>Solo encodes sensitivity and privacy analysis in Haskell’s types</li>\n<li>Solo can be used to write and verify useful differentially private programs</li>\n<li>Solo does not impose significant annotation burden on the programmer</li>\n</ul>",
        "keywords": "differential privacy, Haskell, type system, verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7079982": {
        "doi": "10.5281/zenodo.7079982",
        "author": "Sela, Gal and Petrank, Erez",
        "title": "Concurrent Size - Artifact for OOPSLA'22",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7079982",
        "abstract": "<p>Artifact for the paper Concurrent Size published in OOPSLA’22</p>",
        "keywords": "Concurrent Size",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/galysela/ConcurrentSize/tree/v1.0"
    },
    "10.5281/zenodo.7080246": {
        "doi": "10.5281/zenodo.7080246",
        "author": "Wu, Haoze and Barrett, Clark and Sharif, Mahmood and Narodytska, Nina and Singh, Gagandeep",
        "title": "Artifact for Paper Scalable Verification of GNN-Based Job Schedulers",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7080246",
        "abstract": "<p>Please follow the instructions in the readme to replicate the results in the paper.</p>",
        "keywords": "Abstract Interpretation, Artifact, Cluster Scheduling, Formal Verification, Forward-backward Analysis, Graph Neural Networks, Neural Networks",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7080357": {
        "doi": "10.5281/zenodo.7080357",
        "author": "Sakkas, Georgios and Endres, Madeline and Guo, Philip J. and Weimer, Westley and Jhala, Ranjit",
        "title": "Reproduction package and code for \"Seq2Parse: Neurosymbolic Parse Error Repair\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7080357",
        "abstract": "<p>The artifact consists of the code to extract ML-appropriate datasets, train the sequence models and repair and parse ill-parsed programs with Seq2Parse. A pre-trained model for repairing and parsing Python programs is included.</p>",
        "keywords": "machine learning, parsers, seq2parse, syntax errors",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/gsakkas/seq2parse/tree/v1.0.0"
    },
    "10.5281/zenodo.7080459": {
        "doi": "10.5281/zenodo.7080459",
        "author": "Meyer, Roland and Wies, Thomas and Wolff, Sebastian",
        "title": "Artifact for \"A Concurrent Program Logic with a Future and History\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7080459",
        "abstract": "<p>Experimental automatic verifier for lock-free data structures, accompanying the OOPSLA’22 paper “A Concurrent Program Logic with a Future and History” by Roland Meyer, Thomas Wies, and Sebastian Wolff. The artifact consists of the verifier’s source code and a virtual machine (VM) to reproduce the experiments from the paper.</p>",
        "keywords": "Automated Verification, Linearizability, Lock-free Data Structures, Program Logic, Separation Logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7080559": {
        "doi": "10.5281/zenodo.7080559",
        "author": "Chowdhary, Sangeeta and Nagarakatte, Santosh",
        "title": "Artifact for \"Fast Shadow Execution for Debugging Numerical Errors using Error Free Transformations\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7080559",
        "abstract": "<p id=\"artifact-for-the-paper-fast-shadow-execution-for-debugging-numerical-errors-using-error-free-transformations-at-oopsla-2022\">Artifact for the paper “Fast Shadow Execution for Debugging Numerical Errors using Error Free Transformations” at OOPSLA 2022</p>\n<p id=\"abstract-of-the-paper\"><strong>Abstract of the paper</strong></p>\n<p>This paper proposes, EFTSanitizer, a fast shadow execution framework for detecting and debugging numerical errors during late stages of testing especially for long-running applications. Any shadow execution framework needs an oracle to compare against the floating point (FP) execution. This paper makes a case for using error free transformations, which is a sequence of operations to compute the error of a primitive operation with existing hardware supported FP operations, as an oracle for shadow execution. Although the error of a single correctly rounded FP operation is bounded, the accumulation of errors across operations can result in exceptions, slow convergences, and even crashes. To ease the job of debugging such errors, EFTSanitizer provides a directed acyclic graph (DAG) that highlights the propagation of errors, which results in exceptions or crashes. Unlike prior work, DAGs produced by EFTSanitizer’s include operations that span various function calls while keeping the memory usage bounded. To enable the use of such shadow execution tools with long-running applications, EFTSanitizer also supports starting the shadow execution at an arbitrary point in the dynamic execution, which we call selective shadow execution. EFTSanitizer is an order of magnitude faster than prior state-of-art shadow execution tools such as FPSanitizer and Herbgrind. We have discovered new numerical errors and debugged them in many long-running applications using EFTSanitizer.</p>\n<p id=\"claims-to-validatereproduce\"><strong>Claims to validate/reproduce</strong></p>\n<p>In this artifact, we provide instructions to reproduce and validate the following claims in the paper.</p>\n<ol type=\"1\">\n<li><p>Ability to detect known errors in microbenchmarks.</p></li>\n<li><p>Debugging with gdb to diagnose the bug in the case study.</p></li>\n<li><p>Performance slowdown of EFTSanitizer</p></li>\n<li><p>Speedups for EFTSanitizer when compared to FPSanitizer</p></li>\n</ol>\n<p>Note: To make it feasible to run the artifact quickly, we have created mini-versions especially for (4) above. Otherwise it takes more than a day on a native machine to get the performance numbers.</p>",
        "keywords": "EFTSanitizer, floating point, rounding errrors",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7080821": {
        "doi": "10.5281/zenodo.7080821",
        "author": "Laddad, Shadaj and Power, Conor and Milano, Mae and Cheung, Alvin and Hellerstein, Joseph M.",
        "title": "Reproduction Package for Paper \"Katara: Synthesizing CRDTs with Verified Lifting\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7080821",
        "abstract": "<p>The software artifact accompanying the OOPSLA’22 paper “Katara: Synthesizing CRDTs with Verified Lifting”. This includes the sources of our synthesis algorithm, VM images that can be used for testing the software, and an artifact overview that walks through the steps needed to evaluate the synthesis algorithm.</p>",
        "keywords": "distributed systems, program synthesis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7082520": {
        "doi": "10.5281/zenodo.7082520",
        "author": "Atkinson, Eric and Yuan, Charles and Baudart, Guillaume and Mandel, Louis and Carbin, Michael",
        "title": "Semi-Symbolic Inference for Efficient Streaming Probabilistic Programming",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7082520",
        "abstract": "<p>This is an artifact accompanying the OOPSLA 2022 paper “Semi-Symbolic Inference for Efficient Streaming Probabilistic Programming”. It consists of a tarball containing the following components:</p>\n<p>A Docker image that may be used to execute the artifact in the file semi-symbolic-artifact.tgz. We have tested the Docker image in Docker Engine version 20.10.17.</p>\n<p>A directory of the source code located at source-code.</p>\n<p>A PDF of this guide can be found at guide.pdf.</p>\n<p>In both the docker file and the source code directory, the semi-symbolic-impl directory is the main package implementing semi-symbolic inference – with the source in semi-symbolic-impl/src – while semi-symbolic-probzelus contains the ProbZelus bindings.</p>",
        "keywords": "probabilistic programming, streaming inference",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7083308": {
        "doi": "10.5281/zenodo.7083308",
        "author": "Kolesar, John C. and Piskac, Ruzica and Hallahan, William T.",
        "title": "Checking Equivalence in a Non-strict Language: &nbsp;Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7083308",
        "abstract": "<p>The artifact is a zip file that contains a VM image, a README, and the file expected-results.txt. The code for our tool Nebula is downloaded on the VM image, along with all of the dependencies for it. The purpose of the artifact is to allow readers to verify the claims from the Evaluation section of our paper. The README provides instructions on how to run the evaluation suite, and it includes instructions for running Nebula outside the VM as well. The file expected-results.txt lists the specific theorems in the evaluation suite that Nebula should be able to prove or disprove.</p>",
        "keywords": "coinduction, equivalence, Haskell, non-strictness, symbolic execution",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7086231": {
        "doi": "10.5281/zenodo.7086231",
        "author": "Goldstein, Harrison and Pierce, Benjamin C.",
        "title": "Parsing Randomness: Free Generators Development",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7086231",
        "abstract": "<p>The Haskell code for reproducing the experiments from the Parsing Randomness paper.</p>",
        "keywords": "Formal languages, Parsing, Random generation",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7087913": {
        "doi": "10.5281/zenodo.7087913",
        "author": "Mackay, Julian and Eisenbach, Susan and Noble, James and Drossopoulou, Sophia",
        "title": "Necessity Specifications for Robustness",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7087913",
        "abstract": "<p>Coq sources for the paper Necessity Specifications for Robustness, published at OOPSLA 2022. The artifact consists of a model of the Necessity and Assert specification languages, along with a proof system for Necessity, a soundness proof of the Necessity proof system, and proofs using Necessity that two examples detailed in the paper satisfy their specifications.</p>",
        "keywords": "Formal Methods, Necessity, Robustness, Verification",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7088869": {
        "doi": "10.5281/zenodo.7088869",
        "author": "Sivaraman, Aishwarya and Sanchez-Stern, Alex and Chen, Bretton and Lerner, Sorin and Millstein, Todd",
        "title": "Data-Driven Lemma Synthesis for Interactive Proofs",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7088869",
        "abstract": "<p>Interactive proofs of theorems often require auxiliary helper lemmas to prove the desired theorem. Existing approaches for automatically synthesizing helper lemmas fall into two broad categories. Some approaches are goal-directed, producing lemmas specifically to help a user make progress from a given proof state, but they have limited expressiveness in terms of the lemmas that can be produced. Other approaches are highly expressive, able to generate arbitrary lemmas from a given grammar, but they are completely undirected and hence not amenable to interactive usage. In this paper, we develop an approach to lemma synthesis that is both goal-directed and expressive. The key novelty is a technique for reducing lemma synthesis to a data-driven program synthesis problem, whereby examples for synthesis are generated from the current proof state. We also describe a technique to systematically introduce new variables for lemma synthesis, as well as techniques for filtering and ranking candidate lemmas for presentation to the user. We implement these ideas in a tool called lfind, which can be run as a Coq tactic. In an evaluation on four benchmark suites, lfind produces useful lemmas in 68\\% of the cases where a human prover used a lemma to make progress. In these cases lfind synthesizes a lemma that either enables a fully automated proof of the original goal or that matches the human-provided lemma.</p>",
        "keywords": "lemma synthesis, program synthesis, theorem proving",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7089827": {
        "doi": "10.5281/zenodo.7089827",
        "author": "Chitre, Khushboo and Kedia, Piyus and Purandare, Rahul",
        "title": "Reproduction Package for the Article \"The Road Not Taken: Exploring Alias Analysis Based Optimizations Missed by the Compiler\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7089827",
        "abstract": "<p>The artifact includes the source code for Scout (LLVM), our custom allocator (jemalloc2k) and the build scripts to help in the verification and the replication of the claimed results.</p>",
        "keywords": "alias analysis, dynamic checks, LLVM, loop-versioning, optimizations",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7092952": {
        "doi": "10.5281/zenodo.7092952",
        "author": "Kalita, Pankaj Kumar and Muduli, Sujit Kumar and D’Antoni, Loris and Reps, Thomas and Roy, Subhajit",
        "title": "Synthesizing Abstract Transformers",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7092952",
        "abstract": "<p>This artifact consists of the source code of AMURTH and other dependencies installed to reproduce the results shown in the paper. This artifact contains README.pdf, where step-by-step instructions to reproduce the results are provided.</p>",
        "keywords": "abstract transformer, DSL, program synthesis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7093079": {
        "doi": "10.5281/zenodo.7093079",
        "author": "Titzer, Ben L.",
        "title": "Artifact for \"A Fast In-Place Interpreter for WebAssembly \"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7093079",
        "abstract": "<p>This archive includes supplementary data and code for the OOPSLA 2022 paper entitled “A Fast In-Place Interpreter for WebAssembly”.</p>\n<ul>\n<li>source-code snapshots of 3 Web Engines for executing WebAssembly</li>\n<li>3 non-Web engines: Wasm3, the WebAssembly Micro-Runtime, and the Wizard Research Engine</li>\n<li>binary builds for Linux x86-64</li>\n<li>build instructions</li>\n<li>PolyBenchC benchmark Wasm binaries</li>\n<li>benchmarking setup and scripts</li>\n<li>data collected from experiments included in the OOPSLA 2022 paper</li>\n<li>instructions for running the benchmarks on Linux systems</li>\n</ul>",
        "keywords": "interpreters, performance, virtual machines, WebAssembly",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7121838": {
        "doi": "10.5281/zenodo.7121838",
        "author": "Parreaux, Lionel and Chau, Chun Yin",
        "title": "MLstruct: Principal Type Inference in a Boolean Algebra of Structural Types (Artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7121838",
        "abstract": "<p>This is the artifact release for our OOPSLA 2022 paper MLstruct: Principal Type Inference in a Boolean Algebra of Structural Types, version 2.</p>",
        "keywords": "principal type inference, structural typing, union and intersection types",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/hkust-taco/mlstruct/tree/oopsla22-v2"
    },
    "10.5281/zenodo.6369874": {
        "doi": "10.5281/zenodo.6369874",
        "author": "Le-Cong, Thanh and Kang, Hong Jin and Nguyen, Truong Giang and Haryono, Stefanus Agus and Lo, David and Le, Xuan-Bach D. and Huynh, Quyet Thang",
        "title": "Dataset for \"AutoPruner: Transformer-based Call Graph Pruning\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6369874",
        "abstract": "<p>This repository contains data for research paper “AutoPruner: Transformer-based Call Graph Pruning”, which is published at ESEC/FSE 2022</p>\n<p>The structure of our data’s repository is as follows:</p>\n<ul>\n<li>dl_dataset: contains our processed dataset for AutoPruner;</li>\n<li>gnn_dataset: contains our processed dataset for GNN benchmark;</li>\n<li>gnn_model: contains our trained models for GNN benchmarks;</li>\n<li>info_data: contains the lists of training and testing programs;</li>\n<li>model: contains our trained models for AutoPruner;</li>\n<li>npe_result: contains the results of manual evaluation for Null-pointer analysis;</li>\n<li>processed_data: contains extracted source code for methods in programs in <a href=\"https://zenodo.org/record/5806537\">cgPruner’s dataset</a></li>\n<li>raw_data: contains the static call graphs generated by static analysis tools from <a href=\"http://web.cs.ucla.edu/~akshayutture/papers/icse22_firstPaper_preprint.pdf\">cgPruner</a></li>\n</ul>",
        "keywords": "Call Graph Pruning, Pretrained Language Model, Static Analysis, Transformer",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6668462": {
        "doi": "10.5281/zenodo.6668462",
        "author": "Yusuf, Imam Nur Bani and Jamal, Diyanah Binte Abdul and Jiang, Lingxiao and Lo, David",
        "title": "Model Checkpoints for RecipeGen++",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6668462",
        "abstract": "<p>This artifact contains model checkpoints to replicate the results that are attached in the paper.</p>",
        "keywords": "Deep Learning, IFTTT, TAP, Trigger Action Programs",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6906415": {
        "doi": "10.5281/zenodo.6906415",
        "author": "Park, Jihyeok and An, Seungmin and Ryu, Sukyoung",
        "title": "JSAVER: JavaScript Static Analyzer via ECMAScript Representation",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6906415",
        "abstract": "<p>JSAVER is a JavaScript Static Analyzer via ECMAScript Representation. It is the first tool that automatically derives JavaScript static analyzers from language specifications using an interpreter-based approach called meta-level static analysis instead of a traditional compiler-based approach.</p>\n<p>This artifact extends JISET to extract JavaScript definitional interpreters written in Intermediate Representations for ECMAScript Specifications (IRES) from diverse versions of ECMA-262.</p>",
        "keywords": "definitional interpreter, JavaScript, meta-level static analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/kaist-plrg/jsaver/tree/v1.0.6"
    },
    "10.5281/zenodo.6941292": {
        "doi": "10.5281/zenodo.6941292",
        "author": "Martin-Lopez, Alberto and Segura, Sergio and Ruiz-Cort\\'{e",
        "title": "[Supplementary material] Online Testing of RESTful APIs: Promises and Challenges",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6941292",
        "abstract": "<p>This is the artifact for the paper entitled “Online Testing of RESTful APIs: Promises and Challenges”. This artifact comprises two main resources: 1) a ready-to-use testing ecosystem consisting of a multi-bot architecture for online testing of RESTful APIs; and 2) the dataset of test cases generated in our experiments. In addition, we provide instructions on how to use the testing ecosystem, how to replicate the results reported in the paper, and how our work could serve as the basis for multiple future research opportunities in varied scenarios.</p>",
        "keywords": "black-box testing, bot, online testing, REST, web API",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6955909": {
        "doi": "10.5281/zenodo.6955909",
        "author": "Li, Zeyan and Zhao, Nengwen and Li, Mingjie and Lu, Xianglin and Wang, Lixin and Chang, Dongdong and Nie, Xiaohui and Cao, Li and Zhang, Wenchi and Sui, Kaixin and Wang, Yanhua and Du, Xu and Duan, Guoqiang and Pei, Dan",
        "title": "Replicate Package for \"Actionable and Interpretable Fault Localization for Recurring Failures in Online Service Systems\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6955909",
        "abstract": "<p>We provide an artifact for our ESEC/FSE 2022 Research Track paper, “Actionable and Interpretable Fault Localization for Recurring Failures in Online Service Systems”. In this paper, we propose an actionable and interpretable fault localization approach, named DejaVu. This artifact includes 1) the four datasets used in the paper, 2) the implementation of DejaVu and the baselines, and 3) the scripts used to build the Train-Ticket benchmark and collect monitoring data for dataset D. The artifact is made public on GitHub (https://github.com/NetManAIOps/DejaVu).</p>",
        "keywords": "fault localization, graph neural network, online service system, recurring failures",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6958312": {
        "doi": "10.5281/zenodo.6958312",
        "author": "Palma, Marco Edoardo and Salza, Pasquale and Gall, Harald C.",
        "title": "On-the-Fly Syntax Highlighting Using Neural Networks - Replication Package (Source Code)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6958312",
        "abstract": "<p>This archive includes the source code to replicate the study for the paper On-the-Fly Syntax Highlighting Using Neural Networks.</p>\n<p>The data to replicate the study can be found at: https://doi.org/10.5281/zenodo.6949491</p>",
        "keywords": "deep learning, neural networks, regular expressions, syntax highlighting",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/MEPalma/HLNN-ReplicationPackage/tree/v1.0.0"
    },
    "10.5281/zenodo.6969369": {
        "doi": "10.5281/zenodo.6969369",
        "author": "Braz, Larissa and Bacchelli, Alberto",
        "title": "Artifacts Package for Software Security during Modern Code Review: The Developer's Perspective",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6969369",
        "abstract": "<p>Artifacts Package of the accepted FSE 22 paper: “Software Security during Modern Code Review: The Developer’s Perspective”.</p>\n<p>Our artifact package contains the following material:</p>\n<ol type=\"1\">\n<li>ethics: the ethics proposal’s form and detailed documentation, and the Human Subjects Committee approval.</li>\n<li>questions: the questions we asked during the interviews and the complete survey questionnaire.</li>\n<li>scripts: the R script used in our analysis and to automatically generate latex commands for our full paper.</li>\n<li>results: the raw transcripts of the interviews and card sorting results. This folder also contains the complete survey results and the results excluding the data of participants who did not agree to share their data in a public research dataset.</li>\n</ol>",
        "keywords": "code review, Software security engineering",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6970062": {
        "doi": "10.5281/zenodo.6970062",
        "author": "Ibrahimzada, Ali Reza and Varli, Yigit and Tekinoglu, Dilara and Jabbarvand, Reyhaneh",
        "title": "Reproduction Package for Article \"Perfect Is the Enemy of Test Oracle\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6970062",
        "abstract": "<p>Artifact repository for the paper Perfect Is the Enemy of Test Oracle, accepted at ESEC/FSE 2022. Authors are Ali Reza Ibrahimzada, Yi\\u{g",
        "keywords": "Deep Learning, Software Testing, Test Automation, Test Oracle",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6973860": {
        "doi": "10.5281/zenodo.6973860",
        "author": "Wang, Jue and Jiang, Yanyan and Su, Ting and Li, Shaohua and Xu, Chang and Lu, Jian and Su, Zhendong",
        "title": "Artifact `Detecting Non-crashing Functional Bugs in Android Apps via Deep-State Differential Analysis'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6973860",
        "abstract": "<p>An artifact of our prototype tool Odin, which is an implementation of our proposed deep-state differential analysis algorithm that brings the classical ``bugs as deviant behaviors’’ oracles to Android apps as a generic automatic test oracle for detecting non-crashing functional bugs.</p>",
        "keywords": "mobile apps, non-crashing functional bugs, Software testing",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.6975558": {
        "doi": "10.5281/zenodo.6975558",
        "author": "Dyer, Robert and Chauhan, Jigyasa",
        "title": "Replication package for \"An Exploratory Study on the Predominant Programming Paradigms in Python Code\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6975558",
        "abstract": "<p>This dataset includes scripts and data files used to generate all analysis and results from the paper. A README.md file is included for details on using the scripts - though all of the data the scripts generate should already be cached and none of the scripts actually need run.</p>\n<p>It also includes a spreadsheet containing the human judgements from Table 4 of the paper.</p>\n<p>Always current source for the scripts is available on GitHub: https://github.com/psybers/python-paradigms</p>",
        "keywords": "empirical study, programming paradigms, Python",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6977413": {
        "doi": "10.5281/zenodo.6977413",
        "author": "Song, Yang and Mahmud, Junayed and Zhou, Ying and Chaparro, Oscar and Moran, Kevin and Marcus, Andrian and Poshyvanyk, Denys",
        "title": "A Replication Package for \"Toward Interactive Bug Reporting for (Android App) End-Users\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6977413",
        "abstract": "<p>This is the replication package for our ESEC/ FSE’22 paper: “Toward Interactive Bug Reporting for (Android App) End-Users”. The package provides data, source code, and documentation that aims to enable verification/validation of our work and future research on the topic of bug reporting systems.</p>",
        "keywords": "Android Apps, Bug Reporting, Task-Oriented Chatbots",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/sea-lab-wm/burt/tree/v1.1.0"
    },
    "10.5281/zenodo.6977595": {
        "doi": "10.5281/zenodo.6977595",
        "author": "Chakraborty, Saikat and Ahmed, Toufique and Ding, Yangruibo and Devanbu, Premkumar T. and Ray, Baishakhi",
        "title": "Pre-Processing and Pre-Training code for \"NatGen: NatGen: Generative Pre-training by “Naturalizing” Source Code\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6977595",
        "abstract": "<p>This artifact demonstrates the pre-processing and training procedure for NatGen’s pre-training. For fine-tuning, we used CodeT5’s scripts.</p>",
        "keywords": "Neural Network, Source Code Pre-training, Source Code Transformer",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/saikat107/NatGen/tree/Pre-Training"
    },
    "10.5281/zenodo.7033365": {
        "doi": "10.5281/zenodo.7033365",
        "author": "OBrien, David and Biswas, Sumon and Imtiaz, Sayem and Abdalkareem, Rabe and Shihab, Emad and Rajan, Hridesh",
        "title": "Artifact for the ESEC/FSE'22 Paper: \"23 Shades of Self-Admitted Technical Debt: An Empirical Study on Machine Learning Software\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7033365",
        "abstract": "<p>This artifact contains the code, data, and additional information for reproducing the results found in the ESEC/FSE 2022 paper entitled “23 Shades of Self-Admitted Technical Debt: An Empirical Study on Machine Learning Software”. This study analyzes the occurrence of self-admitted technical debt (SATD) in a dataset consisting of 2,641 open-source machine learning repositories. The artifact contains the Boa scripts ran to acquire the comment data, as well as the Python scripts which were used to filter the dataset into 68,820 SATD comments. During the dataset creation, a sample was taken for two authors to independently label before settling disagreements in discussion of a moderator. The authors’ labels and the agreed upon labels are included within the artifact.</p>",
        "keywords": "data science, machine learning, open-source, technical debt",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7036047": {
        "doi": "10.5281/zenodo.7036047",
        "author": "Kim, Seulbae and Kim, Taesoo",
        "title": "Artifact of \"RoboFuzz: Fuzzing Robotic Systems over Robot Operating System (ROS) for Finding Correctness Bugs\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7036047",
        "abstract": "<p>RoboFuzz is a fuzzing framework for testing Robot Operating System 2 (ROS 2), and robotic systems that are built using ROS 2. Any developer-defined prop- erties relating to the correctness of the robotic system under test, e.g., conformance to specification, can be tested using RoboFuzz.</p>\n<p>The artifact (i.e., a docker image and a repository) contains the following: 1. Source code of RoboFuzz 2. Pre-compiled target sytstems and their code 3. Utilities for running experiments 4. Instructions on installing and executing RoboFuzz 5. Description of detected bugs and the links to the original bug reports</p>\n<p>The six targets we tested with RoboFuzz are: * Two from the internal layers of ROS2 foxy: 1. Type system (ROSIDL) 2. ROS Client Library APIs (rclpy and rclcpp) * Four ROS-based robotic systems and libraries: 3. Turtlesim (apt package: ros-foxy-turtlesim) 4. Move It 2 + PANDA manipualtor 5. Turtlebot3 Burger (version foxy) 6. PX4 quadcopter (firmware v1.12 + fmu-v5)</p>\n<p>Running RoboFuzz with the in-house oracles we built for each target, we discovered 30 new correctness bugs. We reported all bugs and 25 are acknowledged and 6 have been fixed so far.</p>",
        "keywords": "Correctness bugs, Robot Operating System 2 (ROS 2), Semantic feedback-driven fuzzing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7036218": {
        "doi": "10.5281/zenodo.7036218",
        "author": "Zhao, Yixue and Talebipour, Saghar and Baral, Kesina and Park, Hyojae and Yee, Leon and Khan, Safwat Ali and Brun, Yuriy and Medvidovi\\'{c",
        "title": "Artifacts for \"AVGUST: Automating Usage-Based Test Generation from Videos of App Executions\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7036218",
        "abstract": "<p>This artifact contains code and data related to the paper “Avgust: Automating Usage-Based Test Generation from Videos of App Executions”. Avgust is a human-in-the-loop technique that assists developers in generating usage-based tests for mobile apps by learning from videos of app usage. This artifact is made public to foster future research in automated testing of mobile applications and app comprehension in general. This repository contains the main source code of Avgust, processed video frames, screenshots, cropped widgets, and all the intermediate results such as IR models and generated tests.</p>",
        "keywords": "AI/ML, Mobile Application, Test Generation, UI Understanding",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/SageSELab/Avgust/tree/v1.1"
    },
    "10.5281/zenodo.7036747": {
        "doi": "10.5281/zenodo.7036747",
        "author": "Luo, Chuan and Zhao, Qiyuan and Cai, Shaowei and Zhang, Hongyu and Hu, Chunming",
        "title": "Artifact for ESEC/FSE 2022 Article `SamplingCA: Effective and Efficient Sampling-based Pairwise Testing for Highly Configurable Software Systems'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7036747",
        "abstract": "<p>Combinatorial interaction testing (CIT) is a popular testing methodology for testing interactions of options of highly configurable systems. In the context of CIT, covering arrays are the test suites that can cover all such interactions, possibly under certain constraints. Particularly, pairwise covering arrays (PCAs) are widely employed, since they can achieve a good balance between testing costs and fault detection capability.</p>\n<p>SamplingCA is a state-of-the-art algorithm for generating small-sized PCAs efficiently. In our implementation of SamplingCA, the input is a system under test (SUT) modeled as a Boolean formula in CNF. It outputs a PCA of the given SUT, where each line represents a valid configuration.</p>",
        "keywords": "Covering Array, Pairwise Testing, Sampling, Satisfiability",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/chuanluocs/SamplingCA/tree/v1.0.0"
    },
    "10.5281/zenodo.7037946": {
        "doi": "10.5281/zenodo.7037946",
        "author": "Eghbali, Aryaz and Pradel, Michael",
        "title": "DynaPyt",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7037946",
        "abstract": "<p>Dynamic analysis framework for Python.</p>",
        "keywords": "dynamic analysis, python",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/sola-st/DynaPyt/tree/v0.1"
    },
    "10.5281/zenodo.7047061": {
        "doi": "10.5281/zenodo.7047061",
        "author": "Riley, Daniel and Fedyukovich, Grigory",
        "title": "Artifact for Multi-Phase Invariant Synthesis",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7047061",
        "abstract": "<p>This is an artifact for the FSE’22 paper “Multi-Phase Invariant Synthesis”.</p>\n<p>The purpose of the artifact is to provide an environment to reproduce the results presented in the paper. This is not a full documentation of the <code>ImplCheck</code> method within <code>FreqHorn</code>. It is meant to allow for an individual to run the tools used in the paper’s experiments for themselves.</p>",
        "keywords": "automated safety verification, inductive invariant synthesis, model based projection, satisfiability modulo theories",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7048525": {
        "doi": "10.5281/zenodo.7048525",
        "author": "Nong, Yu and Ou, Yuzhe and Pradel, Michael and Chen, Feng and Cai, Haipeng",
        "title": "Reproduction Package for Article \"Generating Realistic Vulnerabilities via Neural Code Editing: An Empirical Study\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7048525",
        "abstract": "<p>Using a commonly used synthetic dataset and one real-world dataset, we investigate the potential and gaps of three state-of-the-art neural code editors (Graph2Edit, Hoppity, SequenceR) for DL-based realistic vulnerability data generation, and two state-of-the-art vulnerability detectors (Devign, ReVeal) to evaluate the usefulness of the generated realistic vulnerability data in improving the effectiveness of such detectors.</p>",
        "keywords": "benchmarking, data augmentation, data generation, datasets, deep learning, software vulnerability, vulnerability detection",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7060209": {
        "doi": "10.5281/zenodo.7060209",
        "author": "Cao, Junming and Chen, Bihuan and Sun, Chao and Hu, Longjie and Wu, Shuaihong and Peng, Xin",
        "title": "Reproduction Package for Article \"Understanding Performance Problems in Deep Learning Systems\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7060209",
        "abstract": "<p>In this document, we provide a detailed experiment reproduction of the paper. Each case has an independent directory, in which the Readme.md file that describes the environment required to run, the root cause of the bug, and how to reproduce the bug. It also provides a comparison of the running results of the two versions of the code on our machine. These results can show that the repaired code has better performance. DeepPerf is a rule-based static code checker capable of detecting Performance bugs in DL systems. Also, we provide code to test this tool.</p>",
        "keywords": "Deep Learning, Deep Learning Bugs, Performance Problems",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7080252": {
        "doi": "10.5281/zenodo.7080252",
        "author": "Chen, Haoxian and Whitters, Gerald and Amiri, Mohammad Javad and Wang, Yuepeng and Loo, Boon Thau",
        "title": "Reproduction package for \"Declarative Smart Contracts\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7080252",
        "abstract": "<p>This artifact contains two docker images: (1) the main tool developed in this paper, a compiler that translates Declarative smart contracts into Solidity programs. (2) software and scripts for reproducing experiment results in the paper.</p>",
        "keywords": "declarative programming, domain-specific language, Smart contracts",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7080271": {
        "doi": "10.5281/zenodo.7080271",
        "author": "Fu, Michael and Tantithamthavorn, Chakkrit and Le, Trung and Nguyen, Van and Phung, Dinh",
        "title": "Reproduction Package for VulRepair: A T5-Based Automated Software Vulnerability Repair",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7080271",
        "abstract": "<p>The replication package of the VulRepair paper supports future research to reproduce the experiment results in the paper.</p>",
        "keywords": "Automated Vulnerability Repair, Software Vulnerability Repair",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/awsm-research/VulRepair/tree/v1.0"
    },
    "10.5281/zenodo.7080276": {
        "doi": "10.5281/zenodo.7080276",
        "author": "Jodavi, Mehran and Tsantalis, Nikolaos",
        "title": "CodeTracker",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7080276",
        "abstract": "<p>CodeTracker is a refactoring-aware tool that can generate the commit change history for method and variable declarations in a Java project with a very high accuracy. https://github.com/jodavimehran/code-tracker https://search.maven.org/artifact/io.github.jodavimehran/code-tracker</p>",
        "keywords": "commit change history, refactoring-aware source code tracking",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7080369": {
        "doi": "10.5281/zenodo.7080369",
        "author": "Qin, Qi and JiYang, JulianAndres and Song, Fu and Chen, Taolue and Xing, Xinyu",
        "title": "DeJITLeak Tool Proposed in Article \"DeJITLeak: Eliminating JIT-Induced Timing Side-Channel Leaks\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7080369",
        "abstract": "<p>This artifact contains the two main components of the DeJITLeak tool, the Joana-based type inference tool and the patched JVM for fine-grained JIT control. It also includes the dataset and evaluation results and all the scripts used in the evaluation.</p>",
        "keywords": "detection, formal semantics, JIT compilation, mitigation, timing side-channel, type inference",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/LeoQ7/DeJITLeak/tree/v1.1"
    },
    "10.5281/zenodo.7081378": {
        "doi": "10.5281/zenodo.7081378",
        "author": "Silva, Pedro and Oliveira, Jos\\'{e",
        "title": "QAlloy Artifact, ESEC/FSE 2022",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7081378",
        "abstract": "<p>This artifact complements the paper Quantitative relational modelling with QAlloy submitted to the ESEC/FSE 2022 conference. It provides the necessary tools and instructions to run QAlloy and apply it to the examples discussed throughout the paper. Moreover, the benchmarking models and data are also provided, so that its results can be reproduced.</p>",
        "keywords": "Alloy, linear algebra, model finding, quantitative modelling, relational specifications, SMT",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7082252": {
        "doi": "10.5281/zenodo.7082252",
        "author": "Di Grazia, Luca and Pradel, Michael",
        "title": "Reproduction Package for Article 'The Evolution of Type Annotations in Python: An Empirical Study'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7082252",
        "abstract": "<p>The artifact contains script and data to reproduce all the results of the paper. Moreover, there are instructions to use the source code with a different dataset. The file README.md contains all the information to run the artifact.</p>",
        "keywords": "artifact, empirical study, Python, Type annotations, type errors",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/sola-st/PythonTypeAnnotationStudy/tree/v1.0"
    },
    "10.5281/zenodo.7082407": {
        "doi": "10.5281/zenodo.7082407",
        "author": "Winter, Stefan and Timperley, Christopher S. and Hermann, Ben and Cito, J\\\"{u",
        "title": "Reproduction Package (Docker container) for the FSE 2022 Article `A Retrospective Study of one Decade of Artifact Evaluations`",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7082407",
        "abstract": "<p>This is the artifact accompanying our study of artifact evaluations at SE/PL conferences and their effects, accepted for presentation at the ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE) 2022. For ease of artifact evaluation and usage, we ship our artifact as a Docker container, which comprises our datasets, the tools we built to collect those datasets, and the scripts used to obtain the results presented in the paper. It also contains the Dockerfile to create the submitted image in order to make the software dependencies for our artifact explicit.</p>",
        "keywords": "Artifact Evaluation, Reproducibility, Research Artifacts, Software Engineering",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7083445": {
        "doi": "10.5281/zenodo.7083445",
        "author": "Alon, Yoav and David, Cristina",
        "title": "Reproduction Package for Article: \"Using Graph Neural Networks for Program Termination\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7083445",
        "abstract": "<p>Classifier for program termination based on Graph Attention layers. Published in ESEC/FSE 2022 - The 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering. The repository contains a sample dataset that can be used to train a classifier for program termination based on the abstract syntax tree representation as described in our paper. The repository can be tested using a python virtual environment. All necessary instruction are contained in the readme and install files. The central file is train.py that performs training of a model according to a dataset with sample programs (where programs in folders with folder name 0 represent non-terminating programs and programs in folders with folder name 1 represent terminating programs). Utils.py contains code that transforms programs into their respective abstract syntax tree representation. The final models are saved in the models folder. Essentially, the runs folder create on runtime will contain all tensorboard event files that enable evaluation of all training and test metrics.</p>",
        "keywords": "Graph Attention Networks, Graph Neural Networks, Program Nontermination, Program Termination",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/yoavalon/GNNProgramTermination/tree/v1.0"
    },
    "10.5281/zenodo.7088367": {
        "doi": "10.5281/zenodo.7088367",
        "author": "Pai, Rekha and Uppar, Abhishek and Shenoy, Akshatha and Kushwaha, Pranshul and D'Souza, Deepak",
        "title": "The tool AndRacer for Static Executes-Before Analysis for Event Driven Programs",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7088367",
        "abstract": "<p>The tool AndRacer presents an implementation of sound, efficient, and effective static analysis technique to compute executes-before pairs of tasks for a general class of event driven programs. The executes-before information to identify disjoint-blocks in Android applications and hence use them for data race detection of the applications. Furthermore, we check for the shared resources protected by disjoint blocks due to locks and hence decide on the possible Redundant Synchronisation Blocks.</p>\n<p>The artifact is submitted as an Installation Package. The Installation Package is a Virtual Machine for Virtual Box. Details on installation and usability of the artifact are given in repo hosted at https://zenodo.org/record/7088367#.Yy7WDi0RpQI</p>",
        "keywords": "Android applications., asynchronous calls, event driven programming, executes-before, race detection, static analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7088613": {
        "doi": "10.5281/zenodo.7088613",
        "author": "Tomy, Chris and Wang, Tingmao and Barr, Earl T. and Mechtaev, Sergey",
        "title": "Reproduction package for the article \"Modus: A Datalog Dialect for Building Container Images\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7088613",
        "abstract": "<p>This software is an artifact used to reproduce the results of our paper. Below is the abstract of our paper.</p>\n<p>Containers help share and deploy software by packaging it with all its dependencies. Tools, like Docker or Kubernetes, spawn containers from images as specified by a build system’s language, such as Dockerfile. A build system takes many parameters to build an image, including OS and application versions. These build parameters can interact: setting one can restrict another. Dockerfile lacks support for reifying and constraining these interactions, thus forcing developers to write a build script per workflow. As a result, developers have resorted to creating ad hoc solutions such as templates or domain-specific frameworks that harm performance and complicate maintenance because they are verbose and mix languages.</p>\n<p>To address this problem, we introduce Modus, a Datalog dialect for building container images. Modus’ key insight is that container definitions naturally map to proof trees of Horn clauses. In these trees, container configurations correspond to logical facts, build instructions correspond to logic rules, and the build tree is computed as the minimal proof of the Datalog query specifying the target image. Modus relies on Datalog’s expressivity to specify complex workflows with concision and facilitate automatic parallelisation.</p>",
        "keywords": "Build system, Containers, Datalog",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7110095": {
        "doi": "10.5281/zenodo.7110095",
        "author": "Bittner, Paul Maximilian and Tinnes, Christof and Schulthei\\ss{",
        "title": "Appendix and Replication Package for Article: Classifying Edits to Variability in Source Code",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7110095",
        "abstract": "<p>This replication package consists of four parts:</p>\n<ol type=\"1\">\n<li><strong>DiffDetective</strong>: For our validation, we built <em>DiffDetective</em>, a java library and command-line tool to classify edits to variability in git histories of preprocessor-based software product lines.</li>\n<li><strong>Appendix</strong>: The appendix of our paper is given in PDF format in the file <a href=\"https://github.com/VariantSync/DiffDetective/raw/esecfse22/appendix.pdf\">appendix.pdf</a>.</li>\n<li><strong>Haskell Formalization</strong>: We provide an extended formalization in the Haskell programming language as described in our appendix. Its implementation can be found in the Haskell project in the proofs directory.</li>\n<li><strong>Dataset Overview</strong>: We provide an overview of the 44 inspected datasets with updated links to their repositories in the file <a href=\"https://github.com/VariantSync/DiffDetective/blob/esecfse22/docs/datasets.md\">docs/datasets.md</a>.</li>\n</ol>",
        "keywords": "feature traceability, mining version histories, software evolution, software product lines, software variability",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/VariantSync/DiffDetective/tree/ArtifactESECFSE22"
    },
    "10.5281/zenodo.7110215": {
        "doi": "10.5281/zenodo.7110215",
        "author": "Yeow, Matthew Yit Hang and Chong, Chun Yong and Lim, Mei Kuan",
        "title": "Data, Results and Code for Article 'On the Application of Machine Learning Models to Assess and Predict Software Reusability'",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7110215",
        "abstract": "<p>This is the dataset, results and notebook for the workshop paper submission into the 6th edition of the International Workshop on Machine Learning Techniques for Software Quality Evolution (MaLTeSQuE 2022) which is held at Singapore, collocated with the ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE 2022).</p>",
        "keywords": "Machine Learning, Software Metrics, Software Reusability",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/cyan-wings/software-reusability-ghforks"
    },
    "10.5281/zenodo.7111136": {
        "doi": "10.5281/zenodo.7111136",
        "author": "Dong, Liming and Zhang, He and Liu, Wei and Weng, Zhiluo and Kuang, Hongyu",
        "title": "Reproduction Package for \"Semi-supervised Pre-processing for Learning-Based Traceability Framework on Real-World Software Projects\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7111136",
        "abstract": "<p>Materials provided include public OSS datasets, source code, and experiment results for the FSE 2022 paper: “Semi-supervised Pre-processing for Learning-Based Traceability Framework on Real-World Software Projects”</p>",
        "keywords": "Data Imbalance, Data Sparsity, Industry Practice, Learning-based Model, Semi-supervised Learning, Software Traceability",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7183177": {
        "doi": "10.5281/zenodo.7183177",
        "author": "Verano Merino, Mauricio and van Wijk, Koen",
        "title": "Blocklybench",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7183177",
        "abstract": "<p>We present Blocklybench, a meta-block-based environment for describing block-based languages for both programming and semi-structured data languages; it allows developers to express the specific elements of both types of block-based languages using blocks. We present three case studies created with Blocklybench to evaluate the proposed solution. Our results show that the block meta-environment allows developers to describe block-based specific aspects of the language constructs such as layout and color.</p>",
        "keywords": "block-based environments, Blockly, data languages, IDEs, Projectional editors, visual languages",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/block-based-editors/blocklybench/tree/0.0.1"
    },
    "10.5281/zenodo.7188801": {
        "doi": "10.5281/zenodo.7188801",
        "author": "Chen, Zilin and Rizkallah, Christine and O'Connor, Liam and Susarla, Partha and Klein, Gerwin and Heiser, Gernot and Keller, Gabriele",
        "title": "Property-Based Testing: Climbing the Stairway to Verification (Artefact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7188801",
        "abstract": "<p>In the artefact, we provide the source code of the Cogent compiler that has been extended with the property-based testing infrastructure, and the source code of the examples studied in the paper.</p>",
        "keywords": "formal verification, functional programming, QuickCheck, systems programming",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7189905": {
        "doi": "10.5281/zenodo.7189905",
        "author": "Smits, Jeff and Hartman, Toine and Cockx, Jesper",
        "title": "Optimising First-Class Pattern Matching - Artefact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7189905",
        "abstract": "<p>This is the artefact for the paper Optimising First-Class Pattern Matching, accepted at the International Conference on Software Language Engineering. It contains a Docker image with the setup to rerun the benchmarks we used in the evaluation of the paper.</p>\n<h3 id=\"table-of-contents\">Table of Contents</h3>\n<ul>\n<li>Preliminary PDF version of the accepted paper.</li>\n<li>Docker image archive, containing:\n<ul>\n<li>A Linux installation.</li>\n<li>A development version of Spoofax pre-installed (based on release 2.5.17) (libraries only, no GUI).</li>\n<li>The benchmark setup as used in the paper, with a check-out of the Tiny Imperative Language Spoofax project.</li>\n<li>Benchmark results from one previous run.</li>\n</ul></li>\n</ul>",
        "keywords": "First-Class Pattern Matching, Pattern Match Optimisation, Pattern Matching, Spoofax, Stratego",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7211893": {
        "doi": "10.5281/zenodo.7211893",
        "author": "van der Storm, Tijs and Hermans, Felienne",
        "title": "Gradual Grammars: Syntax in Levels and Locales (artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7211893",
        "abstract": "<p>The artifact contains the source code of the Fabric gradual grammar formalism, including its compiler to LARK. Additionally, it demonstrates the embedding of Fabric in the Rascal metaprogramming language. Both approaches are evaluated with case-studies. Finally, the artifact contains the scripts to reproduce the benchmark result about the performance overhead of <code>unravel</code>.</p>",
        "keywords": "gradual languages, grammars, internationalization, modularity, parsing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7223815": {
        "doi": "10.5281/zenodo.7223815",
        "author": "Rein, Patrick and Beckmann, Tom and Geier, Leonard and Mattis, Toni and Hirschfeld, Robert",
        "title": "Materials for Conducting Debugging Contests",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7223815",
        "abstract": "<p>This archive includes materials to conduct Competitive Debugging contests, as described in the corresponding publication “Competitive Debugging: Towards Contests Promoting Debugging as a Skill”.</p>\n<p>The archive contains the following materials</p>\n<pre><code>environment-main-event/: The programming environment used for the main event. To get it running, see below.\nenvironment-training/: The programming environment participants received for training before the main event.\nRealmsOfZaltia/: The source code of the game the participants worked on.\ntasks/:\n    *.cs: The patches that introduce the faults into the game source code.\n    selected-task-descriptions.txt: The task descriptions for several of the patches. Not all are included, as some were not used in the contest. The file has the format: task number, steps to reproduce, observable failure.\nCompetitive Debugging Season 1 - Game 2 - Intro Text.pdf: A sketch of the introduction to the contest (in German).</code></pre>\n<p>Starting the Environment</p>\n<p>The environment is a Squeak/Smalltalk system. To start the environment you need a corresponding Squeak virtual machine for your operating system. You can then start the VM by passing the *.image file to it.</p>\n<p>The specifications for the image file are 64bit, Spur memory layout, SISTAV1 bytecode.</p>",
        "keywords": "competitive debugging, debugging, debugging contest, tasks, teaching, training",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7259115": {
        "doi": "10.5281/zenodo.7259115",
        "author": "Risberg Alak\\\"{u",
        "title": "Property Probe Artifact",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7259115",
        "abstract": "<p>Artifact and Docker images for the paper “Property Probes: Source Code Based Exploration of Program Analysis Results”, to appear in ACM SLE 2022.</p>\n<p>Main instructions on how to evaluate this artifact can be found in the README.pdf inside the Artifact.zip file.</p>\n<p>There are two prebuilt Docker images available, each with a different target Docker architecture. Make sure to download the one that matches your local architecture to get best performance while evaluating the artifact.</p>\n<p>Version 1.1.0 of this artifact contains some updates to the README inside Artifact.zip.</p>",
        "keywords": "programming language tools",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/lu-cs-sde/codeprober"
    },
    "10.5281/zenodo.7260980": {
        "doi": "10.5281/zenodo.7260980",
        "author": "Khorram, Faezeh and Bousse, Erwan and Garmendia, Antonio and Mottu, Jean-Marie and Suny\\'{e",
        "title": "Coverage Computation and Fault Localization for Executable DSLs Artefacts",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7260980",
        "abstract": "<p>This repository contains the tool and the evaluation data of our paper titled “From Coverage Computation to Fault Localization: A Generic Framework for Domain-Specific Languages”, accepted at SLE 2022. The provided tool is built atop the Eclipse GEMOC Studio.</p>",
        "keywords": "Coverage, Executable Domain-Specific Languages, Executable Models, Fault Localization, Testing",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/Faezeh-Kh/Coverage4DSLs/tree/v1.0.4"
    },
    "10.5281/zenodo.7342082": {
        "doi": "10.5281/zenodo.7342082",
        "author": "Turcotte, Alexi and Donat-Bouillud, Pierre and K\\v{r",
        "title": "Artifact for signatr: A Data-Driven Fuzzing Tool for R",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7342082",
        "abstract": "<p>The artifact contains the signatr tool, and the pipelines to create an R value database and to fuzz R functions with the database to find type signatures. The pipeline to create a value database is in pipeline-dbgen. The fuzzing pipeline will generate the inputs for the sle.Rmd R markdown notebook. That notebook can then be rendered to get all the results (tables, figures) we use in the paper.</p>",
        "keywords": "dynamic program analysis, dynamic programming languages, fuzzing, R",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/PRL-PRG/sle22-signatr-artifact/tree/accepted-artifact"
    },
    "10.5281/zenodo.6640549": {
        "doi": "10.5281/zenodo.6640549",
        "author": "Pfandzelter, Tobias and Bermbach, David",
        "title": "Implementation of the article \"Celestial: Virtual Software System Testbeds for the LEO Edge\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6640549",
        "abstract": "<p></p><p>Artifact appendix item for Middleware 2022</p><p></p>",
        "keywords": "concurrent object relocation, forwarding information, garbage collection, OpenJDK, ZGC",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/OpenFogStack/celestial/tree/v0.1"
    },
    "10.5281/zenodo.7173860": {
        "doi": "10.5281/zenodo.7173860",
        "author": "Yin, Xizhe and Zhao, Zhijia and Gupta, Rajiv",
        "title": "Reproduction Package for Article `Glign: Taming Misaligned Graph Traversals in Concurrent Graph Processing’",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7173860",
        "abstract": "<p>This artifact contains the source code of Glign, including the five concurrent query evaluation designs discussd in the paper and some graph benchmarks along with their inputs used in the experiments. In addition, this artifact provides bash scripts to compile Glign and reproduce the key experimental results reported in the paper.</p>",
        "keywords": "concurrent graph processing, data locality, graph system",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7182800": {
        "doi": "10.5281/zenodo.7182800",
        "author": "Sutherland, Mark and Falsafi, Babak and Daglis, Alexandros",
        "title": "Discrete-Event Simulation Software and Results Accompanying \"Cooperative Concurrency Control for Write Intensive Key-Value Workloads\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7182800",
        "abstract": "<p>This archive contains the code, datasets, and instructions to generate the discrete-event simulation results appearing in the paper: “Cooperative Concurrency Control for Write-Intensive Key-Value Workloads”.</p>\n<p>All instructions and tutorials for using the artifact are contained in the paper’s artifact appendix.</p>",
        "keywords": "concurrency control, discrete-event simulation, key-value store, load balancing",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7198195": {
        "doi": "10.5281/zenodo.7198195",
        "author": "Gouicem, Redha and Sprokholt, Dennis and Ruehl, Jasper and Rocha, Rodrigo C. O. and Spink, Tom and Chakraborty, Soham and Bhatotia, Pramod",
        "title": "Risotto: A Dynamic Binary Translator for Weak Memory Model Architectures",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7198195",
        "abstract": "<p>Artifact for the Risotto: A Dynamic Binary Translator for Weak Memory Model Architectures paper published at ASPLOS’23.</p>",
        "keywords": "binary translation, formal verification, memory models",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7220659": {
        "doi": "10.5281/zenodo.7220659",
        "author": "Luo, Shutian and Xu, Huanle and Ye, Kejiang and Xu, Guoyao and Zhang, Liping and He, Jian and Yang, Guodong and Xu, Chengzhong",
        "title": "Reproduction Package for Article &nbsp;Erms: Efficient Resource Management for Shared Microservices with SLA Guarantees",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7220659",
        "abstract": "<p>Erms is a cluster-level resource management system for shared microservices with SLA guarantees. This artifact includes a proto- type implementation of Erms and the experimental workflows for running DeathStarBench on Erms.</p>",
        "keywords": "Resource Management, Shared Microservices, SLA Guarantees",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7120897": {
        "doi": "10.5281/zenodo.7120897",
        "author": "Cao, David and Kunkel, Rose and Nandi, Chandrakana and Willsey, Max and Tatlock, Zachary and Polikarpova, Nadia",
        "title": "Artifact for \"babble: Learning Better Abstractions with E-Graphs and Anti-Unification\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7120897",
        "abstract": "<p>This is the artifact for the paper “babble: Learning Better Abstractions with E-Graphs and Anti-Unification”.</p>\n<p>The canonical source for this artifact is the Github repo: https://github.com/dcao/babble/tree/popl23 An archival copy is on Zenodo with DOI: 10.5281/zenodo.7120897.</p>",
        "keywords": "e-graphs, library learning, program synthesis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7129302": {
        "doi": "10.5281/zenodo.7129302",
        "author": "Moine, Alexandre and Chargu\\'{e",
        "title": "A High-Level Separation Logic for Heap Space under Garbage Collection - Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7129302",
        "abstract": "<p>This is the artifact corresponding to&nbsp;the article entitled “A High-Level Separation Logic for Heap Space under Garbage Collection”, and its associated documentation.</p>",
        "keywords": "Coq, Iris, live data, program verification, separation logic, tracing garbage collection",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7130343": {
        "doi": "10.5281/zenodo.7130343",
        "author": "Smeding, Tom J. and V\\'{a",
        "title": "Artifact for Efficient Dual-Numbers Reverse AD via Well-Known Program Transformations",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7130343",
        "abstract": "<p>Artifact for the POPL23 submission titled “Efficient Dual-Numbers Reverse AD via Well-Known Program Transformations”. Includes a VirtualBox virtual disk image (tested with VirtualBox 6.1.38), as well as a zip file with just the code. The artifact allows reproduction of the experimental results in the paper.</p>",
        "keywords": "automatic differentiation, functional programming, source transformation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7144067": {
        "doi": "10.5281/zenodo.7144067",
        "author": "Antonopoulos, Timos and Koskinen, Eric and Le, Ton Chanh and Nagasamudram, Ramana and Naumann, David A. and Ngo, Minh",
        "title": "Mechanization of some results in: An Algebra of Alignment for Relational Verification",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7144067",
        "abstract": "<p>Relational verification encompasses information flow security, regression verification, translation validation for compilers, and more. Effective alignment of the programs and computations to be related facilitates use of simpler relational invariants and relational procedure specs, which in turn enables automation and modular reasoning. Alignment has been explored in terms of trace pairs, deductive rules of relational Hoare logics (RHL), and several forms of product automata. This article shows how a simple extension of Kleene Algebra with Tests (KAT), called BiKAT, subsumes prior formulations, including alignment witnesses for forall-exists properties, which brings to light new RHL-style rules for such properties. Alignments can be discovered algorithmically or devised manually but, in either case, their adequacy with respect to the original programs must be proved; an explicit algebra enables constructive proof by equational reasoning. Furthermore our approach inherits algorithmic benefits from existing KAT-based techniques and tools, which are applicable to a range of semantic models.</p>\n<p>The artifact formalizes some results from the paper in Coq. These include constructions of models of BiKAT, general consequences of BiKAT axioms, and the encoding of forall-forall relational triples. In addition, the artifact proves soundness and completeness of a technique for establishing forall-exists properties using BiKAT.</p>",
        "keywords": "hyperproperties, Kleene algebra with tests, program algebra, relational verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7147007": {
        "doi": "10.5281/zenodo.7147007",
        "author": "Das, Ankush and Wang, Di and Hoffmann, Jan",
        "title": "Probabilistic Resource-Aware Session Types (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7147007",
        "abstract": "<p>This artifact accompanies the paper titled “Probabilistic Resource-Aware Session Types” appearing at POPL 2023. The artifact contains a VM (Virtual Machine) image that contains an implementation of the NomosPro core calculus (our main contribution) and benchmark examples to test the implementation.</p>",
        "keywords": "Amortized Analysis, Markov Chains, Nested Multiverse Semantics, Probabilistic Concurrency, Probabilistic Programming, Randomized Distributed Protocols, Resource Analysis, Semantics, Session Types, Type Systems",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7148055": {
        "doi": "10.5281/zenodo.7148055",
        "author": "Thokair, Mosaad Al and Zhang, Minjian and Mathur, Umang and Viswanathan, Mahesh",
        "title": "Artifact: Dynamic Race Detection With O(1) Samples",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7148055",
        "abstract": "<p>This document provides instructions on how to evaluate the implementation and reproduce the results from the POPL 2023 article titled “Dynamic Race Detection With O(1) Samples”</p>",
        "keywords": "Concurrency, Dynamic program analysis, Happens-before, Property testing, Race detection",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7149192": {
        "doi": "10.5281/zenodo.7149192",
        "author": "Barri\\`{e",
        "title": "Reproduction Package for \"Formally Verified Native Code Generation in an Effectful JIT\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7149192",
        "abstract": "<p>A Virtual Machine Image where FM-JIT is installed (in /home/popl23/FM-JIT/coqjit) and ready to be run.</p>",
        "keywords": "CompCert compiler, just-in-time compilation, verified compilation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7150549": {
        "doi": "10.5281/zenodo.7150549",
        "author": "Jacobs, Jules and Balzer, Stephanie",
        "title": "Higher-Order Leak and Deadlock Free Locks (Coq mechanization)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7150549",
        "abstract": "<p>Coq mechanization for the paper “Higher-Order Leak and Deadlock Free Locks”.</p>",
        "keywords": "Coq, deadlocks, locks, mechanization, proofs",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7150677": {
        "doi": "10.5281/zenodo.7150677",
        "author": "Bembenek, Aaron and Greenberg, Michael and Chong, Stephen",
        "title": "From SMT to ASP: Solver-Based Approaches to Solving Datalog Synthesis-as-Rule-Selection Problems (POPL 2023 Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7150677",
        "abstract": "<p>This artifact includes the application code, benchmarks, and scripts for reproducing the experiments in the POPL’23 paper “From SMT to ASP: Solver-Based Approaches to Solving Datalog Synthesis-as-Rule-Selection Problems” by Aaron Bembenek, Michael Greenberg, and Stephen Chong.</p>",
        "keywords": "answer set programming, Datalog, inductive logic programming, program synthesis, satisfiability",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7150706": {
        "doi": "10.5281/zenodo.7150706",
        "author": "Jacobs, Jules and Wi\\ss{",
        "title": "Fast Coalgebraic Bisimilarity Minimization (artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7150706",
        "abstract": "<p>This is the artifact for the paper “Fast Coalgebraic Bisimilarity Minimization”.</p>\n<p>It contains a Rust program called “boa”, which implements the algorithm for the paper.</p>",
        "keywords": "automata, bisimilarity, Coalgebra, minimization",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7150943": {
        "doi": "10.5281/zenodo.7150943",
        "author": "Dash, Swaraj and Kaddar, Younesse and Paquet, Hugo and Staton, Sam",
        "title": "LazyPPL: Affine monads and lazy structures for Bayesian programming",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7150943",
        "abstract": "<p>A Haskell library for probabilistic programming with lazy structures, to accompany the paper “Affine monads and lazy structures for Bayesian programming”.</p>",
        "keywords": "Probabilistic programming",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7151663": {
        "doi": "10.5281/zenodo.7151663",
        "author": "Bowers, Matthew and Olausson, Theo X. and Wong, Lionel and Grand, Gabriel and Tenenbaum, Joshua B. and Ellis, Kevin and Solar-Lezama, Armando",
        "title": "Artifact for Reproducing Results From \"Top-Down Synthesis for Library Learning\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7151663",
        "abstract": "<p>This Artifact is for reproducing the results of “Top-Down Synthesis for Library Learning” (POPL 2023). While this remains as the static version submitted to POPL, some small changes/fixes for broader OS compatibility were made during the evaluation process and are present in the GitHub repo https://github.com/mlb2251/stitch-artifact which will remain more up to date, so <strong>for most use-cases the GitHub version will be preferable</strong>. All instructions for installation, running, etc can be found in the ReadMe of the artifact.</p>",
        "keywords": "Abstraction Learning, Library Learning, Program Synthesis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7151842": {
        "doi": "10.5281/zenodo.7151842",
        "author": "Kokologiannakis, Michalis and Lahav, Ori and Vafeiadis, Viktor",
        "title": "Reproduction package for article: \"Kater: Automating Weak Memory Metatheory and Consistency Checking\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7151842",
        "abstract": "<p>The artifact comprises the version of Kater used for the paper benchmarks, as well as a version of GenMC that employs Kater-generated consistency checks.</p>",
        "keywords": "declarative semantics, kleene algebra with tests, software model checking, weak memory models",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7152484": {
        "doi": "10.5281/zenodo.7152484",
        "author": "Klimis, Vasileios and Clark, Jack and Baker, Alan and Neto, David and Wickerson, John and Donaldson, Alastair F.",
        "title": "Artifact for POPL 2023 Paper: Taking Back Control in an Intermediate Representation for GPU Computing",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7152484",
        "abstract": "<p>The artifact provides evidence to back up the claims made in our POPL 2023 Paper: “Taking Back Control in an Intermediate Representation for GPU Computing”. It is a Docker image that has all the necessary tooling/software pre-installed; this includes the tools produced by us for the paper and this artifact, as well as some third-party tooling for assembling, parsing, disassembling and validating SPIR-V modules.</p>",
        "keywords": "Alloy, control flow, fuzz testing, GPU graphics, SPIR-V",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7220452": {
        "doi": "10.5281/zenodo.7220452",
        "author": "Chen, Zilin and Lafont, Ambroise and O'Connor, Liam and Keller, Gabriele and McLaughlin, Craig and Jackson, Vincent and Rizkallah, Christine",
        "title": "Dargent: A Silver Bullet for Verified Data Layout Refinement (Artefact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7220452",
        "abstract": "<p>The artefact contains the source code of the Cogent compiler and its verification framework extended with Dargent, a test suite consisting of small Dargent programs, and the case studies presented in the paper.</p>",
        "keywords": "certifying compiler, data layout description, data refinement, systems programming",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7227966": {
        "doi": "10.5281/zenodo.7227966",
        "author": "Chappe, Nicolas and He, Paul and Henrio, Ludovic and Zakowski, Yannick and Zdancewic, Steve",
        "title": "Choice Trees: Representing Nondeterministic, Recursive, and Impure Programs in Coq",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7227966",
        "abstract": "<p>Snapshot of the “ctrees” library as per its description in the paper “Choice Trees: Representing Nondeterministic, Recursive, and Impure Programs in Coq”.</p>\n<p>This library provides a constructive semantic model supporting native support for divergence and non-determinism, while being parameterized by a non-axiomatized signature of external interaction. It is shown to be a valid interpretation target from itrees, as well as to support further interpretation towards other iterative monads.</p>",
        "keywords": "Concurrency, Formal Semantics, Interaction Trees, Nondeterminism",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7246597": {
        "doi": "10.5281/zenodo.7246597",
        "author": "Lee, Wonyeol and Rival, Xavier and Yang, Hongseok",
        "title": "Artifact for the Paper \"Smoothness Analysis for Probabilistic Programs with Application to Optimised Variational Inference\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7246597",
        "abstract": "<p>The artifact includes (i) our implementation of the static analysis for smoothness properties, (ii) the Pyro programs used in our experiments, and (iii) information on how to reproduce the results reported in the paper. For more details, please refer to `pyppai/README.txt’ in the artifact, and Section 7 of the paper.</p>",
        "keywords": "probabilistic programming, smoothness, static analysis, variational inference",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7260815": {
        "doi": "10.5281/zenodo.7260815",
        "author": "Palmkvist, Viktor and Castegren, Elias and Haller, Philipp and Broman, David",
        "title": "Implementation, Experiments, and Mechanization for 'Statically Resolvable Ambiguity'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7260815",
        "abstract": "<p>This artifact contains all supplementary material for the ‘Statically Resolvable Ambiguity’ paper, including the modified OCaml compiler, the library implementing our grouper, the benchmarks and resulting data used in the paper, and the mechanized proof of static resolvability.</p>",
        "keywords": "Coq, OCaml, Parsing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7305612": {
        "doi": "10.5281/zenodo.7305612",
        "author": "Abreu, Pedro and Delaware, Benjamin and Hubers, Alex and Jenkins, Christa and Morris, J. Garrett and Stump, Aaron",
        "title": "Artifact, Documentation, and Code for POPL'23 Paper &nbsp;\"A Type-Based Approach to Divide-and-Conquer Recursion in Coq\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7305612",
        "abstract": "<p>Artifact for POPL’23 Paper “A Type-Based Approach to Divide-and-Conquer Recursion in Coq”. The paper describes a development in Coq for writing divide-and-conquer recursion with type-based termination checking. This artifact contains this development and many example applications.</p>",
        "keywords": "Algebraic Semantics, Coq, Divide-and-Conquer Recursion, Mendler Algebras, Mergesort, Strong Normalization, Type-Based Termination Checking",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7306313": {
        "doi": "10.5281/zenodo.7306313",
        "author": "Sammler, Michael and Spies, Simon and Song, Youngju and D'Osualdo, Emanuele and Krebbers, Robbert and Garg, Deepak and Dreyer, Derek",
        "title": "Artifact and Appendix of \"DimSum: A Decentralized Approach to Multi-language Semantics and Verification\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7306313",
        "abstract": "<p>This is the artifact for the POPL’23 paper “DimSum: A Decentralized Approach to Multi-language Semantics and Verification”. It contains the Coq development and the appendix for the paper.</p>",
        "keywords": "compilers, Coq, Iris, multi-language semantics, non-determinism, separation logic, verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7308911": {
        "doi": "10.5281/zenodo.7308911",
        "author": "Popescu, Andrei and Traytel, Dmitriy",
        "title": "POPL'23 artifact for \"Admissible Types-To-PERs Relativization in Higher-Order Logic\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7308911",
        "abstract": "<p>The artifact contains the tool support we developed to experiment with relativization in Isabelle/HOL.</p>",
        "keywords": "higher-order logic (HOL), interactive theorem proving, Isabelle/HOL, partial equivalence relation, proof theory, relativization, type definition",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/dtraytel/HOLRLT/tree/artifact"
    },
    "10.5281/zenodo.7310633": {
        "doi": "10.5281/zenodo.7310633",
        "author": "Pitts, Andrew M.",
        "title": "Agda code accompanying the paper \"Locally Nameless Sets\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7310633",
        "abstract": "<p>The zip archive locns-agda.zip contains code for Agda (version 2.6.2.2) that was used to develop the theory of locally nameless sets and to check some of the proofs in the paper: Andrew M. Pitts. 2023. Locally Nameless Sets. Proc. ACM Program. Lang. 7, POPL, Article 17 (January 2023), 27 pages. https://doi.org/10.1145/3571210. The code mainly targets proofs that involve equational reasoning combined with the use of atoms and indices that are sufficiently fresh (via cofinite quantification). Some of these proofs involve a lot of nested case analysis on elements of sets with decidable equality (atoms and indices); some of the equational axioms are unfamiliar-looking and combinatorially complicated; and it is easy to forget to check necessary freshness conditions are satisfied when doing informal proofs. For all these reasons the use of an interactive theorem prover to produce machine-checked proofs was essential to gain assurance that the results in the paper are correct. The Agda code is stand-alone: the root is the file Everything.agda (for browsable code start at html/Everything.html). Some standard definitions (that might otherwise be called from the Agda Standard Library) are collected in the file Prelude.agda. The last part of the development requires function extensionality, which we postulate in the file FunExt.agda.</p>",
        "keywords": "Agda, category theory, cofinite quantification, initial algebra, locally nameless, metatheory of syntax, name binding",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7315899": {
        "doi": "10.5281/zenodo.7315899",
        "author": "Bach Poulsen, Casper and van der Rest, Cas",
        "title": "Hefty Algebras -- the Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7315899",
        "abstract": "<p>This artifact contains the code accompanying the POPL 2023 paper Hefty Algebras: Modular Elaboration of Higher-Order Algebraic Effects.</p>",
        "keywords": "Agda, Algebraic Effects, Dependent Types, Modularity, Reuse",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/heft-lang/POPL2023/tree/v1.0"
    },
    "10.5281/zenodo.7320806": {
        "doi": "10.5281/zenodo.7320806",
        "author": "Lee, Woosuk and Cho, Hangyeol",
        "title": "Artifacts for \"Inductive Synthesis of Structurally Recursive Functional Programs from Non-recursive Expressions\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7320806",
        "abstract": "<p>This artifact includes all things necessary􏰛 for reproducing experimental results in the paper “Inductive Synthesis of Structurally Recursive Functional Programs from Non-recursive Expressions”. The source code for Trio, which is the tool presented in the paper, and the other baseline synthesizers (Burst and Smyth), and the scripts for running the experiments are contained.</p>",
        "keywords": "Program synthesis, Programming-by-example, Recursive functional programs, Version space",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7321183": {
        "doi": "10.5281/zenodo.7321183",
        "author": "Kincaid, Zachary and Koh, Nicolas and Zhu, Shaowei",
        "title": "Artifact for the article \"When Less is More: Consequence Finding in a Weak Theory of Arithmetic\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7321183",
        "abstract": "<p>This is the artifact for the POPL 2023 paper, When Less is More: Consequence Finding in a Weak Theory of Arithmetic. The artifact is an OVA virtual machine that can be opened through VirtualBox. The artifact contains all necessary software and dependencies to reproduce the experimental results in Section 6 of the paper. The accompanying README file contains detailed instructions to reproduce the results and how to run the tool on new tasks.</p>",
        "keywords": "computational commutative algebra, Groebner basis, invariants, monotone, non-linear invariant generation, predictable, program analysis, theory of arithmetics",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7332066": {
        "doi": "10.5281/zenodo.7332066",
        "author": "Pujet, Lo\\\"{\\i",
        "title": "CoqHott/logrel-mltt: POPL23 version",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7332066",
        "abstract": "<p>A Logical Relation for Impredicative Observational Equality in Agda.</p>\n<p>This is a formalized proof of the decidability of conversion for an extension of the calculus of inductive constructions (CIC) with an equality satisfying UIP, function extensionality, and propositional extensionality.</p>",
        "keywords": "Agda, Impredicativity, Logical Relation, Proof Irrelevance, Type Theory",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/CoqHott/logrel-mltt/tree/POPL23"
    },
    "10.5281/zenodo.7382711": {
        "doi": "10.5281/zenodo.7382711",
        "author": "Voichick, Finn and Li, Liyi and Rand, Robert and Hicks, Michael",
        "title": "Qunity: A Unified Language for Quantum and Classical Computing (Type Checker)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7382711",
        "abstract": "<p>This code repository is designed to accompany the paper “Qunity: A Unified Language for Quantum and Classical Computing.” You can run the “make” command to compile our proofs. See the README.md file for more details.</p>",
        "keywords": "programming languages, quantum computing, type checking",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7409103": {
        "doi": "10.5281/zenodo.7409103",
        "author": "Rioux, Nick and Huang, Xuejing and Oliveira, Bruno C. d. S. and Zdancewic, Steve",
        "title": "A Bowtie for a Beast: Overloading, Eta Expansion, and Extensible Data Types in F⋈ (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7409103",
        "abstract": "<p>Our companion paper presents F⋈, a core language that demonstrates how unions, intersections, and overloading can all coexist with a tame merge operator. Merging values from overlapping types may be ambiguous, so disjointness relations have been introduced to rule out undesired nondeterminism and obtain a well-behaved semantics. Our design principle states that any two types can support either the deterministic merging of their values, or the ability to distinguish their values, but never both. To realize this invariant, We decompose previously studied notions of disjointness into two new, dual relations that permit the operation that best suits each pair of types. This artifact contains Coq code that formalizes certain type-level parts of the semantics of F⋈, including subtyping, dispatch, and some key properties of the two disjointness relations.</p>",
        "keywords": "Coq, intersection types, subtyping, union types",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7472859": {
        "doi": "10.5281/zenodo.7472859",
        "author": "Xu, Han and Huang, Xuejing and Oliveira, Bruno C. d. S.",
        "title": "Coq Formalization for \"Making a Type Difference: Subtraction on Intersection Types as Generalized Record Operations\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7472859",
        "abstract": "<p>Coq formalization that contains the definitions and proves the claims in the paper. We provide the source code and a virtual machine image with all the dependencies installed. The appendix of the paper is also included.</p>",
        "keywords": "Coq, functional programming, object-oriented programming, type systems",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7491759": {
        "doi": "10.5281/zenodo.7491759",
        "author": "Lu, Sirui and Bod\\'{\\i",
        "title": "Reproduction Package for Article \"Grisette: Symbolic Compilation as a Functional Programming Library\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7491759",
        "abstract": "<p>The artifact contains the Grisette library, a modified leanette POPL’22 artifact, and the reimplementation of some leanette benchmarks in Grisette.</p>",
        "keywords": "State Merging, Symbolic Compilation",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/lsrcz/grisette-popl23-artifact/tree/v1.0.0"
    },
    "10.5281/zenodo.7492757": {
        "doi": "10.5281/zenodo.7492757",
        "author": "Fu, Peng and Kishida, Kohei and Ross, Neil J. and Selinger, Peter",
        "title": "An implementation for the paper \"Proto-Quipper with Dynamic Lifting\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7492757",
        "abstract": "<p>It contains source code of an interpreter for Proto-Quipper-Dyn.</p>",
        "keywords": "Proto-Quipper-Dyn, Quantum programming language",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7493157": {
        "doi": "10.5281/zenodo.7493157",
        "author": "Song, Youngju and Cho, Minki and Lee, Dongjae and Hur, Chung-Kil and Sammler, Michael and Dreyer, Derek",
        "title": "Artifact Package for \"Conditional Contextual Refinement\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7493157",
        "abstract": "<p>This is the artifact for the paper “Conditional Contextual Refinement”. Please refer to the included “README.md” for more detailed instructions.</p>",
        "keywords": "abstraction, CompCert, compiler verification, compositionality, Coq, interactive theorem proving, Iris, layered abstraction, modular reasoning principles, program logic, program verification, refinement, separation logic, specification",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/alxest/CCR/tree/v1.0-popl23ae-0"
    },
    "10.5281/zenodo.7495380": {
        "doi": "10.5281/zenodo.7495380",
        "author": "Zhou, Litao and Zhou, Yaoda and Oliveira, Bruno C. d. S.",
        "title": "Recursive Subtyping for All (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7495380",
        "abstract": "<p>This artifact contains the formalization of the <span class=\"math inline\"><em>F</em><sub>≤</sub><sup><em>μ</em></sup></span> calculus (and its extension <span class=\"math inline\"><em>F</em><sub> ≤ ≥</sub><sup><em>μ</em></sup></span>), together with its soundness, decidability, and conservativity proof in the Coq proof assistant. All definitions, lemmas and theorems with their proofs presented in the paper “Recursive Subtyping for All” can be found in the Coq.zip file. We show the correspondence between the paper and the proofs in the README file. The proof in Coq.zip can be built with Coq 8.13.1.</p>",
        "keywords": "Bounded Polymorphism, Iso-Recursive Subtyping, Object Encodings",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7441725": {
        "doi": "10.5281/zenodo.7441725",
        "author": "van Doorn, Floris and Massot, Patrick and Nash, Oliver",
        "title": "Supplementary material for the CPP 2023 paper Formalising the h-Principle and Sphere Eversion",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7441725",
        "abstract": "<p>The supplementary material for the CPP 2023 paper Formalising the h-Principle and Sphere Eversion contains the formalisation of the result. It is a frozen version of the repository</p>\n<p>https://github.com/leanprover-community/sphere-eversion</p>\n<p>at commit</p>\n<p>9cd599b74a419209e4204829efcd50008fdd1c2b</p>\n<p>Only cpp2023.zip is required to compile the project, by extracting the files and following the instructions in the README.</p>\n<p>These instructions will download mathlib (https://github.com/leanprover-community/mathlib) at commit cf9386b56953fb40904843af98b7a80757bbe7f9. For convenience, this version of mathlib has been provided as a separate compressed file mathlib.zip. Instead of following the step <code>leanproject get-mathlib-cache</code> in the README, one can extract that in the same folder.</p>",
        "keywords": "Convex Integration, Formalization, Homotopy Principle, Lean, Mathematics, Sphere Eversion",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7502156": {
        "doi": "10.5281/zenodo.7502156",
        "author": "Carette, Jacques and Ortiz, Gerardo and Sabry, Amr",
        "title": "Software for `Symbolic Execution of Hadamard-Toffoli Quantum Circuits '",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7502156",
        "abstract": "<p>Haskell code, as described in the paper.</p>",
        "keywords": "Haskell, Quantum, Symbolic Evaluation",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/JacquesCarette/RetroPECode/tree/v1.0.1"
    },
    "10.5281/zenodo.7196061": {
        "doi": "10.5281/zenodo.7196061",
        "author": "Levine, Reese and Guo, Tianhao and Cho, Mingun and Baker, Alan and Levien, Raph and Neto, David and Quinn, Andrew and Sorensen, Tyler",
        "title": "MC Mutants Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7196061",
        "abstract": "<p>This artifact contains information for both collecting analyzing the results we present in the paper. On the collection side, we provide the means to run the exact experiments included in the paper. Using the exact devices from the paper will show very similar results to ours, but any GPU can be used to evaluate the way in which we collect and analyze data. On the analysis side, we include the results from running the experiments on the four devices in the paper, as well as the analysis tools we used to generate the main figures in the paper.</p>",
        "keywords": "memory consistency, mutation testing, parallel programming models",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7215748": {
        "doi": "10.5281/zenodo.7215748",
        "author": "Song, Yongju and Kim, Wook-Hee and Monga, Sumit Kumar and Min, Changwoo and Eom, Young Ik",
        "title": "Prism: Optimizing Key-Value Store for Modern Heterogeneous Storage Devices",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7215748",
        "abstract": "<p>We addressed the question: “How should we design a key-value store for the non-hierarchical storage landscape?”. We designed and implemented a novel key-value store named Prism that utilizes modern heterogeneous storage devices. This artifact contains three major components: 1) the source code of Prism, 2) a benchmark suite, and 3) a workload generator to evaluate the system. Additionally, the scripts enclosed allow readers to configure, build, and run Prism conveniently and precisely. For reference, since Prism is built on modern heterogeneous storage devices including non-volatile memory and NVMe SSDs, there are some hardware dependencies. For the software side, Prism needs PMDK and liburing libraries. Although it could be challenging to make up an identical testbed to ours, it is necessary to satisfy both the hardware and software requirements in order to get the expected key outcomes.</p>",
        "keywords": "Key-value Stores, Non-volatile Memory",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/cosmoss-jigu/prism/tree/v0.9.0-asplos23-ae"
    },
    "10.5281/zenodo.7217356": {
        "doi": "10.5281/zenodo.7217356",
        "author": "Qureshi, Zaid and Mailthody, Vikram Sharma and Gelado, Isaac and Min, Seungwon and Masood, Amna and Park, Jeongmin and Xiong, Jinjun and Newburn, C. J. and Vainbrand, Dmitri and Chung, I-Hsin and Garland, Michael and Dally, William and Hwu, Wen-mei",
        "title": "Reproduction Package for Article \"GPU-Initiated On-Demand High-Throughput Storage Access in the BaM System Architecture\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7217356",
        "abstract": "<p>The artifact is the source code the BaM system that enables efficient, on-demand accesses to storage from GPU thread. The artifact includes the source code for the system’s kernel module, library, and micro-benchmarks and applications. The applications and micro-benchmarks support multiple state-of-the-art implementations as well as BaM implementations for easy comparison.</p>",
        "keywords": "GPUDirect, GPUs, Memory capacity, Memory hierarchy, SSDs, Storage systems",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/ZaidQureshi/bam.git"
    },
    "10.5281/zenodo.7217959": {
        "doi": "10.5281/zenodo.7217959",
        "author": "Xiao, Haocheng and Ainsworth, Sam",
        "title": "Reproduction package for article 'Hacky Racers: Exploiting Instruction-Level Parallelism to Generate Stealthy Fine-Grained Timers'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7217959",
        "abstract": "<p>Our artifact provides source code and scripts for four timing side-channel experiments mentioned in this paper, corresponding to sections 7.3 to 7.5, and each demonstrates the efficiency and portability of either/both Racing and Magnifier Gadgets. Our results should be evaluated on an Intel or AMD x86 machine (we used an i7-8750h, but systems of a similar architecture will work out-of-the-box). Migration to systems with other ISAs or significantly different micro-architectures require minor source-code modifications.</p>",
        "keywords": "Caches, Instruction-level Parallelism, JavaScript, Microarchitectural Security, Spectre",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/FxPiGaAo/Hacky-Racer/tree/v1.0.0"
    },
    "10.5281/zenodo.7218057": {
        "doi": "10.5281/zenodo.7218057",
        "author": "Wang, Theodore Luo and Tian, Yongqiang and Dong, Yiwen and Xu, Zhenyang and Sun, Chengnian",
        "title": "DFusor",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7218057",
        "abstract": "<p>ASPLOS 2023 Artifact for “Compilation Consistency Modulo Debug Information”</p>",
        "keywords": "Compiler Testing, Debug Information",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7218907": {
        "doi": "10.5281/zenodo.7218907",
        "author": "Chen, Yun and Pei, Lingfeng and Carlson, Trevor E.",
        "title": "AfterImage: Leaking Control Flow Data and Tracking Load Operations via the Hardware Prefetcher",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7218907",
        "abstract": "<p>AfterImage is a hardware side-channel inside specific Intel processors. In this artifact, we provide the needed information to reproduce the main results presented in the paper.</p>",
        "keywords": "Hardware Security, Prefetcher, Side-channel Attacks",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7220824": {
        "doi": "10.5281/zenodo.7220824",
        "author": "Song, Jaeyong and Yim, Jinkyu and Jung, Jaewon and Jang, Hongsun and Kim, Hyung-Jin and Kim, Youngsok and Lee, Jinho",
        "title": "Optimus-CC: Efficient Large NLP Model Training with 3D Parallelism Aware Communication Compression",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7220824",
        "abstract": "<p>This repository is for AE (Artifact Evaluation) process of ASPLOS’23.</p>\n<p>In ASPLOS23/ folder, scripts for pretraining (TABLE 2), speedup check (TABLE 2, Fig. 10), memory consumption check (Fig. 12), comp/decomp throughput check (Fig. 14), and cosine similarity check (Fig. 11) are available. We give a detailed guideline for these evaluations in Evaluation Reproducing section. For accuracy check of zero-shot (TABLE 3 and TABLE 4), the process is quite complex, so please refer to Zero-Shot Task Running section. Note that training script for TABLE 4 is available in TABLE 2 training script folder. Other experiments (not main evaluation) for figures can be run by changing options in speedup check scripts.</p>\n<p>UPDATE: GPT-335M version scripts are added to ASPLOS23/fig10/ directory to test functionality in a small clutster.</p>\n<p>Dataset making is explained in Dataset Preprocessing. Make the pretraining dataset based on the guideline and use the binarized dataset.</p>\n<p>For detailed arguments and settings, please refer to below explanations.</p>",
        "keywords": "3D Parallelism, Communication Optimization, Distributed Systems, Gradient Compression, Large-scale NLP Training, Pipeline Parallelism, Systems for Machine Learning",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/jaeyong-song/Optimus-CC/tree/ASPLOS'23"
    },
    "10.5281/zenodo.7221411": {
        "doi": "10.5281/zenodo.7221411",
        "author": "Won, Jaeyeon and Mendis, Charith and Emer, Joel S. and Amarasinghe, Saman",
        "title": "Artifact for paper \"WACO: Learning Workload-Aware Co-optimization of the Format and Schedule of a Sparse Tensor Program\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7221411",
        "abstract": "<p>Our artifact includes programs for 1. training a cost model, 2. searching with a nearest neighbor search, and 3. a performance evaluator of the SuperSchedule. Our artifact is available at https://github.com/nullplay/Workload-Aware-Co-Optimization. Please follow the README.md instructions.</p>",
        "keywords": "Approximate Nearest Neighbor Search, Auto-scheduling, Auto-tuning, Sparse Matrix, Sparse Tensor",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7222132": {
        "doi": "10.5281/zenodo.7222132",
        "author": "Liu, Jiawei and Lin, Jinkun and Ruffy, Fabian and Tan, Cheng and Li, Jinyang and Panda, Aurojit and Zhang, Lingming",
        "title": "ASPLOS2023 Artifact for \"NNSmith: Generating Diverse and Valid Test Cases for Deep Learning Compilers\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7222132",
        "abstract": "<p>The artifact contains evidence of bug finding, source code of NNSmith’s prototype, and user-friendly HTML documentation for re-generating the results. Specifically, it includes (1) links to bugs reported by the authors as real-world bug finding evidence, and (2) scripts and code to re-generate main results in § 5. To make artifact evaluation as simple as possible, our artifact is packaged into a pre-built docker image, along with a detailed and friendly HTML documentation. To fully evaluate the artifact, a X86-CPU platform with docker access is needed, with approximately 21 hours of machine time and 1 hour of manual inspection time.</p>",
        "keywords": "Compiler, Fuzzing, Machine Learning Systems, Testing",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7222728": {
        "doi": "10.5281/zenodo.7222728",
        "author": "Berlstein, Griffin and Nigam, Rachit and Gyurgyik, Christophe and Sampson, Adrian",
        "title": "Evaluation for \"Stepwise Debugging for Hardware Accelerators\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7222728",
        "abstract": "<p>This artifact consists of one piece of software, the Cider Interpreter and Debugger for Calyx, alongside data and helper scripts. Cider is a simulator and debugger for hardware accelerators written in the Calyx IR. Since Cider is also a simulator, it can be used to interpreter and debug hardware designs without lowering them from the IR to RTL.</p>\n<p>This artifact seeks to reproduce the benchmark results discussed in our performance evaluation as well as the debugging process shown in section 3 of our paper. This supports our paper by showing the usability of Cider and how it compares to related tools, alongside demonstrating the debugging interface.</p>",
        "keywords": "Accelerator Design, Accelerator Simulation, Debugging, Intermediate Language",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/cucapra/cidr-evaluation/tree/v0.1.2"
    },
    "10.5281/zenodo.7222794": {
        "doi": "10.5281/zenodo.7222794",
        "author": "Shen, Han and Pszeniczny, Krzysztof and Lavaee, Rahman and Kumar, Snehasish and Tallam, Sriraman and Li, Xinliang David",
        "title": "Artifacts for \"Propeller: A Profile Guided, Relinking Optimizer for Warehouse Scale Applications\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7222794",
        "abstract": "<p>The disassembly-driven, monolithic design of post link optimizers face scaling challenges with large binaries and is at odds with distributed build systems. To reconcile and enable post link optimizations within a distributed build environment, we propose Propeller, a relinking optimizer for warehouse scale workloads. Propeller uses basic block sections (a novel linker abstraction) to enable a new approach to post link optimization without disassembly. Propeller achieves scalability by relinking the binary using precise profiles instead of rewriting the binary. The overhead of relinking is lowered by caching and leveraging distributed compiler actions during code generation.</p>\n<p>In this artifact, we present the means to replicate the results on a standalone machine. We provide a cloud-hosted bare metal machine which has been provisioned with the tooling and dependencies to run Propeller and Lightning BOLT. We use this environment to demonstrate Propeller’s approach to post link optimizations on a bootstraped build of clang. We show Propeller can achieve equitable performance to Lightning BOLT with lower peak memory consumption. A key aspect of Propeller enabled optimizations is the integration with a distributed build system which provides caching. To demonstrate the effect of caching we provide scripting which emulates the effect on a single machine. The scripts used to replicate the results are also publicly available at https://github.com/google/llvm-propeller.</p>",
        "keywords": "Binary Optimization, Datacenters, Distributed Build System, Post-Link Optimization, Profile Guided Optimization, Warehouse-Scale Applications",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7222849": {
        "doi": "10.5281/zenodo.7222849",
        "author": "Kim, Thomas and Jeon, Jekyeom and Arora, Nikhil and Li, Huaicheng and Kaminsky, Michael and Andersen, David G. and Ganger, Gregory R. and Amvrosiadis, George and Bj\\o{",
        "title": "RAIZN: Redundant Array of Independent Zoned Namespaces",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7222849",
        "abstract": "<p>Source code for RAIZN: Redundant Array of Independent Zoned Namespaces (ASPLOS 23)</p>",
        "keywords": "RAID, Reliability, Storage, ZNS, Zoned Namespaces",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7225459": {
        "doi": "10.5281/zenodo.7225459",
        "author": "Gao, Mingyu and Chakraborty, Soham and Ozkan, Burcu Kulahcioglu",
        "title": "Probabilistic Concurrency Testing for Weak Memory Programs",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7225459",
        "abstract": "<p>The upload is a VagrantBox package, containing the artifact for the paper Probabilistic Testing for Weak Memory Programs. This vagrant package offers the experimental environment, which contains all code, benchmarks, and scripts to reproduce the experimental results in the paper.</p>",
        "keywords": "Concurrency, Randomized algorithms, Testing, Weak memory",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7240401": {
        "doi": "10.5281/zenodo.7240401",
        "author": "Liu, Congyu and Gong, Sishuai and Fonseca, Pedro",
        "title": "ASPLOS' 23 Artifact of \"KIT: Testing OS-Level Virtualization for Functional Interference Bugs\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7240401",
        "abstract": "<p>Container isolation is implemented through OS-level virtualization, such as Linux namespaces. Unfortunately, these mechanisms are extremely challenging to implement correctly and, in practice, suffer from functional interference bugs, which compromise container security. In particular, functional interference bugs allow an attacker to extract information from another container running on the same machine or impact its integrity by modifying kernel resources that are incorrectly isolated. Despite their impact, functional interference bugs in OS-level virtualization have received limited attention in part due to the challenges in detecting them. Instead of causing memory errors or crashes, many functional interference bugs involve hard-to-catch logic errors that silently produce semantically incorrect results. This paper proposes KIT, a dynamic testing framework that discovers functional interference bugs in OS-level virtualization mechanisms, such as Linux namespaces. The key idea of KIT is to detect inter-container functional interference by comparing the system call traces of a container across two executions, where it runs with and without the preceding execution of another container. To achieve high efficiency and accuracy, KIT includes two critical components: an efficient algorithm to generate test cases that exercise inter-container data flows and a system call trace analysis framework that detects functional interference bugs and clusters bug reports. KIT discovered 9 functional interference bugs in Linux kernel 5.13, of which 6 have been confirmed. All bugs are caused by logic errors, showing that this approach is able to detect hard-to-catch semantic bugs.</p>",
        "keywords": "Bugs, OS-level Virtualization, Testing",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7275326": {
        "doi": "10.5281/zenodo.7275326",
        "author": "Hu, Qinghao and Zhang, Meng and Sun, Peng and Wen, Yonggang and Zhang, Tianwei",
        "title": "Lucid Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7275326",
        "abstract": "<p>This artifact appendix describes how to reproduce main results in our paper. In our public repository, we provide the source code, related dataset and the instructions to perform artifact evaluation. Please refer to the README file for more details.</p>",
        "keywords": "Cluster Management, Machine Learning, Workload Scheduling",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/S-Lab-System-Group/Lucid/tree/ArtifactV1"
    },
    "10.5281/zenodo.7275790": {
        "doi": "10.5281/zenodo.7275790",
        "author": "Han, Sungsoo and Jang, Minseong and Kang, Jeehoon",
        "title": "Artifact for “ShakeFlow: Functional Hardware Description with Latency-Insensitive Interface Combinators”",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7275790",
        "abstract": "<p>This artifact contains our port of the Corundum 100Gbps NIC and BaseJump STL’s dataflow and network-on-chip modules to the ShakeFlow hardware description language, and scripts to reproduce the results presented in the paper.</p>\n<p>For a full reproduction, the following hardware equipment is necessary:</p>\n<ul>\n<li><p>Xilinx Alveo U200</p></li>\n<li><p>100Gbps NIC (e.g., Mellanox MCX556A-EDAT)</p></li>\n<li><p>QSFP28 DAC cable</p></li>\n<li><p>Two machines with a PCIe 3.0+ x16 slot</p></li>\n</ul>\n<p>For the full details, refer to the README.md of https://github.com/kaist-cp/shakeflow.</p>",
        "keywords": "combinator, functional programming, hardware description language, latency insensitive interface",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7277139": {
        "doi": "10.5281/zenodo.7277139",
        "author": "Fingler, Henrique and Tarte, Isha and Yu, Hangchen and Szekely, Ariel and Hu, Bodun and Akella, Aditya and Rossbach, Christopher J.",
        "title": "Artifacts of LAKE",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7277139",
        "abstract": "<p>Kernel API remoting system, kernel drivers of workloads and benchmarks scripts.</p>",
        "keywords": "api remoting, kernel, ml for systems, systems for ml",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/utcs-scea/LAKE/tree/v1"
    },
    "10.5281/zenodo.7306303": {
        "doi": "10.5281/zenodo.7306303",
        "author": "Pandey, Shweta and Kamath, Aditya K and Basu, Arkaprava",
        "title": "Scoped Buffered Release Persistency Model for GPUs",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7306303",
        "abstract": "<p>We provide the source code and setup for our GPU persistency model, Scoped Buffered Release Persistency (SBRP). SBRP is a scope-aware, buffered persistency model that provides high performance to GPU applications that wish to persist data on Non-Volatile Memory (NVM). SBRP modifies the GPU hardware and has been implemented using GPGPU-Sim, a GPU simulator. For more details on the simulator requirements, check the README in the simulator folder.</p>\n<p>This repository consists of the source code of the simulator, benchmarks used for evaluation and all scripts needed to replicate the figures in the paper.</p>",
        "keywords": "Grpahics Processing Unit, Persistent Memory",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/csl-iisc/SBRP-ASPLOS23/tree/v1.1"
    },
    "10.5281/zenodo.7311322": {
        "doi": "10.5281/zenodo.7311322",
        "author": "You, Xin and Yang, Hailong and Lei, Kelun and Luan, Zhongzhi and Qian, Depei",
        "title": "Reproduction Package for Article \"VClinic: A Portable and Efficient Framework for Fine-Grained Value Profilers\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7311322",
        "abstract": "<p>The provided docker images contain pre-built VClinic and compared value profilers. For X86 platforms, docker image “vclinic_artifact_x86.tar” should be used; otherwise, for ARM platforms, docker image “vclinic_artifact_arm.tar” should be used. As pin-based value profilers only support X86 platforms, we only include the built pin-based value profilers in the “vclinic_artifact_x86.tar” docker image. The detailed instructions for evaluating the artifacts as well as the estimated evaluation time for each step on both platforms are listed in “/home/vclinic_artifact/README.md”. The summary of how to set up the experimental environment is listed in README. Note that both “vclinic_artifact_x86.tar” and <code>vclinic_artifact_arm.tar</code> are pre-built docker images and one can directly follow the instructions in the README file to reproduce the evaluation results.</p>",
        "keywords": "Dynamic Binary Instrumentation, Performance Analysis, Value Profiler",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7319957": {
        "doi": "10.5281/zenodo.7319957",
        "author": "Porter, Chris and Khan, Sharjeel and Pande, Santosh",
        "title": "Decker",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7319957",
        "abstract": "<p>The Decker framework consists of a compiler pass and runtime library. Its main objective is to debloat software at runtime. The artifact includes a Docker image that encapsulates basic dependencies, the<br>\nDecker code itself, benchmarks, and the scripts to drive artifact evaluation.</p>",
        "keywords": "program security, software debloating",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7330354": {
        "doi": "10.5281/zenodo.7330354",
        "author": "Aguilera, Marcos K. and Ben-David, Naama and Guerraoui, Rachid and Murat, Antoine and Xygkis, Athanasios and Zablotchi, Igor",
        "title": "Artifacts to reproduce all experiments in `uBFT: Microsecond-Scale BFT using Disaggregated Memory`",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7330354",
        "abstract": "<p>This artifact contains all the necessary source code to compile, execute and generate the data of all the figures in <code>uBFT: Microsecond-Scale BFT using Disaggregated Memory</code>.</p>",
        "keywords": "Byzantine fault tolerance, disaggregated memory, fast path, finite memory, microsecond scale, RDMA, replication, signatureless",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7333207": {
        "doi": "10.5281/zenodo.7333207",
        "author": "Hildenbrand, David and Schulz, Martin and Amit, Nadav",
        "title": "Software artifacts for the paper \"Copy-on-Pin: The Missing Piece for Correct Copy-on-Write\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7333207",
        "abstract": "<p>Software artifacts for the paper “Copy-on-Pin: The Missing Piece for Correct Copy-on-Write”.</p>",
        "keywords": "copy-on-write, COW, fork, memory deduplication, page pinning, page sharing, virtual memory",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7339970": {
        "doi": "10.5281/zenodo.7339970",
        "author": "Sun, Jinghan and Li, Shaobo and Sun, Yunxin and Sun, Chao and Vucinic, Dejan and Huang, Jian",
        "title": "Artifact of \"LeaFTL: A Learning-Based Flash Translation Layer for Solid-State Drives\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7339970",
        "abstract": "<p>This artifact is for reproducing the experiment results in the paper. The artifact includes the simulator source code with LeaFTL implementation, datasets for evaluation, and also scripts and instructions for reproducing the results. More details on the artifact can be found in the GitHub README File.</p>",
        "keywords": "Flash Translation Layer, Learning-Based Storage, Solid-State Drive",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/my-HenryS/LeaFTL/tree/v1.0"
    },
    "10.5281/zenodo.7423535": {
        "doi": "10.5281/zenodo.7423535",
        "author": "Duan, Zhuohui and Yao, Jiabo and Liu, Haikun and Liao, Xiaofei and Jin, Hai and Zhang, Yu",
        "title": "Reproduction Package for Article `Revisiting Log-structured Merging for KV Stores in Hybrid Memory Systems’",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7423535",
        "abstract": "<p>All experimental results in Figures 6, 7, 8, 9, 10, 11, and 12 can be reproduced. These results can reflect the performance of MioDB.</p>",
        "keywords": "Key-Value Store, Log-Structured Merge, LSM-tree Compaction, Non-Volatile Memory, Skip List",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/LikoJ/mioDB/tree/1.0.4"
    },
    "10.5281/zenodo.7425382": {
        "doi": "10.5281/zenodo.7425382",
        "author": "Huang, Haochen and Shen, Bingyu and Zhong, Li and Zhou, Yuanyuan",
        "title": "Reproduction Package for Paper `Protecting Data Integrity of Web Applications with Database Constraints Inferred from Application Code`",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7425382",
        "abstract": "<p>This repo is for the code release of our paper <code>Protecting Data Integrity of Web Applications with Database Constraints Inferred from Application Code.</code> in ASPLOS 2023.</p>\n<p>In the paper, we developed a static analysis tool to infer the missing database constraints from the application source code.</p>",
        "keywords": "Data integrity, Database constraints, Static analysis, Web applications",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7429879": {
        "doi": "10.5281/zenodo.7429879",
        "author": "Ding, Yaoyao and Yu, Cody Hao and Zheng, Bojian and Liu, Yizhi and Wang, Yida and Pekhimenko, Gennady",
        "title": "Artifact for paper \"Hidet: Task Mapping Programming Paradigm for Deep Learning Tensor Programs\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7429879",
        "abstract": "<p>This artifact helps readers to reproduce all experiments in the evaluation section of our paper. In Section 6, there are 6 experiments (one end to end experiment and 5 case studies). These experiments compare Hidet with other DNN frameworks and compilers on representative DNN models from the perspective of execution latency, optimization time, schedule space, input sensitivity, and different batch sizes. In the public artifact, we provide scripts to launch the 6 experiments automatically. With the hardware and software described in Section A.3.2 and A.3.3, the artifact should reproduce all experimental results in the evaluation section.</p>",
        "keywords": "artifact, deep learning compiler, deep nerual networks, inference",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/yaoyaoding/hidet-artifacts/tree/v1.0"
    },
    "10.5281/zenodo.7430228": {
        "doi": "10.5281/zenodo.7430228",
        "author": "Hackett, Finn and Hosseini, Shayan and Costa, Renato and Do, Matthew and Beschastnikh, Ivan",
        "title": "Compiling Distributed System Models with PGo [evaluation]",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7430228",
        "abstract": "<p>This repository aggregates all the tools and data necessary to reproduce the results in the evaluation section of our ASPLOS 2023 paper.</p>\n<p>Our artifact has two components. We provide the PGo compiler itself, which can compile MPCal specifications, and we also provide a method for reproducing our performance results from our ASPLOS 2023 paper. These files describe how to reproduce our performance results.</p>\n<p>Our own set of results is included in the <code>results_paper/</code> folder. For how to use the included tools and how to interpret the included results, see the README.</p>",
        "keywords": "Compilers, Distributed systems, Formal methods, PlusCal, TLA+",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7439846": {
        "doi": "10.5281/zenodo.7439846",
        "author": "Yang, Shuangyan and Zhang, Minjia and Dong, Wenqian and Li, Dong",
        "title": "Betty: Enabling Large-Scale GNN Training with Batch-Level Graph Partitioning",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7439846",
        "abstract": "<p>The directory of the Betty includes dataset/, Figures/, pytorch/, README.md, requiremnets.sh. We can execute ‘bash install_requirements.sh’ to install requirments. After downloading benchmarks and generating full batch data into folder /Betty/dataset/. The directory pytorch contains all necessary files for the micro-batch training and mini-batch training. In folder micro_batch_train, graph_partitioner.py contains our implementation of redundancy embedded graph partitioning. block_dataloader.py is implemented to construct the micro-batch based on the partitioning results of REG. The folder Figures contains these important figures for analysis and performance evaluation.</p>",
        "keywords": "Graph neural network, Graph partition, Redundancy reduction",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7481637": {
        "doi": "10.5281/zenodo.7481637",
        "author": "Gu, Diandian and Zhao, Yihao and Zhong, Yinmin and Xiong, Yifan and Han, Zhenhua and Cheng, Peng and Yang, Fan and Huang, Gang and Jin, Xin and Liu, Xuanzhe",
        "title": "ElasticFlow Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7481637",
        "abstract": "<p>The artifact provides source code for the prototype of the proposed system ElasticFlow, including the main implementation of ElasticFlow, testbed experiment scripts (Section 6.2 \\&amp; Section 6.6), and cluster simulation scripts (Section 6.3 \\&amp; Section 6.4 \\&amp; Section 6.5). We provide a docker image with pre-installed prerequisites to simplify the testbed experiment workflow. Users can also use a script to install all software dependencies from scratch. Please refer to the documents in our repository for more details.</p>",
        "keywords": "Cluster Scheduling, Distributed Deep Learning, GPU Cluster, Serverless Computing",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/gudiandian/ElasticFlow/tree/v1.8"
    },
    "10.5281/zenodo.7493145": {
        "doi": "10.5281/zenodo.7493145",
        "author": "Jayarajan, Anand and Zhao, Wei and Sun, Yudi and Pekhimenko, Gennady",
        "title": "Reproduction package for the article 'TiLT: A Time-Centric Approach for Stream Query Optimization and Parallelization'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7493145",
        "abstract": "<p>This artifact appendix includes the source code and scripts to reproduce the scalability results and the real-world applications performance in the article ‘TiLT: A Time-Centric Approach for Stream Query Optimization and Parallelization’. We include docker containers to setup the runtime environment for all the experiments in order to support portability. Therefore, the artifact can be executed on any multi-core machine with docker engine installed. We also use Linux gnuplot utility to generate figures from the collected performance numbers. We  using Ubuntu 20.04 operating system for running the scripts provided in the artifact.</p>",
        "keywords": "compiler, intermediate representation, stream data analytics, temporal query processing",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/ampersand-projects/streambench/tree/v0.3"
    },
    "10.5281/zenodo.7553144": {
        "doi": "10.5281/zenodo.7553144",
        "author": "Chen, Zhenpeng and Zhang, Jie M. and Sarro, Federica and Harman, Mark",
        "title": "Artifact for \"MAAT: A Novel Ensemble Approach to Addressing Fairness and Performance Bugs for Machine Learning Software\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7553144",
        "abstract": "<p>This artifact is for the paper entitled “MAAT: A Novel Ensemble Approach to Addressing Fairness and Performance Bugs for Machine Learning Software”, which is accepted by ESEC/FSE 2022. MAAT is a novel ensemble approach to improving the fairness-performance trade-off for machine learning software. It outperforms state-of-the-art bias mitigation methods. In this artifact, we provide the source code of MAAT and other existing bias mitigation methods that we use in our study, as well as the intermediate results, the installation instructions, and a replication guideline (included in the README). The replication guideline provides detailed steps to replicate all the results for all the research questions.</p>",
        "keywords": "bias mitigation, ensemble learning, fairness-performance trade-off, machine learning software, Software fairness",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7369395": {
        "doi": "10.5281/zenodo.7369395",
        "author": "Aanjaneya, Mridul and Nagarakatte, Santosh",
        "title": "Artifact for \"Fast Polynomial Evaluation for Correctly Rounded Elementary Functions using the RLIBM Approach\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7369395",
        "abstract": "<p>Our library with the correctly rounded functions and the polynomial generator for them is available open source and publicly available at https://github.com/rutgers-apl/cgo23- artifact. It is available with the MIT license. The artifact includes: (1) 24 correctly rounded implementations for six elementary functions using the coefficient adaptation proce- dure by Knuth, Estrin’s method, and Estrin’s method with fused multiply-add operations for polynomial evaluation, (2) correctness testing framework for the 24 functions, (3) perfor- mance testing framework to demonstrate the performance improvements over RLibm and CRLIBM, and (4) polynomial generator for generating the polynomials using the Estrin’s method with fused multiply-add operations.</p>",
        "keywords": "coefficient adaptation, correctly rounded, Estrin's procedure, fused-multiply-add, Horner's method, RLIBM",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7374334": {
        "doi": "10.5281/zenodo.7374334",
        "author": "Wilkins, Michael and Westrick, Sam and Kandiah, Vijay and Bernat, Alex and Suchy, Brian and Deiana, Enrico Armenio and Campanoni, Simone and Acar, Umut A. and Dinda, Peter and Hardavellas, Nikos",
        "title": "Artifact for \"WARDen: Specializing Cache Coherence for High-Level Parallel Languages\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7374334",
        "abstract": "<p>This artifact is a virtual machine of Red Hat Enterprise Linux (RHEL) containing the WARDen prototype and its dependen- cies. The artifact is pre-installed in the “cgo_artifact” account. The password is the same as the username: cgo_artifact. All the PBBS benchmarks used in the paper are also included. This artifact requires VMware Workstation 17 player to load and run the VM, which can be freely downloaded online.</p>",
        "keywords": "cache coherence, disentanglement",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7374649": {
        "doi": "10.5281/zenodo.7374649",
        "author": "Dam\\'{a",
        "title": "Reproduction Package for Article `A Game-Based Framework to Compare Program Classifiers and Evaders'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7374649",
        "abstract": "<p>This artifact compares different program classification techniques and pits them against different evasion techniques. In total, this artifact let us evaluate nine program encoding techniques; seven code obfuscation passes; and seven stochastic classification models. The artifact consists of a docker container with accompanying scripts to replicate Figures 5-15 automatically, plus the dataset and accompanying instructions to replicate Figure 16 manually. For a more up-to-date version of this source code, check: https://github.com/lac-dcc/yali</p>",
        "keywords": "deep learning, obfuscation, ollvm, optimization",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7374843": {
        "doi": "10.5281/zenodo.7374843",
        "author": "Deiana, Enrico Armenio and Suchy, Brian and Wilkins, Michael and Homerding, Brian and McMichen, Tommy and Dunajewski, Katarzyna and Dinda, Peter and Hardavellas, Nikos and Campanoni, Simone",
        "title": "Artifact for \"Program State Element Characterization\" CGO 2023.",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7374843",
        "abstract": "<p>This artifact is a podman image containing the CARMOT system and its dependencies, and it generates the main results of this paper in text format. All benchmark suites are included in the artifact, except for SPEC CPU 2017, which we cannot share directly (please refer to README.md in the artifact on how to include SPEC CPU 2017 results). This artifact requires podman (or docker) to load and run the image, and a network connection to download additional dependencies of the CARMOT system. The execution of this artifact requires an Intel multicore processor with shared memory.</p>",
        "keywords": "code optimization, dynamic analysis, program characterization",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7459640": {
        "doi": "10.5281/zenodo.7459640",
        "author": "Brahmakshatriya, Ajay and Amarasinghe, Saman",
        "title": "Artifacts for the CGO23 paper: D2X: An eXtensible conteXtual Debugger for modern DSLs",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7459640",
        "abstract": "<p>Artifacts for the CGO23 paper: D2X: An eXtensible conteXtual Debugger for modern DSLs</p>",
        "keywords": "compilers, debuggers, DSLs",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7496594": {
        "doi": "10.5281/zenodo.7496594",
        "author": "Zhang, Peihua and Wu, Chenggang and Peng, Mingfan and Zeng, Kai and Yu, Ding and Lai, Yuanming and Kang, Yan and Wang, Wei and Wang, Zhe",
        "title": "Reproduction Package for Article 'Khaos: The Impact of Inter-procedural Code Obfuscation on Binary Diffing Techniques'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7496594",
        "abstract": "<p>Artifact for article ‘Khaos: The Impact of Inter-procedural Code Obfuscation on Binary Diffing Techniques’, including diffing files of 5 diffing works, scripts to parse the diffing result, and all the result of the paper.</p>",
        "keywords": "binary diffing, code obfuscation",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7499096": {
        "doi": "10.5281/zenodo.7499096",
        "author": "Basso, Matteo and Ros\\`{a",
        "title": "Artifact associated to the paper \"Java Vector API: Benchmarking and Performance Analysis\" published in CC'23",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7499096",
        "abstract": "<p>JVBench is the first open-source benchmark suite for the Java Vector API. It includes several realistic and diversified benchmarks, specifically designed for evaluating vectorization. This artifact consists of a ready-to-use Docker image embedding JVBench together with a set of tools/scripts that can be used to execute the JVBench workloads as well as collect, process and plot performance measurements to replicate the evaluation of JVBench presented in the paper “Java Vector API: Benchmarking and Performance Analysis” (CC’23). The artifact also contains the complete pre-collected performance measurements used to generated the original figures of the paper.</p>",
        "keywords": "Benchmarks, Code optimization, Java, Just-in-time compilation, Parallelism, SIMD, Vector API",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/usi-dag/JVBench-artifact"
    },
    "10.5281/zenodo.7499790": {
        "doi": "10.5281/zenodo.7499790",
        "author": "Ahrens, Willow and Donenfeld, Daniel and Kjolstad, Fredrik and Amarasinghe, Saman",
        "title": "Looplets: A Language For Structured Coiteration (The Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7499790",
        "abstract": "<p>An artifact supporting the results in the submitted version of our paper. The submitted version is included as a PDF with the artifact instructions at the end, though they are also available as a readme in the artifact itself.</p>",
        "keywords": "Array, Coiteration, Compiler, Compressed, Sparse, Tensor",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7517506": {
        "doi": "10.5281/zenodo.7517506",
        "author": "Salvador Rohwedder, Caio and Henderson, Nathan and De Carvalho, Jo\\~{a",
        "title": "Artifact for \"To Pack or Not to Pack: A Generalized Packing Analysis and Transformation\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7517506",
        "abstract": "<ul>\n<li>docker-packing-artifact.tar.gz: docker image for the execution of experiments</li>\n<li>llvm-packing-v0.5.zip: LLVM source code with packing implementation (binary in docker image)</li>\n<li>logs-and-graphs.zip: Log files and graphs that were used in the paper</li>\n<li>packing-scripts.zip: scripts used to run experiments and Dockerfile source&nbsp;(also provided in docker image) -&nbsp;polybench-c-4.2.1-plus-contract-3d.zip: Polybench 4.2 and running example of paper (also provided in docker image)</li>\n</ul>",
        "keywords": "Packing Optimization LLVM Compiler",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7519936": {
        "doi": "10.5281/zenodo.7519936",
        "author": "Ben-Nun, Tal and Ates, Berke and Calotoiu, Alexandru and Hoefler, Torsten",
        "title": "Reproduction package for the paper Bridging Control-Centric and Data-Centric Optimization",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7519936",
        "abstract": "<p>Contains the benchmarking suite for the benchmarks shown in the paper as well as scripts and instructions on how to reproduce them.</p>",
        "keywords": "DaCe, data-centric programming, MLIR",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/Berke-Ates/dcir-artifact/tree/v1.0.2"
    },
    "10.5281/zenodo.7521260": {
        "doi": "10.5281/zenodo.7521260",
        "author": "Mitenkov, George and Magkanaris, Ioannis and Awile, Omar and Kumbhar, Pramod and Sch\\\"{u",
        "title": "Reproduction package for \"MOD2IR: High-Performance Code Generation for a Biophysically Detailed Neuronal Simulation DSL\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7521260",
        "abstract": "<p>The artifact was created to complement the submission of the “MOD2IR: High-Performance Code Generation for a Biophysically Detailed Neuronal Simulation DSL” paper to the ACM SIGPLAN 2023 International Conference on Compiler Construction. It contains all the necessary source code, data and scripts to reproduce the results published in the paper.</p>",
        "keywords": "Code Generation, Compiler, DSL, LLVM, NEURON, NMODL, Vectorization",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7524279": {
        "doi": "10.5281/zenodo.7524279",
        "author": "Kandiah, Vijay and Lustig, Daniel and Villa, Oreste and Nellans, David and Hardavellas, Nikos",
        "title": "Artifact for CGO'23 paper titled \"Parsimony: Enabling SIMD/Vector Programming in Standard Compiler Flows\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7524279",
        "abstract": "<p>Parsimony is a SPMD programming approach built with semantics designed to be compatible with multiple languages and to cleanly integrate into the standard optimizing compiler toolchains for those languages. This artifact is for our CGO’23 paper titled “Parsimony: Enabling SIMD/Vector Programming in Standard Compiler Flows” and includes a LLVM prototype of the Parsimony model along with a build and test framework for the Simd Library benchmarks and ispc benchmarks. It also includes scripts to build our prototype compiler, build and run the SimdLibrary and ispc benchmarks, and reproduce the figures 4 and 5 presented in our CGO’23 paper.</p>",
        "keywords": "Code Transformation, Compiler Design, Single-instruction Multiple-data, Single-program Multiple-data, Vectorization",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7533561": {
        "doi": "10.5281/zenodo.7533561",
        "author": "Mart\\'{\\i",
        "title": "Reproduction package for 'Matching Linear Algebra and Tensor Code to Specialized Hardware Accelerators'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7533561",
        "abstract": "<p>The artifact contains the ATC compiler implemented with OCaml, the JIT compiler implemented in LLVM, the SVM classifier implemented with scikit-learn and the list of GEMM and convolution programs used in the paper. The artifact also contains other compilers used in the evaluation such as KernelFaRer, IDL and LLVM-Polly.</p>",
        "keywords": "GEMM, JIT, LLVM, Program synthesis",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7573782": {
        "doi": "10.5281/zenodo.7573782",
        "author": "Fried, Andreas and Stemmer-Grabow, Maximilian and Wachter, Julian",
        "title": "Register Allocation for Compressed ISAs in LLVM",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7573782",
        "abstract": "<p>We provide a Docker image to reproduce the central result of our work. Our artifact builds two versions of LLVM+Clang, with and without the compression-aware register allocator. It then compiles the SPEC CPU2000 and CPU2006 benchmarks with both compilers. The result of the experiment is a reproduction of figure 1 of our paper, along with other graphs not present in the paper.</p>\n<p>Reviewers can also experiment with the parameters of the register allocator and observe their effect on the compression achieved.</p>",
        "keywords": "compressed instruction sets, LLVM, register allocation, RISC-V",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7574403": {
        "doi": "10.5281/zenodo.7574403",
        "author": "Matsumura, Kazuaki and De Gonzalo, Simon Garcia and Pe\\~{n",
        "title": "PTXASW",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7574403",
        "abstract": "<p>A symbolic emulator works for shuffle synthesis on the NVIDIA PTX code. Also, this artifact contains the benchmarks.</p>",
        "keywords": "CUDA, NVIDIA PTX, OpenACC",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7575072": {
        "doi": "10.5281/zenodo.7575072",
        "author": "VenkataKeerthy, S. and Jain, Siddharth and Kundu, Anilava and Aggarwal, Rohit and Cohen, Albert and Upadrasta, Ramakrishna",
        "title": "Artifacts for the paper \"RL4ReAl: Reinforcement Learning for Register Allocation\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7575072",
        "abstract": "<p>This artifact corresponds to the publication “RL4ReAl: Reinforcement Learning for Register Allocation”, published in CC 2023. This artifact consists of a docker image submitted for the artifact evaluation.</p>",
        "keywords": "Graph Coloring, Register Allocation, Reinforcement Learning",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7584642": {
        "doi": "10.5281/zenodo.7584642",
        "author": "Mezdour, Lina and Kadem, Khadidja and Merouani, Massinissa and Haichour, Amina Selma and Amarasinghe, Saman and Baghdadi, Riyadh",
        "title": "Reproduction Artifact for Article: A Deep Learning Model for Loop Interchange",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7584642",
        "abstract": "<p>This artifact introduces the model presented in the paper: A Deep Learning Model for Loop Interchange, published in CC23 conference, dedicated to predicting the best loop interchange instance for a Tiramisu program given as input. It reproduces the model’s training using the provided datasets, as well as all tests, performed on both the test set and the benchmark. It uses Python and PyTorch mainly.</p>\n<p>This tool is presented through python scripts and pickle/json datasets. We present the different scripts in the following: - Model_training.py: It requires no input, provided that all scripts and dataset files are in the same folder, locally, and all default values are being used. It outputs the model with a pickle format. It shows throughout execution the loss values that the model is getting in both the training and the validation set, as well as the accuracy of the resulting model on both sets by the end. - Model_tests.py: It uses the default name of the pickle model (produced in the precedent script) to perform the tests described in the paper. It outputs: the results of the tests (on both the synthetic test set and the benchmark): the accuracy and the search performance. Moreover, it outputs a text file presenting the results for the search performance. - Utils.py: Helper functions</p>",
        "keywords": "automatic code optimization, compilers, cost model, deep learning, loop interchange, Tiramisu",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7639153": {
        "doi": "10.5281/zenodo.7639153",
        "author": "Shin, Yongwon and Park, Juseong and Cho, Sungjun and Sung, Hyojin",
        "title": "Reproduction Package for Article \" PIMFlow: Compiler and Runtime Support for CNN Models on Processing-in-Memory DRAM\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7639153",
        "abstract": "<p>Our artifact consists of four parts: (1) PIM-aware ONNX transformation passes, (2) hardware measurement scripts for execution mode and granularity search, (3) an extended TVM compiler with DRAM-PIM back-end, and (4) GPU and DRAM-PIM simulators. For pre-generated input data, we provide GPU traces for the CNN models evaluated in the paper. You can also generate these traces by using NVBit2. For the compiler, we provide modified binaries and source codes for the TVM compiler extended with DRAM-PIM back- end. Artifact evaluation and testing are streamlined with a top-level script (pimflow) that controls different features of PIMFlow with lower-level scripts (Details in Section A.5). The evaluation and reproduction of the results in the paper can be done on any platform with the simulators, as long as the traces are generated on NVIDIA GeForce RTX 2080 Ti GPU.</p>",
        "keywords": "CNN models, Processing-in-memory",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7564087": {
        "doi": "10.5281/zenodo.7564087",
        "author": "Feng, Yuan and Xu, Yingte",
        "title": "NQPV",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7564087",
        "abstract": "<p>NQPV is a verification assistant prototype of nondeterministic quantum programs. It implements the verification logic of partial correctness in the numerical form, with soundness guaranteed by the theory and experiments.</p>",
        "keywords": "nondeterminism, program verification, quantum programming",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/LucianoXu/NQPV/tree/v0.4"
    },
    "10.5281/zenodo.7583154": {
        "doi": "10.5281/zenodo.7583154",
        "author": "Chen, Zizhan and Shao, Zili",
        "title": "Reproduction Package for Article ‘Transparent Runtime Change Handling for Android Apps’",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7583154",
        "abstract": "<p>The artifact provides the source code of RCHDroid, along with the instructions to generate the results. The artifact allows users to reproduce key results from the paper, including Figure 7, Figure 8, Figure 9, Figure 10, and Figure 14. The hardware must contain the ROC-RK3399-PC-PLUS development board connected to a screen. We provide compiled images to simplify the experiment workflow. Users can also build images from the source code.</p>",
        "keywords": "embedded systems, mobile systems, operating systems",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7583399": {
        "doi": "10.5281/zenodo.7583399",
        "author": "Bi, Jun and Guo, Qi and Li, Xiaqing and Zhao, Yongwei and Wen, Yuanbo and Guo, Yuxuan and Zhou, Enshuai and Hu, Xing and Du, Zidong and Li, Ling and Chen, Huaping and Chen, Tianshi",
        "title": "Reproduction pakage for Heron",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7583399",
        "abstract": "<p>This artifact describes how to set up the compilation infrastructure of HERON and how to run the workloads described in Section 6.2. Concretely, this guide provides instructions to: • Set up the experimental environment of HERON. • Run experiments to demonstrate the optimization ability of HERON as shown in Figure 6, Figure 7, Figure 8, and Figure 10. • Visualization of the search spaces as shown in Figure 11. • Run experiments to demonstrate the effectiveness of CGA as shown in Figure 12 and Figure 13.</p>",
        "keywords": "code generation, compiler optimization, tensor computation",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7588406": {
        "doi": "10.5281/zenodo.7588406",
        "author": "Lin, Mao and Zhou, Keren and Su, Pengfei",
        "title": "Reproduction Package for Article 'DrGPUM: Guiding Memory Optimization for GPU-Accelerated Applications'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7588406",
        "abstract": "<p>The artifact includes DrGPUM and benchmarks, along with instructions to reproduce the results shown in the paper.</p>",
        "keywords": "CUDA, GPU profilers, GPUs, Memory management",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7590151": {
        "doi": "10.5281/zenodo.7590151",
        "author": "Kolokasis, Iacovos G. and Evdorou, Giannos and Akram, Shoaib and Kozanitis, Christos and Papagiannis, Anastasios and Zakkak, Foivos S. and Pratikakis, Polyvios and Bilas, Angelos",
        "title": "TeraHeap: Reducing Memory Pressure in Managed Big Data Frameworks",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7590151",
        "abstract": "<p>How to Access. All scripts are available in the GitHub repository https://github.com/CARV-ICS-FORTH/asplos2023_ae. All sources, including JVM, frameworks, and benchmarks, are included as public git submodules. Also, the artifact is available at https://doi.org/10.5281/zenodo.7590151.</p>\n<p>Hardware Dependencies. We recommend a dual-socket server that is equipped with two Intel(R) Xeon(R) CPU E5-2630 v3 CPUs running at 2.4 GHz, each with eight physical cores and 16 hyper-threads for a total of 32 hyper-threads. The server should have at least 128 GB DRAM. We recommend using two 1 TB Samsung PM983 PCI Express NVMe SSDs and an HDD (larger than 1.5 TB) to allocate the datasets. For the evaluation with NVM, we consider using a dual-socket server with two Intel Xeon Platinum 8260M CPUs at 2.4 GHz, with 24 cores and (96 hyper-threads), and 192 GB of DDR4 DRAM. We use Intel Optane DC Persistent Memory with a total capacity of 3 TB, of which 1 TB is in Memory mode and 2 TB are in AppDirect mode.</p>\n<p>Software Dependencies. The compilation environment and the provided scripts assume Centos 7, which uses Linux Kernel v.3.10 and v.4.14.</p>\n<p>Data Sets. The required datasets for Spark workloads (except BC) are automatically generated using the SparkBench suite dataset generator. The dataset will be generated when executing the specific scripts to run Spark workloads. The datasets for Spark-BC and Giraph workloads are downloaded automatically before each workload execution.</p>",
        "keywords": "fast storage devices, garbage collection, Java Virtual Machine (JVM), large analytics datasets, large managed heaps, memory hierarchy, memory management, serialization",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7591603": {
        "doi": "10.5281/zenodo.7591603",
        "author": "Malik, Raghav and Sheth, Kabir and Kulkarni, Milind",
        "title": "Coyote: A Compiler for Vectorizing Encrypted Arithmetic Circuits (artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7591603",
        "abstract": "<p>This artifact contains everything necessary to replicate the results of the paper, including: * An implementation of the compiler described in the paper * A backend test harness for profiling vectorized code * Implementations of all benchmarks used in the evaluation * Scripts necessary to automate the process of compiling, running, and collecting data from the benchmarks.</p>",
        "keywords": "arithmetic circuits, Homomorphic encryption, vectorization",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7591742": {
        "doi": "10.5281/zenodo.7591742",
        "author": "Hsu, Olivia and Strange, Maxwell and Sharma, Ritvik and Won, Jaeyeon and Olukotun, Kunle and Emer, Joel S. and Horowitz, Mark A. and Kj\\o{",
        "title": "Reproduction Package for 'The Sparse Abstract Machine'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7591742",
        "abstract": "<p>This artifact describes how to set up and run our Sparse Abstract Machine (SAM) Python simulator and the C++ CUSTARD compiler, which compiles from concrete index notation (CIN) to SAM graphs (represented and stored in the DOT file format). The artifact also describes how to reproduce the quantitative experimental results in this paper. The artifact can be executed with any X86-64 or M-series Apple machine with Docker support and Python 3, at least 32 GB of RAM, and more than 20 GB of disk space.</p>\n<p>Additionally, all instructions and dependencies for using the artifact are contained in the artifact appendix of the paper.</p>",
        "keywords": "abstract machine, compilers, cycle-approximate modeling, sparse tensor algebra, streaming dataflow",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7592823": {
        "doi": "10.5281/zenodo.7592823",
        "author": "Tan, Zujun and Chon, Yebin and Kruse, Michael and Doerfert, Johannes and Xu, Ziyang and Homerding, Brian and Campanoni, Simone and August, David I.",
        "title": "SPLENDID: Supporting Parallel LLVM-IR Enhanced Natural Decompilation for Interactive Development",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7592823",
        "abstract": "<p>The artifact for this paper contains tools and data to reproduce, with minimal effort, the entire testing flow and corroborate its claims. All results can be generated from scratch (source codes) and run across different platforms with the provided docker image. The pre-built docker image supports runs across different platforms with software dependencies taken care of, including a pre-compiled copy of the proposed decompiler, its variants, state-of-the-art decompilers used for comparison, and miscellaneous software such as vim and python. We provide an easy top level interface,  to simplify the testing process.</p>",
        "keywords": "ASPLOS'23, Automatic Parallelization, Decompiler",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7592848": {
        "doi": "10.5281/zenodo.7592848",
        "author": "Norman, Chase and Godbole, Adwait and Manerkar, Yatin A.",
        "title": "Code for Article 'PipeSynth: Automated Synthesis of Microarchitectural Axioms for Memory Consistency'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7592848",
        "abstract": "<p>This is the code for the ASPLOS 2023 paper ‘PipeSynth: Automated Synthesis of Microarchitectural Axioms for Memory Consistency’.</p>",
        "keywords": "formal methods, memory consistency, microarchitecture, synthesis",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/chasenorman/PipeSynth-AEC/tree/v1.0.0"
    },
    "10.5281/zenodo.7592970": {
        "doi": "10.5281/zenodo.7592970",
        "author": "Gao, Xiangyu and Raghunathan, Divya and Fang, Ruijie and Wang, Tao and Zhu, Xiaotong and Sivaraman, Anirudh and Narayana, Srinivas and Gupta, Aarti",
        "title": "Reproduction Package for Article CaT: A Solver-Aided Compiler for Packet-Processing Pipelines",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7592970",
        "abstract": "<p>This is the artifact evaluation part for the CaT compiler, proposed in our paper. The instruction helps reproduce the results from all tables and figures in IMPLEMENTATION AND EVALUATION section.</p>",
        "keywords": "code generation, integer linear programming, packet processing pipelines, program synthesis, Programmable switches",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7598726": {
        "doi": "10.5281/zenodo.7598726",
        "author": "Shu, Junyi and Zhu, Ruidong and Ma, Yun and Huang, Gang and Mei, Hong and Liu, Xuanzhe and Jin, Xin",
        "title": "Reproduction Package for Article 'Disaggregated RAID Storage in Modern Datacenters'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7598726",
        "abstract": "<p>We provide the artifact for the ASPLOS 2023 paper “Disaggregated RAID Storage in Modern Datacenters”, including:</p>\n<ul>\n<li>The main implementation of dRAID.</li>\n<li>CloudLab testbed setup scripts.</li>\n<li>FIO experiment scripts (Sec 9.2-9.5), which get the main results of the paper.</li>\n<li>YCSB experiment scripts (Sec 9.6).</li>\n</ul>",
        "keywords": "Disaggregated Storage, NVMe-oF, RAID, RDMA",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7612226": {
        "doi": "10.5281/zenodo.7612226",
        "author": "Li, Shaohua and Su, Zhendong",
        "title": "Artifact for \"Finding Unstable Code via Compiler-Driven Differential Testing\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7612226",
        "abstract": "<p>The artifact contains the code and datasets we used for our experiments, as well as scripts to generate the numbers, tables, and figures of our evaluation. Specifically, it includes (a) the Juliet testsuite used for evaluation; (b) scripts for running CompDiff, sanitizers, Coverity, CppCheck, and Infer on the Juliet testsuite; (c) scripts for reporting detection results of these tools; (d) scripts for generating bug statistics on 23 real-world programs; and (e) scripts for fuzzing a target with CompDiff-AFL++. Everything is packaged and pre-built as a docker image. A standard X86 Linux machine running docker is necessary to evaluate this artifact.</p>",
        "keywords": "compiler, fuzzing, undefined behavior, Unstable code",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7621336": {
        "doi": "10.5281/zenodo.7621336",
        "author": "Wang, Haoyuan and Beamer, Scott",
        "title": "RepCut: Superlinear Parallel RTL Simulation with Replication-Aided Partitioning",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7621336",
        "abstract": "<p>This package contains the artifact for of RepCut: Superlinear Parallel RTL Simulation with Replication-Aided Partitioning, DOI 10.1145/3582016.3582034</p>\n<p>This artifact contains the source code for RepCut, as well as other open source projects that are required to reproduce the results in the paper. We include Verilator 4.226 as a baseline. In addition, this artifact also contains scripts and a Makefile to compile and run the generated simulators, as well as to reproduce every figure and table from experiment data.</p>\n<p>Please find more details in README.md</p>",
        "keywords": "Parallel RTL Simulation, RepCut",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7633678": {
        "doi": "10.5281/zenodo.7633678",
        "author": "Garimella, Karthik and Ghodsi, Zahra and Jha, Nandan Kumar and Garg, Siddharth and Reagen, Brandon",
        "title": "Source Code for \"Characterizing and Optimizing End-to-End Systems for Private Inference\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7633678",
        "abstract": "<p>We open source our private inference simulator at the following GitHub repo: <a href=\"https://github.com/kvgarimella/characterizing-private-inference\">https://github.com/kvgarimella/characterizing-private-inference</a>. We construct a model of a system for private inference and a simulator using Simpy to explore and evaluate tradeoffs under different system conditions. We model a single-client, single-server setting where inferences are queued in a FIFO manner and are generated by sampling from a Poisson distribution.</p>\n<p>The repository itself contains four high-level directories. The directory <code>garbled_circuits</code> contains the raw data for benchmarking ReLU Garbling and Evaluation on an Intel Atom Z8350 embedded device (1.92GHz, 4 cores, 2GB RAM) and an AMD EPYC 7502 server (2.5GHz, 32 cores, 256GB RAM). These two devices represent our client and server, respectively. Next, the directory <code>layer_parallel_HE</code> contains our code and the raw data for applying layer-parallelism to linear layer homomorphic evaluations. The directory <code>simulator</code> contains our private inference simulator. Finally, <code>artifact</code> contains scripts to replicate key figures in our paper.</p>",
        "keywords": "cryptography, machine learning, private inference protocols, systems for machine learning",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/kvgarimella/characterizing-private-inference/tree/v1.0.0-research"
    },
    "10.5281/zenodo.7643745": {
        "doi": "10.5281/zenodo.7643745",
        "author": "Ye, Zihao and Lai, Ruihang and Shao, Junru and Chen, Tianqi and Ceze, Luis",
        "title": "SparseTIR Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7643745",
        "abstract": "<p>This repository contains scripts for setting up environments and reproducing results presented in the ASPLOS 2023 paper entitled SparseTIR: Composable Abstractions for Deep Learning.</p>\n<p>Please read the README.md file or visit https://github.com/uwsampl/sparsetir-artifact for instructions on how to run and install this artifact.</p>",
        "keywords": "Deep-Learning-Compilers, Sparse-Computation, Tensor-Compilers",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/uwsampl/sparsetir-artifact/tree/artifact-v1.3"
    },
    "10.5281/zenodo.7651655": {
        "doi": "10.5281/zenodo.7651655",
        "author": "Khazraee, Moein and Forencich, Alex and Papen, George C. and Snoeren, Alex C. and Schulman, Aaron",
        "title": "Code for Rosebud, Making FPGA-Accelerated Middlebox Development More Pleasant",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7651655",
        "abstract": "<p>This artifact contains the code to generate the Rosebud image, alongside code for simulation and runtime development. It also describes how new applications can be accelerated using this framework.</p>",
        "keywords": "200G, FPGA, Hardware-Software Co-design, Middlebox",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/ucsdsysnet/Rosebud/tree/Rosebud_release"
    },
    "10.5281/zenodo.7668541": {
        "doi": "10.5281/zenodo.7668541",
        "author": "Raina, Ashwini and Lu, Jianan and Cidon, Asaf and Freedman, Michael J.",
        "title": "ASPLOS 2023 Artifact for \"Efficient Compactions Between Storage Tiers with PrismDB\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7668541",
        "abstract": "<p>This artifact consists of the source code of PrismDB and the necessary scripts to reproduce the evaluation of the paper “Efficient Compactions Between Storage Tiers with PrismDB”, ASPLOS 23.</p>\n<p>NOTE: Source code for the baselines rocksdb and mutant is not provided here. For rocksdb baseline, please refer to its official documentation on GitHub. For mutant baseline please follow the mutant SoCC paper.</p>",
        "keywords": "compaction, key-value store, PrismDB, storage, tiered",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7680535": {
        "doi": "10.5281/zenodo.7680535",
        "author": "Zuo, Gefei and Ma, Jiacheng and Quinn, Andrew and Kasikci, Baris",
        "title": "Reproduction Package for Article \"Vidi: Record Replay for Reconfigurable Hardware\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7680535",
        "abstract": "<p>Source code is available at https://github.com/efeslab/aws-fpga</p>\n<p>This artifact is prepared for ASPLOS 2023 artifact evaluation. Please refer to the <code>artifact-eval/README.md</code> for usage instructions.</p>",
        "keywords": "Debugging, FPGA, Record Replay",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7685681": {
        "doi": "10.5281/zenodo.7685681",
        "author": "Laeufer, Kevin and Iyer, Vighnesh and Biancolin, David and Bachrach, Jonathan and Nikoli\\'{c",
        "title": "Simulator Independent Coverage for RTL Hardware Languages - Software Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7685681",
        "abstract": "<p>The code to reproduce results from our ASPLOS’23 paper on “Simulator Independent Coverage for RTL Hardware Languages”. Most results can be reproduced on a standard x86 Linux computer, however, for the FireSim performance and area/frequency results a more complicated setup on AWS cloud FPGAs is necessary. Please consult the Readme.md in <code>simulator-independent-coverage.tar.gz</code> for more instructions.</p>",
        "keywords": "Chisel, ChiselTest, FireSim, FIRRTL, FPGA, FSM Coverage, Hardware Compiler, Line Coverage, RTL, Toggle Coverage",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7699872": {
        "doi": "10.5281/zenodo.7699872",
        "author": "Ye, Haojie and Vedula, Sanketh and Chen, Yuhan and Yang, Yichen and Bronstein, Alex and Dreslinski, Ronald and Mudge, Trevor and Talati, Nishil",
        "title": "Reproduction Package for Article \"GRACE: A Scalable Graph-Based Approach To Accelerating Recommendation Model Inference\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7699872",
        "abstract": "<p>Our paper “GRACE: A Scalable Graph-Based Approach To Accelerating Recommendation Model Inference” presents an algorithm-system co-design for improving the performance of the embedding layer in Deep Learning Recommendation Models (DLRMs). This artifact reproduces some of the main results of our paper. The performance results shown in the paper are machine-dependent. For example, Fig. 8, Fig. 13, and Fig. 14 show results on a CPU-GPU system, HBM-only system, and DIMM-HBM system with Processing-In-Memory (PIM) capability, respectively. To enable reproducing results in a timely fashion on different machines, we reproduce the main result of our paper that is machine-independent (Fig. 10). Specifically, our instructions include 1) how to download the input datasets, 2) how to pre-process these datasets, 3) how to reproduce the memory traffic reduction results for each baseline, and 4) how to generate a plot similar to Fig. 10. Expected result: compared to a no-reduction baseline, GRACE reduces the memory traffic by 1.7x.</p>",
        "keywords": "Algorithm-System Co-Design, DLRM, Embedding Reduction",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7702231": {
        "doi": "10.5281/zenodo.7702231",
        "author": "Liu, Jiesong and Zhang, Feng and Guan, Jiawei and Sung, Hsin-Hsuan and Guo, Xiaoguang and Du, Xiaoyong and Shen, Xipeng",
        "title": "Artifact for Article \"Space Efficient TREC for Enabling Deep Learning on Microcontrollers\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7702231",
        "abstract": "<p>This directory contains the artifact for Space Efficient TREC for Enabling Deep Learning on Microcontrollers published in ASPLOS 2023. For detailed information, please see the readme.md in TREC-Artifact.zip.</p>",
        "keywords": "Compiler Optimization, Real-time Machine Learning",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7709303": {
        "doi": "10.5281/zenodo.7709303",
        "author": "Gosakan, Krishnan and Han, Jaehyun and Kuszmaul, William and Mubarek, Ibrahim N. and Mukherjee, Nirjhar and Sriram, Karthik and Tagliavini, Guido and West, Evan and Bender, Michael A. and Bhattacharjee, Abhishek and Conway, Alex and Farach-Colton, Martin and Gandhi, Jayneel and Johnson, Rob and Kannan, Sudarsun and Porter, Donald E.",
        "title": "Mosaic Pages: Big TLB Reach with Small Pages",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7709303",
        "abstract": "<p>There are three artifacts for this paper: a Gem5 model to reproduce Figure 4, a modified Linux kernel to reproduce Tables 3 and 4, and Verilog code to reproduce Table 5. The Linux artifact includes scripts to setup a KVM environment with Mosaic and vanilla Linux kernels. The artifact also includes scripts to run the Linux workloads in a VM and a script to generate tables.</p>",
        "keywords": "address translation, gem5, hashing, linux, paging, TLB, verilog, virtual memory",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/oscarlab/mosaic-asplos23-artifacts/tree/v1.0.2"
    },
    "10.5281/zenodo.7114594": {
        "doi": "10.5281/zenodo.7114594",
        "author": "Waleffe, Roger and Mohoney, Jason and Rekatsinas, Theodoros and Venkataraman, Shivaram",
        "title": "Accompanying artifact for the paper \"MariusGNN: Resource-Efficient Out-of-Core Training of Graph Neural Networks\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7114594",
        "abstract": "<p>This release contains the initial artifact for the paper MariusGNN: Resource-Efficient Out-of-Core Training of Graph Neural Networks to be published at EuroSys 2023. The artifact contains the necessary code to reproduce experiments reported in the paper.</p>",
        "keywords": "invariant generation, loop summarization, Recurrence solving",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/marius-team/marius/tree/v0.0.1"
    },
    "10.5281/zenodo.7503088": {
        "doi": "10.5281/zenodo.7503088",
        "author": "Lin, Zhengyao and Chen, Xiaohong and Trinh, Minh-Thai and Wang, John and Ro\\c{s",
        "title": "Reproduction Docker Image for `Generating Proof Certificates for a Language-Agnostic Deductive Program Verifier'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7503088",
        "abstract": "<p>This artifact is an Docker image containing code and experiment setup for our paper.</p>",
        "keywords": "Matching Logic, Program Verification, Reachability Logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7510752": {
        "doi": "10.5281/zenodo.7510752",
        "author": "Winter, Levin N. and Buse, Florena and de Graaf, Daan and von Gleissenthall, Klaus and Kulahcioglu Ozkan, Burcu",
        "title": "Artifact for \"Randomized Testing of Byzantine Fault Tolerant Consensus Algorithms\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7510752",
        "abstract": "<p>This upload is a virtual machine (VM) containing the artifact accompanying our paper “Randomized Testing of Byzantine Fault Tolerant Algorithms”. The VirtualBox VM image contains the source code for our testing algorithm and the systems under test. The VM has all the dependencies resolved.</p>",
        "keywords": "Byzantine fault-tolerance, Distributed algorithms, Distributed consensus, Random testing, Software testing and debugging",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7511039": {
        "doi": "10.5281/zenodo.7511039",
        "author": "Lattuada, Andrea and Hance, Travis and Cho, Chanhee and Brun, Matthias and Subasinghe, Isitha and Zhou, Yi and Howell, Jon and Parno, Bryan and Hawblitzel, Chris",
        "title": "Software Artifact (virtual machine, pre-built distributions) for \"Verus: Verifying Rust Programs using Linear Ghost Types\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7511039",
        "abstract": "<p>This is the software artifact accompanying the OOPSLA 2023 Paper “Verus: Verifying Rust Programs using Linear Ghost Types”. Verus is an SMT-based tool for formally verifying Rust programs. With Verus, programmers express proofs and specifications using the Rust language, allowing proofs to take advantage of Rust’s linear types and borrow checking. We show how this allows proofs to manipulate linearly typed permissions that let Rust code safely manipulate memory, pointers, and concurrent resources. We demonstrate Verus on a series of examples, including pointer-manipulating code (an xor-based doubly linked list), code with interior mutability, and concurrent code.</p>\n<p>The artifact contains a virtual machine image and pre-built distributions of Verus, and the examples and scripts used for evaluation in the paper. The artifact demonstrates that (i) Verus runs correctly, (ii) it successfully verifies example code that exercises the paper’s claims and (iii) the examples verify quickly. More detail is available on the artifact page on Zenodo.</p>",
        "keywords": "linear types, Rust, systems verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7574712": {
        "doi": "10.5281/zenodo.7574712",
        "author": "Wagner, Christopher and Jaber, Nouraldin and Samanta, Roopsha",
        "title": "Enabling Bounded Verification of Doubly-Unbounded Distributed Agreement-Based Systems via Bounded Regions (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7574712",
        "abstract": "<p>Venus is a tool for formal verification of doubly-unbounded distributed agreement-based (DAB) systems that combines a variable domain reduction with a recent tool, QuickSilver (ref: https://zenodo.org/record/5501650), for parameterized verification of DAB systems with finite-state processes.</p>",
        "keywords": "Data Saturation, Layered Verification, Reduction",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7697453": {
        "doi": "10.5281/zenodo.7697453",
        "author": "Goharshady, Amir Kafshdar and Hitarth, S. and Mohammadi, Fatemeh and Motwani, Harshit Jitendra",
        "title": "PolySynth",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7697453",
        "abstract": "<p>PolySynth is a tool for synthesis of polynomial programs in a C-like imperative programming language where all assignments, guards, and assertions are restricted to be polynomial expression over the program variables. Our tool is implemented in Python3 is open source. Our algorithm, as described in our paper, is based on Farkas’ Lemma, Handelman Theorem, and Putinar’s Positivstellensatz.</p>\n<p>The artifact code consists of the following main directories.</p>\n<ol type=\"1\">\n<li><p>The directory <code>benchmarks-polysynth</code> contains all the benchmarks in theformat that can be passed to our tool PolySynth.</p></li>\n<li><p>The directory <code>benchmarks-rosette</code> contains all the benchmarks that can bepassed to Rosette.</p></li>\n<li><p>The directory <code>benchmarks-sketch</code> contains all the benchmarks that can bepassed to Sketch.</p></li>\n<li><p>The directory <code>Code</code> contains the code for our main algorithms.</p></li>\n<li><p>The directory <code>polysynth-outputs</code> contains the output programs and other intermediate files our tool Polysynth creates for all of the benchmarks.</p></li>\n</ol>\n<p>Follow the following steps to run the synthesizer on a given benchmark:</p>\n<p>Open the terminal and change the directory to <code>Code/</code></p>\n<p>All the examples/benchmarks are stored in the folder <code>benchmarks-polysynth</code></p>\n<p>The easiest way to run an example is to type the following command: sh run_polysynth_all_benchmarks.sh from the root directory of the repository.</p>\n<p>Suppose you want to run the synthesizer for the example Closest_cube_root, then you would run the following command:</p>\n<p><code>python3 synthesizer.py --filename Examples/Closest_cube_root/closest_cube_root.c</code></p>",
        "keywords": "algebro-geometric algorithm, polynomial programs, program synthesis, template-based synthesis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7698353": {
        "doi": "10.5281/zenodo.7698353",
        "author": "Zhang, Xing and Guo, Guanchen and He, Xiao and Hu, Zhenjiang",
        "title": "Reproduction Package for Article 'Bidirectional Object-Oriented Programming: Towards Programmatic and Direct Manipulation of Objects'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7698353",
        "abstract": "<p>Our paper presents a bidirectional object-oriented language BiFJ (a Featherweight-Java-like language) that supports programmatic and direct manipulation of objects. The artifact BiOOP is a programming environment to support BiFJ in single web-page GUI design. As shown below, BiOOP supports developers not only to write object-oriented programs in the left editor and get the output (e.g., a web page) in the right Output window, but also to directly manipulate the output on the right, and automatically synchronize the manipulated output with the object-oriented program.</p>",
        "keywords": "Bidirectional Transformation, Direct Manipulation Programming, Object-oriented Programming",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7709003": {
        "doi": "10.5281/zenodo.7709003",
        "author": "Wang, Bo and Kolluri, Aashish and Nikoli\\'{c",
        "title": "DuoGlot: User-Customizable Transpilation of Scripting Languages (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7709003",
        "abstract": "<p>This is the artifact named DuoGlot from the paper User-Customizable Transpilation of Scripting Languages accepted by the conference OOPSLA 2023. DuoGlot is a customizable code translator. Translation rules in DuoGlot are synthesized from user-provided code snippets. DuoGlot iteratively explores possible translations given the provided translation rules until finding a translation that passes tests. It currently supports customized translation from Python to JavaScript for single-file standalone programs. This artifact includes code and datasets to reproduce all the main results in the paper.</p>",
        "keywords": "Program Synthesis, Program Translation",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7710436": {
        "doi": "10.5281/zenodo.7710436",
        "author": "Kang, Chan Gu and Oh, Hakjoo",
        "title": "Artifact for paper \"Modular Component-Based Quantum Circuit Synthesis\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7710436",
        "abstract": "<p>This artifact manual aims to reproduce results in the paper “Modular Component-based Quantum Circuit Synthesis” submitted to OOPSLA 2023. Our algorithm produces a quantum circuit, given user-provided in/output spec and component gates for circuit synthesis. Following the artifact manual (attached artifiact_manual.pdf) will give:</p>\n<ul>\n<li>Reproduction of Table 3 in our paper, which is main result of our synthesis experiment</li>\n<li>Explanation on how to give new input (i.e, new synthesis problem) to our program</li>\n<li>Reproduction of qiskit’s transpiled circuit appeared in Figure 2, 7, 8 of our paper</li>\n</ul>\n<p>Our project also can be found in Github Repository (https://github.com/kupl/qsyn).</p>",
        "keywords": "Quantum circuit synthesis, Quantum programming",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/kupl/qsyn"
    },
    "10.5281/zenodo.7711788": {
        "doi": "10.5281/zenodo.7711788",
        "author": "Dardinier, Thibault and Parthasarathy, Gaurav and M\\\"{u",
        "title": "Verification-Preserving Inlining in Automatic Separation Logic Verifiers (artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7711788",
        "abstract": "<p>This artifact contains: 1. An Isabelle/HOL mechanization that fully supports the technical claims from the paper. 2. A reproducible analysis of the test suites of VeriFast, GRASShopper, RSL-Viper, and Nagini, corresponding to the results shown in table 1. 3. An inlining tool for Viper, which inlines calls and unrolls loops, while also checking the structural condition. 4. A test framework that runs the inlining tool on the examples in table 2 (main paper) and table 3 (appendix in the extended version).</p>",
        "keywords": "Bounded Verification, GRASShopper, Isabelle, Isabelle/HOL, Loop Unrolling, Method Inlining, Modular Verification, Nagini, RSL-Viper, VeriFast, Viper",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7712620": {
        "doi": "10.5281/zenodo.7712620",
        "author": "Mulder, Ike and Krebbers, Robbert",
        "title": "Artifact of 'Proof Automation for Linearizability in Separation Logic'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7712620",
        "abstract": "<p>This is the artifact for the OOPSLA ‘23 paper ’Proof Automation for Linearizability in Separation Logic’. It contains the Diaframe 2.0 source code, a VM containing a compiled version of this source code, and instructions for evaluation.</p>\n<p>Diaframe 2.0’s current development can be found at https://gitlab.mpi-sws.org/iris/diaframe .</p>",
        "keywords": "automated reasoning, Coq, Iris, program verification, Separation logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7713722": {
        "doi": "10.5281/zenodo.7713722",
        "author": "Yuan, Yongwei and Guest, Scott and Griffis, Eric and Potter, Hannah and Moon, David and Omar, Cyrus",
        "title": "Artifact for \"Live Pattern Matching with Typed Holes\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7713722",
        "abstract": "<p>The artifact includes a proof mechanization that concludes the type safety of the system presented in the paper, and a minimal solver-based implementation of exhaustiveness and redundancy checker.</p>",
        "keywords": "Functional Programming, Pattern Matching, Typed Holes",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7713789": {
        "doi": "10.5281/zenodo.7713789",
        "author": "Barke, Shraddha and James, Michael B. and Polikarpova, Nadia",
        "title": "Replication Package for Article: \"Grounded Copilot: How Programmers Interact with Code-Generating Models\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7713789",
        "abstract": "<p>This artifact contains: - The scripts to generate our plots - Detailed study information to re-run our user study - Livestreams that we observed and included in our dataset - Our codebook</p>",
        "keywords": "AI Assistants, Grounded Theory, Program Synthesis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7714175": {
        "doi": "10.5281/zenodo.7714175",
        "author": "Emre, Mehmet and Boyland, Peter and Parekh, Aesha and Schroeder, Ryan and Dewey, Kyle and Hardekopf, Ben",
        "title": "Artifact for \"Aliasing Limits on Translating C to Safe Rust\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7714175",
        "abstract": "<p>The artifact is a Docker image that contains (1) the prototype of our pseudo-safety transformations, (2) the affected pointer set analysis we implemented on top of SVF, (3) Laertes with our extensions for directionality, and (4) data analysis scripts to produce the tables and the figures in the paper. It also contains C2Rust, SVF, and Laertes themselves to run these prototypes, as well as a corpus of programs we use to evaluate our method.</p>",
        "keywords": "C, Empirical Study, Memory Safety, Rust, Translation",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7719431": {
        "doi": "10.5281/zenodo.7719431",
        "author": "Zhou, Jie and Criswell, John and Hicks, Michael",
        "title": "Artifact of the `Fat Pointers for Temporal Memory Safety of C Paper` of OOPSLA23",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7719431",
        "abstract": "<p>This artifact provides a VM and a docker image that contain all the source code to perform experiments of the Fat Pointers for Temporal Memory Safety of C Paper of OOPSLA’23.</p>",
        "keywords": "Checked C, Fat Pointers, LLVM, Temporal Memory Safety",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7720410": {
        "doi": "10.5281/zenodo.7720410",
        "author": "Chiang, David and McDonald, Colin and Shan, Chung-chieh",
        "title": "Reproduction Package for Article \"Exact Recursive Probabilistic Programming\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7720410",
        "abstract": "<p>This Docker image contains everything needed to reproduce the experiments in the paper “Exact Recursive Probabilistic Programming.”</p>",
        "keywords": "linear types, probabilistic programming, recursive types",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7722241": {
        "doi": "10.5281/zenodo.7722241",
        "author": "Ji, Ruyi and Kong, Chaozhe and Xiong, Yingfei and Hu, Zhenjiang",
        "title": "Artifact for OOPSLA'23: Improving Oracle-Guided Inductive Synthesis by Efficient Question Selection",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7722241",
        "abstract": "<p>Artifact for OOPSLA’23: Improving Oracle-Guided Inductive Synthesis by Efficient Question Selection</p>\n<p>This project will be maintained at https://github.com/jiry17/LearnSy, and details about this artifact can be found in README.md.</p>",
        "keywords": "Oracle-Guided Inductive Synthesis, Question Selection Problem",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7723110": {
        "doi": "10.5281/zenodo.7723110",
        "author": "Roth, Ori and Gil, Yossi",
        "title": "Flunct: Functional Fluent API Generator",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7723110",
        "abstract": "<p>Accompanying artifact for the OOPSLA 2023 paper “Fluent APIs in Functional Languages”. Flunct compiles finite state machines specifying regular domain-specific languages or API protocols into functional fluent APIs in Standard ML.</p>",
        "keywords": "API protocols, embedded DSLs, fluent API",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/OriRoth/flunct/tree/v1.0"
    },
    "10.5281/zenodo.7727577": {
        "doi": "10.5281/zenodo.7727577",
        "author": "Li, Shaohua and Su, Zhendong",
        "title": "Accelerating Fuzzing through Prefix-Guided Execution",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7727577",
        "abstract": "<p>This is the artifact for “Accelerating Fuzzing through Prefix-Guided Execution”, published in SPLASH/OOPSLA 2023. All instructions can be found in the zip file.</p>",
        "keywords": "code coverage, fuzzing, software testing",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7703886": {
        "doi": "10.5281/zenodo.7703886",
        "author": "Gopinathan, Kiran and Keoliya, Mayank and Sergey, Ilya",
        "title": "Reproduction Artefact for Article 'Mostly Automated Proof Repair for Verified Libraries'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7703886",
        "abstract": "<p>This artefact is for our tool, Sisyphus, which is a functional, reusable, and extensible framework for automated repair of Coq proofs.</p>\n<p>The artefact contains the source code and build scripts for Sisyphus, a corpus of individual OCaml programs which can be used to reproduce the experimental results in the paper, and a self-contained Docker file to automate setting up the development environment.</p>\n<p>The artefact also contains a README in markdown that provides detailed step-by-step instructions for running Sisyphus and reproducing the experimental results.</p>",
        "keywords": "invariant inference, mechanised proofs, proof repair, separation logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7706984": {
        "doi": "10.5281/zenodo.7706984",
        "author": "Muller, Stefan K. and Singer, Kyle and Keeney, Devyn Terra and Neth, Andrew and Agrawal, Kunal and Lee, I-Ting Angelina and Acar, Umut A.",
        "title": "Responsive Parallelism with Synchronization Case Studies",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7706984",
        "abstract": "<p>Implementations of the type system described in “Responsive Parallelism with Synchronization” in C++ and Rust, as well as implementations of the case studies. Included are instructions on how to build and execute the case studies, as well as a Docker container environment that can be used for compilation and execution.</p>",
        "keywords": "C++, Cilk, condition variable, cost semantics, priority inversion, Rust, type system",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7709500": {
        "doi": "10.5281/zenodo.7709500",
        "author": "Moseley, Dan and Nishio, Mario and Perez Rodriguez, Jose and Saarikivi, Olli and Toub, Stephen and Veanes, Margus and Wan, Tiki and Xu, Eric",
        "title": "Artifact for \"Derivative Based Nonbacktracking Real-World Regex Matching with Backtracking Semantics\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7709500",
        "abstract": "<p>This artifact contains the necessary software and data for reproducing results for the paper “Derivative Based Nonbacktracking Real-World Regex Matching with Backtracking Semantics”. It is based on a benchmark of regex engines available in various programming languages by Mario Ju\\'{a",
        "keywords": ".net, benchmark, dotnet, regex, regular expression, source code",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7709681": {
        "doi": "10.5281/zenodo.7709681",
        "author": "Huang, Yulong and Yallop, Jeremy",
        "title": "Defunctionalization with Dependent Types: Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7709681",
        "abstract": "<p>We provide a portable standalone implementation of the defunctionalization translation, written in OCaml and compiled to run in a web browser using js_of_ocaml. The implementation performs type checking of CC and DCC terms, abstract defunctionalization and backwards translation from DCC to CC, allowing the interested reader to experiment with the effects of the translation on real examples. We include several ready-made examples, including dependent composition, dependent pairs and finite sets.</p>",
        "keywords": "compilation, dependent types, type preservation, type systems",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7709704": {
        "doi": "10.5281/zenodo.7709704",
        "author": "Prinz, Jacob and Lampropoulos, Leonidas",
        "title": "Reproduction Package for \"Merging Inductive Relations\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7709704",
        "abstract": "<p>VM that allows for replicating all the experiments in the PLDI 2023 paper “Merging Inductive Relations”.</p>",
        "keywords": "Merging Inductive Relations, Property-Based Testing, QuickChick",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7709794": {
        "doi": "10.5281/zenodo.7709794",
        "author": "Zhang, Yihong and Wang, Yisu Remy and Flatt, Oliver and Cao, David and Zucker, Philip and Rosenthal, Eli and Tatlock, Zachary and Willsey, Max",
        "title": "Artifact for \"Better Together: Unifying Datalog and Equality Saturation\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7709794",
        "abstract": "<p>This artifact contains the egglog system, as well as data and scripts needed to reproduce the microbenchmarks and two case studies as described in the paper.</p>",
        "keywords": "Datalog, program optimization, program synthesis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7709916": {
        "doi": "10.5281/zenodo.7709916",
        "author": "Nigam, Rachit and Azevedo de Amorim, Pedro Henrique and Sampson, Adrian",
        "title": "Reproduction Package for \"Modular Hardware Design with Timeline Types\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7709916",
        "abstract": "<p>The artifact contains the source code for the language and compiler presented in the paper (Filament) along with Verilog modules generated from the Aetherling and Reticle compilers. It provides scripts to regenerate the tables and results in the paper. The reproducer must manually install the Vivado toolchain, as instructed in the README, in order to obtain the resource usage numbers.</p>",
        "keywords": "Hardware design language, type system",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7710435": {
        "doi": "10.5281/zenodo.7710435",
        "author": "Kuepper, Joel and Erbsen, Andres and Gross, Jason and Conoly, Owen and Sun, Chuyue and Tian, Samuel and Wu, David and Chlipala, Adam and Chuengsatiansup, Chitchanok and Genkin, Daniel and Wagner, Markus and Yarom, Yuval",
        "title": "Evaluation package for ‘ CryptOpt: Verified Compilation with Randomized Program Search for Cryptographic Primitives’",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7710435",
        "abstract": "<p>This artifact contains copies of CryptOpt, Fiat Cryptography and AssemblyLine. It also contains Dockerfiles to create a Docker container to run optimizations for the cryptographic primitives mentioned in the paper. It contains scripts to validate the claims, along with instructions how to build, run and evaluate. To create and build, an Internet connection is required to download dependencies.</p>",
        "keywords": "Assembly, asymmetric cryptography, bet-and-run, C, Coq, cryptography, Docker, formal verification, Intel x86-64, Node.js, performance, performance measurements, random local search, straight line code",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7711063": {
        "doi": "10.5281/zenodo.7711063",
        "author": "Lee, Dongjae and Cho, Minki and Kim, Jinwoo and Moon, Soonwon and Song, Youngju and Hur, Chung-Kil",
        "title": "Coq development for Fair Operational Semantics",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7711063",
        "abstract": "<p>This artifact is the Coq development for the 2023 PLDI paper `Fair Operational Semantics’. It contains the formalization of the theory of FOS and proofs for the examples in the paper.</p>",
        "keywords": "Concurrency, Coq Proof Assistant, Fairness, Separation Logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7711823": {
        "doi": "10.5281/zenodo.7711823",
        "author": "Beurer-Kellner, Luca and Fischer, Marc and Vechev, Martin",
        "title": "LMQL as described in Prompting Is Programming: A Query Language for Large Language Models",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7711823",
        "abstract": "<p>LMQL is a query language for large language models (LLMs). It facilitates LLM interaction by combining the benefits of natural language prompting with the expressiveness of Python. With only a few lines of LMQL code, users can express advanced, multi-part and tool-augmented LM queries, which then are optimized by the LMQL runtime to run efficiently as part of the LM decoding loop.</p>\n<p>An up to date version can be found at https://github.com/eth-sri/lmql</p>",
        "keywords": "language model programming, prompt programming",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/lmql-lang/lmql/tree/artifacts-v0.7"
    },
    "10.5281/zenodo.7712285": {
        "doi": "10.5281/zenodo.7712285",
        "author": "Brandon, William and Driscoll, Benjamin and Dai, Frank and Berkow, Wilson and Milano, Mae",
        "title": "Reproduction Package for Article \"Better Defunctionalization Through Lambda Set Specialization\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7712285",
        "abstract": "<p>The repository contains a compressed docker image file, containing the artifact for the PLDI 2023 paper “Better Defunctionalization through Lambda Set Specialization.” To use this artifact, first decompress the file (using <code>tar</code> or an archiving program like 7zip), and then use <code>docker load</code> to load up the decompressed docker image. Information for reproducing the results from our PLDI paper is available in README.md files in the ‘morphic/’ and ‘LSSIsabelle/’ directories inside the Docker image. Note: the Docker archive must be decompressed and then loaded with <code>docker load</code> (<em>not</em> <code>docker import</code>, as our archive does not use squashed layers).</p>",
        "keywords": "defunctionalization, monomorphization, type systems",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7776035": {
        "doi": "10.5281/zenodo.7776035",
        "author": "Pailoor, Shankara and Chen, Yanju and Wang, Franklyn and Rodr\\'{\\i",
        "title": "Automated Detection of Under-constrained Circuits in Zero-Knowledge Proofs",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7776035",
        "abstract": "<p>Research Artifact for PLDI’23 Paper “Automated Detection of Under-constrained Circuits in Zero-Knowledge Proofs”</p>",
        "keywords": "Automated reasoning, Cryptographic protocols, Program analysis, Program verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7782305": {
        "doi": "10.5281/zenodo.7782305",
        "author": "Kanabar, Hrutvik and Vivien, Samuel and Abrahamsson, Oskar and Myreen, Magnus O. and Norrish, Michael and Pohjola, Johannes \\r{A",
        "title": "Artifact for “PureCake: A Verified Compiler for a Lazy Functional Language”",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7782305",
        "abstract": "<p><code>README.md</code> describes how to understand and use this artifact. <code>correspondences.md</code> links the artifact to the paper.</p>",
        "keywords": "compiler verification, Haskell, HOL4, interactive theorem proving",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7787371": {
        "doi": "10.5281/zenodo.7787371",
        "author": "Lei, Yuxiang and Sui, Yulei and Tan, Shin Hwei and Zhang, Qirun",
        "title": "Artifact of \"Recursive State Machine Guided Graph Folding for Context-Free Language Reachability\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7787371",
        "abstract": "<p>This is the artifact of the paper “Recursive State Machine Guided Graph Folding for Context-Free Language Reachability” accepted to PLDI 2023. The artifact is packaged as a Docker image “gf.tar.gz”, which is to reproduce the experiment results of the paper. Please see README.pdf for detailed usage of the artifact.</p>",
        "keywords": "CFL-reachability, graph simplification, recursive state machines",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7787547": {
        "doi": "10.5281/zenodo.7787547",
        "author": "Park, Jihyeok and Youn, Dongjun and Lee, Kanguk and Ryu, Sukyoung",
        "title": "Artifact For \"Feature-Sensitive Coverage for Conformance Testing of Programming Language Implementations\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7787547",
        "abstract": "<p>Artifact For “Feature-Sensitive Coverage for Conformance Testing of Programming Language Implementations”</p>",
        "keywords": "conformance test synthesis, coverage-guided fuzzing, feature-sensitive coverage, mechanized specification",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/jestfs/jestfs/tree/0.4.0"
    },
    "10.5281/zenodo.7798646": {
        "doi": "10.5281/zenodo.7798646",
        "author": "Goens, Andr\\'{e",
        "title": "Compound Memory Models: Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7798646",
        "abstract": "<p>This is the artifact to the paper “Compound Memory Models”. It includes the LOST-POP model implementation in Lean 4, the CMM implementation in Alloy, multiple litmus tests for both and accompanying gem5 simulations for some litmus tests.</p>",
        "keywords": "alloy, axiomatic, compositional, gem5, lean4, memory models, operational, simulator",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7799158": {
        "doi": "10.5281/zenodo.7799158",
        "author": "Alberdingk Thijm, Timothy and Beckett, Ryan and Gupta, Aarti and Walker, David",
        "title": "Artifact associated with the PLDI 2023 submission \"Modular Control Plane Verification via Temporal Invariants\".",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7799158",
        "abstract": "<p>The artifact provides the code of the Timepiece GitHub repository, which includes the code implementing our modular verification procedure, along with libraries to reproduce and run the benchmarks given in the paper. Fattree benchmarks are contained in the Timepiece.Benchmarks subproject. The Internet2 benchmark can be run by using the Timepiece.Angler subproject to convert an .angler.json file into a Timepiece benchmark: such a .json file can be created from the included Angler repository, which translates network configurations read by Batfish to the .angler.json format. The core of our implementation can be found in the Timepiece subproject of the repository.</p>\n<p>Tooling is included to generate the plots from our paper via pgfplots, using a template plot.tex file. We also include a run_all.py Python script for conveniently running and gathering data on our fattree benchmarks, and a Dockerfile for building a Docker image to run the code.</p>",
        "keywords": "control plane, dotnet, modular verification, network configurations, network verification, python",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7799173": {
        "doi": "10.5281/zenodo.7799173",
        "author": "Mulder, Ike and Czajka, \\L{",
        "title": "Artifact and Appendix of 'Beyond Backtracking: Connections in Fine-Grained Concurrent Separation Logic'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7799173",
        "abstract": "<p>This is the artifact and appendix for the PLDI ‘23 paper ’Beyond Backtracking: Connections in Fine-Grained Concurrent Separation Logic’. It contains the source code of an extension of Diaframe that has better support for disjunctions, a VM containing a compiled version of this source code, instructions for evaluation, and the technical appendix.</p>",
        "keywords": "backtracking, Coq, disjunctions, fine-grained concurrency, Iris, proof automation, Separation logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7800226": {
        "doi": "10.5281/zenodo.7800226",
        "author": "Jin, Ende and Amin, Nada and Zhang, Yizhou",
        "title": "Artifact for Extensible Metatheory Mechanization via Family Polymorphism",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7800226",
        "abstract": "<p>This artifact includes 3 components: (1) a complete document for interacting with this artifact; (2) a docker image for directly interacting with our plugin without setup; and (3) source code to build our plugin and work with it without virtualization</p>",
        "keywords": "Coq., dependent type theory, expression problem, extensible frameworks, inductive types, interactive theorem proving, late binding, mixins, modules, Proof engineering, reuse",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7801911": {
        "doi": "10.5281/zenodo.7801911",
        "author": "Avanzini, Martin and Moser, Georg and Schaper, Michael",
        "title": "Ev-Imp: Research Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7801911",
        "abstract": "<p>Ev-imp implements an expected value analysis for probabilistic, imperative programs featuring dynamic sampling instructions, non-deterministic choice, nested loops and most crucially recursive procedure declarations. Concretely, it estimates the value returned by a procedure, in average, as a function of the initial state. To this end, it implements the inference machinery described in Section 5 of our paper. For an overview of the concrete syntax of programs and usage of the tool, we kindly refer the reader to the accompanying README.md.</p>",
        "keywords": "automation, expected value analysis, probabilistic programming, weakest pre-expectation semantics",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7803910": {
        "doi": "10.5281/zenodo.7803910",
        "author": "Elsman, Martin",
        "title": "Artifact for the PLDI 2023 paper 'Garbage-Collection Safety for Region-Based Type-Polymorphic Programs'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7803910",
        "abstract": "<p>This artifact reproduces the content of Figure 9 in the paper. For a detailed overview of the artifact, including instructions on how to use it, please consult the Zenodo page.</p>",
        "keywords": "Garbage collection, PLDI, Region inference, SML",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7804200": {
        "doi": "10.5281/zenodo.7804200",
        "author": "Li, Ziyang and Huang, Jiani and Naik, Mayur",
        "title": "Reproduction package for article \"Scallop: A Language for Neurosymbolic Programming\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7804200",
        "abstract": "<p>This artifact includes source code of the software and experiments presented in the paper `Scallop: A Language for Neurosymbolic Programming’. Instructions to reproduce the results are documented in the artifact.</p>",
        "keywords": "Differentiable Programming, Logic Programming, Neurosymbolic Method, Programming Language",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7804667": {
        "doi": "10.5281/zenodo.7804667",
        "author": "Mordido, Andreia and Spaderna, Janek and Thiemann, Peter and Vasconcelos, Vasco T.",
        "title": "AlgST",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7804667",
        "abstract": "<p>Implementation of “Parameterized Algebraic Protocols”</p>",
        "keywords": "algebraic datatypes, algebraic session types, interpreter, nominal types, parameterized protocols, polymorphism, session types, type checker",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7805564": {
        "doi": "10.5281/zenodo.7805564",
        "author": "Tardieu, Olivier and Grove, David and Bercea, Gheorghe-Teodor and Castro, Paul and Cwiklik, Jaroslaw and Epstein, Edward",
        "title": "Software Artifact for PACMPL Article \"Reliable Actors with Retry Orchestration\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7805564",
        "abstract": "<p>Software artifact supporting the claims of the PACMPL (PLDI) 2023 paper “Reliable Actors with Retry Orchestration”.</p>",
        "keywords": "actors, distributed systems, fault tolerance, workflows",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7806981": {
        "doi": "10.5281/zenodo.7806981",
        "author": "Ye, Qianchuan and Delaware, Benjamin",
        "title": "Taype: A Policy-Agnostic Language for Oblivious Computation: PLDI23 Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7806981",
        "abstract": "<p>This is the artifact for the PLDI23 paper “Taype: A Policy-Agnostic Language for Oblivious Computation”. Visit the Zenodo link for more details.</p>",
        "keywords": "Algebraic Data Types, Dependent type systems, Oblivious computation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7807290": {
        "doi": "10.5281/zenodo.7807290",
        "author": "Tao, Zhe and Nawas, Stephanie and Mitchell, Jacqueline and Thakur, Aditya V.",
        "title": "Reproduction Package for the PLDI 2023 Article \"Architecture-Preserving Provable Repair of Deep Neural Networks\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7807290",
        "abstract": "<p>This is the artifact of the PLDI 2023 article “Architecture-Preserving Provable Repair of Deep Neural Networks”. Please refer to the README.md file for the instructions. The latest version of the artifact can be found at https://github.com/95616ARG/APRNN/</p>",
        "keywords": "Bug fixing, Deep Neural Networks, Repair, Synthesis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7808384": {
        "doi": "10.5281/zenodo.7808384",
        "author": "Ma, Wenjie and Yang, Shengyuan and Tan, Tian and Ma, Xiaoxing and Xu, Chang and Li, Yue",
        "title": "Context Sensitivity without Contexts: A Cut-Shortcut Approach to Fast and Precise Pointer Analysis (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7808384",
        "abstract": "<p>This is the artifact of PLDI’23 paper Context Sensitivity without Contexts: A Cut-Shortcut Approach to Fast and Precise Pointer Analysis.</p>",
        "keywords": "Alias Analysis, Context Sensitivity, Java, Pointer Analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7808708": {
        "doi": "10.5281/zenodo.7808708",
        "author": "Rao, Xiaojia and Georges, A\\\"{\\i",
        "title": "Iris-Wasm: Robust and Modular Verification of WebAssembly Programs (Artefact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7808708",
        "abstract": "<p>This is the artefact for the paper “Iris-Wasm: Robust and Modular Verification of WebAssembly Programs”.</p>\n<p>The artefact contains the Coq proofs accompanying the paper. These proofs are built using the Iris framework.</p>\n<p>These proofs are available either as a .tar.gz archive, which can be compiled following the instructions in the README contained, or as a virtual machine image for VirtualBox (7.0.6) containing the already compiled Coq proofs with browsing tools (Emacs + Proof General) installed. The credentials for the account of the VM are provided in the README inside the .tar.gz archive.</p>",
        "keywords": "Coq, Iris, Mechanized proofs, Separation logic, WebAssembly",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7809285": {
        "doi": "10.5281/zenodo.7809285",
        "author": "Xu, Amanda and Molavi, Abtin and Pick, Lauren and Tannu, Swamit and Albarghouthi, Aws",
        "title": "Synthesizing Quantum-Circuit Optimizers Artifact (QUESO)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7809285",
        "abstract": "<p>This software artifact includes the source code for QUESO (a tool for synthesizing quantum-circuit optimizers) as well as a README.md with instructions for reproducing results using the provided scripts and benchmarks in the Docker image. See https://arxiv.org/abs/2211.09691 for the full version of the paper.</p>",
        "keywords": "probabilistic verification, quantum circuit optimization, quantum computing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7809333": {
        "doi": "10.5281/zenodo.7809333",
        "author": "Bagnall, Alexander and Stewart, Gordon and Banerjee, Anindya",
        "title": "Artifact for PLDI'23 paper 'Formally Verified Samplers From Probabilistic Programs With Loops and Conditioning'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7809333",
        "abstract": "<p>The artifact contains the Coq proof development and empirical evaluation scripts for reproducing the results of the paper ‘Formally Verified Samplers From Probabilistic Programs With Loops and Conditioning’. A Dockerfile is included for building a Docker container image with all dependencies installed.</p>",
        "keywords": "Probabilistic Programming, Verified Compilers",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7809339": {
        "doi": "10.5281/zenodo.7809339",
        "author": "Kovach, Scott and Kolichala, Praneeth and Gu, Tiancheng and Kjolstad, Fredrik",
        "title": "Benchmark Reproduction for \"Indexed Streams: A Formal Intermediate Representation for Fused Contraction Programs\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7809339",
        "abstract": "<p>Contains formal proofs in Lean3 and benchmarking code for evaluation (section 8).</p>",
        "keywords": "contractions, functional programming, operational semantics, streams",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7809600": {
        "doi": "10.5281/zenodo.7809600",
        "author": "Tun\\c{c",
        "title": "Artifact for Article \"Sound Dynamic Deadlock Prediction in Linear Time\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7809600",
        "abstract": "<p>The artifact contains the source codes of the deadlock prediction tools developed in our paper. Moreover, the artifact contains the compared tools (partially), experimental data, and scripts that can reproduce the experimental evaluation performed in the paper. The artifact does not contain all the compared tools as we lack the necessary rights to redistribute certain tools.</p>",
        "keywords": "concurrency, predictive analyses, runtime analyses",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7810545": {
        "doi": "10.5281/zenodo.7810545",
        "author": "Elsman, Martin and Henriksen, Troels",
        "title": "Artifact for the PLDI 2023 paper 'Parallelism in a Region Inference Context'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7810545",
        "abstract": "<p>The artifact reproduces Figures 6(a), 6(b) and Tables 1 and 2 of the paper. For a detailed overview, including instructions for using the artifact, please consult the README.md file at the Zenodo page.</p>",
        "keywords": "Parallelism, PLDI, SML",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7810840": {
        "doi": "10.5281/zenodo.7810840",
        "author": "Milovan\\v{c",
        "title": "Proving and Disproving Equivalence of Functional Programming Assignments (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7810840",
        "abstract": "<p>This artifact contains the complete data set and instructions for reproducing the results from the PLDI’23 paper Proving and Disproving Equivalence of Functional Programming Assignments</p>",
        "keywords": "automated grading, equivalence checking, functional induction",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7810841": {
        "doi": "10.5281/zenodo.7810841",
        "author": "Barnaby, Celeste and Chen, Qiaochu and Samanta, Roopsha and Dillig, I\\c{s",
        "title": "Reproduction Package for 'ImageEye: Batch Image Editing with Program Synthesis'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7810841",
        "abstract": "<p>This artifact contains the source code for ImageEye, along with a Docker image that runs the experiments described in the paper. In particular, the Docker image runs the benchmarks, ablations, and comparison with EUSolver.</p>",
        "keywords": "computer vision, neuro-symbolic synthesis, program synthesis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7811004": {
        "doi": "10.5281/zenodo.7811004",
        "author": "Zhou, Zhe and Mishra, Ashish and Delaware, Benjamin and Jagannathan, Suresh",
        "title": "PLDI2023 Artifact: Covering All the Bases: Type-Based Verification of Test Input Generators",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7811004",
        "abstract": "<p>This artifact contains:</p>\n<ol type=\"1\">\n<li>README.md : the artifact guide.</li>\n<li>poirot-full.pdf: full paper with the appendix.</li>\n<li>poirot_pldi-2023.tar.gz: the docker image (optional, we recommend to pull from the docker hub, see README.md).</li>\n<li>Dockerfile: the docker file that can reproduce the docker image (optional, we recommend to pull from the docker hub, see README.md).</li>\n</ol>",
        "keywords": "property-based testing, refinement types, underapproximate reasoning",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7811236": {
        "doi": "10.5281/zenodo.7811236",
        "author": "Zhang, Jialun and Morrisett, Greg and Tan, Gang",
        "title": "Reproduction Package for Article \"Interval Parsing Grammars for File Format Parsing\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7811236",
        "abstract": "<p>This package includes: (1) The parser generator for IPGs; (2) IPGs implementation for ELF, ZIP, PE, GIF and PDF; (3) A test script to reproduce all the evaluation results shown in the paper.</p>",
        "keywords": "Context-sensitive Grammars, File Formats",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7811406": {
        "doi": "10.5281/zenodo.7811406",
        "author": "Chen, Yu-Fang and Chung, Kai-Min and Leng\\'{a",
        "title": "An Automata-based Framework for Verification and Bug Hunting in Quantum Circuits",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7811406",
        "abstract": "<p>We introduce a new paradigm for analysing and finding bugs in quantum circuits. In our approach, the problem is given by a triple <span class=\"math inline\">{<em>P</em>",
        "keywords": "quantum circuits, tree automata, verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7811786": {
        "doi": "10.5281/zenodo.7811786",
        "author": "Fiala, Jon\\'{a",
        "title": "Reproduction Package for Article ``Leveraging Rust Types for Program Synthesis''",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7811786",
        "abstract": "<p>The purpose of this artifact is to reproduce the results presented in the PLDI 2023 paper titled “Leveraging Rust Types for Program Synthesis”. The artifact contains the instructions, tool, and Docker images to re-run the evaluation described in the paper. It also contains the appendix for the paper. The structure of the tool is described in the <code>sources/STRUCTURE.md</code> file.</p>",
        "keywords": "ownership types, rust, synthesis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7811907": {
        "doi": "10.5281/zenodo.7811907",
        "author": "Yamazaki, Tetsuro and Nakamaru, Tomoki and Shioya, Ryota and Ugawa, Tomoharu and Chiba, Shigeru",
        "title": "Artifact - Collecting cyclic garbage across foreign function interfaces",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7811907",
        "abstract": "<p>All the programs to reproduce the evaluation presented in the corresponding paper.</p>",
        "keywords": "FFI, Garbage collection, Memory Management",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7811928": {
        "doi": "10.5281/zenodo.7811928",
        "author": "Cho, Kyeongmin and Jeon, Seungmin and Raad, Azalea and Kang, Jeehoon",
        "title": "Artifact for Article \"Memento: A Framework for Detectable Recoverability in Persistent Memory\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7811928",
        "abstract": "<p>The accompanying artifact (also available at https://github.com/kaist-cp/memento) provides the implementation and the experimental results. The artifact is structured as follows.</p>\n<ul>\n<li><code>/memento/src/</code>: the implementation of the Memento framework and its primitives (§4).</li>\n<li><code>/memento/src/</code>: the implementation of detectably persistent data structures (§5).</li>\n<li><code>/memento/evaluation/</code>: the experiment script for correctness and performance (§6).</li>\n<li><code>/evaluation_data/</code>: the complete experimental results (§6).</li>\n</ul>\n<p>Please refer to the artifact’s <code>README.md</code> for detailed instructions on how to reproduce the results.</p>",
        "keywords": "concurrent data structure, detectable recovery, persistent memory",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7812119": {
        "doi": "10.5281/zenodo.7812119",
        "author": "Tassarotti, Joseph and Tristan, Jean-Baptiste",
        "title": "Verified Density Compilation for a Probabilistic Programming Language (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7812119",
        "abstract": "<p>The artifact consists of the Coq and OCaml source code for ProbCompCert, the compiler described in the accompanying paper. ProbCompcert is implemented as an extension to CompCert. The artifact is available in 3 different forms: a copy of the source code, a Docker image, and a Qemu image. The latter two contain the compiler pre-built, along with scripts for re-running the experiments described in the paper.</p>",
        "keywords": "compilers, formal verification, probabilistic programming",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7812282": {
        "doi": "10.5281/zenodo.7812282",
        "author": "Ugare, Shubham and Banerjee, Debangshu and Misailovic, Sasa and Singh, Gagandeep",
        "title": "Incremental Verification of Neural Networks",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7812282",
        "abstract": "<p>Complete verification of deep neural networks (DNNs) can exactly determine whether the DNN satisfies a desired trustworthy property (e.g., robustness, fairness) on an infinite set of inputs or not. Despite the tremendous progress to improve the scalability of complete verifiers over the years on individual DNNs, they are inherently inefficient when a deployed DNN is updated to improve its inference speed or accuracy. The inefficiency is because the expensive verifier needs to be run from scratch on the updated DNN. To improve efficiency, we propose a new, general framework for incremental and complete DNN verification based on the design of novel theory, data structure, and algorithms. Our contributions implemented in a tool named IVAN yield an overall geometric mean speedup of 2.4x for verifying challenging MNIST and CIFAR10 classifiers and a geometric mean speedup of 3.8x for the ACAS-XU classifiers over the state-of-the-art baselines.</p>",
        "keywords": "Neural Networks, Verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7812534": {
        "doi": "10.5281/zenodo.7812534",
        "author": "Zhang, Tony Nuda and Sharma, Upamanyu and Kapritsos, Manos",
        "title": "Artifact for Article `Performal: Formal Verification of Latency Properties for Distributed Systems'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7812534",
        "abstract": "<p>This artifact includes source code used to produce the results the paper `Performal: Formal Verification of Latency Properties for Distributed Systems’. Instructions to reproduce the results are documented in the artifact.</p>",
        "keywords": "distributed systems, formal software verification, latency, performance, systems verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7812616": {
        "doi": "10.5281/zenodo.7812616",
        "author": "Yuan, Yongwei and Radhakrishna, Arjun and Samanta, Roopsha",
        "title": "Artifact for \"Trace-Guided Inductive Synthesis of Recursive Functional Programs\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7812616",
        "abstract": "<p>The artifact includes the implementation of the synthesis algorithm, and necessary code to reproduce the experimental results.</p>",
        "keywords": "Program Synthesis, Recursive Functional Programs",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7813157": {
        "doi": "10.5281/zenodo.7813157",
        "author": "Liu, Zongyuan and Stepanenko, Sergei and Pichon-Pharabod, Jean and Timany, Amin and Askarov, Aslan and Birkedal, Lars",
        "title": "Artifact of \"VMSL: A Separation Logic for Mechanised Robust Safety of Virtual Machines Communicating above FF-A\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7813157",
        "abstract": "<p>This is the artifact for the PLDI’23 paper “VMSL: A Separation Logic for Mechanised Robust Safety of Virtual Machines Communicating above FF-A”. It is the Coq mechanisation of all results presented in the paper.</p>",
        "keywords": "FF-A, hypercall, Iris, logical relation, robust safety, separation logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7813862": {
        "doi": "10.5281/zenodo.7813862",
        "author": "Eilers, Marco and Dardinier, Thibault and M\\\"{u",
        "title": "Artifact of paper \"CommCSL: Proving Information Flow Security for Concurrent Programs using Abstract Commutativity\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7813862",
        "abstract": "<p>The artifact is a VirtualBox VM that contains the Isabelle/HOL formalization and soundness proof of CommCSL as well as the implementation of CommCSL in the tool HyperViper, and the evaluation presented in the paper.</p>",
        "keywords": "Commutativity, concurrency, information flow security, separation logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7813942": {
        "doi": "10.5281/zenodo.7813942",
        "author": "Sewell, Thomas and Myreen, Magnus O. and Tan, Yong Kiam and Kumar, Ramana and Mihajlovic, Alexander and Abrahamsson, Oskar and Owens, Scott",
        "title": "Cakeml+Eval Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7813942",
        "abstract": "<p>This is a collection of CakeML and Candle artefacts to accompany “Cakes that Bake Cakes: Dynamic Computation in CakeML”.</p>\n<p>In this modified version of CakeML, the REPL and Candle modes are built into the standard bootstrapped CakeML compiler. The compiler is built into a binary via the in-HOL4 verified self-bootstrap mechanism.</p>\n<p>The resulting executable REPL, and the proof repositories it is built from, are provided pre-built in this artefact.</p>",
        "keywords": "compiler verification, dynamic computation, interactive theorem proving",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7814275": {
        "doi": "10.5281/zenodo.7814275",
        "author": "Bansal, Manya and Hsu, Olivia and Olukotun, Kunle and Kjolstad, Fredrik",
        "title": "Artifact for Mosaic: An Interoperable Compiler for Tensor Algebra",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7814275",
        "abstract": "<p>This artifact describes how to set up and run Mosaic, a compiler that can compose externally defined library functions to implement an arbitrary sparse tensor algebra expression. Mosaic fills in the gaps that are not provided by the libraries, guaranteeing generality in both expressions and data structures. The artifact also describes how to reproduce the quantitative experimental results presented in the paper.</p>",
        "keywords": "Code Optimization, Compiler, External Functions, Sparse Tensor Algebra",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7814374": {
        "doi": "10.5281/zenodo.7814374",
        "author": "Bertram, Noah and Levinson, Alex and Hsu, Justin",
        "title": "Prototype implementation of Slice, appearing in \"Cutting the Cake: A Language for Fair Division\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7814374",
        "abstract": "<p>This is a prototype implementation of the cake-cutting language, Slice. For more details, view the readme.</p>",
        "keywords": "automatic verification, fair division",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7814715": {
        "doi": "10.5281/zenodo.7814715",
        "author": "Pick, Lauren and Desai, Ankush and Gupta, Aarti",
        "title": "Software for `Psym: Efficient Symbolic Exploration of Distributed Systems'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7814715",
        "abstract": "<p>The artifact contains the software used to achieve experimental results the paper `Psym: Efficient Symbolic Exploration of Distributed Systems’ as well some of the benchmarks that can be used to reproduce the results.</p>",
        "keywords": "binary decision diagrams, distributed systems, systematic exploration",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7815663": {
        "doi": "10.5281/zenodo.7815663",
        "author": "Watt, Conrad and Trela, Maja and Lammich, Peter and M\\\"{a",
        "title": "Supplementary material for WasmRef-Isabelle",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7815663",
        "abstract": "<p>Supplementary figures and graphs as mentioned in the main publication, and an archive of our Isabelle/HOL code.</p>",
        "keywords": "WasmCert",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7816526": {
        "doi": "10.5281/zenodo.7816526",
        "author": "Tun\\c{c",
        "title": "Artifact for Article \"Optimal Reads-From Consistency Checking for C11-Style Memory Models \"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7816526",
        "abstract": "<p>This artifact contains all the source codes and experimental data for replicating our evaluation in the paper. We implemented our programs as an extension to the C11Tester and GenMC tools. The provided experimental data contains all the benchmarks used in our evaluation. The artifact also contains Python scripts that fully automate the process of replicating our evaluation.</p>",
        "keywords": "complexity, concurrency, weak memory models",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7816533": {
        "doi": "10.5281/zenodo.7816533",
        "author": "Yoon, Yongho and Lee, Woosuk and Yi, Kwangkeun",
        "title": "Artifact of Inductive Program Synthesis via Iterative Forward-Backward Abstract Interpretation",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7816533",
        "abstract": "<p>The artifacts include the main tool(Simba), the other baseline solvers(Duet, Probe), benchmarks and evaluation scripts.</p>",
        "keywords": "Abstract Interpretation, Program Synthesis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7817421": {
        "doi": "10.5281/zenodo.7817421",
        "author": "Zakhour, George and Weisenburger, Pascal and Salvaneschi, Guido",
        "title": "Type-Checking CRDT Convergence",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7817421",
        "abstract": "<p>Propel – Verifying the algebraic and relational properties of functions</p>\n<p>Artifact for the paper “Type-Checking CRDT Convergence”</p>\n<h2 id=\"getting-started\">GETTING STARTED</h2>\n<h3 id=\"building-and-loading-the-docker-image\">BUILDING AND LOADING THE DOCKER IMAGE</h3>\n<p>We provide you with <code>propel.tar.xz</code>, which is a pre-built container image that contains all necessary programs. To load, run the following command:</p>\n<pre><code>$ docker load &lt; propel.tar.xz</code></pre>\n<p>Further, we also provide the option to build the contain anew. To build, run the following command which takes between 10 and 20 minutes:</p>\n<pre><code>$ docker build -t propel .</code></pre>\n<p>Rebuilding the image may not work on Apple M1 machines because of incomplete emulation of system calls (specifically the inotify kernel subsystem). Hence, we recommend rebuilding the image on a platform fully supported by Docker, like x86-64 systems.</p>\n<h3 id=\"checking-if-the-container-and-the-relevant-programs-run-correctly\">CHECKING IF THE CONTAINER AND THE RELEVANT PROGRAMS RUN CORRECTLY</h3>\n<p>We provide a script that runs fast checks on Propel and the other provers (HipSpec, Zeno, cvc5, Vampire) used in the evaluation.</p>\n<p>The check verifies commutativity of natural number addition – a task which all programs are able to prove correct quickly. The following command runs the check:</p>\n<pre><code>$ docker run -it --rm propel /check_image/check</code></pre>\n<p>If you see in green the line “Check Done” at the end, the container is behaving as expected.</p>\n<p>The check will show the provers’ output, which should look similar to the following (shortened) excerpt:</p>\n<pre><code>Checking Zeno\n\n[...]\n\nSearching for proofs...\nProved \"CommutativityAddition.prop_comm_add : add x y = add y x\"\n\n[...]\n\nChecking HipSpec\n\n[...]\n\nProved:\n    add m n == add n m\n    add m (add n o) == add n (add m o)\n    prop_comm_add {- add x y == add y x -",
        "keywords": "Conflict-Free Replicated Data Types, Type Systems, Verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7819755": {
        "doi": "10.5281/zenodo.7819755",
        "author": "Lecoeur, Bastien and Mohsin, Hasan and Donaldson, Alastair F.",
        "title": "Artifact for \"Program Reconditioning: Avoiding Undefined Behaviour When Finding and Reducing Compiler Bugs\", PLDI 2023",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7819755",
        "abstract": "<p>The artifact includes runnable versions of the GLSLsmith and WGSLsmith tools (both source code and binary distributions), together with instructions showing how to use them to find and reduce compiler bugs, plus data sets related to controlled experiments described in the paper.</p>",
        "keywords": "compiler testing, OpenGL, Randomised testing, test-case reduction, undefined behaviour, WebGPU",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7823993": {
        "doi": "10.5281/zenodo.7823993",
        "author": "Sisco, Zachary D. and Balkind, Jonathan and Sherwood, Timothy and Hardekopf, Ben",
        "title": "Artifact for \"Loop Rerolling for Hardware Decompilation\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7823993",
        "abstract": "<p>The artifact consists of four components: (1) source code for hardware loop identification over the benchmark suite of netlists; (2) source code for hardware loop rerolling over the benchmark suite; (3) scripts for comparing simulation times between decompiled HDL code with rerolled loops and the original netlist using Verilator; and (4) Yosys scripts for converting Verilog designs to netlists in BLIF. We provide instructions to reproduce the results reported in the evaluation.</p>",
        "keywords": "hardware decompilation, loop rerolling, program synthesis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7824069": {
        "doi": "10.5281/zenodo.7824069",
        "author": "Arora, Jatin and Westrick, Sam and Acar, Umut A.",
        "title": "Replication instructions for Article: Efficient Parallel Functional Programming with Effects",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7824069",
        "abstract": "<p>The artifact contains the implementation of our language MPL and also contains benchmarks for its evaluation w.r.t languages MLton, C/C++, Go, Java, and OCaml.</p>",
        "keywords": "functional languages, memory management, parallel programming, parallelism",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7824175": {
        "doi": "10.5281/zenodo.7824175",
        "author": "Guria, Sankha Narayan and Foster, Jeffrey S. and Van Horn, David",
        "title": "Artifact for \"Absynthe: Abstract Interpretation-Guided Synthesis\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7824175",
        "abstract": "<p>The artifact is a Docker image that contains all of the source code, benchmarks, and experiment harnesses used in the development of the paper (set-up and ready to run). The README contains instructions to reproduce results from the paper, as well as pointers for how to use, extend or modify the tool and benchmarks.</p>",
        "keywords": "abstract interpretation, program synthesis, Ruby",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7824546": {
        "doi": "10.5281/zenodo.7824546",
        "author": "Bouajjani, Ahmed and Enea, Constantin and Rom\\'{a",
        "title": "Transactional JPF - Artifact for \"Dynamic Partial Order Reduction for Checking Correctness against Transaction Isolation Levels\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7824546",
        "abstract": "<p>Extension of Java PathFinder (JPF) for managing transactions as well as EXPLORE-CE algorithm’s implementation. It includes several benchmarks used in the article “Dynamic Partial Order Reduction for Checking Correctness against Transaction Isolation Levels” as well as graphical scripts for plotting the results.</p>",
        "keywords": "Dynamic Partial-Order Reduction, Java PathFinder, Transactional Databases, Weak Isolation Levels",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7824835": {
        "doi": "10.5281/zenodo.7824835",
        "author": "Yallop, Jeremy and Xie, Ningning and Krishnaswami, Neel",
        "title": "flap: A Deterministic Parser with Fused Lexing (artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7824835",
        "abstract": "<p>Artifact accompanying the paper “flap: A Deterministic Parser with Fused Lexing”. Please see the latest version: https://doi.org/10.5281/zenodo.7712770</p>",
        "keywords": "fusion, lexing, multi-stage programming, optimization, parsing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7829982": {
        "doi": "10.5281/zenodo.7829982",
        "author": "Meyer, Roland and Wies, Thomas and Wolff, Sebastian",
        "title": "Artifact for \"Embedding Hindsight Reasoning in Separation Logic\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7829982",
        "abstract": "<p>The artifact demonstrates that the implementation from the paper “Embedding Hindsight Reasoning in Separation Logic” [PLDI’23], an extension of the PLANKTON tool, (1) can automatically verify the Logical Ordering tree, and (2) compares the extension with the original version of PLANKTON in terms of performance and proof capabilities.</p>",
        "keywords": "Automated reasoning, Hindsight, Hoare logic, Linearizability, Logical Ordering Tree, Program verification, Programming logic, Separation logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7832346": {
        "doi": "10.5281/zenodo.7832346",
        "author": "Wilkinson, Lucas and Cheshmi, Kazem and Dehnavi, Maryam Mehri",
        "title": "Register Tiling for Unstructured Sparsity in Neural Network Inference Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7832346",
        "abstract": "<p>This is the code for the “Register Tiling for Unstructured Sparsity in Neural Network Inference” paper in PLDI 2023, please see the README in size <code>artifact_src.tgz</code> for instructions on how to use the code. Please see https://github.com/SpRegTiling/sparse-register-tiling for the latest version of the code.</p>",
        "keywords": "Matrix Multiplication, Pruned Neural Networks, Register Tiling, Sparse Matrix, SpMM",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7997778": {
        "doi": "10.5281/zenodo.7997778",
        "author": "M\\\"{u",
        "title": "Abstract Interpretation of Fixpoint Iterators with Applications to Neural Networks - Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7997778",
        "abstract": "<p>An implementation of the abstract fixpoint iterator framework for monDEQs, CRAFT, as well as the CH-Zonotope domain. Included are the code, trained models, expected results, and detailed instructions on how to reproduce all results from the PLDI’23 paper “Abstract Interpretation of Fixpoint Iterators with Applications to Neural Networks”.</p>",
        "keywords": "abstract interpretation, adversarial robustness, equlibrium models, fixpoint",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7921796": {
        "doi": "10.5281/zenodo.7921796",
        "author": "Shen, Mingjie and Davis, James C. and Machiry, Aravind",
        "title": "Reproduction Package for Article `Towards Automated Identification of Layering Violations in Embedded Applications (WIP)'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7921796",
        "abstract": "<p>This is a tool to detect layering violations in embedded applications. The tool uses LLVM and requires a bitcode file of the target application.</p>\n<p>Specifically, given a bitcode file, our tool will generate the list of all NCMAs (a type of layering violations).</p>",
        "keywords": "Embedded Systems, Firmware, Hardware Abstraction Layer, Portability, Static Analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7929610": {
        "doi": "10.5281/zenodo.7929610",
        "author": "Gollenstede, Niklas and Kulau, Ulf and Dietrich, Christian",
        "title": "Implementations for \"reUpNix: Reconfigurable and Updateable Embedded Systems\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7929610",
        "abstract": "<p>This repository contains the practical contributions for the paper “reUpNix: Reconfigurable and Updateable Embedded Systems”.</p>\n<p>The differential update transfer mechanism <code>nix store sent</code> is implemented as part of Nix, and is included here as one big patch in <code>patches/nix-store-send.patch</code>.</p>\n<p><code>modules/hermetic-bootloader.nix.md</code> implements the bootloader configuration, and <code>modules/minify.nix.md</code> realizes the reduction in installation size.</p>\n<p>Container integration is implemented in <code>modules/target/containers.nix.md</code>, and the configuration model (Machine Config / System Profile) by the layout of the individual hosts in <code>hosts/</code>, by <code>lib/misc.nix#importMachineConfig</code>, and by <code>modules/target/specs.nix.md</code>.</p>",
        "keywords": "embedded systems, NixOS, reproducible systems",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/tuhhosg/reupnix/tree/lctes23-crv"
    },
    "10.5281/zenodo.7939291": {
        "doi": "10.5281/zenodo.7939291",
        "author": "Rommel, Florian and Dietrich, Christian and Ziegler, Andreas and Ostapyshyn, Illia and Lohmann, Daniel",
        "title": "Thread-Level Attack-Surface Reduction - Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7939291",
        "abstract": "<p>This artifact contains the raw data of the evaluation results and the necessary programs and scripts to repeat the experiments and analyses of the paper “Thread-Level Attack-Surface Reduction”, presented at the 24th ACM SIGPLAN/SIGBED International Conference on Languages, Compilers, and Tools for Embedded Systems (LCTES 2023). See https://doi.org/10.1145/3589610.3596281</p>",
        "keywords": "binary tailoring, debloating, return-oriented programming",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7825616": {
        "doi": "10.5281/zenodo.7825616",
        "author": "Li, Changwen and Sifakis, Joseph and Wang, Qiang and Yan, Rongjie and Zhang, Jian",
        "title": "Reproduction Package for `Simulation-Based Validation for Autonomous Driving Systems'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7825616",
        "abstract": "<p>The artifact provides RvADS, a simulation-based validation framework for autonomous driving systems that contains three components: 1)Simulator, 2) Scenario Generator, and 3) Monitor.</p>",
        "keywords": "Autonomous driving systems, Formal specification, LGSVL, Runtime verification, Simulation-based validation, Temporal logic",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7896362": {
        "doi": "10.5281/zenodo.7896362",
        "author": "Zohdinasab, Tahereh and Riccio, Vincenzo and Tonella, Paolo",
        "title": "DeepAtash: Focused Test Generation for Deep Learning systems",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7896362",
        "abstract": "<p>The source code and the data of the article “DeepAtash: Focused Test Generation for Deep Learning systems”</p>",
        "keywords": "deep learning, search based software engineering, software testing",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/testingautomated-usi/deepatash/tree/v1.0"
    },
    "10.5281/zenodo.7905120": {
        "doi": "10.5281/zenodo.7905120",
        "author": "Ma, Haoyang and Shen, Qingchao and Tian, Yongqiang and Chen, Junjie and Cheung, Shing-Chi",
        "title": "Artifact for the ISSTA2023 Paper Fuzzing Deep Learning Compilers with HirGen",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7905120",
        "abstract": "<p>This is the artifact of HirGen. It contains about 3K LOC C++ code and cmake files for building the softwares. The main purpose of it is to generate executable <code>hirgen</code> for generating computational graphs and use them to test DL compilers.</p>",
        "keywords": "Fuzzer, Program Generator",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7909725": {
        "doi": "10.5281/zenodo.7909725",
        "author": "Yu, Shiwen and Wang, Ting and Wang, Ji",
        "title": "The tool LIPuS and its experiment package of the paper ''Loop Invariant Inference through SMT Solving Enhanced Reinforcement Learning''",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7909725",
        "abstract": "<p>This is the repository of LIPuS, which is a loop invariant inference tool based on SMT Solving Enhanced Reinforcement Learning. LIPuS is the implemented tool for the method proposed in the paper: “Loop Invariant Inference through SMT Solving Enhanced Reinforcement Learning”.</p>",
        "keywords": "loop invariant, reinforcement learning",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7922486": {
        "doi": "10.5281/zenodo.7922486",
        "author": "Levine, Reese and Cho, Mingun and McKee, Devon and Quinn, Andrew and Sorensen, Tyler",
        "title": "GPUHarbor: Testing GPU Memory Consistency At Large (Experience Paper): Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7922486",
        "abstract": "<p>Artifact for the ISSTA 2023 paper “GPUHarbor: Testing GPU Memory Consistency At Large (Experience Paper)”, containing the data used in the paper as well as the tools we used to collect and analyze the data.</p>",
        "keywords": "GPUs, memory consistency, mutation testing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7939536": {
        "doi": "10.5281/zenodo.7939536",
        "author": "Du, Hang and Palepu, Vijay Krishna and Jones, James A.",
        "title": "Reproduction Package for An Empricial Study of Mutation Testing Kills",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7939536",
        "abstract": "<p>This project provides an experimental replication setup and source code for To Kill a Mutant: An Empirical Study of Mutation Testing Kills. Artifact’s data structure, experiments’ general setups and detailed instructions are provided.</p>",
        "keywords": "empirical study, mutant detection, mutation testing, test failure classification",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/spideruci/MutationKills/tree/v1.0.0"
    },
    "10.5281/zenodo.7942804": {
        "doi": "10.5281/zenodo.7942804",
        "author": "Ramos, Frederico and Reis, Diogo Costa and Trigo, Miguel and Morgado, Ant\\'{o",
        "title": "Reproduction Package for Article `MetaData262: Automatic Test Suite Selection for Partial JavaScript Implementations'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7942804",
        "abstract": "<p>The overall architecture of the MetaData262 Computation Engine consists of five main modules: (1) the Frontmatter Parsing Module (M1) for parsing the frontmatter keys of each test and creating the base JSON object to which the parsed keys are to be added; (2) the Syntactic Constructs Module (M2) for computing the syntactic constructs used within each test; (3) the History Computation Module (M3) for determining the creation date and last-modified date associated with each test; (4) the Version Computation Module (M4) for determining the version of the ES standard to be associated with each test; and (5) the Built-Ins Computation Module (M5) for determining the built-in objects used within each test.</p>",
        "keywords": "ECMAScript, Metadata, Test262",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7944722": {
        "doi": "10.5281/zenodo.7944722",
        "author": "Lipp, Stephan and Elsner, Daniel and Kacianka, Severin and Pretschner, Alexander and B\\\"{o",
        "title": "Artifacts for the paper: \"Green Fuzzing: A Saturation-Based Stopping Criterion using Vulnerability Prediction\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7944722",
        "abstract": "<p>This repository contains the training and evaluation data, including the analysis script and machine-learned vulnerability prediction models, of the paper “Green Fuzzing: A Saturation-Based Stopping Criterion using Vulnerability Prediction”.</p>",
        "keywords": "fuzzing, stopping criteria, vulnerability prediction",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/tum-i4/green-fuzzing-artifacts/tree/1.0.0"
    },
    "10.5281/zenodo.7955514": {
        "doi": "10.5281/zenodo.7955514",
        "author": "Wang, Zihan and Nie, Pengbo and Miao, Xinyuan and Chen, Yuting and Wan, Chengcheng and Bu, Lei and Zhao, Jianjun",
        "title": "Artifact for Paper \"GenCoG: A DSL-Based Approach to Generating Computation Graphs for TVM Testing\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7955514",
        "abstract": "<p>This is the artifact for the ISSTA ’23 paper “GenCoG: A DSL-Based Approach to Generating Computation Graphs for TVM Testing”. This artifact contains the implementation of GenCoG, the adapted versions or reimplementation of the baselines, and the bug-triggering cases.</p>",
        "keywords": "Computation Graph Generation, Constraint Solving, Deep Learning Compiler",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7962231": {
        "doi": "10.5281/zenodo.7962231",
        "author": "Chen, Zhuo and Liu, Jie and Hu, Yubo and Wu, Lei and Zhou, Yajin and He, Yiling and Liao, Xianhao and Wang, Ke and Li, Jinku and Qin, Zhan",
        "title": "DeUEDroid system",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7962231",
        "abstract": "<p>Deuedroid is a detection system designed for Underground economy apps, which consists of two parts: statistic analysis part and machine learning part.</p>",
        "keywords": "machine learning, UTG",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7962308": {
        "doi": "10.5281/zenodo.7962308",
        "author": "Chow, Yiu Wai and Sch\\\"{a",
        "title": "Artifact for \"Beware of the Unexpected: Bimodal Taint Analysis\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7962308",
        "abstract": "<p>This artifact contains supplementary material for the paper “Beware of the Unexpected: Bimodal Taint Analysis” (ISSTA’23).</p>",
        "keywords": "AI4SE, software security",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/sola-st/fluffy/tree/20230523"
    },
    "10.5281/zenodo.7965678": {
        "doi": "10.5281/zenodo.7965678",
        "author": "He, Dongjie and Gui, Yujiang and Gao, Yaoqing and Xue, Jingling",
        "title": "Reducing the Memory Footprint of IFDS-based Data-Flow Analyses Using Fine-Grained Garbage Collection (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7965678",
        "abstract": "<p>The artifact contains our implementation of the Fine-grained Garbage Collection algorithm introduced in our paper “Reducing the Memory Footprint of IFDS-based Data-Flow Analyses Using Fine-Grained Garbage Collection”. The artifact includes all scripts and benchmarks for reproducing the results and claims made in our paper.</p>",
        "keywords": "IFDS, Path Edge Collection, Taint Analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7970349": {
        "doi": "10.5281/zenodo.7970349",
        "author": "Alsaeed, Ziyad and Young, Michal",
        "title": "Artifact: Finding Short Slow Inputs Faster with Grammar-Based Search",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7970349",
        "abstract": "<p>Two grammar based performance fuzzing tools. SlackLine and TreeLine that find short strings that trigger worst-case performance.</p>\n<p>TreeLine and SlackLine artifact, each in its own compressed file, which has a dedicated README file. These are related to the ISSTA’23 publication titled “Finding Short Slow Inputs Faster with Grammar-Based Search.”</p>\n<p>The attached files are the ISSTA’23 snapshots of the projects. The up-to-date versions can be found in the dedicated GitHub repos of each project.</p>\n<p>TreeLine: https://github.com/uo-se-research/treeline SlackLine: https://github.com/uo-se-research/slackline In addition, each tool has its own Docker repository. They can be found through the following links:</p>\n<p>TreeLine: https://hub.docker.com/r/zalsaeed/treeline SlackLine: https://hub.docker.com/r/zalsaeed/slackline We share all the experimental data in a compressed file. The data size is slightly larger than 7GB when you uncompress it.</p>\n<p>https://doi.org/10.6084/m9.figshare.22114373.v1</p>",
        "keywords": "Input Generation, MCTS, Performance Analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7970822": {
        "doi": "10.5281/zenodo.7970822",
        "author": "Alonso, Juan C. and Segura, Sergio and Ruiz-Cort\\'{e",
        "title": "[Supplementary material] AGORA: Automated Generation of Test Oracles for REST APIs",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7970822",
        "abstract": "<p>In order to enable reproducibility of the results reported in this paper, we provide a supplementary material containing the source code of the scripts and projects developed, videos explaining how to use the provided software, the data generated in our experiments, bug reports with the corresponding responses from the developers, as well as a Docker image and an Ubuntu virtual machine with all the projects configured. With these resources, we aim to provide a robust foundation for replicating and validating our findings.</p>\n<p>To use the most up-to-date version of AGORA, please refer to the official GitHub repository: https://github.com/isa-group/Beet</p>",
        "keywords": "automated testing, invariant detection, REST APIs, test oracle",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7976809": {
        "doi": "10.5281/zenodo.7976809",
        "author": "Kamm, Matteo and Rigger, Manuel and Zhang, Chengyu and Su, Zhendong",
        "title": "Reproduction artifact for \"Testing Graph Database Engines via Query Partitioning\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7976809",
        "abstract": "<p>The artifact consists of two main components: - GDBMeter, the tool which implements Predicate Partitioning and was used to find all bugs reported in the paper. - A SQLite database with a list of bugs that we reported and additional meta information.</p>",
        "keywords": "automatic testing, database testing, graph databases, test oracle",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7976968": {
        "doi": "10.5281/zenodo.7976968",
        "author": "Cheng, Kai and Zheng, Yaowen and Liu, Tao and Guan, Le and Liu, Peng and Li, Hong and Zhu, Hongsong and Ye, Kejiang and Sun, Limin",
        "title": "Reproduction Package for Article `Detecting Vulnerabilities in Linux-based Embedded Firmware with SSE-based On-demand Alias Analysis'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7976968",
        "abstract": "<p>EmTaint, a novel static analysis tool for accurate and fast detection of taint-style vulnerabilities in embedded firmware. In EmTaint, we design a structured symbolic expression-based (SSE-based) on-demand alias analysis technique, which serves as a basis for resolving both implicit data flow and control flow on potential vulnerable paths. Based on it, we come up with indirect call resolution and accurate taint analysis scheme. Combined with sanitization rule checking, EmTaint can eventually discovers a large number of taint-style vulnerabilities accurately within a limited time.</p>",
        "keywords": "Embedded firmware, On-demand alias analysis, Taint analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7977256": {
        "doi": "10.5281/zenodo.7977256",
        "author": "Liu, Kaibo and Han, Yudong and Zhang, Jie M. and Chen, Zhenpeng and Sarro, Federica and Harman, Mark and Huang, Gang and Ma, Yun",
        "title": "TrickyBugs",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7977256",
        "abstract": "<p>This is TrickyBugs, the dataset of the ISSTA’23 paper entitled “Who Judges the Judge: An Empirical Study on Online Judge Tests”. This dataset contains the detected false positive solutions (bugs) and the corresponding generated hack test inputs and hack test outputs in the paper. Read the paper for detailed information.</p>",
        "keywords": "Online judge platform, Software testing, Test assessment",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7977434": {
        "doi": "10.5281/zenodo.7977434",
        "author": "Jia, Fuqi and Han, Rui and Huang, Pei and Liu, Minghao and Ma, Feifei and Zhang, Jian",
        "title": "Improving Bit-Blasting for Nonlinear Integer Constraints",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7977434",
        "abstract": "<p>This Artifact Evaluation document provides an assessment of the artifact submitted with the paper titled “Improving Bit-Blasting for Nonlinear Integer Constraints”, which was accepted at ISSTA 2023. The purpose of this evaluation is to verify the artifact’s reproducibility and usefulness in advancing the field.</p>\n<p>The tool names BLAN, i.e., Bit-bLAst to solve Nonlinear integer constraints. In the paper, we combine it with an SMT-LIB frontend so that it can solve QF_NIA (quantifier free nonlinear integer arithmetic) constraints. It is available at</p>\n<pre><code>https://github.com/MRVAPOR/BLAN</code></pre>",
        "keywords": "nonlinear integer constraints, satisfiability modulo theories",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7977493": {
        "doi": "10.5281/zenodo.7977493",
        "author": "Ren, Kunlun and Qiang, Weizhong and Wu, Yueming and Zhou, Yi and Zou, Deqing and Jin, Hai",
        "title": "Artifacts for the ISSTA 2023 Paper: An Empirical Study on the Effects of Obfuscation on Static Machine Learning-based Malicious JavaScript Detectors",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7977493",
        "abstract": "<p>This repository contains the evaluation script and the corresponding data of the ISSTA’23 paper “An Empirical Study on the Effects of Obfuscation on Static Machine Learning-Based Malicious JavaScript Detectors”. Detailed Instructions: detectors: The detectors under the folder detectors/ are the main projects to be evaluated in our paper, which are CUJO, ZOZZLE, JAST, and JSTAP. Detailed setup and usage instructions are described in README.md in the corresponding folder. samples: The files under the folder samples/ are the samples from a random tenth of our dataset used in our paper. Results can be obtained quickly using these samples. These results will not be exactly the same as in the paper, but they are similar. RQ1: The code under folder RQ1/ is to figure out how obfuscation affects these detectors. RQ1_1_train.py is to train four detectors with unobfuscated samples. RQ1_1_test.py tests these trained detectors with unobfuscated and obfuscated samples. RQ1_2_train.py is to train the detector ZOZZLE that uses different machine learning algorithms. RQ1_2_test.py tests these trained models with unobfuscated and obfuscated samples. RQ1_3_train.py uses a training set with all unobfuscated benign samples and all obfuscated malicious samples, and a training set with all obfuscated benign samples and all unobfuscated malicious samples to train the detectors. RQ1_3_test.py uses these detectors to detect unobfuscated benign samples, obfuscated benign samples, unobfuscated malicious samples, and obfuscated malicious samples, respectively. RQ2: The code under folder RQ2/ is to study the two measures to mitigate the impact of obfuscation effective or not. RQ2_1_train.py uses obfuscated samples to train four detectors. RQ2_1_test.py tests these detectors on the same type of obfuscated samples. RQ2_2_test.py tests thest detectors on the different type of obfuscated samples. RQ2_3.py uses the BERT variants to generate code representation of unobfuscated samples, trains the detector with these code representations, and tests the trained detectors with code representations of obfuscated samples. RQ3: The code unser fodler RQ3/ visualizes the vectors, extracts the ten most important features, and calculates the distance between different sets of vectors. RQ4: There is no code related to RQ4 here because the actual operation of RQ4 is to submit the samples to VirusTotal .</p>",
        "keywords": "JavaScript obfuscation, machine learning, malicious JavaScript detector, web security",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7977570": {
        "doi": "10.5281/zenodo.7977570",
        "author": "Xie, Zifan and Wen, Ming and Jia, Haoxiang and Guo, Xiaochen and Huang, Xiaotong and Zou, Deqing and Jin, Hai",
        "title": "Reproduction Package for Ariticle \"Precise and Efficient Patch Presence Test for Android Applications against Code Obfuscation\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7977570",
        "abstract": "<p>This is the repository for paper submission “Precise and Efficient Patch Presence Test for Android Applications against Code Obfuscation”. It introduces PHunter, which is a precise and efficient patch presence test tool for Android applications against code obfuscation, including identifier renaming, package flattening, control flow randomization, and dead code removal. PHunter does not rely on debug information and uses fine-grained anti-obfuscation</p>",
        "keywords": "Android Security, Library Detection, Patch Presence Test",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7977752": {
        "doi": "10.5281/zenodo.7977752",
        "author": "Lehmann, Daniel and Thalakottur, Michelle and Tip, Frank and Pradel, Michael",
        "title": "Artifact for \"That’s a Tough Call: Studying the Challenges of Call Graph Construction for WebAssembly\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7977752",
        "abstract": "<p>This artifact contains supplementary material for the paper “That’s a Tough Call: On Static Call Graph Construction for WebAssembly Binaries” (ISSTA’23).</p>",
        "keywords": "call graphs, dataset, WebAssembly",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/sola-st/wasm-call-graphs/tree/issta-2023-artifact-release"
    },
    "10.5281/zenodo.7978245": {
        "doi": "10.5281/zenodo.7978245",
        "author": "Chen, Simin and Wei, Shiyi and Liu, Cong and Yang, Wei",
        "title": "Reproducation package for “DyCL: Dynamic Neural Network Compilation Via Program Rewriting and Graph Optimization”",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7978245",
        "abstract": "<p>This artifact contains three parts: (1) the dynamic neural networks used in our evaluation, (2) the core implementation of DyCL, and (3) the script to automatically launch the experiments and test the compilation results.</p>",
        "keywords": "Deep Learning Compiler, Dynamic Neural Networks, Static analysis.",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7978251": {
        "doi": "10.5281/zenodo.7978251",
        "author": "Even-Mendoza, Karine and Sharma, Arindam and Donaldson, Alastair F. and Cadar, Cristian",
        "title": "Artifact of GrayC: Greybox Fuzzing of Compilers and Analysers for C",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7978251",
        "abstract": "<p>This is the official artifact of the paper: GrayC: Greybox Fuzzing of Compilers and Analysers for C (ISSTA 2023).</p>\n<p>The artifacts contains the data for bug reports and raw data for the whole paper, including for the evaluation in section 4 and section 5. In addition, we included all the sets generated with the tools in the evaluation in our artifact as 10-sets-of-test-programs-tool-name.zip.</p>\n<p>Note 1: This work was supported by EPSRC (EP/R011605/1 and EP/R006865/1). Note 2: The first two authors both contributed equally to this research. Note 3: Karine Even-Mendoza: A major part of this work was done as an Imperial College London employee.</p>",
        "keywords": "Artifact, Bug Reports, Clang, code mutators, compilers, Frama-C, Fuzzing, GCC, GrayC, Greybox fuzzing, LibFuzzer, LLVM, MSVC, program analysers",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/srg-imperial/GrayC"
    },
    "10.5281/zenodo.7978328": {
        "doi": "10.5281/zenodo.7978328",
        "author": "Gharachorlu, Golnaz and Sumner, Nick",
        "title": "Reproduction tool and data for article \"Type Batched Program Reduction\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7978328",
        "abstract": "<p>This artifact contains both the data and the underlying implementation for the paper “Type Batched Program Reduction”. The implementation of Type Batched Reducer, a tool for simplifying programs of multiple programming languages while preserving a property of interest is in C++. The artifact also includes the training data required to train logistic regression models used in this reducer. The included benchmark is from “Perses: Syntax-Guided Program Reduction” paper.</p>",
        "keywords": "Delta Debugging, Machine Learning, Program Reduction",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7978488": {
        "doi": "10.5281/zenodo.7978488",
        "author": "Pang, Chengbin and Zhang, Tiantai and Xu, Xuelan and Wang, Linzhang and Mao, Bing",
        "title": "OCFI: Make Function Entry Identification Hard Again",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7978488",
        "abstract": "<p>We introduce OCFI, a modified LLVM/Clang compiler that offers the capability to obfuscate the .eh_frame section of compiled binaries. This obfuscation process aims to make it more challenging for disassemblers to identify function entries.</p>\n<p>By leveraging OCFI, C/C++ projects can be compiled with the obfuscation feature enabled. This means that the resulting binaries will have their .eh_frame sections modified, enhancing their resistance to reverse engineering attempts and making the analysis of function boundaries more difficult for disassemblers. The application of OCFI as a compiler tool provides an additional layer of security for C/C++ projects, safeguarding sensitive code and intellectual property from potential attackers or unauthorized access.</p>",
        "keywords": "binary disassembly, function entry detection, obfuscation",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7978507": {
        "doi": "10.5281/zenodo.7978507",
        "author": "Jayasuriya, Dhanushka and Terragni, Valerio and Dietrich, Jens and Ou, Samuel and Blincoe, Kelly",
        "title": "Replication Package for Article \"Understanding Breaking Changes in the Wild\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7978507",
        "abstract": "<p>This Artifact comprises the data used for the research and the scripts utilized to extract the data from GitHub repositories. We have included the dataset we used for the manual analysis and the codes used for the manual analysis process. Additionally we included the transitive data we have extracted for these repositories. The README.md file includes the steps you need to create the python environment to execute the queries you need to execute on the dataset to extract the answers for each research question.</p>",
        "keywords": "breaking changes, software dependency, software evolution, software libraries",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7978718": {
        "doi": "10.5281/zenodo.7978718",
        "author": "Kedia, Piyus and Purandare, Rahul and Agarwal, Udit and Rishabh",
        "title": "CGuard: Scalable and Precise Object Bounds Protection for C",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7978718",
        "abstract": "<p>A tool to detect spatial safety bugs in C programs.</p>",
        "keywords": "Buffer overflow, Spatial safety",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7978808": {
        "doi": "10.5281/zenodo.7978808",
        "author": "Xu, Xiangzhe and Feng, Shiwei and Ye, Yapeng and Shen, Guangyu and Su, Zian and Cheng, Siyuan and Tao, Guanhong and Shi, Qingkai and Zhang, Zhuo and Zhang, Xiangyu",
        "title": "Artifact for DiEmph",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7978808",
        "abstract": "<p>This repo contains the artifact for paper “Improving Binary Code Similarity Transformer Models by Semantics-driven Instruction Deemphasis” published on ISSTA’23. Please refer to <code>README.md</code> for details.</p>",
        "keywords": "Binary Similarity Analysis, Program Analysis, Transformer",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7980923": {
        "doi": "10.5281/zenodo.7980923",
        "author": "Deng, Yinlin and Xia, Chunqiu Steven and Peng, Haoran and Yang, Chenyuan and Zhang, Lingming",
        "title": "ISSTA2023 Artifact for \"Large Language Models Are Zero-Shot Fuzzers: Fuzzing Deep-Learning Libraries via Large Language Models\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7980923",
        "abstract": "<p>The artifact provides the source code of the ISSTA’2023 paper “Large Language Models Are Zero-Shot Fuzzers: Fuzzing Deep-Learning Libraries via Large Language Models”. Specifically, it contains TitanFuzz’s implementation for fuzzing PyTorch and TensorFlow.</p>",
        "keywords": "Fuzz Testing, Large Language Model, Test Generation",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7980997": {
        "doi": "10.5281/zenodo.7980997",
        "author": "Yu, Boxi and Zhong, Zhiqing and Li, Jiaqi and Yang, Yixing and He, Shilin and He, Pinjia",
        "title": "Reproduction Package for Article \"ROME: Testing Image Captioning Systems via Recursive Object Melting\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7980997",
        "abstract": "<p>This artifact is the package for ROME along with the video tutorials for reproducing the experiments, which includes the following content: Content Description Video tutorials In Tutorial_1, we demonstrate how to perform object selection, image mutation, and fine-tuning.</p>",
        "keywords": "AI software, image captioning, Metamorphic testing, testing",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7981577": {
        "doi": "10.5281/zenodo.7981577",
        "author": "Tan, Tian and Li, Yue",
        "title": "Tai-e: A Developer-Friendly Static Analysis Framework for Java by Harnessing the Good Designs of Classics (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7981577",
        "abstract": "<p>This artifact is provided to reproduce the results of RQ4 in Section 6 of our companion paper, i.e., the data in: Table 1 (for pointer analysis) and Table 2 (for data flow analysis).</p>",
        "keywords": "Java, static analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8004172": {
        "doi": "10.5281/zenodo.8004172",
        "author": "Zhang, Yiyu and Liu, Tianyi and Sun, Zewen and Chen, Zhe and Li, Xuandong and Zuo, Zhiqiang",
        "title": "Artifact Package for Article 'Catamaran: Low-Overhead Memory Safety Enforcement via Parallel Acceleration'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8004172",
        "abstract": "<p>This artifact contains the main implementation of Catamaran, as well as the scripts used for running it. This artifact claims the availability and the functionality of Catamaran.</p>",
        "keywords": "memory safety enforcement, parallel acceleration, program analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8006662": {
        "doi": "10.5281/zenodo.8006662",
        "author": "Vikram, Vasudev and Laybourn, Isabella and Li, Ao and Nair, Nicole and OBrien, Kelton and Sanna, Rafaello and Padhye, Rohan",
        "title": "Mu2: Guiding Greybox Fuzzing with Mutation Testing (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8006662",
        "abstract": "<p>This artifact accompanies the paper “Guiding Greybox Fuzzing with Mutation Testing”, published at ISSTA 2023. It contains a replication package for experiments and evaluation data used to generate the figures in the paper. The evaluation data contains logs of the fuzzing experiments described in the paper.</p>",
        "keywords": "fuzz testing, mutation testing, test generation",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8021593": {
        "doi": "10.5281/zenodo.8021593",
        "author": "Zhang, Zhaoxu and Winn, Robert and Zhao, Yu and Yu, Tingting and Halfond, William G.J.",
        "title": "Reproduction Package for Article \"Automatically Reproducing Android Bug Reports using Natural Language Processing and Reinforcement Learning\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8021593",
        "abstract": "<p>This is the artifact of our work “Automatically Reproducing Android Bug Reports using Natural Language Processing and Reinforcement Learning” accepted at The ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA) 2023. This artifact has the source code of the research prototype, evaluation data and results of the paper. We provided detailed instructions for running our tool in the REAEME file.</p>",
        "keywords": "Android Bug Report Reproduction",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8023076": {
        "doi": "10.5281/zenodo.8023076",
        "author": "Eisele, Max and Ebert, Daniel and Huth, Christopher and Zeller, Andreas",
        "title": "Replication Package for 'Fuzzing Embedded Systems using Debugger Interfaces'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8023076",
        "abstract": "<p>The idea of GDBFuzz is to leverage hardware breakpoints from microcontrollers as feedback for coverage-guided fuzzing. Therefore, GDB is used as a generic interface to enable broad applicability. For binary analysis of the firmware, Ghidra is used. The code contains a benchmark setup for evaluating the method. Additionally, example firmware files are included. The replication package allows the users to reproduce and extend the results reported in the paper.</p>",
        "keywords": "embedded fuzzing, embedded systems, fuzzing, gdb, ghidra, hardware breakpoint",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/boschresearch/gdbfuzz/tree/artifact_evaluation_v2"
    },
    "10.5281/zenodo.8127914": {
        "doi": "10.5281/zenodo.8127914",
        "author": "Kim, YoungJae and Han, Seungheon and Khamit, Askar Yeltayuly and Yi, Jooyong",
        "title": "SimAPR framework used in \"Automated Program Repair from Fuzzing Perspective\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8127914",
        "abstract": "<p>This artifact contains the SimAPR framework designed to simulate the existing and new patch-scheduling algorithms of APR tools. SimAPR enables users to easily assess the efficiency of a patch-scheduling algorithm under study without the need to run APR tools. Currently, SimAPR supports six APR tools: AlphaRepair, Recoder, TBar, Avatar, FixMiner, and kPar. Furthermore, SimAPR can be expanded to include additional APR tools.</p>\n<p>SimAPR also supports the new patch-scheduling algorithm named Casino, as presented in the paper titled “Automated Program Repair from Fuzzing Perspective.”</p>",
        "keywords": "Automated Program Repair, Fuzzing, Multi-Armed Bandit, Patch Scheduling",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/UNIST-LOFT/SimAPR/tree/ISSTA2023"
    },
    "10.5281/zenodo.8128613": {
        "doi": "10.5281/zenodo.8128613",
        "author": "Pan, Yu and Xu, Zhichao and Li, Levi Taiji and Yang, Yunhe and Zhang, Mu",
        "title": "Reproduction package for article \"Automated Generation of Security-Centric Descriptions for Smart Contract Bytecode\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8128613",
        "abstract": "<p>Reproduce experiments in paper “Automated Generation of Security-Centric Descriptions for Smart Contract Bytecode”</p>",
        "keywords": "decentralized apps, natural language generation, program analysis, smart contracts, textual description",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8135199": {
        "doi": "10.5281/zenodo.8135199",
        "author": "Chen, Yang and Yildiz, Alperen and Marinov, Darko and Jabbarvand, Reyhaneh",
        "title": "Reproduction package of \"Transforming Test Suites Into Croissants\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8135199",
        "abstract": "<p>This package includes all data and code to reproduce the results for paper “Transforming Test Suites Into Croissants”.</p>",
        "keywords": "Fault Injection, Mutation Testing, Software Testing, Test Flakiness",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7976405": {
        "doi": "10.5281/zenodo.7976405",
        "author": "Ye, Mingxi and Nan, Yuhong and Zheng, Zibin and Wu, Dongpeng and Li, Huizhong",
        "title": "IcyChecker-Artifact: Detecting State Inconsistency Bugs in DApps via On-Chain Transaction Replay and Fuzzing",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7976405",
        "abstract": "<p>This repository contains a preliminary version of IcyChecker Artifact, a state inconsistency bug checker for Ethereum smart contracts.</p>",
        "keywords": "Decentralized Application, Fuzz Testing, Smart Contract, Vulnerability detection",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7976926": {
        "doi": "10.5281/zenodo.7976926",
        "author": "Wu, Shuohan and Li, Jianfeng and Zhou, Hao and Fang, Yongsheng and Zhao, Kaifa and Wang, Haoyu and Qian, Chenxiong and Luo, Xiapu",
        "title": "cydios: a model-based testing framework for ios apps",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7976926",
        "abstract": "<p>This is the artifacts for paper cydios: a model-based testing framework for ios apps.</p>",
        "keywords": "iOS, UI Testing",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7979021": {
        "doi": "10.5281/zenodo.7979021",
        "author": "Hu, Jiajun and Wei, Lili and Liu, Yepang and Cheung, Shing-Chi",
        "title": "Artifact for wTest",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7979021",
        "abstract": "<p>This is the artifact for wTest</p>",
        "keywords": "Android, Testing, WebView",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7981467": {
        "doi": "10.5281/zenodo.7981467",
        "author": "Kim, Myeongsoo and Corradini, Davide and Sinha, Saurabh and Orso, Alessandro and Pasqua, Michele and Tzoref-Brill, Rachel and Ceccato, Mariano",
        "title": "Artifact for \"Enhancing REST API Testing with NLP Techniques\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7981467",
        "abstract": "<p>This artifact includes the NLP2REST tool and the experimental data necessary for both replicating and extending our work. For the most recent version of the tool, we recommend visiting the following link: https://github.com/codingsoo/nlp2rest.</p>",
        "keywords": "Automated REST API Testing, Natural Language Processing for Testing, OpenAPI Specification Analysis",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/codingsoo/nlp2rest/tree/v0.4"
    },
    "10.5281/zenodo.7907007": {
        "doi": "10.5281/zenodo.7907007",
        "author": "Zhou, Yuhao and Song, Wei",
        "title": "Reproduction Package for Article \"DDLDroid: Efficiently Detecting Data Loss Issues in Android Apps\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7907007",
        "abstract": "<p>DDLDroid is a static analyzer for detecting data loss issues in Android apps during activity restart or app relaunch. It is bootstrapped by a saving-restoring bipartite graph which correlates variables that need saving to those that need restoring according to their carrier widgets, and is based on the analysis of saving and restoring data flows. It reports data loss issues once missed or broken data flows are identified.</p>\n<p>Based on a set of available tools (e.g., Soot, FlowDroid, ApkTool), DDLDroid is implemented in Java and has three analyzers: pretreatment analyzer, static analyzer, and data loss reporter.</p>",
        "keywords": "Android apps, bug detection, data flow analysis, data loss",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7978326": {
        "doi": "10.5281/zenodo.7978326",
        "author": "Scott, Ryan G. and Dodds, Mike and Perez, Ivan and Goodloe, Alwyn E. and Dockins, Robert",
        "title": "Artifact for \"Trustworthy Runtime Verification via Bisimulation (Experience Report)\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7978326",
        "abstract": "<p>This contains two files:</p>\n<ul>\n<li><p>copilot-verifier-artifact-vm-<md5sum>.tgz: A virtual machine containing the artifact for the ICFP 2023 paper Trustworthy Runtime Verification via Bisimulation (Experience Report).</md5sum></p></li>\n<li><p>copilot-verifier-artifact-source-<md5sum>.tgz: The source code for the artifact itself. (The virtual machine above comes with this pre-installed.)</md5sum></p></li>\n</ul>",
        "keywords": "assurance, formal methods, Runtime verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7986916": {
        "doi": "10.5281/zenodo.7986916",
        "author": "Keidel, Sven and Erdweg, Sebastian and Homb\\\"{u",
        "title": "Artifact for paper \"Combinator-Based Fixpoint Algorithms for Big-Step Abstract Interpreters\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7986916",
        "abstract": "<p>The artifact contains the code of the fixpoint combinators and the case studies.</p>",
        "keywords": "Big-Step Abstract Interpretation, Fixpoint Algorithm, Static Analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7988049": {
        "doi": "10.5281/zenodo.7988049",
        "author": "Goldstein, Harrison and Frohlich, Samantha and Wang, Meng and Pierce, Benjamin C.",
        "title": "Reflecting on Random Generation: Reflective Generators Development and Experiments",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7988049",
        "abstract": "<p>The code and virtual machine necessary to replicate the results from the paper Reflecting on Random Generation to be published at ICFP 2023.</p>",
        "keywords": "bidirectional programming, property-based testing, random generation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7988150": {
        "doi": "10.5281/zenodo.7988150",
        "author": "Lorenzen, Anton and Leijen, Daan and Swierstra, Wouter",
        "title": "FP^2: Fully in-Place Functional Programming Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7988150",
        "abstract": "<p>This is a QEMU VM image containing benchmarks and the compiler for fully in-place programming.</p>\n<p>Start the <code>disk.qcow</code> image in QEMU using <code>./start.sh</code> or <code>start.bat</code>. Log in as <code>artifact</code> with the password <code>password</code>. Change to the test directory:</p>\n<blockquote>\n<p>cd koka/test/fip</p>\n</blockquote>\n<p>See the README.md in that folder for further information.</p>",
        "keywords": "fip, fully in-place programming, koka, perceus, reuse",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7990832": {
        "doi": "10.5281/zenodo.7990832",
        "author": "Matsuda, Kazutaka and Frohlich, Samantha and Wang, Meng and Wu, Nicolas",
        "title": "Embedding by Unembedding Code Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7990832",
        "abstract": "<p>This is a proof-of-concept implementation of embedding-by-unembedding, with a number of application examples.</p>",
        "keywords": "EDSL, functional programming, higher-order abstract syntax",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7992509": {
        "doi": "10.5281/zenodo.7992509",
        "author": "Bourgeat, Thomas and Clester, Ian and Erbsen, Andres and Gruetter, Samuel and Singh, Pratap and Wright, Andy and Chlipala, Adam",
        "title": "A Haskell-based RISC-V formal semantics and some of its use cases",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7992509",
        "abstract": "<p>Our paper at ICFP 2023 describes the formal semantics we built for the RISC-V instruction-set family. This artifact contains that semantics as well as the applications of it that we summarize in the paper. Others may wish to use this semantics as documentation or for testing or formal verification (of different styles).</p>",
        "keywords": "formal semantics, instruction sets, type classes",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7993545": {
        "doi": "10.5281/zenodo.7993545",
        "author": "Sieczkowski, Filip and Pyzik, Mateusz and Biernacki, Dariusz",
        "title": "A General Fine-Grained Reduction Theory for Effect Handlers: Formalisation",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7993545",
        "abstract": "<p>The artifact consists of a Coq formalisation and an OCaml implementation associated with the paper “A General Fine-Grained Reduction Theory for Effect Handlers”, conditionally accepted to ICFP 2023. The main part of the artifact is the Coq formalisation of the reduction theory developed in the paper, and of most of the metatheoretical results. In addition, an OCaml implementation of the (semi-)normalization procedure developed in the paper is provided.</p>",
        "keywords": "algebraic effect, delimited continuation, formalisation, normalization-by-evaluation, reduction",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7993904": {
        "doi": "10.5281/zenodo.7993904",
        "author": "Jacobs, Jules and Hinrichsen, Jonas Kastberg and Krebbers, Robbert",
        "title": "Dependent Session Protocols in Separation Logic from First Principles (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7993904",
        "abstract": "<p>Artifact for the paper “Dependent Session Protocols in Separation Logic from First Principles”. See README.pdf for details.</p>",
        "keywords": "concurrency, message passing, separation logic, session types, verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8083298": {
        "doi": "10.5281/zenodo.8083298",
        "author": "Varshosaz, Mahsa and Ghaffari, Mohsen and Johnsen, Einar Broch and W\\k{a",
        "title": "Formal Specification and Testing for Reinforcement Learning (Supplementary Material)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8083298",
        "abstract": "<p>This is the supplementary material for our paper on formal specification and testing for reinforcement learning, accepted at the ACM SIGPLAN International Conference on Functional Programming (ICFP) 2023. It contains a virtual machine image to facilitate reproducing the experiment results and the source for the artifact.</p>",
        "keywords": "reinforcement learning, Scala, specification-based testing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8097872": {
        "doi": "10.5281/zenodo.8097872",
        "author": "Xie, Ningning and White, Leo and Nicole, Olivier and Yallop, Jeremy",
        "title": "MacoCaml: Staging Composable and Compilable Macros (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8097872",
        "abstract": "<p>Artifact to accompany the ICFP’23 paper “MacoCaml: Staging Composable and Compilable Macros”.</p>",
        "keywords": "Compile-time code generation, Macros, OCaml, Staging",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8099902": {
        "doi": "10.5281/zenodo.8099902",
        "author": "Baudon, Tha\\\"{\\i",
        "title": "Ribbit Compiler and Benchmarks for Article `Bit-Stealing Made Legal'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8099902",
        "abstract": "<p>Ribbit is a pattern matching compiler for custom memory layouts of algebraic data types. This artifact contains our ribbit compiler, implemented in OCaml and using LLVM as a backend, along with several example programs, including the ones used as benchmarks in the article.</p>",
        "keywords": "Algebraic Data Types, Compilation, Data Layouts, Pattern Matching",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8116889": {
        "doi": "10.5281/zenodo.8116889",
        "author": "Hubers, Alex and Morris, J. Garrett",
        "title": "Generic Programming with Extensible Data Types; Or, Making Ad Hoc Extensible Data Types Less Ad Hoc---Artifact.",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8116889",
        "abstract": "<p>We provide an intrinsically-typed mechanization of System Rω with a shallow embedding / denotation into Agda.</p>",
        "keywords": "agda, denotational semantics, extensible data types, intrinsic typing, language mechanization, row polymorphism, row types",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8119348": {
        "doi": "10.5281/zenodo.8119348",
        "author": "Abel, Andreas and Danielsson, Nils Anders and Eriksson, Oskar",
        "title": "An Agda Formalization of a Graded Modal Type Theory with a Universe and Erasure",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8119348",
        "abstract": "<p>The Agda formalization accompanying the paper “A Graded Modal Dependent Type Theory with a Universe and Erasure, Formalized”.</p>",
        "keywords": "dependent types, erasure, formalization, graded modal type theory, linearity, modalities",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8121688": {
        "doi": "10.5281/zenodo.8121688",
        "author": "Gondelman, L\\'{e",
        "title": "Companion artifact for the paper \"Verifying Reliable Network Components in a Distributed Separation Logic with Dependent Separation Protocols\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8121688",
        "abstract": "<p>Virtual Machine image (file base-image.tar.xz) containing the artifact submitted as part of the ICFP 2023 evaluation process. Our paper is entitled “Verifying Reliable Network Components in a Distributed Separation Logic with Dependent Separation Protocols”.</p>\n<p>The Virtual Machine contains the Coq source files of the Aneris project, the source code of the OCaml to Aneris-lang compiler, as well as several examples verified with the proposed framework.</p>\n<p>We also include a .zip file (source_icfp.zip) containing the source files for the artifact’s dependencies, namely the Aneris project and the OCaml2Lang compiler.</p>",
        "keywords": "Aneris, causal consistency, Distributed systems, higher-order logic, Iris, OCaml, separation logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8124116": {
        "doi": "10.5281/zenodo.8124116",
        "author": "Bahr, Patrick and Hutton, Graham",
        "title": "Supplementary Material for \"Calculating Compilers for Concurrency\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8124116",
        "abstract": "<p>This artifact includes Agda formalisations of all calculations in the paper “Calculating Compilers for Concurrency”.</p>",
        "keywords": "Agda, choice trees, codensity monad, compiler calculation, concurrency",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8126809": {
        "doi": "10.5281/zenodo.8126809",
        "author": "Fowler, Simon and Attard, Duncan Paul and Sowul, Franciszek and Gay, Simon J. and Trinder, Phil",
        "title": "Artifact for \"Special Delivery: Programming with Mailbox Types\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8126809",
        "abstract": "<p>This artifact contains the typechecker for the Pat language, following the algorithmic type system described in the paper.</p>",
        "keywords": "actor languages, concurrent programming languages, functional programming, mailbox types",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8139133": {
        "doi": "10.5281/zenodo.8139133",
        "author": "Lutze, Matthew and Madsen, Magnus and Schuster, Philipp and Brachth\\\"{a",
        "title": "With or Without You: Programming with Effect Exclusion (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8139133",
        "abstract": "<p>This artifact contains the source code for the Flix compiler, modified to support effect exclusion, as detailed in the paper. The modifications include the addition of the without expression for excluding effects, and a change to the effect system to support the described Boolean set-based effects.</p>\n<p>In addition, it contains the 59 case studies: Code fragments from various open source repositories, where comments indicate a need for effect exclusion. For each fragment, a corresponding Flix code fragment enforces the effect exclusion through a signature or use of the without construct.</p>\n<p>The artifact also contains two working examples of effect exclusion in realistic applications: a small GUI library and application demonstrating its use, and an eventbus library with a accompanying program.</p>\n<p>These elements are all packaged in a virtual machine containing a Visual Studio Code installation with a Flix extension to support standard IDE features, allowing the Flix code to be inspected, modified, and run.</p>",
        "keywords": "effect exclusion, polymorphic types and effects, without construct",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8147256": {
        "doi": "10.5281/zenodo.8147256",
        "author": "Wehr, Stefan",
        "title": "Source code for the article \"A Software Architecture Based on Coarse-Grained Self-Adjusting Computations\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8147256",
        "abstract": "<p>This repository contains the code of a framework for coarse-grained self-adjusting computations in Haskell. The framework has been extracted from a commercial software product developed by medilyse GmbH, Freiburg, Germany.</p>\n<p>The repository also contains two demo applications using the framework.</p>",
        "keywords": "functional reactive programming, Haskell, pull, push, self-adjusting computations, software architecture, source code",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/skogsbaer/computations/tree/v2023-07-14"
    },
    "10.5281/zenodo.8160553": {
        "doi": "10.5281/zenodo.8160553",
        "author": "Shi, Jessica and Keles, Alperen and Goldstein, Harrison and Pierce, Benjamin C. and Lampropoulos, Leonidas",
        "title": "Artifact for Etna: An Evaluation Platform for Property-Based Testing",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8160553",
        "abstract": "<p>Our artifact contains the source code for Etna, a platform for empirical evaluation and comparison of property-based testing techniques. This includes code in Python, Haskell, and Coq. The README provides detailed instructions on how to reproduce the experiments in the paper, and the VM image comes pre-installed with the required dependencies.</p>",
        "keywords": "empirical evaluation, mutation testing, property-based testing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8161214": {
        "doi": "10.5281/zenodo.8161214",
        "author": "Shen, Gan and Kashiwa, Shun and Kuper, Lindsey",
        "title": "HasChor",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8161214",
        "abstract": "<p>A library for choreographic programming in Haskell.</p>",
        "keywords": "Choreographic programming, freer monads",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8161357": {
        "doi": "10.5281/zenodo.8161357",
        "author": "Ho, Son and Fromherz, Aymeric and Protzenko, Jonathan",
        "title": "Artifact for ICFP 2023 paper: Modularity, Code Specialization, and Zero-Cost Abstractions for Program Verification",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8161357",
        "abstract": "<p>This is the artifact for the ICFP 2023 submission: Modularity, Code Specialization, and Zero-Cost Abstractions for Program Verification.</p>\n<p>=====</p>\n<p>For all the successes in verifying low-level, efficient, security-critical code, little has been said or studied about the structure, architecture and engineering of such large-scale proof developments. We present the design, implementation and evaluation of a set of language-based techniques that allow the programmer to modularly write and prove code at a high level of abstraction, while retaining control over the compilation process and producing high-quality, zero-overhead, low-level code suitable for integration into mainstream software.</p>\n<p>We implement our techniques within the F* proof assistant, and specifically its shallowly-embedded Low* toolchain that compiles to C. Through our evaluation, we establish that our techniques were critical in scaling the popular HACL* library past 100,000 lines of verified source code, and brought about significant gains in proof engineer productivity. The exposition of our methodology converges on one final, novel case study: the streaming API, a finicky API that has historically caused many bugs in high-profile software. Using our approach, we manage to capture the streaming semantics in a generic way, and apply it ``for free’’ to over a dozen use-cases. Six of those have made it into the reference implementation of the Python programming language, replacing the previous CVE-ridden code.</p>",
        "keywords": "Cryptographic Primitives, Proof Engineering",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8162084": {
        "doi": "10.5281/zenodo.8162084",
        "author": "Redmond, Patrick and Kuper, Lindsey",
        "title": "An Exceptional Actor System (Functional Pearl): Artifact",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8162084",
        "abstract": "<p>This project explores the use of asynchronous exceptions as an inter-thread communication mechanism in GHC Haskell.</p>",
        "keywords": "actor framework, asynchronous exceptions, runtime system",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8162198": {
        "doi": "10.5281/zenodo.8162198",
        "author": "Elazar Mittelman, Segev and Resnick, Aviel and Perez, Ivan and Goodloe, Alwyn E. and Lampropoulos, Leonidas",
        "title": "Artifact for Paper: Don't Go Down the Rabbit Hole: Reprioritizing Enumeration for Property-Based Testing",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8162198",
        "abstract": "<p>Artifact for Paper: Don’t Go Down the Rabbit Hole: Reprioritizing Enumeration for Property-Based Testing</p>",
        "keywords": "combinatorial testing, enumeration, functional programming, generation, property-based testing",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8164971": {
        "doi": "10.5281/zenodo.8164971",
        "author": "Thiemann, Peter",
        "title": "Artifact for the article 'Intrinsically Typed Sessions with Callbacks'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8164971",
        "abstract": "<p>This is an artifact accompanying a paper accepted at the International Conference on Functional Programming, ICFP 2023. It contains a qemu image along with instructions how to run the material inside. It also contains a source code distribution. The artifact contains a README that explains use and installation.</p>",
        "keywords": "Agda, dependent types, domain specific languages, session types",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8238945": {
        "doi": "10.5281/zenodo.8238945",
        "author": "Sarkar, Abhiroop and Krook, Robert and Russo, Alejandro and Claessen, Koen",
        "title": "Source code for HasTEE: Programming Trusted Execution Environments with Haskell",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8238945",
        "abstract": "<p>This artifact contains the source code for the HasTEE DSL written in Haskell.</p>",
        "keywords": "enclave, haskell, intel sgx, tee",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8197652": {
        "doi": "10.5281/zenodo.8197652",
        "author": "Xu, Zhenyang and Tian, Yongqiang and Zhang, Mengxiao and Zhao, Gaosen and Jiang, Yu and Sun, Chengnian",
        "title": "Artifact for \"Pushing the Limit of 1-Minimality of Language-Agnostic Program Reduction\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8197652",
        "abstract": "<p>This artifact contains the source code, benchmarks, scripts, and documentation for reproduce the evaluation results described in the paper “Pushing the Limit of 1-Minimality of Language-Agnostic Program Reduction” accepted at OOPSLA 2023.</p>",
        "keywords": "Automated Debugging, Program Reduction, Test Input Minimization",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7824776": {
        "doi": "10.5281/zenodo.7824776",
        "author": "Wang, Shangwen and Lin, Bo and Sun, Zhensu and Wen, Ming and Liu, Yepang and Lei, Yan and Mao, Xiaoguang",
        "title": "Reproduction Package of &nbsp;the paper \"Two Birds with One Stone: Boosting Code Generation and Code Search via a Generative Adversarial Network\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7824776",
        "abstract": "<p>We have released the source code and dataset of our study.</p>",
        "keywords": "Code Generation, Code Search, Generative Adversarial Network",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8124395": {
        "doi": "10.5281/zenodo.8124395",
        "author": "Thy, Sewen and Costea, Andreea and Gopinathan, Kiran and Sergey, Ilya",
        "title": "Reproduction Artefact for Article 'Adventure of a Lifetime: Extract Method Refactoring for Rust'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8124395",
        "abstract": "<p>This release snapshots the functionality of the submitted artefact for the tool Rusty Extraction Maestro (REM) described in the OOPSLA 23 paper “Adventure of a Lifetime: Extract Method Refactoring for Rust”:</p>\n<ul>\n<li><p>Docker file with reproducible build environment</p></li>\n<li><p>Readme with getting started and step-by-step instructions</p></li>\n<li><p>Source code and build files for REM</p></li>\n<li><p>40 experiment programs</p></li>\n</ul>",
        "keywords": "Extract Method, IDE, Language Tooling, Program Repair, Refactoring, Rust",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8140951": {
        "doi": "10.5281/zenodo.8140951",
        "author": "Pal, Anjali and Saiki, Brett and Tjoa, Ryan and Richey, Cynthia and Zhu, Amy and Flatt, Oliver and Willsey, Max and Tatlock, Zachary and Nandi, Chandrakana",
        "title": "Reproduction package for \"Equality Saturation Theory Exploration \\`{a",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8140951",
        "abstract": "<p>This is the software package that contains Enumo, a new domain-specific language presented in our paper “Equality Saturation Theory Exploration \\`{a",
        "keywords": "equality saturation, program synthesis, Rewrite rules",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8144182": {
        "doi": "10.5281/zenodo.8144182",
        "author": "Chen, Qiaochu and Banerjee, Arko and Demiralp, \\c{C",
        "title": "Reproduction Package for Article 'Data Extraction via Semantic Regular Expression Synthesis'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8144182",
        "abstract": "<p>This repository contains the code artifact for evaluation section of the paper “Data Extraction via Semantic Regular Expression Synthesis”. The included README file contains further instructions on how to reproduce the evaluations.</p>",
        "keywords": "Programming by examples, regular expressions",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8146987": {
        "doi": "10.5281/zenodo.8146987",
        "author": "Schr\\\"{o",
        "title": "Reproduction Package for Article 'A Deductive Verification Infrastructure for Probabilistic Programs'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8146987",
        "abstract": "<p>Contained within the artifact: * Our tool <em>Caesar</em>, which parses HeyVL programs and tries to verify them. Caesar constitutes our main implementation contribution and is the focus of this artifact. * A script to reproduce our benchmarks (Table 2). * We also include our prototypical tool <em>pgcl2heyvl</em>, which takes pGCL programs with annotations and produces a HeyVL file that encodes the required proof obligations. * Our full source code is contained within the artifact as well.</p>",
        "keywords": "automated reasoning, deductive verification, probabilistic programs, quantitative verification, real-valued logics, weakest preexpectations",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8148784": {
        "doi": "10.5281/zenodo.8148784",
        "author": "Greenman, Ben and Felleisen, Matthias and Dimoulas, Christos",
        "title": "Artifact: How Profilers Can Help Navigate Type Migration",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8148784",
        "abstract": "<h4 id=\"contents\">Contents:</h4>\n<ul>\n<li><code>artifact.tar.gz</code> code for reproducing our rational programmer experiment</li>\n<li><code>benchmarks.tar.gz</code> GTP Benchmarks without and with modifications</li>\n<li><code>cloudlab.tar.gz</code> for measuring performance on CloudLab</li>\n<li><code>figure-data.tar.gz</code> figures and summarized data for the paper</li>\n<li><code>rational-trails.tar.gz</code> output from the rational programmer</li>\n<li><code>raw-data.tar.gz</code> running times, boundary profile output, and statistical profile output for all benchmarks</li>\n</ul>",
        "keywords": "gradual typing, migratory typing, profiling, rational programmer",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8149701": {
        "doi": "10.5281/zenodo.8149701",
        "author": "Cao, Huanqi and Tang, Shizhi and Zhu, Qianchao and Yu, Bowen and Chen, Wenguang",
        "title": "Artifact of Mat2Stencil: A Modular Matrix-Based DSL for Explicit and Implicit Matrix-Free PDE Solvers on Structured Grid",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8149701",
        "abstract": "<p>The artifact submitted for evaluation of OOPSLA 23 conditionally accepted paper “Mat2Stencil: A Modular Matrix-Based DSL for Explicit and Implicit Matrix-Free PDE Solvers on Structured Grid”.</p>",
        "keywords": "compiler, finite difference method, multi-stage programming, omain-specific language, performance optimization, polyhedral compilation, stencil, structured grid",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8153210": {
        "doi": "10.5281/zenodo.8153210",
        "author": "Mururu, Girish and Khan, Sharjeel and Chatterjee, Bodhisatwa and Chen, Chao and Porter, Chris and Gavrilovska, Ada and Pande, Santosh",
        "title": "Artifact for Paper \"Beacons: An End-to-End Compiler Framework for Predicting and Utilizing Dynamic Loop Characteristics\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8153210",
        "abstract": "<p>This artifact captures the source code of our ``beacons framework,’’ along with the instructions and benchmarks for building the software and reproducing the main results of our paper.</p>\n<p>The beacons framework is a collection of several components, including: 1. Compiler passes 2. Machine learning scripts 3. Runtime library 4. Scheduler The goal is to achieve efficient workload scheduling by designing a cooperative compiler-runtime framework which leverages novel loop-based compiler analysis and learned models for resource allocation.</p>",
        "keywords": "Compiler-Guided Scheduling, Loop Memory Analysis, Loop Timing Analysis, Loop Trip Count Analysis, ML-based Static Analysis, Proactive Scheduling, Throughput Scheduling",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8200210": {
        "doi": "10.5281/zenodo.8200210",
        "author": "Feser, Jack and Dillig, I\\c{s",
        "title": "Inductive Program Synthesis Guided by Observational Program Similarity (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8200210",
        "abstract": "<p>Artifact for “Inductive Program Synthesis Guided by Observational Program Similarity”.</p>",
        "keywords": "program synthesis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8202373": {
        "doi": "10.5281/zenodo.8202373",
        "author": "Cai, Zhuo and Farokhnia, Soroush and Goharshady, Amir Kafshdar and Hitarth, S.",
        "title": "Artifact-Asparagus: Automated Synthesis of Parametric Gas Upper-bounds for Smart Contracts",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8202373",
        "abstract": "<p>The artifact offers code, data and a virtual machine that can reproduce the result of our paper. It can be used to estimate upper bound of gas cost for ethereum smart contract public functions.</p>\n<p>Structure of the Repository The root directory of the repository is Aspragus/ present in Github https: //github.com/zhuocai/Asparagus/. The artifact repository consists of the following: Algorithm/Code. The code of the algorithm is present in the src directory. It is written in Python3. Shell Scripts Various shell scripts that we use to run the benchmarks are in the root folder of our repository. GASTAP Dataset. We have evaluated our tool on the GASTAP dataset that can be found in our GitHub Repository in the directory dataset/gastap dataset. Each subfolder contains a solidity source code .sol file, Rule-Based-Representation .rbr file compiled using the EthIR tool, and .meta file that stores auxiliary information about RBR and the variables.</p>",
        "keywords": "Ethereum, gas",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8219447": {
        "doi": "10.5281/zenodo.8219447",
        "author": "Sahebolamri, Arash and Barrett, Langston and Moore, Scott and Micinski, Kristopher",
        "title": "Code and experiments for paper 'Bring Your Own Data Structures to Datalog'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8219447",
        "abstract": "<p>The artifact, packaged as a Docker image, contains the code for BYODS, a Datalog engine that allows custom relation-backing data structures in Datalog programs. In addition, the experiments presented in the paper ‘Bring Your Own Data Structures to Datalog’ are included in the artifact, allowing easy reproduction of experiments results. The file <code>README.MD</code> in the Docker image contains instructions for running the experiments.</p>",
        "keywords": "data structures, Datalog, program analysis, union find",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8289595": {
        "doi": "10.5281/zenodo.8289595",
        "author": "Chen, Yu-Fang and Chocholat\\'{y",
        "title": "Artifact for the OOPSLA'23 paper \"Solving String Constraints with Lengths by Stabilization\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8289595",
        "abstract": "<p>This is an artifact for the OOPSLA’23 paper “Solving String Constraints with Lengths by Stabilization”. It contains a virtual machine with Ubuntu GNU/Linux and all solvers, benchmarks, and supporting scripts to reproduce all experiments in the paper.</p>",
        "keywords": "length constraints, regular languages, SMT solving, stabilization, string constraints, word equations",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8310917": {
        "doi": "10.5281/zenodo.8310917",
        "author": "Renaux, Thierry and Van den Vonder, Sam and De Meuter, Wolfgang",
        "title": "Secure RDTs: Enforcing Access Control Policies for Offline Available JSON Data (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8310917",
        "abstract": "<p>This is an artifact associated with a paper called “Secure RDTs: Enforcing Access Control Policies for Offline Available JSON Data”. The paper associated with this artifact describes the SRDT, a secure replicated data type. To specify exactly how SRDTs work and to verify that they are secure, the paper uses a formal specification implemented in Redex, a library in the Racket language to specify executable formal semantics. The purpose of this artifact is to guide the reader on how to interact with the formal semantics, such that they can explore exactly how SRDTs work, are able to verify the claims of the paper, and are able to reproduce SRDTs for other systems.</p>",
        "keywords": "conflict-free replicated data types, racket, redex, replicated data types, security",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8312920": {
        "doi": "10.5281/zenodo.8312920",
        "author": "Conrado, Giovanna Kobus and Goharshady, Amir Kafshdar and Lam, Chun Kit",
        "title": "Artifact for The Bounded Pathwidth of Control-Flow Graphs",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8312920",
        "abstract": "<p>Artifact for the paper “The Bounded Pathwidth of Control-Flow Graphs”. It contains the tarball of sdcc, patched with path decomposition computation and code for running the benchmark in our paper. The README.pdf file contains instructions for running the benchmark and explanation of the algorithm.</p>",
        "keywords": "Control-flow Graphs, Parameterized Algorithms, Pathwidth, Treewidth",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8313104": {
        "doi": "10.5281/zenodo.8313104",
        "author": "Haas, Thomas and Maseli, Ren\\'{e",
        "title": "Static Analysis of Memory Models for SMT Encodings (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8313104",
        "abstract": "<p>This artifact allows for reproducing the results of Section 6 of the paper Static Analysis of Memory Models for SMT Encodings published OOPSLA2023.</p>",
        "keywords": "Abstract interpretation, axiomatic semantics, verification, weak memory models",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8314677": {
        "doi": "10.5281/zenodo.8314677",
        "author": "Gourdin, L\\'{e",
        "title": "Formally Verifying Optimizations with Block Simulations",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8314677",
        "abstract": "<p>The goal of this artifact is to show that the optimizations presented in our paper are effectively applied, and proved thanks to our translation validation by symbolic execution mechanism. Moreover, we demonstrate that even on large or randomly generated tests, the validation does not produce any false alarm. The artifact also provides a means of reproducing runtime benchmarks (performance in number of cycles), although this requires specific hardware.</p>",
        "keywords": "Formal verification of compiler optimizations, Symbolic Execution, The Coq proof assistant, Translation validation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8314888": {
        "doi": "10.5281/zenodo.8314888",
        "author": "Vindum, Simon Friis and Birkedal, Lars",
        "title": "Artifact for the paper \"Spirea: A Mechanized Concurrent Separation Logic for Weak Persistent Memory\" in OOPSLA23",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8314888",
        "abstract": "<p>Artifact for the paper ‘Spirea: A Mechanized Concurrent Separation Logic for Weak Persistent Memory’. The artifact contains a full mechanization of the paper. The project is also available at: https://github.com/logsem/spirea</p>",
        "keywords": "coq, iris, perennial, persistent memory",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8315298": {
        "doi": "10.5281/zenodo.8315298",
        "author": "M\\\"{u",
        "title": "Artifact of the paper 'From Capabilities to Regions: Enabling Efficient Compilation of Lexical Effect Handlers'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8315298",
        "abstract": "<p>The artifact consists of the benchmarks conducted for the evaluation of the compilation approach presented in the paper. It contains a Dockerfile which can be used to build a Docker image for a container with all necessary languages installed. The benchmarks can hence be run inside this container.</p>",
        "keywords": "effect handlers, lift inference, region inference",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/ps-tuebingen/oopsla-2023-liftinference-artifact/tree/v1.0"
    },
    "10.5281/zenodo.8317948": {
        "doi": "10.5281/zenodo.8317948",
        "author": "Crichton, Will and Gray, Gavin and Krishnamurthi, Shriram",
        "title": "Artifact for \"A Grounded Conceptual Model for Ownership Types in Rust\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8317948",
        "abstract": "<p>These are Docker images that contain the codebase and evaluation scripts for our OOPSLA 2023 paper “A Grounded Conceptual Model for Ownership Types in Rust”.</p>",
        "keywords": "concept inventory, ownership types, program state visualization, Rust",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8318658": {
        "doi": "10.5281/zenodo.8318658",
        "author": "Madsen, Magnus and van de Pol, Jaco and Henriksen, Troels",
        "title": "Fast and Efficient Boolean Unification for Hindley-Milner-Style Type and Effect Systems",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8318658",
        "abstract": "<p>This artifact supports the paper Fast and Efficient Boolean Unification for Hindley-Milner-Style Type and Effect Systems. It reproduces the main quantifiable results of the paper, in particular the performance of six of the seven proposed strategies for Boolean unification (Strategy 1 is too slow to actually function). The artifact reproduces Figures 3-7 of the paper, as well as various other minor metrics referenced listed in the paper.</p>\n<p>See documentation in artifact itself for more information.</p>",
        "keywords": "flix, performance, type inference",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8320212": {
        "doi": "10.5281/zenodo.8320212",
        "author": "Cheeseman, Luke and Parkinson, Matthew J. and Clebsch, Sylvan and Kogias, Marios and Drossopoulou, Sophia and Chisnall, David and Wrigstad, Tobias and Li\\'{e",
        "title": "Artifact for \"When Concurrency Matters: Behaviour Oriented Concurrency\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8320212",
        "abstract": "<p>This contains the docker image to support the OOPSLA 2023 paper “When Concurrency Matters: Behavioural Oriented Concurrency”.</p>",
        "keywords": "actors, concurrent programming, parallel programming, threads and locks",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8320642": {
        "doi": "10.5281/zenodo.8320642",
        "author": "Chen, Qinlin and Zhang, Nairen and Wang, Jinpeng and Tan, Tian and Xu, Chang and Ma, Xiaoxing and Li, Yue",
        "title": "The Essence of Verilog: A Tractable and Tested Operational Semantics for Verilog (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8320642",
        "abstract": "<p>This is the artifact of the paper “The Essence of Verilog: A Tractable and Tested Operational Semantics for Verilog”. It provides a Java implementation of <span class=\"math inline\"><em>λ</em><sub><em>V</em></sub></span>, which is a core language of Verilog. The implementation includes an <span class=\"math inline\"><em>λ</em><sub><em>V</em></sub></span> interpreter based on its formal semantics and a frontend that converts Verilog code into <span class=\"math inline\"><em>λ</em><sub><em>V</em></sub></span>. Furthermore, this artifact offers an evaluation environment that allows for the reproduction of the results presented in our paper. For more detailed instructions on how to run our <span class=\"math inline\"><em>λ</em><sub><em>V</em></sub></span> implementation and reproduce the results from our paper, please refer to the README.pdf included in the artifact. You can download the artifact from the following URL: https://doi.org/10.5281/zenodo.8320642.</p>",
        "keywords": "Core Languages, Hardware Description Languages, Semantics, Verilog",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8320671": {
        "doi": "10.5281/zenodo.8320671",
        "author": "Conrado, Giovanna Kobus and Goharshady, Amir Kafshdar and Kochekov, Kerim and Tsai, Yun Chen and Zaher, Ahmed Khaled",
        "title": "Artifact for Exploiting the Sparseness of Control-flow and Call Graphs for Efficient and On-demand Algebraic Program Analysis",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8320671",
        "abstract": "<p>This artifact compares the performance of our algorithm presented in the paper vs.&nbsp;the classical approach of using Tarjan’s algorithm. It uses programs from DaCapo benchmarks as well as programs generated by Windows device drivers for the purpose of running the algorithms on them. After putting these programs into an appropriate form and finding the associated tree and depth decompositions, it feeds them to both our algorithm and Tarjan’s, and compares the performance of the two algorithms. Detailed instructions can be found inside the artifact in artifact-documentation.pdf</p>",
        "keywords": "Algebaric Program Analysis, Data-flow Analysis, Graph Sparsity, Parameterized Algorithms, Parameterized complexity and exact algorithms, Program analysis, Program reasoning, Program verification, Treedepth, Treewidth",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8321488": {
        "doi": "10.5281/zenodo.8321488",
        "author": "Chitre, Khushboo and Kedia, Piyus and Purandare, Rahul",
        "title": "Rapid: Region-based Pointer Disambiguation",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8321488",
        "abstract": "<p>This includes the source code of Rapid and all the required artifacts.</p>",
        "keywords": "CPU SPEC 2017, LLVM, Mimalloc, Polybench, Scout",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8325410": {
        "doi": "10.5281/zenodo.8325410",
        "author": "Sun, Yican and Peng, Xuanyu and Xiong, Yingfei",
        "title": "Artifact for \"Synthesizing Efficient Memoization Algorithms\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8325410",
        "abstract": "<p>This is the artifact for the OOPLSA2023 paper “Synthesizing Efficient Memoization Algorithms”, including: - the docker image of our tool, and the reproduction package. - the readme file.</p>",
        "keywords": "docker file",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8327489": {
        "doi": "10.5281/zenodo.8327489",
        "author": "Hance, Travis and Howell, Jon and Padon, Oded and Parno, Bryan",
        "title": "Leaf: Modularity for Temporary Sharing in Separation Logic (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8327489",
        "abstract": "<p>This contains the Coq development validating the core technical contributions of the paper <em>Leaf: Modularity for Temporary Sharing in Separation Logic</em>. It contains:</p>\n<ul>\n<li>Definitions of Leaf concepts and proofs of Leaf inference rules</li>\n<li>Instantiation of Leaf for a simple heap-based language with atomic heap operations</li>\n<li>Derivation of fractional permissions and counting permissions within Leaf</li>\n<li>The reader-writer lock example</li>\n<li>The hash table example</li>\n</ul>",
        "keywords": "Coq, Iris, separation logic",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8327699": {
        "doi": "10.5281/zenodo.8327699",
        "author": "Park, Kanghee and D'Antoni, Loris and Reps, Thomas",
        "title": "Docker Image for Article 'Synthesizing Specifications'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8327699",
        "abstract": "<p>This is the artifact for paper “Synthesizing Specifications”. Following are the contents of the artifact.</p>\n<ul>\n<li>spyro_oopsla23.tar.gz: A Docker image containing the source code and the dependencies to run Spyro[SMT] and Spyro[Sketch].</li>\n<li>README.md: A readme containing all the step-by-step instructions to reproduce the results shown in the paper.</li>\n</ul>",
        "keywords": "Program Specifications, Program Synthesis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8328524": {
        "doi": "10.5281/zenodo.8328524",
        "author": "Zhang, Quan and Zhou, Chijin and Xu, Yiwen and Yin, Zijing and Wang, Mingzhe and Su, Zhuo and Sun, Chengnian and Jiang, Yu and Sun, Jiaguang",
        "title": "Artifact for \"Building Dynamic System Call Sandbox with Partial Order Analysis\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8328524",
        "abstract": "<p>This is the artifact for the OOPSLA 2023 paper, titled “Building Dynamic System Call Sandbox with Partial Order Analysis”. It contains the DynBox prototype as well as the relevant data needed to replicate the results.</p>",
        "keywords": "Attack Surface Reduction, Program Analysis, System Call Sandbox",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8328742": {
        "doi": "10.5281/zenodo.8328742",
        "author": "Zhou, Chijin and Zhang, Quan and Guo, Lihua and Wang, Mingzhe and Jiang, Yu and Liao, Qing and Wu, Zhiyong and Li, Shanshan and Gu, Bin",
        "title": "Towards Better Semantics Exploration for Browser Fuzzing",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8328742",
        "abstract": "<p>This is the artifact for “Towards Better Semantics Exploration for Browser Fuzzing”, published in SPLASH/OOPSLA 2023. All instructions can be found in the readme.pdf file.</p>",
        "keywords": "Browser Fuzzer, Browser Security, Context-Sensitive Grammar, Semantics-Aware Fuzzing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8329645": {
        "doi": "10.5281/zenodo.8329645",
        "author": "Sano, Chuta and Kavanagh, Ryan and Pientka, Brigitte",
        "title": "Mechanization of SCP for article 'Mechanizing Session-Types using a Structural View: Enforcing Linearity without Linearity'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8329645",
        "abstract": "<p>Mechanization of Structural Classical Processes as introduced in the article ‘Mechanizing Session-Types using a Structural View: Enforcing Linearity without Linearity’ in the proof assistant Beluga using weak higher-order abstract syntax. The artifact includes the encoding of the language alongside a mechanized proof of type preservation.</p>",
        "keywords": "concurrency, linear logic, mechanization, session types",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8329679": {
        "doi": "10.5281/zenodo.8329679",
        "author": "Zakhour, George and Weisenburger, Pascal and Salvaneschi, Guido",
        "title": "Type-Safe Dynamic Placement with First-Class Placed Values",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8329679",
        "abstract": "<h2 id=\"dyno\">Dyno</h2>\n<h3 id=\"artifact-for-the-paper-type-safe-dynamic-placement-with-first-class-placed-values\">Artifact for the paper “Type-Safe Dynamic Placement with First-Class Placed Values”</h3>\n<p>The artifact is available at: https://doi.org/10.5281/zenodo.8329679</p>\n<h2 id=\"getting-started\">GETTING STARTED</h2>\n<h3 id=\"building-and-loading-the-docker-image\">BUILDING AND LOADING THE DOCKER IMAGE</h3>\n<p>We provide you with <code>dyno.tar.xz</code>, which is a pre-built container image that contains all necessary programs. To load, run the following command:</p>\n<pre><code>docker load &lt; dyno.tar.xz</code></pre>\n<p>Running the image may not work on Apple M1/M2 machines, or any machine with Apple’s ARM-based chips, because of incomplete emulation of system calls (specifically the inotify kernel subsystem). Hence, we recommend running the image on a platform fully supported by Docker, like x86-64 systems.</p>\n<h2 id=\"step-by-step-instructions\">STEP-BY-STEP INSTRUCTIONS</h2>\n<h3 id=\"compiling-dyno\">COMPILING DYNO</h3>\n<p>The provided container already contains the pre-compiled jar files of Dyno.</p>\n<p>To compile Dyno yourself, run the following command:</p>\n<pre><code>docker run -it --rm dyno bash -c 'cd /dyno; sbt clean publishLocal'</code></pre>\n<p>Compiling Propel may not work inside the Docker container on Apple M1/M2 machines for the reasons mentioned earlier.</p>\n<p>The resulting jar files are in <code>~/.ivy2/local/io.github.dyno/</code>. You can run this command to see all of them <code>find ~/.ivy2/local/io.github.dyno/ -name \"*.jar\"</code></p>\n<h3 id=\"testing-dyno\">TESTING DYNO</h3>\n<p>To run the tests in Dyno, execute:</p>\n<pre><code>docker run -it --rm dyno bash -c 'cd /dyno &amp;\\&amp; SBT_OPTS=\"-Xmx4G\" sbt lociJVM/test'</code></pre>\n<p>Running the Dyno tests may not work inside the Docker container on Apple M1/M2.</p>\n<p>Running the tests may take up to five minutes.</p>\n<h3 id=\"executing-paper-evaluations\">EXECUTING PAPER EVALUATIONS</h3>\n<h4 id=\"variants-analysis-section-8.1\">VARIANTS ANALYSIS (Section 8.1)</h4>\n<h5 id=\"verification-of-the-numbers-in-table-1\">Verification of the numbers in Table 1</h5>\n<p>Each variant is implemented under <code>/evaluation/casestudies</code>. In each variant’s folder there are three folders for each implementation: <code>dyno/</code>, <code>rmi/</code>, and <code>akka/</code>.</p>\n<p>Reference creation, acquisition, and access are all labeled in the source code in each implementation. Creations are labeled with a comment <code>/*ref-creation*/</code> that follows immediately every expression that creates (or simulates a creation) of a reference. Similarly, an acquisition and an access are labeled with the comments <code>/*ref-acquire*/</code> and <code>/*ref-use*/</code> respectively and they follow immediately every expression that is relevant.</p>\n<p>Counting each comment should match with the numbers we provide in Table 1 in the paper.</p>\n<h5 id=\"running-each-variant\">Running each variant</h5>\n<h6 id=\"resources-variant\">Resources Variant</h6>\n<p>In the resources variant, the client asks the user to input their identifier (it can be any string), the supervisor takes over in case the identifier is new or untrusted and asks whether the identifier should be trusted or not. If the supervisor says yes then all subsequent calls will result in the same resource generated for that identifier, otherwise no resource will be given.</p>\n<h6 id=\"dyno-implementation\">Dyno Implementation</h6>\n<p>First start by running a new container image with <code>docker run -it --rm dyno bash</code> in a console.</p>\n<p>To run the Dyno Resources evaluation, you must execute in six different consoles the following commands in order:</p>\n<ol type=\"1\">\n<li>On console 1, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/resources/dyno; sbt \"runMain loci.resources.TrustedKeyDb\"'</code></li>\n<li>On console 2, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/resources/dyno; sbt \"runMain loci.resources.PublicKeyDb\"'</code></li>\n<li>On console 3, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/resources/dyno; sbt \"runMain loci.resources.KeyManager\"'</code></li>\n<li>On console 4, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/resources/dyno; sbt \"runMain loci.resources.ResourceManager\"'</code></li>\n<li>On console 5, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/resources/dyno; sbt \"runMain loci.resources.Supervisor\"'</code></li>\n<li>On console 6, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/resources/dyno; sbt \"runMain loci.resources.Clienct\"'</code></li>\n</ol>\n<p>The <code>CONTAINER_ID</code> variable can be found by executing: <code>docker container ls | grep dyno | head -n 1 | cut -f1 -d' '</code>.</p>\n<p>Please allow each command to complete compilation and to begin running before you execute the next one.</p>\n<h6 id=\"rmi-implementation\">RMI Implementation</h6>\n<p>First start by running a new container image with <code>docker run -it --rm dyno bash</code> in a console.</p>\n<p>To run the RMI Resources evaluation, you must execute in six different consoles the following commands in order:</p>\n<ol type=\"1\">\n<li>On console 1, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/resources/rmi; sbt \"runMain loci.resources.TrustedKeyDbMain\"'</code></li>\n<li>On console 2, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/resources/rmi; sbt \"runMain loci.resources.PublicKeyDbMain\"'</code></li>\n<li>On console 3, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/resources/rmi; sbt \"runMain loci.resources.KeyManagerMain\"'</code></li>\n<li>On console 4, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/resources/rmi; sbt \"runMain loci.resources.ResourceManagerMain\"'</code></li>\n<li>On console 5, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/resources/rmi; sbt \"runMain loci.resources.SupervisorMain\"'</code></li>\n<li>On console 6, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/resources/rmi; sbt \"runMain loci.resources.ClienctMain\"'</code></li>\n</ol>\n<p>Please allow each command to complete compilation and to begin running before you execute the next one.</p>\n<h6 id=\"akka-implementation\">Akka Implementation</h6>\n<p>To run the Akka Resources evaluation, you must execute the following command:</p>\n<pre><code>docker run -it --rm dyno bash -c 'cd /evaluation/casestudies/resources/akka; sbt run'</code></pre>\n<p>This will spawn, for each peer, different actors that run in the same process.</p>\n<h6 id=\"sessions-variant\">Sessions Variant</h6>\n<p>In the sessions variant, the client navigates an application that consists of different components. To login in some components you can use the username <code>admin</code> and the password <code>adminPassword</code>.</p>\n<h6 id=\"dyno-implementation-1\">Dyno Implementation</h6>\n<p>First start by running a new container image with <code>docker run -it --rm dyno bash</code> in a console.</p>\n<p>To run the Dyno Sessions evaluation, you must execute in four different consoles the following commands in order:</p>\n<ol type=\"1\">\n<li>On console 1, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/session/dyno; sbt \"runMain loci.sessions.Auth\"'</code></li>\n<li>On console 2, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/session/dyno; sbt \"runMain loci.sessions.AdminPanel\"'</code></li>\n<li>On console 3, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/session/dyno; sbt \"runMain loci.sessions.Server\"'</code></li>\n<li>On console 4, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/session/dyno; sbt \"runMain loci.sessions.Client\"'</code></li>\n</ol>\n<p>Please allow each command to complete compilation and to begin running before you execute the next one.</p>\n<h6 id=\"rmi-implementation-1\">RMI Implementation</h6>\n<p>First start by running a new container image with <code>docker run -it --rm dyno bash</code> in a console.</p>\n<p>To run the RMI Sessions evaluation, you must execute in four different consoles the following commands in order:</p>\n<ol type=\"1\">\n<li>On console 1, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/session/rmi; PEER_TYPE=Server sbt \"runMain loci.sessions.ServerMain\"'</code></li>\n<li>On console 2, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/session/rmi; PEER_TYPE=Auth sbt \"runMain loci.sessions.AuthMain\"'</code></li>\n<li>On console 3, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/session/rmi; PEER_TYPE=AdminPanel sbt \"runMain loci.sessions.AdminPanelMain\"'</code></li>\n<li>On console 4, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/session/rmi; PEER_TYPE=Client sbt \"runMain loci.sessions.ClientMain\"'</code></li>\n</ol>\n<p>Please allow each command to complete compilation and to begin running before you execute the next one.</p>\n<h6 id=\"akka-implementation-1\">Akka Implementation</h6>\n<p>To run the Akka Sessions evaluation, you must execute the following command:</p>\n<pre><code>docker run -it --rm dyno bash -c 'cd /evaluation/casestudies/session/akka; sbt run'</code></pre>\n<h6 id=\"unifeed-variant\">Unifeed Variant</h6>\n<p>In the unifeed variant the unifier takes two streams of tweets and toots and merges them in a single feed chronologically. Tweets come from Twitter and require you to have an API key. You can obtain an API key by following the instructions on: https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret Toots come from Mastodon. If you are on mastodon.social you can create an API key on this URL https://mastodon.social/settings/applications/new</p>\n<p>The Mastodon key is called “Your access token” and the Twitter key is called “Bearer Token”. We refer to them in the following commands using <code>&lt;MASTODON_KEY&gt;</code> and <code>&lt;TWITTER_KEY&gt;</code> respectively.</p>\n<p>Twitter’s API support has been getting more and more restrictive for developers. If you are developer with a Basic or Pro Twitter subscription then please apply the patch suggested at the end of this section to unify a twitter stream with a mastodon stream. If you do not have a Basic or Pro twitter subscription then you can not use the API endpoints that this application requires. The provided example instead unified two Mastodon streams.</p>\n<h6 id=\"dyno-implementation-2\">Dyno Implementation</h6>\n<p>First start by running a new container image with <code>docker run -it --rm dyno bash</code> in a console.</p>\n<p>To run the Dyno Unifeed evaluation, you must execute in four different consoles the following commands in order:</p>\n<ol type=\"1\">\n<li>On console 1, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/unifeed/dyno; ACCESS_TOKEN=&lt;TWITTER_KEY&gt; sbt \"runMain loci.unifeed.Twitter\"'</code></li>\n<li>On console 2, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/unifeed/dyno; ACCESS_TOKEN=&lt;MASTODON_KEY&gt; sbt \"runMain loci.unifeed.Mastodon\"'</code></li>\n<li>On console 3, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/unifeed/dyno; sbt \"runMain loci.unifeed.Unifier\"'</code></li>\n<li>On console 4, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/unifeed/dyno; sbt \"runMain loci.unifeed.Client\"'</code></li>\n</ol>\n<p>Please allow each command to complete compilation and to begin running before you execute the next one.</p>\n<h6 id=\"rmi-implementation-2\">RMI Implementation</h6>\n<p>First start by running a new container image with <code>docker run -it --rm dyno bash</code> in a console.</p>\n<p>To run the RMI Unifeed evaluation, you must execute in three different consoles the following commands in order:</p>\n<ol type=\"1\">\n<li>On console 1, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/unifeed/rmi; ACCESS_TOKEN=&lt;TWITTER_KEY&gt; sbt \"runMain loci.unifeed.TwitterMain\"'</code></li>\n<li>On console 2, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/unifeed/rmi; ACCESS_TOKEN=&lt;MASTODON_KEY&gt; sbt \"runMain loci.unifeed.MastodonMain\"'</code></li>\n<li>On console 3, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/casestudies/unifeed/rmi; sbt \"runMain loci.sessions.ClientMain\"'</code></li>\n</ol>\n<p>Please allow each command to complete compilation and to begin running before you execute the next one.</p>\n<h6 id=\"akka-implementation-2\">Akka Implementation</h6>\n<p>To run the Akka Unifeed evaluation, you must execute the following command:</p>\n<pre><code>docker run -it --rm dyno bash -c 'cd /evaluation/casestudies/unifeed/akka; TWITTER_KEY=&lt;TWITTER_KEY&gt; MASTODON_KEY=&lt;MASTODON_KEY&gt; sbt run'</code></pre>\n<h6 id=\"patch-to-use-twitter-api\">Patch to use Twitter API</h6>\n<p>If you wish to use the twitter API you can go use the object that’s commented out in the source code and preceded with the string <code>TWITTER_API:</code></p>\n<h4 id=\"performance-section-8.2\">PERFORMANCE (Section 8.2)</h4>\n<h5 id=\"running-the-dyno-version\">Running the Dyno version</h5>\n<p>First start by running a new container image with <code>docker run -it --rm dyno bash -c 'bash -c \"service mariadb start\" 2&gt;/dev/null; redis-server'</code> in a console.</p>\n<p>To run the Dyno performance evaluation, you must execute in three different consoles the following commands, in order:</p>\n<ol type=\"1\">\n<li>On console 1, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/performance; sbt \"runMain loci.dbcachedyno.Database\"'</code></li>\n<li>On console 2, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/performance; sbt \"runMain loci.dbcachedyno.Cache\"'</code></li>\n<li>On console 3, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/performance; sbt \"runMain loci.dbcachedyno.Client\"'</code></li>\n</ol>\n<h5 id=\"running-the-rmi-version\">Running the RMI version</h5>\n<p>First start by running a new container image with <code>docker run -it --rm dyno bash -c 'bash -c \"service mariadb start\" 2&gt;/dev/null; redis-server'</code> in a console.</p>\n<p>To run the Dyno performance evaluation, you must execute in three different consoles the following commands, in order:</p>\n<ol type=\"1\">\n<li>On console 1, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/performance; sbt \"runMain loci.dbcachermi.DatabaseMain\"'</code></li>\n<li>On console 2, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/performance; sbt \"runMain loci.dbcachermi.CacheMain\"'</code></li>\n<li>On console 3, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /evaluation/performance; sbt \"runMain loci.dbcachermi.ClientMain\"'</code></li>\n</ol>\n<h5 id=\"reading-the-output\">Reading the Output</h5>\n<p>The output will be visible in console 3.</p>\n<p>The client first does a warmup trial that may take up to two minutes. Thus no output will be visible during the warmup. The whole experiment is not expected to take more than fifteen minutes.</p>\n<p>The output is in the CSV format with 3 columns. The first column is the Hit percentage, from 0\\% to 100\\% in steps of 10\\%. The second column is the time in milliseconds that N=5K queries took. The third column is the number of trials.</p>\n<h5 id=\"changing-the-parameters\">Changing the parameters</h5>\n<p>If you wish to modify the number of trials, you must edit the value of the <code>N</code> value defined in <code>/evaluation/performance/src/main/scala/DbCache.scala</code> at line 77. The database already contains 200,001 unique keys. Therefore to preserve the correctness of the evaluation we recommend to keep N &lt; 200,000.</p>\n<h4 id=\"antenna-pod-case-study-section-8.3\">ANTENNA-POD CASE STUDY (Section 8.3)</h4>\n<p>For the sake of completeness we describe in high-level the evaluation of Section 8.3 that we do not expect reviewers to repeat in full-details.</p>\n<p>To demonstrate the bug we have found in AntennaPod we provide the following minimal RSS feed that you can host online:</p>\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;rss version=\"2.0\"\n    xmlns:itunes=\"http://www.itunes.com/dtds/podcast-1.0.dtd\"&gt;\n  &lt;channel&gt;\n    &lt;title&gt;A Bad Feed&lt;/title&gt;\n    &lt;itunes:owner&gt;\n        &lt;itunes:email&gt;anon@anon.non&lt;/itunes:email&gt;\n    &lt;/itunes:owner&gt;\n    &lt;itunes:author&gt;Anon&lt;/itunes:author&gt;\n    &lt;description&gt;A Really Bad Feed&lt;/description&gt;\n    &lt;link&gt;https://bad.feed/&lt;/link&gt;\n    &lt;item&gt;\n      &lt;title&gt;A Bad Episode&lt;/title&gt;\n      &lt;description&gt;A Really Bad Episode&lt;/description&gt;\n      &lt;pubDate&gt;Tue, 14 Mar 2017 12:00:00 GMT&lt;/pubDate&gt;\n      &lt;enclosure url=/do/10.5281/zenodo.8329679/export-citation-abs/\"/idonotexist.mp3\" type=\"audio/mpeg\" length=\"34216300\"/&gt;\n      &lt;itunes:duration&gt;30:00&lt;/itunes:duration&gt;\n    &lt;/item&gt;\n  &lt;/channel&gt;\n&lt;/rss&gt;</code></pre>\n<p>After installing AntennaPod on your Android device from the Google Play store or F-Droid you can do the following steps:</p>\n<ol type=\"1\">\n<li>Open the hamburger menu.</li>\n<li>Click on the “+ Add Podcast” menu.</li>\n<li>In the Advanced section, click on “Add Podcast by RSS address”.</li>\n<li>In the popup window you can enter the URL of the bad RSS feed.</li>\n<li>After pressing confirm a new popup should show up. Click on “A Bad Episode”.</li>\n<li>A “Preview” button should appear. Click on it.</li>\n<li>The player will attempt to play the file for a few seconds then it hides the “Preview” button.</li>\n<li>Press the “back” button on your device and you will see the following Java error message:</li>\n</ol>\n<blockquote>\n<p>com.google.android.exoplayer2.upstream.FileDataSource$FileDataSourceException: java.io.FileNotFoundException: /idonotexist.mp3: open failed: ENOENT (No such file or directory)</p>\n</blockquote>\n<h4 id=\"f-droid-case-study-section-8.4\">F-DROID CASE STUDY (Section 8.4)</h4>\n<p>For the sake of completeness we describe in high-level the evaluation of Section 8.4 that we do not expect reviewers to repeat in full-details.</p>\n<ul>\n<li>The F-Droid repository is available at https://f-droid.org/repo/index-v2.json which we also provide in <code>/fdroid_index.json</code></li>\n<li>After cloning all git repositories in the index we kept those whose source code matched the following regular expression: <code>startsWith(\"file|equals(\"file|equalsIgnoreCase(\"file|startsWith(\"content|equals(\"content|equalsIgnoreCase(\"content</code></li>\n<li>The result were 133 projects whose IDs we provide in the <code>/fdroid_matches.txt</code> file</li>\n<li>The code snippets we provide in Section 8.4 illustrating the treatment of URLs are given in full-context in the <code>/fdroid_snippets/</code> folder</li>\n</ul>\n<h2 id=\"a-small-starting-example\">A SMALL STARTING EXAMPLE</h2>\n<p>Dyno is a general library that can be reused in other applications. We invite you to start with <code>/examples/src/main/scala/simple_example</code> which contains the source code for a small and simple example. It is made of a single file <code>SimpleExample.scala</code> that is annotated with comments explaining the details of the program.</p>\n<p>The program consists of three peers. The first, <code>FirstProvider</code> contains an integer. Running this peer will prompt (repeatedly) the user to input a number that it will store inside its integer. The second, <code>SecondProvider</code> behaves exactly the same. The third, <code>Selector</code> starts by prompting the user to choose the peer from which it will retrieve a reference to its integer. If the user inputs <code>1</code> then they have chosen to use the value from <code>FirstProvider</code>, if the user inputs <code>2</code> they have chosen to use the value from <code>SecondProvider</code>. Any other input will re-prompt the user. Once a reference is obtained the user will be repeatedly prompted to press enter to dereference the integer reference. If the value has changed in between dereferences then the selector must observe these changes.</p>\n<p>First start by running a new container image with <code>docker run -it --rm dyno bash</code> in a console.</p>\n<p>To run these examples, you must execute in three different consoles the following commands, in order:</p>\n<ol type=\"1\">\n<li>On console 1, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /examples; sbt \"runMain loci.simple_example.FirstProvider\"'</code></li>\n<li>On console 2, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /examples; sbt \"runMain loci.simple_example.SecondProvider\"'</code></li>\n<li>On console 3, execute <code>docker exec -it $CONTAINER_ID bash -c 'cd /examples; sbt \"runMain loci.simple_example.Selector\"'</code></li>\n</ol>\n<p>The <code>CONTAINER_ID</code> variable can be found by executing: <code>docker container ls | grep dyno | head -n 1 | cut -f1 -d' '</code>.</p>\n<p>Please allow each command to complete compilation and to begin running before you execute the next one.</p>\n<p>Now you are ready to interact with the peers.</p>\n<p>sudo docker exec -it $(sudo docker container ls | grep dyno | head -n1 | cut -f1 -d’ ‘) bash -c ’bash -c “service mariadb start” 2&gt;/dev/null; cd /evaluation/performance; sbt “runMain loci.dbcachedyno.Database”’</p>",
        "keywords": "Distributed Programming, Dynamic Placement, Multitier Programming, Placement Types, Scala, Union Types",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8329703": {
        "doi": "10.5281/zenodo.8329703",
        "author": "Mohan, Anshuman and Liu, Yunhe and Foster, Nate and Kapp\\'{e",
        "title": "Reproduction Package for 'Formal Abstractions for Packet Scheduling'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8329703",
        "abstract": "<p>This artifact contains an implementation of PIFO trees as described in the paper, along with several key definitions and concepts. The implementation obeys the semantics we describe formally in the paper. Further, the artifact contains an implementation of the embedding algorithm that we describe in our paper, along with a simulator that allows a PCAP of packets to be “run” through a PIFO tree scheduler. There is small tool to generate your own synthetic PCAPs, and also a visualization tool that generates the graphs that we show in our paper.</p>",
        "keywords": "formal semantics, packet scheduling, programmable scheduling",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8329813": {
        "doi": "10.5281/zenodo.8329813",
        "author": "Yi, Pu (Luke) and Achour, Sara",
        "title": "Artifact for the OOPSLA 2023 Article \"Hardware-Aware Static Optimization of Hyperdimensional Computations\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8329813",
        "abstract": "<p>This is the artifact accompanying our study of hardware-aware static optimization of hyperdimensional computation, accepted for presentation at the 38th ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA) 2023. The artifact contains the implementation of our system, scripts to reproduce the evaluation results shown in the paper, and detailed instructions for setting up the environment and step-by-step reproduction of the results.</p>",
        "keywords": "emerging hardware technologies, program optimization, unconventional computing",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8329922": {
        "doi": "10.5281/zenodo.8329922",
        "author": "Liu, Fengyun and Lhot\\'{a",
        "title": "Initializing Global Objects: Time and Order",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8329922",
        "abstract": "<p>An artifact for the OOPSLA 2023 paper Initializing Global Objects: Time and Order.</p>\n<p>The interested audience can check out the latest Dotty, which already contains the checker as part of its source code.</p>",
        "keywords": "Dotty, global objects, initialization safety, initialization-time irrelevance",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8329981": {
        "doi": "10.5281/zenodo.8329981",
        "author": "Liu, Jiangyi and Zhu, Fengmin and He, Fei",
        "title": "Artifact of paper \"Automated Ambiguity Detection in Layout-Sensitive Grammars\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8329981",
        "abstract": "<p>This is the artifact for the paper “Automated Ambiguity Detection in Layout-Sensitive Grammars” at OOPSLA’23. The main purpose of this artifact is to support our evaluation results in §7 (mostly Table 1) and the theoretical results in §3 – §5 (the main conclusions are Theorem 5.9 and Theorem 5.10).</p>\n<p>This artifact consists of two parts (each is a directory):</p>\n<ul>\n<li><p>tool/: our prototype tool that implements the ambiguity detection approach (following §5), together with necessary data and scripts for reproducing the evaluation (§7);</p></li>\n<li><p>proof/: our Coq mechanization (§6) of all the definitions and theorems mentioned in §3 – §5.</p></li>\n</ul>",
        "keywords": "ambiguity, Coq, layout-sensitive grammar, SMT",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8330884": {
        "doi": "10.5281/zenodo.8330884",
        "author": "Mehta, Meetesh Kalpesh and Krynski, Sebasti\\'{a",
        "title": "Artifact of \"Reusing Just-in-Time Compiled Code\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8330884",
        "abstract": "<p>This is the artifact to accompany our OOPSLA 2023 submission on “Reusing Just-in-Time Compiled Code”. The artifact consists of a virtual machine for the R language, called \\v{R",
        "keywords": "Code reuse, JIT compilation, Specialization",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8331210": {
        "doi": "10.5281/zenodo.8331210",
        "author": "Gu\\'{e",
        "title": "Artifact for \"Melocoton: A Program Logic for Verified Interoperability Between OCaml and C\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8331210",
        "abstract": "<p>This is the artifact for the OOPSLA’23 paper “Melocoton: A Program Logic for Verified Interoperability Between OCaml and C”. It contains the Coq development for the paper.</p>",
        "keywords": "angelic non-determinism, C, Coq, foreign-function interfaces, garbage collection, Iris, multi-language semantics, OCaml, program logics, separation logic, transfinite step-indexing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8331495": {
        "doi": "10.5281/zenodo.8331495",
        "author": "Nazari, Amirmohammad and Huang, Yifei and Samanta, Roopsha and Radhakrishna, Arjun and Raghothaman, Mukund",
        "title": "Reproduction Package for Article \"Explainable Program Synthesis by Localizing Specifications\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8331495",
        "abstract": "<p>This is the artifact package accompanying our OOPSLA 2023 submission titled Explainable Program Synthesis By Localizing Specifications. Our paper presents a new approach to explain the programs produced by program synthesis tools. We call this concept the sub-specification. Our paper presents examples of how subspecs can be useful and an algorithm to synthesize subspecifications. We have implemented this algorithm, which we call S3, for two program synthesis settings, SyGuS and DreamCoder. Our paper includes a user study and an experimental evaluation of the subspec synthesis procedure.</p>\n<p>This artifact contains all the tools (S3, CVC5, EUSolver), benchmark files, and scripts to reproduce the experiments described in the paper. In this document, we will describe the outline of these experiments, how to run them, and also describe how one may use S3 to calculate sub-specifications on SyGuS solver and DreamCoder’s results of their own.</p>",
        "keywords": "explainability, program comprehension, Program synthesis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8331516": {
        "doi": "10.5281/zenodo.8331516",
        "author": "Meier, Shawn and Mover, Sergio and Kaki, Gowtham and Chang, Bor-Yuh Evan",
        "title": "Historia: Refuting Callback Reachability with Message-History Logics (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8331516",
        "abstract": "<p>This is the artifact for the paper Historia: Refuting Callback Reachability with Message-History Logics and contains the implementation and open source Android applications used for evaluation. This artifact implements an application-only message-history based program analysis for Android. It handles safety properties relating to event and callback order including null pointer exceptions and other runtime exceptions in the Android framework.</p>",
        "keywords": "event-driven applications, program analysis, separation logic, software safety, static analysis, temporal logics",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8331740": {
        "doi": "10.5281/zenodo.8331740",
        "author": "Cho, Minki and Song, Youngju and Lee, Dongjae and G\\\"{a",
        "title": "Stuttering For Free",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8331740",
        "abstract": "<p>This is the artifact for the paper “Stuttering For Free”.</p>",
        "keywords": "Coq, stuttering simulation, verification",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/alxest/FreeSim/tree/AE"
    },
    "10.5281/zenodo.8332121": {
        "doi": "10.5281/zenodo.8332121",
        "author": "Ye, Fangke and Zhao, Jisheng and Shirako, Jun and Sarkar, Vivek",
        "title": "Code for the Paper \"Concrete Type Inference for Code Optimization using Machine Learning with SMT Solving\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8332121",
        "abstract": "<p>Code for the paper “Concrete Type Inference for Code Optimization using Machine Learning with SMT Solving”.</p>",
        "keywords": "Code Optimization, Machine Learning, Python, Type Inference",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/fkye/cti-ml-smt/tree/v1.0.0"
    },
    "10.5281/zenodo.8332129": {
        "doi": "10.5281/zenodo.8332129",
        "author": "Bhanuka, Ishan and Parreaux, Lionel and Binder, David and Brachth\\\"{a",
        "title": "Reproduction Package for \"Getting into the Flow: Towards Better Type Error Messages for Constraint-Based Type Inference\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8332129",
        "abstract": "<p>Source code for HMloc type system implementation described in the paper. It contains - * Source code * Instructions for running the code - oopsla23-artifact-overview.md * A guide explaining the code - hmloc-codebase-doc.md</p>",
        "keywords": "front-end, functional programming, type systems, user-centered techniques",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/hkust-taco/hmloc/tree/v0.1.1"
    },
    "10.5281/zenodo.8332577": {
        "doi": "10.5281/zenodo.8332577",
        "author": "D'Souza, Matt and You, James and Lhot\\'{a",
        "title": "Artifact for paper \"TASTyTruffle: Just-in-time Specialization of Parametric Polymorphism\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8332577",
        "abstract": "<p>This is the accompanying artifact for the paper “TASTyTruffle: Just-in-time Specialization of Parametric Polymorphism”. It contains the source code for TASTyTruffle and the accompanying benchmark scripts required to execute the benchmarks included in the evaluation.</p>",
        "keywords": "just-in-time compiler, parametric polymorphism, reified types, Scala, specialization, Truffle",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8332724": {
        "doi": "10.5281/zenodo.8332724",
        "author": "Laurel, Jacob and Qian, Siyuan Brant and Singh, Gagandeep and Misailovic, Sasa",
        "title": "Reproduction Artifact for \"Synthesizing Precise Static Analyzers for Automatic Differentiation\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8332724",
        "abstract": "<p>This artifact contains all of the source code for Pasado and all of the experimental scripts needed to reproduce the evaluation from our paper “Synthesizing Precise Static Analyzers for Automatic Differentiation”. This artifact is hosted on both Zenodo, as well as on github at the following repository: “https://github.com/uiuc-arc/Pasado”</p>",
        "keywords": "Abstract Interpretation, Automatic Differentiation, Differentiable Programming, Static Analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8332960": {
        "doi": "10.5281/zenodo.8332960",
        "author": "Porncharoenwase, Sorawee and Pombrio, Justin and Torlak, Emina",
        "title": "Artifact for A Pretty Expressive Printer",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8332960",
        "abstract": "<p>This artifact consists of - Lean proofs of PrettyExpressive’s functional correctness; - Rosette proofs related to cost factories; - An implementation of PrettyExpressive in OCaml and Racket, and their documentation; - A Racket code formatter that employs PrettyExpressive; and - Benchmarks to reproduce our evaluation to show that PrettyExpressive and practically efficient and optimal. See the README file for more details.</p>",
        "keywords": "pretty printer",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/sorawee/pretty-expressive-oopsla23-artifact/tree/camera-ready"
    },
    "10.5281/zenodo.8332962": {
        "doi": "10.5281/zenodo.8332962",
        "author": "Phipps-Costin, Luna and Rossberg, Andreas and Guha, Arjun and Leijen, Daan and Hillerstr\\\"{o",
        "title": "Artifact for Continuing WebAssembly with Effect Handlers",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8332962",
        "abstract": "<p>The artifact contains the software and instructions on how to reproduce the results of the associated paper.</p>",
        "keywords": "effect handlers, experiments, WebAssembly",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8333055": {
        "doi": "10.5281/zenodo.8333055",
        "author": "Shadab, Narges and Gharat, Pritam and Tiwari, Shrey and Ernst, Michael D. and Kellogg, Martin and Lahiri, Shuvendu K. and Lal, Akash and Sridharan, Manu",
        "title": "Inference of Resource Management Specifications",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8333055",
        "abstract": "<p>This artifact contains the data and analysis supporting the evaluation section in the ‘Inference of Resource Management Specifications’ paper. It includes the implementation of the inference algorithm for resource management specifications in both Java and C#, along with instructions for running the tools on the benchmarks we used to evaluate our tools. The goal of these tools is to automatically infer specifications for the Resource Leak Checker and RLC#.</p>",
        "keywords": "accumulation analysis, Pluggable type systems, resource leaks, specify-and-check, specify-and-verify, static analysis, typestate analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8333815": {
        "doi": "10.5281/zenodo.8333815",
        "author": "Larose, Octave and Kaleba, Sophie and Burchell, Humphrey and Marr, Stefan",
        "title": "AST vs. Bytecode: Interpreters in the Age of Meta-Compilation (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8333815",
        "abstract": "<p>This artifact accompanies our paper AST vs.&nbsp;Bytecode: Interpreters in the Age of Meta-Compilation to enable others to reuse our experimental setup and methodology, and verify our claims.</p>\n<p>Specifically, the artifacts covers our three contributions:</p>\n<pre><code>It contains the implementation of our methodology to identify run-time performance and memory usage tradeoffs between AST and bytecode interpreters. Thus, it contains all benchmarks and experiments for reproduction of results, and reuse for new experiments, as well as the data we collected to verify our analysis.\nIt contains PySOM and TruffleSOM, which both come with an AST and a bytecode interpreter to enable their comparison. It further contains all the variants of PySOM and TruffleSOM that assess the impact of specific optimizations.\nIt allows to verify the key claim of our paper, that bytecode interpreters cannot be assumed to be faster than AST interpreters in the context of metacompilation systems.</code></pre>",
        "keywords": "abstract-syntax-tree, bytecode, case study, comparison, interpreters, just-in-time compilation, language implementation, meta-tracing, partial evaluation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8336774": {
        "doi": "10.5281/zenodo.8336774",
        "author": "Cui, Chen and Jiang, Shengyi and Oliveira, Bruno C. d. S.",
        "title": "Greedy Implicit Bounded Quantification (Artifact)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8336774",
        "abstract": "<p>The artifact includes the implementation, proofs, and the extended version of the paper “Greedy Implicit Bounded Quantification”.</p>",
        "keywords": "Abella, Bounded Quantification, Mechanical Formalization, Type Inference",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8353069": {
        "doi": "10.5281/zenodo.8353069",
        "author": "Renda, Alex and Ding, Yi and Carbin, Michael",
        "title": "Artifact for OOPSLA 2023 Paper \"Turaco: Complexity-Guided Data Sampling for Training Neural Surrogates of Programs\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8353069",
        "abstract": "<p>This repository contains the implementation of the Turaco programming language and its analysis, and the experiments in the paper “Turaco: Complexity-Guided Data Sampling for Training Neural Surrogates of Programs”.</p>",
        "keywords": "neural networks, programming languages, surrogate models",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8416208": {
        "doi": "10.5281/zenodo.8416208",
        "author": "Gao, Pengfei and Zhang, Yedi and Song, Fu and Chen, Taolue and Standaert, Francois-Xavier",
        "title": "Peproduction Package for Article \"Compositional Verification of Efficient Masking Countermeasures against Side-Channel Attacks\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8416208",
        "abstract": "<p>CONVINCE is the artifact of paper “Compositional Verification of Efficient Masking Countermeasures against Side-Channel Attacks”.</p>",
        "keywords": "compositional reasoning, countermeasures, cryptographic implementations, Formal verification, power side-channel attacks",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/S3L-official/CONVINCE/tree/OOPSLA23"
    },
    "10.5281/zenodo.8418984": {
        "doi": "10.5281/zenodo.8418984",
        "author": "Ma, Cong and Wu, Dinghao and Tan, Gang and Kandemir, Mahmut Taylan and Zhang, Danfeng",
        "title": "Artiract for \"Quantifying and Mitigating Cache Side Channel Leakage with Differential Set\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8418984",
        "abstract": "<p>DSA is a tool that quantifies and mitigate the cache side channel leakage of a program. Part of the implementation is a modified model-checker CBMC, which takes in C code and outputs the constraints of the program in either DIMACS and SMT-LIB v.2 format depending on the task. The constraints are analyzed and transformed through a series of Python scripts. For quantification task, we use approxMC to count the number of solutions of the constraints. For mitigation task, we use Z3 to enumerate each differential set. For more information please check the paper</p>",
        "keywords": "differential set, information flow, side channels",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8172549": {
        "doi": "10.5281/zenodo.8172549",
        "author": "Saaltink, Caz and Nicoletti, Stefano M. and Volk, Matthias and Hahn, Ernst Moritz and Stoelinga, Mari\\\"{e",
        "title": "Artifact for the paper Solving Queries for Boolean Fault Tree Logic via Quantified SAT",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8172549",
        "abstract": "<p>Artifact accompanying the publication Saaltink, C., Nicoletti, S.M., Volk, M., Hahn, E.M., and Stoelinga,M., Solving Queries for Boolean Fault Tree Logic via Quantified SAT. The artifact contains an implementation, example files and the script run_experiments.sh to reproduce results in Sections 5 and 6 of the paper.</p>",
        "keywords": "fault trees, QSAT, quantified Boolean formulae",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8329080": {
        "doi": "10.5281/zenodo.8329080",
        "author": "Gordon, Colin S. and Matskevich, Sergey",
        "title": "Replication package for \"Trustworthy Formal Natural Language Specifications\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8329080",
        "abstract": "<p>This is the snapshot consistent with the results of the paper “Trustworthy Formal Natural Language Specifications” from Onward! 2023.</p>\n<p>This version relies on a slightly older (though recent at time of submission) version of Lean; shortly after this version, the typeclass resolution algorithm for Lean 4 underwent significant changes which required non-trivial changes to the tool.</p>\n<p>To build the code, follow Lean’s instructions for installing the lake build tool, and run lake build in the root of this repository.</p>",
        "keywords": "categorial grammar, natural language interfaces, proof assistants",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/swlogiclab/multisem/tree/onward23artifact"
    },
    "10.5281/zenodo.8337245": {
        "doi": "10.5281/zenodo.8337245",
        "author": "Bach Poulsen, Casper and Zwaan, Aron and H\\\"{u",
        "title": "Mophasco (MOnadic framework for PHAsed name resolution using SCOpe graphs)",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8337245",
        "abstract": "<p>The artifact is an executable Haskell project containing the following components: 1. The Hefty Algebra’s embedding in Haskell 2. Effects and Handlers for (a) Scope Graph Operations, (2) Error reporting, (3) Unification 3. The Applicative Function Composition 4. The Case Studies, including the Relevant Custom Effects</p>\n<p>Installation/Execution Instructions, and detailed correlation with the paper are provided in the ReadMe</p>",
        "keywords": "Haskell, higher-order effects, phasing, scope graphs, type checker",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8347712": {
        "doi": "10.5281/zenodo.8347712",
        "author": "Eriksson, Oscar and Palmkvist, Viktor and Broman, David",
        "title": "Reproduction Package for Article: Partial Evaluation of Automatic Differentation for Differential-Algebraic Equations Solvers",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8347712",
        "abstract": "<p>This artifact contains the source code for the implementation of the evaluation as well as the source code for some of its dependencies. Additionally the artifact includes the raw data for the statistics presented in the article.</p>",
        "keywords": "Automatic Differentiation, Compiler, Differential-Algebraic Equations, Jacobian Generation, Partial Evaluation",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8419472": {
        "doi": "10.5281/zenodo.8419472",
        "author": "Echtler, Florian and Maierh\\\"{o",
        "title": "Source code for \"SurfaceCast\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8419472",
        "abstract": "<p>SurfaceCast is a super-flexible streaming toolkit that lets you create shared interactive surfaces from a huge variety of devices, merging up to four separate locations into one shared mixed-reality space.</p>",
        "keywords": "gstreamer, h264, interactive surface, javascript, livestream, python, python3, webrtc",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/floe/surfacecast/tree/v0.2.2"
    },
    "10.5281/zenodo.10046576": {
        "doi": "10.5281/zenodo.10046576",
        "author": "Wang, Jun and Xiao, Guanping and Zhang, Shuai and Lei, Huashan and Liu, Yepang and Sui, Yulei",
        "title": "Replication Package for \"Compatibility Issues in Deep Learning Systems: Problems and Opportunities\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10046576",
        "abstract": "<p>This dataset contains scripts and data used to generate relevant results for this paper. Detailed information and procedure to reproduce our results are described in README.md.</p>\n<p>code</p>\n<p>This folder contains two Python scripts: soextractor.py is used to extract 3,072 high-quality StackOverflow (SO) posts and soextractor_tags.py is used to extract the number of posts for the tags on SO. For detailed data collection criteria, please refer to Section 3.1 of our paper.</p>\n<p>DL compatibility issues.xlsx</p>\n<p>This file provides all the collected 3,072 issues, in which each line indicates whether the issue is a DL compatibility issue. Among them, 352 are DL compatibility issues. We also provide information on the library, stage, symptom, type, solution, root cause, and exception type for the DL compatibility issues. For the type CORE-TPL, we also provide backward-incompatible or forward-incompatible as well as API evolution patterns. For detailed manual classification of DL compatibility issues, please refer to Section 3.2 of our paper.</p>\n<p>Tool Survey.xlsx</p>\n<p>This file includes all the papers collected from the three top SE conferences (i.e., ICSE, FSE, and ASE) in recent five years (18-22). Each line of each sheet provides the following information: (a) Title, (b) Year, (c) Conference, and (d) Type. For the detailed paper collection procedure, please refer to Section 5 of our paper.</p>",
        "keywords": "compatibility issues, deep learning, empirical study",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.10075778": {
        "doi": "10.5281/zenodo.10075778",
        "author": "Vegas, Sira and Elbaum, Sebastian",
        "title": "Repository for Article \"Pitfalls in Experiments with DNN4SE: An Analysis of the State of the Practice\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10075778",
        "abstract": "<p>There are 3 folders in the repository:</p>\n<ul>\n<li><p>3_Analysis_of_papers. Contains 5 Excel files with the results of the analyses of papers presented in Section 3 of the paper, plus one Word file with additional analyses not included in the paper:</p>\n<ul>\n<li><p>3_1_Search_results: Data for Section 3.1 of the paper. This includes a summary of the results of the search and selection process and the list of papers retrieved from SCOPUS, along with the inclusion/exclusion criteria applied to each one.</p></li>\n<li><p>3_2_Papers_characterization_ICSE, 3_2_Papers_characterization_FSE, and 3_2_Papers_characterization_TSE: Data for Section 3.2 of the paper. These files contain the information retrieved from each individual paper associated to the steps of the experimental process, for each experiment described in the papers.</p></li>\n<li><p>3_3_Papers_summary: Data for Section 3.3 of the paper. It includes a description of the characterization criteria, along with its application to the 194 experiments (per venue and overall).</p></li>\n<li><p>Papers_per_experiment_type: Additional material (does not appear in the paper) containing a classification of experiments by type and the results of the characterization of the experiments per type. The data for this material is included in file 3_3_Papers_summary.</p></li>\n</ul></li>\n<li><p>4_Analysis_of_artifacts. Contains 1 Excel file and 1 Word file with the results of the analysis of artifacts presented in Section 4 of the paper:</p>\n<ul>\n<li><p>Characterization_badges. For those papers that earned an ACM artifact badge, this file includes the information retrieved from the paper, and the information that the artifact adds to the one in the paper.</p></li>\n<li><p>Summary_discrepancies. A summary of the discrepancies found between papers and artifacts.</p></li>\n</ul></li>\n<li><p>5_Implications. Contains 1 Excel file with the results of the analysis of validity presented in Section 5 of the paper:</p>\n<ul>\n<li>Validity_analysis. The raw data corresponding to Fig. 3 in the paper is provided, along with the detailed values for each experiment.</li>\n</ul></li>\n</ul>",
        "keywords": "deep learning, machine learning for software engineering, software engineering experimentation",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/GRISE-UPM/Pitfalls_Experiments_DNN4SE/tree/ESEC/FSE'23"
    },
    "10.5281/zenodo.10205261": {
        "doi": "10.5281/zenodo.10205261",
        "author": "Du, Xiaohu and Chen, Xiao and Cao, Jialun and Wen, Ming and Cheung, Shing-Chi and Jin, Hai",
        "title": "Reproduction Package for Article \"Understanding the Bug Characteristics and Fix Strategies of Federated Learning Systems\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10205261",
        "abstract": "<p>The data, source code, and the results of this paper.</p>",
        "keywords": "Bug Characteristics, Empirical Study, Federated Learning",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/CGCL-codes/FL_Bug_Study/tree/v1.0.0"
    },
    "10.5281/zenodo.10205303": {
        "doi": "10.5281/zenodo.10205303",
        "author": "Du, Xiaohu and Wen, Ming and Wei, Zichao and Wang, Shangwen and Jin, Hai",
        "title": "Reproduction Package for Article \"An Extensive Study on Adversarial Attack against Pre-trained Models of Code\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10205303",
        "abstract": "<p>The data, source code, and the results of this paper.</p>",
        "keywords": "Adversarial Attack, Deep Learning, Pre-Trained Model",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/CGCL-codes/Attack_PTMC/tree/v1.0.0"
    },
    "10.5281/zenodo.10205548": {
        "doi": "10.5281/zenodo.10205548",
        "author": "Kim, Soomin and Kim, Hyungseok and Cha, Sang Kil",
        "title": "Artifact for `FunProbe: Probing Functions from Binary Code through Probabilistic Analysis`",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10205548",
        "abstract": "<p>This is an artifact for `FunProbe: Probing Functions from Binary Code through Probabilistic Analysis’, which will be published in the ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering 2023. FunProbe is a function identification tool based on Bayesian Network. The artifact contains the implementation of FunProbe, experimental scripts, and the dataset used to evaluate FunProbe.</p>",
        "keywords": "binary code analysis, function identification, probabilistic analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10208075": {
        "doi": "10.5281/zenodo.10208075",
        "author": "Mikek, Benjamin and Zhang, Qirun",
        "title": "SLOT: SMT-LLVM Optimizing Translation",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10208075",
        "abstract": "<p>SLOT (SMT-LLVM Optimizing Translation) is a software tool that speeds up SMT solving in a solver-agnostic way by simplifying constraints. It converts SMT constraints to LLVM, applies the existing LLVM optimizer, and translates back.</p>",
        "keywords": "compiler optimization, LLVM, SMT solving",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/mikekben/SLOT/tree/FSE2023"
    },
    "10.5281/zenodo.10211988": {
        "doi": "10.5281/zenodo.10211988",
        "author": "Zhao, Zhongkai and Kou, Bonan and Ibrahim, Mohamed Yilmaz and Chen, Muhao and Zhang, Tianyi",
        "title": "Reproduction Package for Article \"Knowledge-Based Version Incompatibility Detection for Deep Learning\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10211988",
        "abstract": "<p>The artifact contains the data and code of DECIDE, a version incompatibility detection tool based on pre-trained language models proposed in “Knowledge-based Version Incompatibility Detection for Deep Learning”. Meanwhile, this artifact also contains data and code to replicate experiment results in the paper. The artifact has been made publicly available on GitHub to support Open Science.</p>",
        "keywords": "Deep Learning, Knowledge Extraction, Version Compatibility",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/KKZ20/DECIDE/tree/v1.1"
    },
    "10.5281/zenodo.10213968": {
        "doi": "10.5281/zenodo.10213968",
        "author": "Lin, Bo and Wang, Shangwen and Liu, Zhongxin and Liu, Yepang and Xia, Xin and Mao, Xiaoguang",
        "title": "Reproduction package for Article \"CCT5: A Code-Change-Oriented Pre-trained Model\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10213968",
        "abstract": "<p>This is the reproduction package for article “CCT5: A Code-Change-Oriented Pre-trained Model”.</p>",
        "keywords": "Code Change, Deep Learning, Pre-Training",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/Ringbo/CCT5/tree/1.0"
    },
    "10.5281/zenodo.10214179": {
        "doi": "10.5281/zenodo.10214179",
        "author": "Nicolae, Maria-Irina and Eisele, Max and Zeller, Andreas",
        "title": "Implementation of paper \"Revisiting Neural Program Smoothing for Fuzzing\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10214179",
        "abstract": "<p>The package contains two Python artifacts: - Neuzz++: the implementation of neural program smoothing for fuzzing designed in the paper - MLFuzz: a benchmarking framework for fuzzing with machine learning.</p>",
        "keywords": "fuzzing, machine learning, neural networks, neural program smoothing, Python",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10215955": {
        "doi": "10.5281/zenodo.10215955",
        "author": "Xu, Junjielong and Fu, Qiuai and Zhu, Zhouruixing and Cheng, Yutong and Li, Zhijing and Ma, Yuchi and He, Pinjia",
        "title": "Hue: A User-Adaptive Parser for Hybrid Logs",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10215955",
        "abstract": "<p>This is the artifact of \" Hue: A User-Adaptive Parser for Hybrid Logs\" (ESEC/FSE’23). Please refer to README.md for more details.</p>",
        "keywords": "Hybrid Logs, Log Analysis, Log Parsing",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.10215965": {
        "doi": "10.5281/zenodo.10215965",
        "author": "Du, Yali and Yu, Zhongxing",
        "title": "Reproduction package for article \"Pre-training Code Representation with Semantic Flow Graph for Effective Bug Localization\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10215965",
        "abstract": "<p>The packaged artifact includes Installation Package, Dataset, Code, and Weights of Pre-trained Models. Moreover, we have write documentations explaining how to obtain the artifact package, how to unpack the artifact, how to get started, and how to use the artifacts in more detail with README.md, REQUIREMENTS.md, and INSTALL.md</p>",
        "keywords": "bug localization, computation role, contrastive learning, pre-trained model, semantic flow graph, type",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/duyali2000/SemanticFlowGraph/tree/v1.0.0"
    },
    "10.5281/zenodo.10221920": {
        "doi": "10.5281/zenodo.10221920",
        "author": "Wang, Yuxin and Welc, Adam and Clapp, Lazaro and Chen, Lingchao",
        "title": "Reproduction Package for Article `Last Diff Analyzer: Multi-language Automated Approver for Behavior-Preserving Code Revisions`",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10221920",
        "abstract": "<p>This artifact contains the source code for the tool we published in the paper <code>Last Diff Analyzer: Multi-language Automated Approver for Behavior-Preserving Code Revisions</code> for re-usability within the research and engineering communities.</p>",
        "keywords": "automated code approver, code reviews, static analysis",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7040003": {
        "doi": "10.5281/zenodo.7040003",
        "author": "Wang, Jiyuan and Zhang, Qian and Rong, Hongbo and Xu, Guoqing Harry and Kim, Miryung",
        "title": "Reproduction Package for \"Leveraging Hardware Probes and Optimizations for Accelerating Fuzz Testing of Heterogeneous Applications\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7040003",
        "abstract": "<p>This is the repo for the HFuzz. We build a cross-devices fuzz testing tool that works on devcloud with DPC++.</p>",
        "keywords": "Fuzzing, Heterogeneous, Software testing",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7041455": {
        "doi": "10.5281/zenodo.7041455",
        "author": "Romano, Alan and Wang, Weihang",
        "title": "Dataset and Experiment Scripts for Article \"When Function Inlining Meets WebAssembly: Counterintuitive Impacts on Runtime Performance\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7041455",
        "abstract": "<p>In this artifact, we provide the experiment results and scripts used to run the experiments described in our accompanying paper. We present the raw runtime results from our Baseline experiment, Experiments 1-5 and the Libsodium.js case study as CSV files. These results include runtime measurements from four optimization levels, O0-O3 and the two browsers analyzed, Chromium and Firefox. This artifact also contains the scripts that we used to run our compile the samples and run our experiments. We also include the Emscripten-generated WebAssembly, HTML, and JS files used to run the samples for each experiment.</p>",
        "keywords": "Binaryen, Emscripten, Function Inlining, LLVM, WebAssembly",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7042015": {
        "doi": "10.5281/zenodo.7042015",
        "author": "Dom\\'{\\i",
        "title": "LibKit source code and database dump",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7042015",
        "abstract": "<p>The artifact contains the source code of the technique and a database dump of the MongoDB database the technique relies on</p>",
        "keywords": "iOS, library detection, mobile apps, static analysis",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7546358": {
        "doi": "10.5281/zenodo.7546358",
        "author": "Wang, Shangwen and Geng, Mingyang and Lin, Bo and Sun, Zhensu and Wen, Ming and Liu, Yepang and Li, Li and Bissyand\\'{e",
        "title": "The Artifact of the ESEC/FSE 2023 Paper Titled \"Natural Language to Code: How Far are We?\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7546358",
        "abstract": "<p>In this online repository, we release the source code of each of the selected techniques as well as the experiment results from each technique (which are stored in the Results.zip file).</p>",
        "keywords": "code generation, code search",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7608802": {
        "doi": "10.5281/zenodo.7608802",
        "author": "Grishina, Anastasiia and Hort, Max and Moonen, Leon",
        "title": "Replication package for \"The EarlyBIRD Catches the Bug: On Exploiting Early Layers of Encoder Models for More Efficient Code Classification\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7608802",
        "abstract": "<p>We refer to the description at https://doi.org/10.5281/zenodo.7608802</p>",
        "keywords": "AI4Code, AI4SE, code classification, ML4SE, model optimization, sustainability, transformer, vulnerability detection",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.7901909": {
        "doi": "10.5281/zenodo.7901909",
        "author": "Ye, Guixin and Hu, Tianmin and Tang, Zhanyong and Fan, Zhenye and Tan, Shin Hwei and Zhang, Bo and Qian, Wenxiang and Wang, Zheng",
        "title": "Reproduction Package for Article \"A Generative and Mutational Approach for Synthesizing Bug-Exposing Test Cases to Guide Compiler Fuzzing\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7901909",
        "abstract": "<p>This artifact is a project for COMFUZZ that consists of source code and documentation. The source code contains various components, including test case generation, differential testing and mutation for focused testing. The purpose of this artifact is to provide a practical solution for users interested in building and utilizing our system in their own environments.</p>",
        "keywords": "Compiler, Deep learning, Fuzzing, Guided testing, Historical bug",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8198972": {
        "doi": "10.5281/zenodo.8198972",
        "author": "Ma, Chenyang and Song, Wei and Huang, Jeff",
        "title": "Reproduction Package for Article 'TransRacer: Function Dependence-Guided Transaction Race Detection for Smart Contracts'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8198972",
        "abstract": "<p>A symbolic analysis tool that detects transaction races for Ethereum smart contracts. Install dependencies: pip install -r requirements.txt. When using the “pip install” command to install web3 on Windows, you may encounter an error if you haven’t installed gcc. To resolve this, you can install Microsoft Visual C++.</p>\n<p>Dependencies source: Z3 solver: Install Z3 package from <a href=\"https://pypi.org/project/z3-solver/#files\">here</a> web3 suit: Install web3 package from [here](https://pypi.org/project/web3/#files Infura account: Acquire Infura from <a href=\"https://infura.io/\">here</a> Etherscan api key: Acquire api key from <a href=\"https://etherscan.io/\">here</a> Contract initial storage: Acquire contract initial storage from <a href=\"https://etherscan.io/\">here</a> If this item is missed, TransRacer will attempt to access the contract’s initial storage by deploying the contract on a private network.</p>\n<p>Steps to Run TransRacer 1) Make sure you can connect to the internet before running TransRacer. 2) After the TransRacer.zip is downloaded and the python environment is configured, one can run TransRacer with follow command: cd /SE &amp;\\&amp; python main.py –addr [Contract address] –owner [Owner address] – agency_account [Infura account] –init_storage_path [initial storage file path] –api_key [api key]</p>\n<p>Quick test Contract DistractedBoyfriend: cd /SE &amp;\\&amp; python main.py –addr 0x351016D3eC753Db8E98a783CF51c8D6a4a8af151 –owner 0x4a3D25D58930f7b04E85E7946852fC2d8Fd59489 –agency_account https://mainnet.infura.io/v3/e67c4e1f139d4940a53bc61120bc3bf5 –api_key WTZ5E69T1SKACPGYF29W6ZG6CE3123APIU</p>\n<p>The output of TransRacer is stored in a report file, which includes the following sub-files: 1) The “races” file provides information on function pairs that can lead to races and their corresponding witness transactions. 2) The “race bugs” file lists function pairs that can lead to storage and balance differences. 3) The “deps” file presents the found function dependencies. 4) The “time_cost” file reports the time duration spent by TransRacer on testing each contract. For the 50 contracts, the average time cost of the static analyzing, dependence analyzing, and race checking steps is approximately 1.0 minute, 1.5 minutes, and 2.6 minutes, respectively.</p>",
        "keywords": "data race, Ethereum, smart contract, symbolic execution",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8237328": {
        "doi": "10.5281/zenodo.8237328",
        "author": "Feldman, Kobi and Kellogg, Martin and Chaparro, Oscar",
        "title": "Replication package for the paper: \"On the Relationship Between Code Verifiability and Understandability\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8237328",
        "abstract": "<p>This is the FSE’23 replication package of our meta-analysis that assesses the relationship between code verifiability and understandability. The package includes code snippets, human-based comprehensibility measurements, verification tools, scripts to process tool output and produce the study results, the raw study results, and documentation for replication.</p>",
        "keywords": "code comprehension, meta-analysis, static analysis, Verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/sea-lab-wm/complexity-verification-project/tree/fse23-artifact-1.1"
    },
    "10.5281/zenodo.8256377": {
        "doi": "10.5281/zenodo.8256377",
        "author": "So, Sunbeom and Oh, Hakjoo",
        "title": "Artifact for \"SmartFix: Fixing Vulnerable Smart Contracts by Accelerating Generate-and-Verify Repair using Statistical Models\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8256377",
        "abstract": "<p>This artifact contains the package for reproducing the main experimental results in our paper accepted to ESEC/FSE 2023: “SmartFix: Fixing Vulnerable Smart Contracts by Accelerating Generate-and-Verify Repair using Statistical Models”</p>",
        "keywords": "generate-and-verify repair, smart contract, statistical model",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8264819": {
        "doi": "10.5281/zenodo.8264819",
        "author": "Utture, Akshay and Palsberg, Jens",
        "title": "Artifact for FSE'23 paper \"From Leaks to Fixes: Automated Repairs for Resource Leak Warnings\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8264819",
        "abstract": "<p>The artifact includes the source code, experimental results, and detailed documentation. It also includes a VM image that comes with pre-installed dependencies, and can be used to quickly reproduce the results of the paper by running a few simple scripts.</p>",
        "keywords": "Automated Repair, Resource Leaks, Static Analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8266568": {
        "doi": "10.5281/zenodo.8266568",
        "author": "Sun, Ruoxi and Xue, Minhui and Tyson, Gareth and Dong, Tian and Li, Shaofeng and Wang, Shuo and Zhu, Haojin and Camtepe, Seyit and Nepal, Surya",
        "title": "An Explainability-Guided Testing Framework for Robustness of Malware Detectors",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8266568",
        "abstract": "<p>Numerous open-source and commercial malware detectors are available. However, their efficacy is threatened by new adversarial attacks, whereby malware attempts to evade detection, e.g., by performing feature-space manipulation. In this work, we propose an explainability-guided and model-agnostic testing framework for robustness of malware detectors when confronted with adversarial attacks. The framework introduces the concept of Accrued Malicious Magnitude (AMM) to identify which malware features could be manipulated to maximize the likelihood of evading detection. We then use this framework to test several state-of-the-art malware detectors’ abilities to detect manipulated malware. We find that (i) commercial antivirus engines are vulnerable to AMM-guided test cases; (ii) the ability of a manipulated malware generated using one detector to evade detection by another detector (i.e., transferability) depends on the overlap of features with large AMM values between the different detectors; and (iii) AMM values effectively measure the fragility of features (i.e., capability of feature-space manipulation to flip the prediction results) and explain the robustness of malware detectors facing evasion attacks. Our findings shed light on the limitations of current malware detectors, as well as how they can be improved.</p>",
        "keywords": "Explainability, Malware detectors, Robustness",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8266660": {
        "doi": "10.5281/zenodo.8266660",
        "author": "Yin, Yining and Feng, Yang and Weng, Shihao and Liu, Zixi and Yao, Yuan and Zhang, Yichi and Zhao, Zhihong and Chen, Zhenyu",
        "title": "wengshihao/DFauLo: Dfaulo V1.3",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8266660",
        "abstract": "<p>This repository is the official implementation of the tool DfauLo.</p>\n<p>DfauLo is a dynamic data fault localization tool for deep neural networks (DNNs), which can locate mislabeled and noisy data in the deep learning datasets. Inspired by conventional mutation-based code fault localization, DfauLo generates multiple DNN model mutants of the original trained DNN model and maps the extracted features into a suspiciousness score indicating the probability of the given data being a data fault. DfauLo is the first dynamic data fault localization technique, prioritizing the suspected data based on user feedback and providing the generalizability to unseen data faults during training.</p>",
        "keywords": "fault localization\ndeep learning testing\ndata quality",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/wengshihao/DFauLo/tree/DfauLo_V1.3"
    },
    "10.5281/zenodo.8267114": {
        "doi": "10.5281/zenodo.8267114",
        "author": "Zhang, Mengxiao and Xu, Zhenyang and Tian, Yongqiang and Jiang, Yu and Sun, Chengnian",
        "title": "Artifact for \"PPR: Pairwise Program Reduction\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8267114",
        "abstract": "<p>This artifact contains the source code, benchmarks, scripts, and documentation for reproduce the evaluation results described in the paper “PPR: Pairwise Program Reduction” accepted at ESEC/FSE 2023.</p>",
        "keywords": "Bug Isolation, Delta Debugging, Program Reduction",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8267404": {
        "doi": "10.5281/zenodo.8267404",
        "author": "Lee, Seongmin and B\\\"{o",
        "title": "Reproduction Package for Article `Statistical Reachability Analysis'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8267404",
        "abstract": "<h2 id=\"artifact-for-the-project-statistical-reachability-analysis\">Artifact for the project “Statistical Reachability Analysis”</h2>\n<p>This repository contains the artifact of the paper “Statistical Reachability Analysis” submitted to the FSE/ESEC 2023 conference.q</p>\n<h2 id=\"artifact-structure\">Artifact structure</h2>\n<p>The artifact is structured as follows:</p>\n<pre><code>├── README.md (this file)\n├── rq1 (folder containing the data for the results of RQ1)\n│&nbsp;&nbsp; ├── laplace (folder containing the data for the Laplace estimator)\n|   |   └── RQ1-Laplace.ipynb (Jupyter notebook to generate the RQ1 results for the Laplace estimator)\n│&nbsp;&nbsp; ├── preach (folder containing the data for the PReach)\n│&nbsp;&nbsp; └── pse (folder containing the data for the PSE)\n├── rq2 (folder containing the data for the results of RQ2)\n│&nbsp;&nbsp; ├── fuzz-data (folder containing the fuzzing data)\n│&nbsp;&nbsp; ├── figures (folder containing the figures)\n|   ├── esti-result (folder containing the estimation results of statistical reachability estimators)\n|   ├── scripts (folder containing the scripts to generate the estimation results)\n|   ├── sra (folder containing the source code of the SRA tool)\n|   RQ2-estimate.ipynb (Jupyter notebook to generate the RQ2 estimation results)\n└── RQ2-timespent.ipynb (Jupyter notebook to generate the RQ2 time spent results)</code></pre>",
        "keywords": "Markov chain, Quantitative reachability analysis, Reaching probability, Statistical reachability analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8267775": {
        "doi": "10.5281/zenodo.8267775",
        "author": "Liu, Bo and Liu, Hui and Li, Guangjie and Niu, Nan and Xu, Zimao and Wang, Yifan and Xia, Yunni and Zhang, Yuxia and Jiang, Yanjie",
        "title": "Reproduction Package for Ariticle `Deep Learning Based Feature Envy Detection Boosted by Real-World Examples'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8267775",
        "abstract": "<p>feTruth is a tool written in Python that can detect feature envy smells in Java projects.</p>",
        "keywords": "Code Smells, Feature Envy, Software Refactoring",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/lyoubo/feTruth/tree/v1.0.0"
    },
    "10.5281/zenodo.8267827": {
        "doi": "10.5281/zenodo.8267827",
        "author": "Yang, Jun and Wang, Yuehan and Lou, Yiling and Wen, Ming and Zhang, Lingming",
        "title": "Reproduction artifact of the paper \"A Large-scale Empirical Review of Patch Correctness Checking Approaches\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8267827",
        "abstract": "<p>The artifact of the paper “A Large-scale Empirical Review of Patch Correctness Checking Approaches”. The artifact contains a new manually labeled dataset for Patch Correctness Checking and evaluation experiments for nine Patch Correctness Checking techniques.</p>",
        "keywords": "Empirical assessment., Patch correctness, Program repair",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/claudeyj/patch_correctness/tree/v1.0"
    },
    "10.5281/zenodo.8269801": {
        "doi": "10.5281/zenodo.8269801",
        "author": "Correnson, Arthur and Steinh\\\"{o",
        "title": "Artifact for \"Engineering a Formally Verified Automated Bug Finder\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8269801",
        "abstract": "<p>This artifact comprises the Docker image with the WiSE and PyWiSE prototypes presented in the paper&nbsp;“’Engineering a Formally Verified Automated Bug Finder” at ESEC/FSE’23.</p>\n<p>The artifact contains the following files:</p>\n<p>README.md: This file provides an overview of the artifact, including information on running the examples provided in the paper and on navigating our Coq source code. REQUIREMENTS.md: The requirements for running our artifact. STATUS.md: The list of ESEC/FSE badges we apply for by submitting this artifact. LICENSE.md: The distribution rights for this artifact’s code and documentation. INSTALL.md: Installation instructions. wise-docker-20230821.tar.gz: The Docker container with our artifacts in a working environment.&nbsp;</p>",
        "keywords": "Program Verification, Proof Assistants, Symbolic Execution, Symbolic Semantics, Testing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8270267": {
        "doi": "10.5281/zenodo.8270267",
        "author": "Le Dilavrec, Quentin and Khelladi, Djamel Eddine and Blouin, Arnaud and J\\'{e",
        "title": "Reproduction packge for HyperDiff",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8270267",
        "abstract": "<p>The artifact allow to reproduce results from associated article. It contains : - the implementation of our approach, - the baseline tool, - the scripts to run the experiments, and - the notebooks to compute plot the figures.</p>",
        "keywords": "Code history mining, Diff, Edit script, Temporal code analysis",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/quentinLeDilavrec/FSE23/tree/fse2023_revision"
    },
    "10.5281/zenodo.8270900": {
        "doi": "10.5281/zenodo.8270900",
        "author": "Souza, Beatriz and Pradel, Michael",
        "title": "Artifact for LExecutor: Learning-Guided Execution",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8270900",
        "abstract": "<p>This artifact contains the implementation of LExecutor and supplementary material for the paper “LExecutor: Learning-Guided Execution” (FSE’23).</p>",
        "keywords": "dynamic analysis, execution, neural models",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8271236": {
        "doi": "10.5281/zenodo.8271236",
        "author": "Karimipour, Nima and Pham, Justin and Clapp, Lazaro and Sridharan, Manu",
        "title": "Practical Inference of Nullability Types",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8271236",
        "abstract": "<h2 id=\"this-upload-is-a-docker-image-containing-the-artifact-and-scripts-to-rerun-experiments.\">This upload is a docker image containing the artifact and scripts to rerun experiments.</h2>\n<h3 id=\"container-structure\">Container Structure</h3>\n<p>This docker image contains:</p>\n<ul>\n<li><p>source code (NullAwayAnnotator) of our tool (will be found in /var/NullAwayAnnotator)</p></li>\n<li><p>all benchmarks (will be cloned in /var/benchmarks)</p></li>\n<li><p>scripts to reproduce our experiments (will be found in /var/AE)</p></li>\n</ul>\n<h3 id=\"setup\">Setup</h3>\n<ol type=\"1\">\n<li><p>Install Docker based on your system configuration: <a href=\"https://docs.docker.com/get-docker/\">Get Docker</a>.</p></li>\n<li><p>Import the artifact into Docker: <code>docker load annotator-ae-fse-2023</code></p></li>\n<li><p>Run the Docker image (give container at least 16gigs of ram): <code>docker run --name annotator-ae annotator-ae-fse-2023 &amp;</code></p></li>\n<li><p>Access docker container shell: <code>docker exec -it annotator-ae bash</code></p></li>\n</ol>\n<p>All required packages have been already installed in the docker image, the docker can be safely executed with no internet connection.</p>\n<p>Instructions for how to run the paper’s experiments are inside the container in the <code>README.md</code> file at <code>/var/README.md</code>.</p>",
        "keywords": "inference, java, nullability, static-code-analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8271643": {
        "doi": "10.5281/zenodo.8271643",
        "author": "Ganji, Mohammad and Alimadadi, Saba and Tip, Frank",
        "title": "JScope",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8271643",
        "abstract": "<p>VScode Extension to measure Asynchronous coverage for JavaScript</p>",
        "keywords": "Asynchronous JavaScript, Code Coverage, Dynamic Analysis",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8271781": {
        "doi": "10.5281/zenodo.8271781",
        "author": "Happe, Andreas and Cito, J\\\"{u",
        "title": "Supplemental/Meta Interview Data",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8271781",
        "abstract": "<ul>\n<li>Interview Question Guide</li>\n<li>Research Plan</li>\n<li>Ethical Approval</li>\n</ul>",
        "keywords": "interview guide, research plan",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8271853": {
        "doi": "10.5281/zenodo.8271853",
        "author": "Ahmed, Shibbir and Imtiaz, Sayem Mohammad and Khairunnesa, Samantha Syeda and Cruz, Breno Dantas and Rajan, Hridesh",
        "title": "Replication Package of the ESEC/FSE 2023 Paper Entitled \"Design by Contract for Deep Learning APIs\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8271853",
        "abstract": "<p>This repository contains the reproducibility package, source code, benchmark, and results for the paper - “Design by Contract for Deep Learning APIs”, which appeared in ESEC/FSE’2023: The 31st ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering at San Francisco, California.</p>",
        "keywords": "API contracts, Deep learning, specification language",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8271984": {
        "doi": "10.5281/zenodo.8271984",
        "author": "Xu, Xiangzhe and Xuan, Zhou and Feng, Shiwei and Cheng, Siyuan and Ye, Yapeng and Shi, Qingkai and Tao, Guanhong and Yu, Le and Zhang, Zhuo and Zhang, Xiangyu",
        "title": "PEM",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8271984",
        "abstract": "<p>This repository contains the artifacts of PEM. We provide a runnable docker image for the artifact evaluation. In addition, for future research and development, we provide the source code of PEM and a detailed instruction on how to compile it from the source code.</p>",
        "keywords": "Binary Similarity, Dynamic Analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/XZ-X/PEM/tree/artifact-evaluation"
    },
    "10.5281/zenodo.8272293": {
        "doi": "10.5281/zenodo.8272293",
        "author": "Song, Liyan and Minku, Leandro Lei and Teng, Cong and Yao, Xin",
        "title": "Replication package for Artical `A Practical Human Labeling Method for Online Just-In-Time Software Defect Prediction'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8272293",
        "abstract": "<p>This repository contains the source codes together with the datasets to replicate the above paper published in FSE2023.</p>",
        "keywords": "human inspection, human labeling, Just-in-time software defect prediction, online learning, verification latency, waiting time",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/sunnysong14/HumLa-fse2023/tree/release1.2"
    },
    "10.5281/zenodo.8272687": {
        "doi": "10.5281/zenodo.8272687",
        "author": "Peng, Yaohui and Xie, Jing and Yang, Qiongling and Guo, Hanwen and Li, Qingan and Xue, Jingling and Yuan, Mengting",
        "title": "Reproduction Package for Article `Statistical Type Inference for Incomplete Programs'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8272687",
        "abstract": "<p>Stir is a novel two-stage approach for inferring types in incomplete programs that may be ill-formed, where whole-program syntactic analysis often fails. In the first stage, Stir predicts a type tag for each token by using neural networks, and consequently, infers all the simple types in the program. In the second stage, Stir refines the complex types for the tokens with predicted complex type tags. Unlike existing machine-learning-based approaches, which solve type inference as a classification problem, Stir reduces it to a sequence-to-graph parsing problem. This artifact contains the implementation and evaluation program of Stir, which can be used to reproduce the evaluation results, and can also serve as a standalone application for general use of the approach. This artifact contains the implementation and evaluation program, which can be used to reproduce the evaluation results, and can also serve as a standalone application for general use.</p>\n<p>This artifact is organized as follows: - <code>abstract.md</code>: file describing the artifact itself. - <code>README.md</code>: main document file. - <code>INSTALL.md</code>: instructions for obtaining the artifact and setting up the environment. - <code>REQUIREMENTS.md</code>: requirements for the hardware and software environment. - <code>STATUS.md</code>: badges that this artifact applies for and the reasons for applying for them. - <code>LICENSE</code>: license (MIT License) of the artifact. - <code>main.py</code>: the main entry file. - <code>first/</code>: the source code of the first stage of STIR. - <code>second/</code>: the source code of the second stage of STIR. - <code>data/</code>: the data used in the evaluation. - <code>pretrained/</code>: the pretrained model used in the evaluation. - <code>Dockerfile</code>: Dockerfile for building the Docker image with the software environment to reproduce the evaluation results. - <code>environment.yml</code>: conda environment file for reproducing the evaluation results.</p>",
        "keywords": "deep learning, graph generation, structured learning, Type inference",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/StirArtifact/stir/tree/fse2023"
    },
    "10.5281/zenodo.8272703": {
        "doi": "10.5281/zenodo.8272703",
        "author": "Weyssow, Martin and Zhou, Xin and Kim, Kisub and Lo, David and Sahraoui, Houari",
        "title": "Replication package for the article \"On the Usage of Continual Learning for Out-of-Distribution Generalization in Pre-trained Languages Models of Code\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8272703",
        "abstract": "<p>The artifact contains the Python project implemented to conduct the experiments presented in the paper. It includes an extensive guide on how to reproduce the experiments and acquire the data for performing pre-training, fine-tuning and inference using pre-trained language models.</p>",
        "keywords": "continual learning, deep learning for code, out-of-distribution generalization, pre-trained language models",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/martin-wey/cl-code-apis/tree/v1.0"
    },
    "10.5281/zenodo.8272808": {
        "doi": "10.5281/zenodo.8272808",
        "author": "Srivastava, Prashast and Toffalini, Flavio and Vorobyov, Kostyantyn and Gauthier, Fran\\c{c",
        "title": "Reproduction Package for paper \"Crystallizer: A Hybrid Path Analysis Framework To Aid in Uncovering Deserialization Vulnerabilities\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8272808",
        "abstract": "<p>The is a reproduction package containing source code of our framework along with scripts, auxiliary data required to run our experiments along with data to reproduce the results presented in the paper.</p>",
        "keywords": "deserialization testing, hybrid analysis, Java",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8272828": {
        "doi": "10.5281/zenodo.8272828",
        "author": "Zhao, Qiyuan and Luo, Chuan and Cai, Shaowei and Wu, Wei and Lin, Jinkun and Zhang, Hongyu and Hu, Chunming",
        "title": "Artifact for ESEC/FSE 2023 Article `CAmpactor: A Novel and Effective Local Search Algorithm for Optimizing Pairwise Covering Arrays'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8272828",
        "abstract": "<p>Combinatorial interaction testing (CIT) stands as a widely adopted testing technique for testing interactions among options within highly configurable systems. Within the realm of CIT, covering arrays refer to the test suites that are able to cover all such interactions, usually subject to certain hard constraints. Specifically, pairwise covering arrays (PCAs) are extensively utilized, because they are capable of obtaining a good balance between testing costs and the capability to disclose faults.</p>\n<p>CAmpactor is a novel and effective local search algorithm for compacting given PCAs into smaller-sized ones, and it significantly advances the state of the art in building PCAs. In this artifact, we provide the implementation of CAmpactor, the testing instances adopted in the experiments and the detailed evaluation results.</p>",
        "keywords": "Covering array, Local search, Software testing",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/zqy1018/CAmpactor-the-tool/tree/v1.0.0"
    },
    "10.5281/zenodo.8275813": {
        "doi": "10.5281/zenodo.8275813",
        "author": "Cabra-Acela, Laura and Mojica-Hanke, Anamaria and Linares-V\\'{a",
        "title": "Idaka: Tool Demo &nbsp;for the FSE 2023 Demonstration Article `On Using Information Retrieval to Recommend Machine Learning Good Practices for Software Engineers`",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8275813",
        "abstract": "<p>This is the artifact accompanying our demonstration article <code>On Using Information Retrieval to Recommend Machine Learning Good Practices for Software Engineers</code> accepted for the presentation at the ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE) 2023. This artifact contains the source code and data required to deploy Idaka. This tool allows the retrieval and generation of machine learning practices based on a systematic approach (browsing all the practices) or a query. In addition, it contains a readme file in which the instructions for building and deploying the tools are available.</p>",
        "keywords": "Good practices, Information retrieval, Large language models, Machine learning",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/TheSoftwareDesignLab/Idaka/tree/v.1"
    },
    "10.5281/zenodo.8275866": {
        "doi": "10.5281/zenodo.8275866",
        "author": "Yang, Yibiao and Sun, Maolin and Wang, Yang and Li, Qingyang and Wen, Ming and Zhou, Yuming",
        "title": "ESEC/FSE 2023 Artifact for \"Heterogeneous Testing for Coverage Profilers Empowered with Debugging Support\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8275866",
        "abstract": "<p>This artifact contains Decov, a testing tool for coverage profilers. Additionally, it includes C2V and Cod for comparing the effectiveness of different tools. The README.md file provides a description of how to use the artifact.</p>",
        "keywords": "bug detection, Code coverage, coverage profiler, debugging support, heterogeneous testing",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8276375": {
        "doi": "10.5281/zenodo.8276375",
        "author": "Yu, Guangba and Chen, Pengfei and Li, Yufeng and Chen, Hongyang and Li, Xiaoyun and Zheng, Zibin",
        "title": "Nezha: Interpretable Fine-Grained Root Causes Analysis for Microservices on Multi-modal Observability Data",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8276375",
        "abstract": "<p>Nezha is an interpretable and fine-grained RCA approach that pinpoints root causes at the code region and resource type level by incorporative analysis of multimodal data. Nezha transforms heterogeneous multi-modal data into a homogeneous event representation and extracts event patterns by constructing and mining event graphs. The core idea of Nezha is to compare event patterns in the fault-free phase with those in the fault-suffering phase to localize root causes in an interpretable way.</p>",
        "keywords": "Microservice, Multi-modal Observability Data, Root Cause Analysis",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/yuxiaoba/Nezha/tree/v0.1"
    },
    "10.5281/zenodo.8276904": {
        "doi": "10.5281/zenodo.8276904",
        "author": "Chi, Xiaye and Liu, Hui and Li, Guangjie and Wang, Weixiao and Xia, Yunni and Jiang, Yanjie and Zhang, Yuxia and Ji, Weixing",
        "title": "Replication package for paper \"An Automated Approach to Extracting Local Variables\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8276904",
        "abstract": "<p>This is the replication package for FSE submission, containing both tools and data that are requested by the replication. It also provides detailed instructions to replicate the evaluation.</p>",
        "keywords": "Bugs, Extract Local Variable, Reliable, Software Refactoring",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/chixiaye/ValExtractor/tree/v1.0.0"
    },
    "10.5281/zenodo.8279414": {
        "doi": "10.5281/zenodo.8279414",
        "author": "Chen, Zhiming and Chen, Pengfei and Wang, Peipei and Yu, Guangba and He, Zilong and Mai, Genting",
        "title": "Reproduction Package for Article 'DiagConfig: Configuration Diagnosis of Performance Violations in Configurable Software Systems'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8279414",
        "abstract": "<p>DiagConfig is a white-box configuration diagnosis system and is general enough to adapt to software systems under different configurations, workloads, and environments. This artifact includes the data and source code of DiagConfig for evaluation reproduction.</p>",
        "keywords": "Configuration diagnosis, Performance violation, Program analysis, Taint tracking",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/jimmy66688/DiagConfig/tree/1.0"
    },
    "10.5281/zenodo.8280911": {
        "doi": "10.5281/zenodo.8280911",
        "author": "Nguyen, Giang and Biswas, Sumon and Rajan, Hridesh",
        "title": "Replication Package of the ESEC/FSE 2023 Paper Entitled \"Fix Fairness, Don't Ruin Accuracy: Performance Aware Fairness Repair using AutoML\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8280911",
        "abstract": "<p>To increase transparency and encourage reproducibility, we have made our artifact publicly available. All the source code and evaluation data with detailed descriptions will be updated here: https://github.com/giangnm58/Fair-AutoML.</p>",
        "keywords": "automated machine learning, bias mitigation, fairness-accuracy trade-off, machine learning software, Software fairness",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8280969": {
        "doi": "10.5281/zenodo.8280969",
        "author": "Gao, Xinyu and Wang, Zhijie and Feng, Yang and Ma, Lei and Chen, Zhenyu and Xu, Baowen",
        "title": "Replication Package for Article \"Benchmarking Robustness of AI-Enabled Multi-sensor Fusion Systems: Challenges and Opportunities\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8280969",
        "abstract": "<p>This replication package contains the implementation of our benchmarks, including the fusion system, corruption patterns, evaluation metrics and data generation scripts. More details can be found in https://sites.google.com/view/ai-msf-benchmark .</p>",
        "keywords": "AI Systems, Benchmarks, Multi-Sensor Fusion, Perception Systems",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8281250": {
        "doi": "10.5281/zenodo.8281250",
        "author": "Wei, Yuxiang and Xia, Chunqiu Steven and Zhang, Lingming",
        "title": "Reproduction Package (Docker Image) for the ESEC/FSE 2023 Paper \"Copiloting the Copilots: Fusing Large Language Models with Completion Engines for Automated Program Repair\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8281250",
        "abstract": "<p>This is the artifact accompanying our ESEC/FSE’23 paper “Copiloting the Copilots: Fusing Large Language Models with Completion Engines for Automated Program Repair”. For user convenience, we deliver our artifact in the form of a Docker image that has resolved all the software dependencies beforehand. The Docker image comprises (1) the source code of <strong>Repilot</strong>, the patch generation tool introduced in the paper, (2) all the data needed to reproduce the experiments done for the paper, (3) a detailed documentation on how to achieve the experimental results step-by-step, and (4) the <code>Dockerfile</code> we use to create this image.</p>",
        "keywords": "Artifact, Docker Image, Repilot",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8283633": {
        "doi": "10.5281/zenodo.8283633",
        "author": "Wang, Bo and Li, Ruishi and Li, Mingkai and Saxena, Prateek",
        "title": "Reproduction Package for Article `TransMap: Pinpointing Mistakes in Neural Code Translation'",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8283633",
        "abstract": "<p>This is the artifact for the paper “TransMap: Pinpointing Mistakes in Neural Code Translation” published in ESEC/FSE 2023</p>\n<p>The latest artifact can be found here: https://github.com/HALOCORE/TransMap</p>\n<p>This artifact (TransMap) is a tool to pinpoint semantic mistakes in neural code translation by Codex or ChatGPT. More specifically, it focuses on Python to JavaScript code translation.</p>\n<p>It takes a standalone Python program and its JavaScript translation (by Codex or ChatGPT) as input. It will first generate a source mapping between statements in the target program and the source program, using Codex or ChatGPT. Next, it will use the generated source map to aid in tracing the execution of the translated program and comparing it against the source reference program to pinpoint semantic mistakes in the translated program.</p>",
        "keywords": "Code Translation, Large Language Models, Semantic Mistakes",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8289599": {
        "doi": "10.5281/zenodo.8289599",
        "author": "Benoit, Tristan and Marion, Jean-Yves and Bardin, S\\'{e",
        "title": "Artifacts - Scalable Program Clone Search through Spectral Analysis",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8289599",
        "abstract": "<h2 id=\"artifacts---scalable-program-clone-search-through-spectral-analysis\">Artifacts - Scalable Program Clone Search through Spectral Analysis</h2>\n<p>We focus on the problem of program clone search, which involves finding the program in a repository most similar to a target program. Program clone search has important applications, including malware detection and program clustering.</p>\n<p>In solving this problem, the inherent workflow involves disassembly, feature extraction (or preprocessing), clone searches, and subsequent generation of tables.</p>\n<p>A good similarity metric is crucial to finding the repository’s closest program. It has to be precise and robust even in cross-architecture scenarios and fast even when dealing with huge repositories. This artifact encompasses 21 distinctive clone search methods. Each method is different, and therefore, their workflow may be slightly different. Overall, the artifact is a purposely-built framework for clone search method comparison. It is easily extensible and can be tweaked to carry out new measurements.</p>\n<p>The artifact includes four datasets with vast numbers of programs: Basic (1K), BinKit (98K), IoT (20K), and Windows (85K). Due to the enormous scale of these datasets, this artifact demands significant time consumption. To offer a perspective, the disassembly process on these considerable datasets can take days even when operating on 20 cores. The subsequent steps, such as preprocessing and clone searches, can also demand hundreds of hours. Note that we have gathered 2 TB of disassembled files throughout accumulating this data.</p>\n<p>To tackle these time and space constraints, we have ensured that precomputed data are available within this artifact at multiple workflow phases. This enables a quick transition from reproducing one workflow phase to another. However, we could not include all disassembled files, so we mainly focused on the last phases, such as a clone search.</p>\n<h3 id=\"examples-of-use\">Examples of Use</h3>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\"></a><span class=\"ex\">conda</span> activate PSS_Base</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\"></a><span class=\"ex\">python3</span> MakeTables.py</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\"></a><span class=\"ex\">python3</span> MakeAblationTables.py</span></code></pre></div>\n<p>The above will produce in a few minutes the Tables of our article using precomputed results.</p>\n<p>See <a href=\"/do/10.5281/zenodo.8289599/export-citation-abs/EXAMPLES.md\">EXAMPLES.md</a> for five quick examples of replications using this artifact.</p>\n<h3 id=\"usage---basic-dataset\">Usage - Basic Dataset</h3>\n<h4 id=\"replication-script\">Replication Script</h4>\n<p>To replicate clone searches on the Basic dataset with all methods without any preprocessing phases, use the script provided:</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\"></a><span class=\"ex\">conda</span> activate PSS_Base</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\"></a><span class=\"ex\">python3</span> SetAbsolutePath.py</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\"></a><span class=\"fu\">bash</span> ReplicateCloneSearchesBasic.py</span></code></pre></div>\n<p>It requires 40 cores and at least 100 GB of memory and should run for between 140 hours and 350 hours.</p>\n<h4 id=\"generalities\">Generalities</h4>\n<p>For Basic dataset computations, ensure you have run <code>python3 SetAbsolutePath.py</code>.</p>\n<p>Inside a method folder: - <code>RunMakeMD3.py</code> will compute all similarity indices using precomputed features. - <code>RunMakeMD.py</code> will utilize these indices to compute the test field results.</p>\n<p>To reproduce the feature extraction, usually a script called <code>Preprocess.py</code> can be run.</p>\n<p>Some frameworks have a more complex feature extraction workflow that can take a certain amount of computation.</p>\n<p>For instance, a function embedding such as AlphaDiff requires a learning phase of around 60 hours with 100 GB of RAM.</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\"></a><span class=\"ex\">conda</span> activate PSS_Base</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\"></a><span class=\"bu\">cd</span> AlphaDiff/Train</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\"></a><span class=\"fu\">unzip</span> datasetAD.Py</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\"></a><span class=\"ex\">python3</span> main.py</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\"></a><span class=\"fu\">rm</span> datasetAD.h5</span></code></pre></div>\n<p>It is followed, by an embedding computation phase of 5 hours.</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\"></a><span class=\"bu\">cd</span> AlphaDiff/Embeds/</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\"></a><span class=\"ex\">python3</span> MakeEmbeds.py</span></code></pre></div>\n<p>Then, a distance computation phase of between 18 and 40 hours using 40 cores and 100 GB of RAM.</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\"></a><span class=\"bu\">cd</span> AlphaDiff/AD_gDist/</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\"></a><span class=\"ex\">python3</span> Run.py</span></code></pre></div>\n<p>After that, similarity indices can be made from these computations.</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\"></a><span class=\"bu\">cd</span> AlphaDiff/makeResults/</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\" aria-hidden=\"true\"></a><span class=\"ex\">python3</span> RunMakeMD3.py</span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\" aria-hidden=\"true\"></a><span class=\"ex\">python3</span> RunMakeMD.py</span></code></pre></div>\n<h3 id=\"usage---binkit-dataset\">Usage - BinKit Dataset</h3>\n<h4 id=\"replication-script-1\">Replication Script</h4>\n<p>To replicate clone searches on the BinKit dataset without any preprocessing phases, use the script provided:</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\"></a><span class=\"ex\">conda</span> activate PSS_Base</span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\" aria-hidden=\"true\"></a><span class=\"fu\">bash</span> ReplicateCloneSearchesBinKit.py</span></code></pre></div>\n<p>It requires 40 cores and at least 100 GB of memory and should run for between 80 hours and 200 hours.</p>\n<h4 id=\"generalities-1\">Generalities</h4>\n<p>The <code>BinKit</code> directory has two subdirectories, namely, <code>Obfus</code>, which deals with obfuscated programs, and <code>Normal</code>. Each subdirectory entails a <code>DataGeneration</code> folder which holds the disassembly scripts, and a unique folder for each method. These method folders have scripts to extract features and embeds from samples.</p>\n<p>Each subdirectory contains three significant scripts: 1. <code>Run.py</code>: This script reproduces clone searches using precomputed features stored in folders like <code>NORMAL_EMBEDS_2</code>. 2. <code>Read.py</code>: It converts the results into a readable output. 3. <code>ReadElapsed.py</code>: It converts the results into a dictionary storing runtimes.</p>\n<p>The <code>Redaction</code> subdirectory within <code>BinKit</code> holds scripts that compute tables based on results obtained within each subdataset.</p>\n<h3 id=\"usage---iot-and-windows-datasets\">Usage - IoT and Windows Datasets</h3>\n<h4 id=\"replication-script---iot\">Replication Script - IoT</h4>\n<p>To replicate clone searches on the IoT malware dataset without any preprocessing phases, use the script provided:</p>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb8-1\"><a href=\"#cb8-1\" aria-hidden=\"true\"></a><span class=\"ex\">conda</span> activate PSS_Base</span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\" aria-hidden=\"true\"></a><span class=\"fu\">bash</span> ReplicateCloneSearchesIoT.py</span></code></pre></div>\n<p>It requires 40 cores and at least 100 GB of memory and should run for between 1 hours and 3 hours.</p>\n<h4 id=\"replication-script---windows\">Replication Script - Windows</h4>\n<p>To replicate clone searches on the Windows dataset without any preprocessing phases, use the script provided:</p>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb9-1\"><a href=\"#cb9-1\" aria-hidden=\"true\"></a><span class=\"ex\">conda</span> activate PSS_Base</span>\n<span id=\"cb9-2\"><a href=\"#cb9-2\" aria-hidden=\"true\"></a><span class=\"fu\">bash</span> ReplicateCloneSearchesWindows.py</span></code></pre></div>\n<p>It requires 40 cores and at least 100 GB of memory and should run for between 55 hours and 140 hours.</p>\n<h4 id=\"generalities-2\">Generalities</h4>\n<p>Both <code>IoT</code> and <code>Windows</code> folders contain a <code>DataGeneration</code> subdirectory with disassembly scripts and scripts for each method to extract features and embeddings from samples. Additionally, each dataset has a <code>DataLabelling</code> subdirectory, which contains scripts for labeling data.</p>\n<p>Experiment folders such as <code>XP</code> include <code>Run.py</code> scripts for conducting clone searches using precomputed embeddings. Lastly, the <code>Redaction</code> subdirectory in each dataset includes scripts for computing tables from the results of experiment folders.</p>\n<h3 id=\"psso-study\">PSSO Study</h3>\n<p>To replicate clone searches for the PSSO Study on the Windows dataset, without any preprocessing phases, use the script provided:</p>\n<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb10-1\"><a href=\"#cb10-1\" aria-hidden=\"true\"></a><span class=\"ex\">conda</span> activate PSS_Base</span>\n<span id=\"cb10-2\"><a href=\"#cb10-2\" aria-hidden=\"true\"></a><span class=\"fu\">bash</span> ReplicateCloneSearchesPSSOStudy.py</span></code></pre></div>\n<p>It requires 40 cores and at least 100 GB of memory and should run for between 4 hours and 10 hours.</p>\n<h3 id=\"ablation-study\">Ablation Study</h3>\n<p>To replicate clone searches for the Ablation Study, without any preprocessing phases, use the script provided:</p>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb11-1\"><a href=\"#cb11-1\" aria-hidden=\"true\"></a><span class=\"ex\">conda</span> activate PSS_Base</span>\n<span id=\"cb11-2\"><a href=\"#cb11-2\" aria-hidden=\"true\"></a><span class=\"fu\">bash</span> ReplicateCloneSearchesAblation.py</span></code></pre></div>\n<p>It requires 40 cores and at least 100 GB of memory and should run for between 7 hours and 18 hours.</p>",
        "keywords": "binary code analysis, clone search, cyber security, dataset, software, software engineering, spectral analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8309220": {
        "doi": "10.5281/zenodo.8309220",
        "author": "Hettmer, Michael and Severin, Benedikt and Blum, Florian and Gruhn, Volker",
        "title": "Datasets for Article \"Towards Assessing the Real-World Impact of Defects in Blockchain-Based Smart Contracts\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8309220",
        "abstract": "<p>Dataset from the paper “Towards Assessing the Real-World Impact of Defects in Blockchain-based Smart Contracts” accepted at the 1st International Workshop on Software Defect Datasets (SDD 2023).</p>\n<p>The dataset contains blockchain execution data, which is necessary to replicate the metrics proposed in our paper. Since we have combined the execution dataset with other pre-existing datasets, please follow the instructions in the example Jupyter Notebook (“example.ipynb”) for the further procedure. The external datasets are not included in this dataset package and must be downloaded from their original sources following the instructions in the example Jupyter Notebook.</p>",
        "keywords": "blockchain, defect-datasets, smart-contract, vulnerabilities",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8319975": {
        "doi": "10.5281/zenodo.8319975",
        "author": "Liu, Jiawei and Peng, Jinjun and Wang, Yuyao and Zhang, Lingming",
        "title": "ESEC/FSE'23 Artifact for \"NeuRI: Diversifying DNN Generation via Inductive Rule Inference\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8319975",
        "abstract": "<p>This is the artifact for the ESEC/FSE’23 paper “NeuRI: Diversifying DNN Generation via Inductive Rule Inference”.</p>\n<p>Deep Learning (DL) is prevalently used in various industries to improve decision-making and automate processes, driven by the ever-evolving DL libraries and compilers. The correctness of DL systems is crucial for trust in DL applications.<br>\nAs such, the recent wave of research has been studying the automated synthesis of test-cases (i.e., DNN models and their inputs) for fuzzing DL systems. However, existing model generators only subsume a limited number of operators, lacking the ability to pervasively model operator constraints.<br>\nTo address this challenge, we propose NeuRI, a fully automated approach for generating valid and diverse DL models composed of hundreds of types of operators. NeuRI adopts a three-step process:<br>\n(i) collecting valid and invalid API traces from various sources;<br>\n(ii) applying inductive program synthesis over the traces to infer the constraints for constructing valid models; and<br>\n(iii) using hybrid model generation which incorporates both symbolic and concrete operators.<br>\nOur evaluation shows that NeuRI improves branch coverage of TensorFlow and PyTorch by 24\\% and 15\\% over the state-of-the-art model-level fuzzers. NeuRI finds 100 new bugs for PyTorch and TensorFlow in four months, with 81 already fixed or confirmed. Of these, 9 bugs are labelled as high priority or security vulnerability, constituting 10\\% of all high-priority bugs of the period.<br>\nOpen-source developers regard error-inducing tests reported by us as “high-quality” and “common in practice”.</p>\n<p>The artifact includes evidences of real-world bug finding (RQ3) as well as procedures to replicate experiments on coverage evaluation (RQ1) and rule inference (RQ2).</p>\n<p>For more information, please check the artifact GitHub repository: https://github.com/ise-uiuc/neuri-artifact</p>",
        "keywords": "Compiler Testing, Deep Learning Compilers, Fuzzing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8320669": {
        "doi": "10.5281/zenodo.8320669",
        "author": "Cao, Jialun and Lu, Yaojie and Wen, Ming and Cheung, Shing-Chi",
        "title": "Reproduction package for artical \"Testing Coreference Resolution Systems without Labeled Test Sets\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8320669",
        "abstract": "<p>This artifact is a reproduction package for artical “Testing Coreference Resolution Systems without Labeled Test Sets”. The package includes (1) source code of CREST, (2) experimental results of comparisons with baselines, and (3) labeling results of human evaluation. The purpose of this artifact is for reference, reproduce and reuse components of CREST.</p>",
        "keywords": "Coreference resolution testing, Metamorphic testing, SE4AI",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/ArabelaTso/Crest-artifacts/tree/release"
    },
    "10.5281/zenodo.10160153": {
        "doi": "10.5281/zenodo.10160153",
        "author": "Park, Sungwoo and Oh, Seyeon and Kim, Min-Soo",
        "title": "INFINEL: An efficient GPU-based processing method for unpredictable large output graph queries",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10160153",
        "abstract": "<p>Artifact appendix item for PPoPP24</p>",
        "keywords": "Coq, Dependent Types, Formalization, Modes",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/hellogaon/INFINEL"
    },
    "10.5281/zenodo.10009365": {
        "doi": "10.5281/zenodo.10009365",
        "author": "Van Muylder, Antoine and Nuyts, Andreas and Devriese, Dominique",
        "title": "Agda --bridges virtual machine",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10009365",
        "abstract": "<p>This is an Ubuntu 20.04 virtual machine (.ova format) to play with Agda –bridges, a proof assistant extending the Agda 2.6.3 proof assistant with internal parametricity. The virtual machine contains (see desktop):</p>\n<ul>\n<li><p>The Agda –bridges repository (a fork of Agda). Sources of Agda –bridges have been pre-compiled. The resulting binaries live in <code>/home/vboxuser/.local/bin/</code>.</p></li>\n<li><p>The cubical library repo.</p></li>\n<li><p>The bridgy library, an Agda –bridges library featuring abstractions to prove internal free theorems modularly.</p></li>\n</ul>\n<p>Quick start: After having imported the VM into your system, load <code>/home/vboxuser/Desktop/bridgy-lib/Everything.agda</code> in emacs (C-c C-l) within the VM.</p>\n<p>Alternatively: install Agda –bridges directly on your machine.</p>\n<p>Detailed instructions: See README.md in the artifact.</p>",
        "keywords": "Agda, cubical type theory, parametricity, structure relatedness principle, type theory",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10015321": {
        "doi": "10.5281/zenodo.10015321",
        "author": "Smeding, Tom J. and V\\'{a",
        "title": "Artifact for Efficient CHAD",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10015321",
        "abstract": "<p>Contains a proof, formalised in Agda, of the main complexity result in the paper.</p>",
        "keywords": "Agda, automatic differentiation, complexity, formalized proof, source transformation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10019663": {
        "doi": "10.5281/zenodo.10019663",
        "author": "Attouche, Lyes and Baazizi, Mohamed-Amine and Colazzo, Dario and Ghelli, Giorgio and Sartiani, Carlo and Scherzinger, Stefanie",
        "title": "Reproduction Package for: Validation of Modern JSON Schema: Formalization and Complexity.",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10019663",
        "abstract": "<p>Reproduction package for the POPL’24 contribution “Validation of Modern JSON Schema: Formalization and Complexity”.</p>\n<p>All artifacts (source code, data, scripts) are packaged in a virtual machine running Ubuntu Linux, which can be run using VirtualBox.</p>",
        "keywords": "complexity of validation, JSON Schema",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.10023424": {
        "doi": "10.5281/zenodo.10023424",
        "author": "Pottier, Fran\\c{c",
        "title": "Artifact for \"Thunks and Debits in Separation Logic with Time Credits\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10023424",
        "abstract": "<p>This is the artifact for the POPL 2024 paper “Thunks and Debits in Separation Logic with Time Credits”.</p>\n<p>The artifact is provided both as a VirtualBox virtual machine and as a .tar.gz file. They both contain the same Coq development, accessible in the following public GitLab repository:</p>\n<pre><code> https://gitlab.inria.fr/cambium/iris-time-proofs</code></pre>\n<h3 id=\"the-virtual-machine\">The virtual machine</h3>\n<p>The virtual machine contains the content of the archive, fully compiled, and all the software needed to compile it. When booting, it should automatically log in. In case it is necessary, it can be logged in using the user “vagrant” and the password “vagrant”.</p>\n<p>The relevent files are in the directory coq-iris-time on the desktop. They can be seen using Coqide, which can be run using the icon on the desktop.</p>\n<h3 id=\"building-the-artifact-from-the-archive\">Building the artifact from the archive</h3>\n<p>The archive can be compiled by following the instructions bellow.</p>\n<h4 id=\"step-1-creating-an-opam-switch\">Step 1: Creating an opam switch</h4>\n<p>If opam is not already installed:_ See instructions <a href=\"https://opam.ocaml.org/doc/Install.html\">there</a> to install it; then:</p>\n<pre><code>opam init\neval $(opam env)</code></pre>\n<p>(This will create a <code>~/.opam</code> directory.)</p>\n<p>Extract the archive, and move to the directory:</p>\n<pre><code>tar -xzvf coq-iris-time.tar.gz\ncd coq-iris-time</code></pre>\n<p>If opam (≥ 2.0) is already installed:_ Create a local switch for the project in the current directory:</p>\n<pre><code>opam update\nopam switch create --no-install . ocaml-base-compiler.4.14.1\neval $(opam env)</code></pre>\n<h4 id=\"step-2-installing-the-dependencies\">Step 2: Installing the dependencies</h4>\n<p>In an opam switch as created above, the commands</p>\n<pre><code>opam repo add coq-released https://coq.inria.fr/opam/released\nopam repo add iris-dev git+https://gitlab.mpi-sws.org/iris/opam.git\nopam update\nopam pin add -n coq 8.16.1\nmake builddep</code></pre>\n<p>will pin and install the dependencies at the correct version.</p>\n<p>If you want to browse the Coq development using CoqIDE (a graphical, interactive toplevel for Coq), install it as well:</p>\n<pre><code>opam install coqide</code></pre>\n<h4 id=\"step-3-compiling-the-proof-scripts\">Step 3: Compiling the proof scripts</h4>\n<p>When all required libraries can be found (e.g.&nbsp;in an opam switch as configured above), compile the proof scripts with:</p>\n<pre><code>make -j</code></pre>\n<p>Other recipes are available, such as <code>all</code>, <code>clean</code> and <code>userinstall</code>.</p>\n<h3 id=\"supporting-the-claims-of-the-paper\">Supporting the claims of the paper</h3>\n<h4 id=\"piggy-banks\">Piggy banks</h4>\n<p>The piggy bank construction is formalized in file <code>theories/thunks/PiggyBank.v</code>. Each rule in Figure 2 of the paper is formalized by a lemma in this file, named after the name of the rule.</p>\n<h4 id=\"thunks\">Thunks</h4>\n<p>The common interface of thunks, base thunks and proxy thunks is defined as the <code>CommonThunkAPI</code> typeclass in file <code>theories/thunks/ThunksAPI.v</code>. Lemma <code>base_thunk_api</code> shows that base thunks implement this API (second part of Theorem 4.1).</p>\n<p>Base thunks and the <code>ThunkVal</code> predicate are defined in file <code>theories/thunks/ThunksBase.v</code>. Rules in Figure 7 are proved by lemmas in the same file, named after the name of the rule (last part of Theorem 4.1). The rule Thunk-Create for base thunks is proved by lemma <code>base_thunk_create</code> (first part of Theorem 4.1).</p>\n<p>Proxy thunks are defined in file <code>theories/thunks/ThunksStep.v</code>. Theorem 4.2 is proved by instance <code>step_thunk_api</code> and lemma <code>proxythunk_consequence</code>.</p>\n<p>Thunks are defined in file <code>theories/thunks/ThunksFull.v</code>. Theorem 4.3 is proved by instance <code>thunk_api</code>, lemma <code>thunk_create</code> and lemma <code>thunk_consequence</code>.</p>\n<h4 id=\"height-indexed-thunks\">Height-indexed thunks</h4>\n<p>Height-indexed thunks are defined in file <code>theories/thunks/HThunks.v</code>. Rules in Figure 11 are formalized in lemmas whose name should be self-explanatory, except for rule HThunk-Inc-Height-Debit, split into lemmas <code>hthunk_covariant_in_h</code> and <code>hthunk_increase_debt</code>.</p>\n<h4 id=\"streams\">Streams</h4>\n<p>The code of the stream library is given in file <code>theories/streams/StreamsCode.v</code>, and its specification formalized in file <code>theories/streams/Streams.v</code>.</p>\n<p>Rules of Figure 13 are formalized by lemmas with the same name, except for Stream-Increase-Height, which is backed by lemma <code>stream_covariant</code>.</p>\n<p>Rules of Figure 14 are constructor of inductive predicate <code>subdebits</code>.</p>\n<p>Rule Sub-Variance is split into lemmas <code>subdebits_covariant_in_slack</code> and <code>subdebits_contravariant_in_rest</code>.</p>\n<p>Rule Sub-Refl is backed by lemma <code>subdebits_reflexive</code>.</p>\n<p>Rule Sub-Trans is backed by lemma <code>subdebits_transitive</code>.</p>\n<p>Rule Sub-Append is backed by lemma <code>subdebits_app</code>.</p>\n<p>Rule Sub-Add-Slack is backed by lemma <code>subdebits_add_slack</code>.</p>\n<p>Rule Sub-Repeat is backed by lemma <code>subdebits_repeat</code>.</p>\n<p>Lemma 6.1 is backed by lemma <code>subdebits_alternate_characterization</code>.</p>\n<h4 id=\"bankers-queue\">Banker’s queue</h4>\n<p>The code of the banker’s queue is in file <code>theories/bqueue/Code.v</code>. Its specification is in file <code>theories/bqueue/Proof.v</code>.</p>\n<p>Rule Banker-Persistent is proved by lemma <code>is_queue_persistent</code>.</p>\n<p>Rule Banker-Empty is proved by lemma <code>empty_spec</code>.</p>\n<p>Rule Banker-Snoc is proved by lemma <code>snoc_spec</code>.</p>\n<p>Rule Banker-Extract is proved by lemma <code>extract_spec</code>.</p>\n<p>Rule Banker-Check is proved by lemma <code>check_spec</code>.</p>\n<h4 id=\"the-physiscists-queue-implicit-queues.\">The physiscist’s queue, implicit queues.</h4>\n<p>The physiscist’s queue is formalized in directory <code>theories/pqueue</code>.</p>\n<p>Implicit queus are formalized in directory <code>theories/iqueue</code>.</p>",
        "keywords": "program verification, separation logic, time complexity",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10023528": {
        "doi": "10.5281/zenodo.10023528",
        "author": "Li, Xiang and Zhou, Xiangyu and Dong, Rui and Zhang, Yihong and Wang, Xinyu",
        "title": "Reproduction Package for 'Efficient Bottom-Up Synthesis for Programs with Local Variables'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10023528",
        "abstract": "<p>This artifact includes the Arborist program synthesizer for web automation. It also contains all the necessary benchmark data to reproduce the RQ1 main results (Figure 21 of the paper).</p>",
        "keywords": "Observational Equivalence, Program Synthesis, Web Automation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10026970": {
        "doi": "10.5281/zenodo.10026970",
        "author": "Randone, Francesca and Bortolussi, Luca and Incerto, Emilio and Tribastone, Mirco",
        "title": "Reproduction Package for the Paper \"Inference of Probabilistic Programs with Moment-Matching Gaussian Mixtures\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10026970",
        "abstract": "<p>This is the replication package for the paper “Inference of Probabilistic Programs with Moment-Matching Gaussian Mixtures”</p>\n<h3 id=\"contents\">Contents</h3>\n<ul>\n<li>soga_docker.tar.gz contains the docker image of SOGA</li>\n<li>soga_code.tar.gz contains the SOGA source code</li>\n</ul>\n<h3 id=\"requirements\">Requirements</h3>\n<ul>\n<li>For running this package a valid docker (https://docs.docker.com/engine/install/) installation is required with version &gt;=24.0.6.</li>\n<li>For compatibility issues with the external tools used for the evaluation, the image is based on x86_64 architecture</li>\n</ul>\n<h3 id=\"reproducibility\">Reproducibility</h3>\n<ul>\n<li><p>The provided docker images can be loaded in two ways: A) using the one provided in this package and B) using the one stored on Dockerhub. To load the images provided in this package, download it and issue the following command:</p>\n<p>docker load –input soga_docker.tar.gz</p></li>\n<li><p>In both cases, A or B, for creating the container issue:</p>\n<p>docker container create -i -t –name SOGA bistrulli/soga:0.1 docker container start SOGA docker attach SOGA</p></li>\n<li><p>The detailed instructions for reproducing the paper results are reported in the README.md file within the docker image</p></li>\n</ul>",
        "keywords": "Gaussian Mixtures, Inference, Moment-Matching, Probabilistic Programming",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10036618": {
        "doi": "10.5281/zenodo.10036618",
        "author": "Zhang, Ling and Wang, Yuting and Wu, Jinhua and Koenig, J\\'{e",
        "title": "Artifact for `Fully Composable and Adequate Verified Compilation with Direct Refinements between Open Modules`",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10036618",
        "abstract": "<p>This is the artifact for the POPL 2024 paper “Fully Composable and Adequate Verified Compilation with Direct Refinements between Open Modules”.</p>\n<p>The artifact is a VM image in .ova format. We have tested the VM in VirtualBox version 7.0.8 running on a host Windows 11 machine with 64-bit Ubuntu LTS 20.04. The source code can be found in the directory ‘/home/authors/direct-refinement-popl24-artifact’. Follow the ‘README.md’ file in this directory to evaluate the artifact.</p>\n<p>The VM should also work on Linux host machines. Note that the VM will not run on Mac computers with M-series chips as it is based on X86.</p>\n<p>You may also compile from the source code on your local Linux machine. The up-to-date source code and instructions for compiling it can be found at the following address:</p>\n<p>https://github.com/SJTU-PLV/direct-refinement-popl24-artifact/blob/main/README.md</p>\n<p>We suggest you look at the instructions in the above URL if you have difficulty reading README.md file directly in the VM.</p>\n<p>The technical report of our paper can be found at the following address:</p>\n<p>https://arxiv.org/abs/2302.12990</p>",
        "keywords": "Compiler Verification, Direct Refinements, Kripke Relations, Program Verification, Verified Compositional Compilation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10039066": {
        "doi": "10.5281/zenodo.10039066",
        "author": "Yao, Jianan and Tao, Runzhou and Gu, Ronghui and Nieh, Jason",
        "title": "Artifact for Article \"Mostly Automated Verification of Liveness Properties for Distributed Protocols with Ranking Functions\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10039066",
        "abstract": "<p>This artifact provides a docker image which includes the Python source code of LVR and the evaluated mypyvy protocols. See README for instructions to run. Please use the latest version if available.</p>",
        "keywords": "distributed protocols, formal verification, liveness properties, ranking functions",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10040534": {
        "doi": "10.5281/zenodo.10040534",
        "author": "Sieczkowski, Filip and Stepanenko, Sergei and Sterling, Jonathan and Birkedal, Lars",
        "title": "The Essence of Generalized Algebraic Data Types (Coq mechanization)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10040534",
        "abstract": "<p>Coq mechanization supplement for The Essence of Generalized Algebraic Data Types paper.</p>",
        "keywords": "Functional languages, Semantic models, Type systems/inference/theory",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10054966": {
        "doi": "10.5281/zenodo.10054966",
        "author": "Deng, Haowei and Tao, Runzhou and Peng, Yuxiang and Wu, Xiaodi",
        "title": "A Case for Synthesis of Recursive Quantum Unitary Programs",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10054966",
        "abstract": "<p>QSynth’s source code for POPL24 artifact evaluation.</p>",
        "keywords": "Program Synthesis, SMT Solver",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10069757": {
        "doi": "10.5281/zenodo.10069757",
        "author": "Cyphert, John and Kincaid, Zachary",
        "title": "Reproduction Package for Article Solvable Polynomial Ideals: The Ideal Reflection for Program Analysis",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10069757",
        "abstract": "<p>The artifact consists of a virtual machine (VM) in OVA format. The VM contains an installation of Ubuntu 22.04, along with the required software to verify the experimental claims in the article Solvable Polynomial Ideals: The Ideal Reflection for Program Analysis. The VM contains an executable duet.exe which implements the ideas described in the article. The VM also contains software to compare the ideas of the article with the tools ChilonInv, CRA, Veriabs, and Ultimate Automizer on benchmarks sourced from the software verification competition (SV-COMP).</p>",
        "keywords": "Algebraic Program Analysis, Monotone Analysis, Polynomial Invariants",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10073582": {
        "doi": "10.5281/zenodo.10073582",
        "author": "Cohen, Liron and Jabarin, Adham and Popescu, Andrei and Rowe, Reuben N. S.",
        "title": "The Complex(ity) Landscape of Checking Infinite Descent (Software Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10073582",
        "abstract": "<p>This is the accompanying artifact for the POPL 2024 paper “The Complex(ity) Landscape of Checking Infinite Descent” by Liron Cohen, Adham Jabarin, Andrei Popescu and Reuben N. S. Rowe. It contains the following:</p>\n<ol type=\"1\">\n<li><p>Extension of the Cyclist automated theorem prover (cyclist-prover.org) by new algorithms for checking the Infinite Descent property.</p></li>\n<li><p>Experimental dataset for algorithms checking Infinite Descent.</p></li>\n</ol>",
        "keywords": "B\\\"{u",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10077754": {
        "doi": "10.5281/zenodo.10077754",
        "author": "Sotiropoulos, Thodoris and Chaliasos, Stefanos and Su, Zhendong",
        "title": "Replication Pakcage for Article \"API-Driven Program Synthesis for Testing Static Typing Implementations\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10077754",
        "abstract": "<p>The purpose of this artifact is to reproduce the results presented in the POPL 2024 paper titled “API-Driven Program Synthesis for Testing Static Typing Implementations”. The artifact contains the instructions and scripts to re-run the evaluation described in the paper. The artifact has the following structure:</p>\n<ul>\n<li>scripts/: This directory contains the scripts needed to re-run the experiments and re-produce the figures and tables presented in the paper.</li>\n<li>data/: This is the directory that contains the pre-computed results of the evaluation.</li>\n<li>data/packages.csv: A CSV file that contains the 95 Maven libraries whose APIs have been used in the evaluation.</li>\n<li>database/bug_schema.sql: This is the database schema that contains the bugs discovered by our approach.</li>\n<li>database/bugdb.sqlite3: This is the <code>sqlite3</code> database file corresponding to our bug database.</li>\n<li>database/bugs.json: Our bug reports in a JSON format.</li>\n<li>stdlib/: API specification of the standard libraries of three languages: Java, Scala, Kotlin. This not the complete API specification, but rather some common API components (e.g., java.util.*) that are used frequently in third-party libraries.</li>\n<li>thalia/: Contains the source code of our tool (provided as a git submodule) used for testing the compilers of Scala, Kotlin, and Groovy using API-driven program synthesis. The name of our tool is <code>thalia</code>.</li>\n<li>hephaestus/: Contains the source code of the state-of-the-art tool named Hephaestus used for finding compiler typing bugs. In our evaluation, we compare Thalia` with Hephaestus.</li>\n<li>doc2json/: This is a submodule that contains the source code of an auxiliary tool used to convert API documentation pages into JSON documents. More details can be found at: https://github.com/hephaestus-compiler-project/doc2json</li>\n<li>installation_scripts/: Contains helper scripts used to install all dependencies (e.g., compiler versions from <a href=\"https://sdkman.io/\">SDKMAN</a>).</li>\n<li>figures/: This directory will be used to save the figures of our paper.</li>\n<li>Dockerfile: The Dockerfile used to create a Docker image of our artifact. This image contains all data and dependencies.</li>\n</ul>",
        "keywords": "API, compiler bugs, compiler testing, enumeration, Groovy, Kotlin, library, Scala, static typing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10100892": {
        "doi": "10.5281/zenodo.10100892",
        "author": "Timany, Amin and Gregersen, Simon Oddershede and Stefanesco, L\\'{e",
        "title": "Trillium: Higher-Order Concurrent and Distributed Separation Logic for Intensional Refinement - Coq Artefact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10100892",
        "abstract": "<p>Coq artifact accompanying the paper “Trillium: Higher-Order Concurrent and Distributed Separation Logic for Intensional Refinement”.</p>",
        "keywords": "liveness, refinement, Separation logic, step-indexing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10116628": {
        "doi": "10.5281/zenodo.10116628",
        "author": "Popescu, Andrei",
        "title": "Nominal Recursors as Epi-Recurors (Mechanized Proofs Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10116628",
        "abstract": "<p>This is the Isabelle mechanization associated to the POPL 2024 paper “Nominal Recursors as Epi-Recursors” by Andrei Popescu. The formal proofs are located in the archive isabelle_nominal_recursors_and_corecursors.zip . They can be processed with Isabelle2023, available for download from https://isabelle.in.tum.de/ .</p>",
        "keywords": "epi-(co)recuror, formal reasoning, Isabelle/HOL, nominal logic, nominal recursion and corecursion, syntax with bindings, theorem proving",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10119773": {
        "doi": "10.5281/zenodo.10119773",
        "author": "Farzan, Azadeh and Klumpp, Dominik and Podelski, Andreas",
        "title": "Benchmarks for POPL'24 Paper \"Commutativity Simplifies Proofs of Parameterized Programs\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10119773",
        "abstract": "<p>This archive contains the benchmark programs used in the POPL’24 paper “Commutativity Simplifies Proofs of Parameterized Programs” by A. Farzan, D. Klumpp and A. Podelski.</p>",
        "keywords": "concurrency, constrained Horn clauses, verification",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.10120126": {
        "doi": "10.5281/zenodo.10120126",
        "author": "Tang, Wenhao and Hillerstr\\\"{o",
        "title": "Artifact for Soundly Handling Linearity",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10120126",
        "abstract": "<p>This artifact contains the implementation of the extension of Links with control-flow linearity as described in Section 4 of the paper:</p>\n<p>Wenhao Tang, Daniel Hillerstr\\\"{o",
        "keywords": "effect handlers, linear resources, linear types",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10125015": {
        "doi": "10.5281/zenodo.10125015",
        "author": "Andrici, Cezar-Constantin and Ciob\\^{a",
        "title": "Artifact for the POPL 2024 paper `Securing Verified IO Programs Against Unverified Code in F*`",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10125015",
        "abstract": "<p>The artifact contains a formalization of the contributions of the paper. The artifact contains the SCIO* framework, the mechanized proofs of sound enforcement of a global trace property and Robust Relational Hyperproperty Preservation (RrHP), as well as a few examples.</p>",
        "keywords": "F*, formal verification, input-output, proof assistants, secure compilation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10125129": {
        "doi": "10.5281/zenodo.10125129",
        "author": "Zhou, Litao and Qin, Jianxing and Wang, Qinshi and Appel, Andrew W. and Cao, Qinxiang",
        "title": "Artifact for VST-A: A Foundationally Sound Annotation Verifier",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10125129",
        "abstract": "<p>This is the artifact for the paper “VST-A: A Foundationally Sound Annotation Verifier.” VST-A is an annotation verifier built upon VST, designed for the functional correctness verification of assertion annotated C programs. Users are guided to first install the OPAM package manager and subsequently set up OCaml 4.10.2, Menhir 20190924, and Coq 8.12.2 to facilitate the artifact’s compilation. The artifact is self-contained, incorporating a modified CompCert compiler capable of parsing annotated programs and a patched VST-2.5. The development of VST-A, encompassing formalization, implementation, and evaluation examples outlined in the paper, is consolidated within the <code>VST-A/</code> directory.</p>",
        "keywords": "Annotated Programs, Coq, Foundational Verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10125136": {
        "doi": "10.5281/zenodo.10125136",
        "author": "Elad, Neta and Padon, Oded and Shoham, Sharon",
        "title": "An Infinite Needle in a Finite Haystack: Finding Infinite Counter-Models in Deductive Verification &nbsp;(Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10125136",
        "abstract": "<p>Artifact for the POPL ’24 paper “An Infinite Needle in a Finite Haystack: Finding Infinite Counter-Models in Deductive Verification”.</p>\n<p>The artifact is provded as a virtual machine, and includes the Python package for the FEST tool, and benchmarks (encoded in Z3’s programmatic API).</p>\n<p>For more details, see the <code>README.md</code> file.</p>\n<p>Note that the run times of the benchmarks inside the virtual machine can be 2x-5x slower than the times measured (in Table 2). Still, they remain below the 10 minutes threshold.</p>",
        "keywords": "counter-models, deductive verification, infinite models, Paxos",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10125602": {
        "doi": "10.5281/zenodo.10125602",
        "author": "Qin, Xueying and O’Connor, Liam and van Glabbeek, Rob and H\\\"{o",
        "title": "Artifact for Shoggoth - A Formal Foundation for Strategic Rewriting",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10125602",
        "abstract": "<p>This is the artifact for the paper Shoggoth : A Formal Foundation for Strategic Rewriting. We provide all mechanised proofs developed in Isabelle/HOL. In total we provide nine files (with .thy extension) containing our proof scripts for the denotational semantics, operational semantics, semantic equivalence, weakest precondition calculus and soundness of the weakest precondition calculus are discussed in the paper. Please refer to README.md for detail information as well as instructions for installing and executing this artifact.</p>",
        "keywords": "formal verification, semantics, weakest precondition",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10125861": {
        "doi": "10.5281/zenodo.10125861",
        "author": "Hague, Matthew and Je\\.{z",
        "title": "Parikh's Theorem Made Symbolic: Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10125861",
        "abstract": "<p>The artifact contains the source code of the tool developed in the article. This may be compiled on your own machine, or inside a Docker image (Dockerfile provided). It also contains a disk image with the tool installed, the benchmarks, and the tools that we compared with.</p>",
        "keywords": "Abstraction, Decision Procedures, Infinite Alphabets, Satisfiability Modulo Theories, Sequence Theory, String Constraints, Symbolic Automata",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.10126819": {
        "doi": "10.5281/zenodo.10126819",
        "author": "Rinaldi, Francis and wunder, june and Azevedo de Amorim, Arthur and Muller, Stefan K.",
        "title": "Implementation for \"Pipelines and Beyond: Graph Types for ADTs with Futures\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10126819",
        "abstract": "<p>This artifact accompanies the paper “Pipelines and Beyond: Graph Types for ADTs with Futures”, published at POPL 2024. It implements an engine to infer vertex structure annotations and graph types for a subset of OCaml, following the language and the type system presented in the paper.</p>",
        "keywords": "affine type system, computation graphs, cost graphs, futures, graph types, parallel programs, pipelining",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10129703": {
        "doi": "10.5281/zenodo.10129703",
        "author": "Zhao, Eric and Maroof, Raef and Dukkipati, Anand and Blinn, Andrew and Pan, Zhiyi and Omar, Cyrus",
        "title": "Artifact for Total Type Error Localization and Recovery with Holes",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10129703",
        "abstract": "<p>The artifact contains the complete formalization of and extensions to the marked lambda calculus, the Agda mechanization, and the implementation of Hazel including type hole inference, as described in the paper.</p>",
        "keywords": "bidirectional typing, gradual typing, type errors, type inference",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/hazelgrove/error-localization-artifact/tree/popl-2024-artifact-v1.1"
    },
    "10.5281/zenodo.10129930": {
        "doi": "10.5281/zenodo.10129930",
        "author": "Ding, Yuantian and Qiu, Xiaokang",
        "title": "Reproduction Package (VirtualBox Image) for the POPL 2024 Article `Enhanced Enumeration Techniques for Syntax-Guided Synthesis of Bit-Vector Manipulations'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10129930",
        "abstract": "<p>This is the artifact for the ACM PACMPL article Enhanced Enumeration Techniques for Syntax-Guided Synthesis of Bit-Vector Manipulations. We provide our artifact as an easy-to-use VirtualBox image, which contains the benchmarks, our tools for bit-vector synthesis, and the scripts for generating the results showcased in the paper.</p>",
        "keywords": "Bit vector, Enumeration, Large language model, Syntax-guided synthesis, Term graph",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10146270": {
        "doi": "10.5281/zenodo.10146270",
        "author": "Mell, Stephen and Zdancewic, Steve and Bastani, Osbert",
        "title": "Artifact for \"Optimal Program Synthesis via Abstract Interpretation\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10146270",
        "abstract": "<p>The artifact reproduces our experimental results (Figure 2 and Table 1) and may be useful for performing synthesis on other trajectory datasets or implementing our algorithm for other DSLs.</p>",
        "keywords": "abstract interpretation, optimal synthesis, program synthesis",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/stephenmell/popl2024-artifact/tree/v1.0.1"
    },
    "10.5281/zenodo.10151333": {
        "doi": "10.5281/zenodo.10151333",
        "author": "Moy, Cameron and Dimoulas, Christos and Felleisen, Matthias",
        "title": "Artifact: Effectful Software Contracts",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10151333",
        "abstract": "<p>This artifact contains a Docker image for the effect/racket language implementation along with appendices accompanying the paper.</p>",
        "keywords": "effect handlers, software contracts",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10155221": {
        "doi": "10.5281/zenodo.10155221",
        "author": "Castagna, Giuseppe and Laurent, Micka\\\"{e",
        "title": "Prototype: Polymorphic Type Inference for Dynamic Languages",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10155221",
        "abstract": "<p>This is a prototype for the article: Polymorphic Type Inference for Dynamic Languages. See README.md for instructions.</p>",
        "keywords": "intersection types, OCaml, polymorphism, type reconstruction, union types",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/E-Sh4rk/Prototype/tree/v1.1.0"
    },
    "10.5281/zenodo.10207465": {
        "doi": "10.5281/zenodo.10207465",
        "author": "Timany, Amin and Gu\\'{e",
        "title": "Artifact for the paper \"The Logical Essence of Well-Bracketed Control Flow\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10207465",
        "abstract": "<p>This artifact includes the accompanying technical appendix and the Coq formalization of the paper “The Logical Essence of Well-Bracketed Control Flow”.</p>",
        "keywords": "Coq, logical relations, program logics, program verification, semantic typing, stack discipline, well-bracketedness",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8409115": {
        "doi": "10.5281/zenodo.8409115",
        "author": "Crichton, Will and Krishnamurthi, Shriram",
        "title": "Artifact for \"A Core Calculus for Documents\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8409115",
        "abstract": "<p>These are Docker images that contain the codebase for our POPL 2024 paper “A Core Calculus for Documents”. Download the README.pdf for instructions on how to run the artifact and for details about its contents.</p>",
        "keywords": "document languages, markup, templates",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8414566": {
        "doi": "10.5281/zenodo.8414566",
        "author": "Moine, Alexandre and Westrick, Sam and Balzer, Stephanie",
        "title": "DisLog: A Separation Logic for Disentanglement - Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8414566",
        "abstract": "<p>This is the artifact corresponding to the article entitled “DisLog: A Separation Logic for Disentanglement”, and its associated documentation.</p>",
        "keywords": "Coq, Disentanglement, Iris, Separation Logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8417774": {
        "doi": "10.5281/zenodo.8417774",
        "author": "Cohen, Joshua M. and Johnson-Freyd, Philip",
        "title": "Coq Formalization for the paper \"A Formalization of Core Why3 in Coq\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8417774",
        "abstract": "<p>This artifact contains a formalization of the logic fragment of the Why3 language, used as a backend for many verification tools, including Frama-C.</p>",
        "keywords": "Coq, First-Order Logic, Formal Semantics, Why3",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8421879": {
        "doi": "10.5281/zenodo.8421879",
        "author": "Sellami, Yanis and Girol, Guillaume and Recoules, Fr\\'{e",
        "title": "Reproduction Package for Article `Inference of Robust Reachability Constraints'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8421879",
        "abstract": "<p>This is the Artifact for the POPL 2024 Paper `Inference of Robust Reachability Constraints’. The artifact takes the form of a virtual machine disk image from which one can regenerate the paper’s tables and graphs from the logs of the experiments and rerun the experiments for reproducibility.</p>",
        "keywords": "abduction, precondition inference, program analysis, software security engineering, symbolic execution",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8422415": {
        "doi": "10.5281/zenodo.8422415",
        "author": "Bergstr\\\"{a",
        "title": "Ramsey Quantifiers in Linear Arithmetics - Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8422415",
        "abstract": "<p>The purpose of the artifact is to reproduce the experimental results of the paper “Ramsey Quantifiers in Linear Arithmetics”. It consists of a “README.pdf” and the four files “ramsey.py”, “elimination_benchmarks.py”, “mondec_benchmarks.py”, and “example.py”. The file “ramsey.py” contains the main functions “eliminate_ramsey” and “is_mondec”. The purpose of the function “eliminate_ramsey” is to compute an equivalent existential formula from a given Ramsey quantified existential formula. The function “is_mondec” takes a quantifier-free formula and returns true if the formula is monadically decomposable and false otherwise. We assume the formulas to be in Linear Integer Arithmetic, in Linear Real Arithmetic, or a decomposition of a Linear Integer Real Arithmetic formula. The benchmarks that are mentioned in the paper are available in the files “elimination_benchmarks.py” and “mondec_benchmarks.py”.</p>",
        "keywords": "Infinite Chains, Infinite Cliques, Linear Integer Arithmetic, Linear Real Arithmetic, Liveness, Monadic Decomposability, Ramsey Quantifiers, Satisfiability Modulo Theories, Termination",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8422532": {
        "doi": "10.5281/zenodo.8422532",
        "author": "Kidney, Donnacha Ois\\'{\\i",
        "title": "Artefact for \"Algebraic Effects Meet Hoare Logic in Cubical Agda\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8422532",
        "abstract": "<p>This artefact contains the Agda formalisation of the paper “Algebraic Effects Meet Hoare Logic in Cubical Agda”.</p>",
        "keywords": "algebraic effects, Cubical Agda, Hoare logic, program verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8422755": {
        "doi": "10.5281/zenodo.8422755",
        "author": "Jacobs, Jules and Hinrichsen, Jonas Kastberg and Krebbers, Robbert",
        "title": "Linear Actris Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8422755",
        "abstract": "<h2 id=\"linear-actris-artifact\">Linear Actris Artifact</h2>\n<p>A version of Actris where Hoare triples prove deadlock and leak freedom.</p>\n<p>This artifact contains Coq source code that proves the results in the paper “Deadlock-Free Separation Logic: Linearity Yields Progress for Dependent Higher-Order Message Passing”.</p>",
        "keywords": "concurrency, deadlocks, message passing, Separation logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8423335": {
        "doi": "10.5281/zenodo.8423335",
        "author": "DeYoung, Henry and Mordido, Andreia and Pfenning, Frank and Das, Ankush",
        "title": "Parametric Subtyping for Structural Parametric Polymorphism (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8423335",
        "abstract": "<p>This artifact consists of a Standard ML implementation of the parametric subtyping algorithm described in the POPL 2024 paper “Parametric Subtyping for Structural Parametric Polymorphism” by Henry DeYoung, Andreia Mordido, Frank Pfenning, and Ankush Das, as well as a file containing all of the examples from the paper. The up-to-date source code is maintained in a repository at https://bitbucket.org/structural-types/polyte/src/main/. For convenience, a VirtualBox VM image with the source code, necessary SML dependencies, and a pre-built binary is also available at https://zenodo.org/records/8423335.</p>",
        "keywords": "parametric polymorphism, saturation-based algorithm, structural subtyping, type constructors",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8423505": {
        "doi": "10.5281/zenodo.8423505",
        "author": "Patton, Noah and Rahmani, Kia and Missula, Meghana and Biswas, Joydeep and Dillig, I\\c{s",
        "title": "Programming-by-Demonstration for Long-Horizon Robot Tasks",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8423505",
        "abstract": "<p>This artifact contains the source code for running the experiments in Programming-by-Demonstration for Long-Horizon Robot Tasks. We include scripts and a docker file to run the experiments as specified in the README.</p>",
        "keywords": "Abstract Interpretation, Learning from Demonstrations, Program Synthesis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8423710": {
        "doi": "10.5281/zenodo.8423710",
        "author": "Peng, Yuxiang and Young, Jacob and Liu, Pengyu and Wu, Xiaodi",
        "title": "Artifact for SimuQ: a Framework for Programming Quantum Hamiltonian Simulation with Analog Compilation",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8423710",
        "abstract": "<p>This is the artifact for SimuQ, a framework for programming quantum Hamiltonian simulation with analog compilation. The main folder for the artifact evaluation is in <code>SimuQ/notebooks/artifact_evaluation</code>.</p>",
        "keywords": "analog quantum computing, pulse-level programming, quantum simulation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8423764": {
        "doi": "10.5281/zenodo.8423764",
        "author": "Krishna, Shankaranarayanan and Lal, Aniket and Pavlogiannis, Andreas and Tuppe, Omkar",
        "title": "On-The-Fly Static Analysis via Dynamic Bidirected Dyck Reachability Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8423764",
        "abstract": "<p>Implementation of paper On-The-Fly Static Analysis via Dynamic Bidirected Dyck Reachability. The Dynamic Bidirected Dyck Reachability Tool accepts an initial graph and a sequence of update edge operations as input. It then calculates Bidirected Dyck reachability among nodes after executing the specified update operations on the initial graph.</p>",
        "keywords": "CFL reachability, dynamic algorithms, static analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8423782": {
        "doi": "10.5281/zenodo.8423782",
        "author": "Frank, Justin and Quiring, Benjamin and Lampropoulos, Leonidas",
        "title": "Reproduction Package for Article `Generating Well-Typed Terms That Are Not “Useless”`",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8423782",
        "abstract": "<p>The artifact includes the OCaml source code for the generator, the Coq proofs that the generation steps are well-typed, and the evaluation setup used to compare our generator with the Palka generator for finding bugs in GHC’s strictness analyzer.</p>",
        "keywords": "property-based testing, test generation, well-typed lambda terms",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8423903": {
        "doi": "10.5281/zenodo.8423903",
        "author": "Jayanti, Prasad and Jayanti, Siddhartha and Yavuz, Ugur Y. and Hernandez, Lizzie",
        "title": "Artifact for \"A Universal, Sound, and Complete Forward Reasoning Technique for Machine-Verified Proofs of Linearizability\", POPL 2024",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8423903",
        "abstract": "<p>This is the software artifact for the TLAPS proofs from the paper “A Universal, Sound, and Complete Forward Reasoning Technique for Machine-Verified Proofs of Linearizability” (POPL 2024). The artifact contains machine-verified proofs of the linearizability of the Herlihy-Wing queue and Jayanti’s single-scanner snapshot, and a proof of the strong linearizability of the Jayanti-Tarjan union-find object. All the proofs are by the ‘tracking method’ introduced in the paper and are verified in the TLA+ Proof System.</p>\n<p>Details and instructions can be found in the README.md file within this Zenodo repository. The artifact is also available at the following GitHub repository: https://github.com/uguryavuz/machine-certified-linearizability.</p>",
        "keywords": "linearizability, machine-verified, meta-configuration, queue, snapshot, strong linearizability, tracker method, union-find",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8424490": {
        "doi": "10.5281/zenodo.8424490",
        "author": "Gregersen, Simon Oddershede and Aguirre, Alejandro and Haselwarter, Philipp G. and Tassarotti, Joseph and Birkedal, Lars",
        "title": "Asynchronous Probabilistic Couplings in Higher-Order Separation Logic - Coq Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8424490",
        "abstract": "<p>Coq artifact accompanying the paper “Asynchronous Probabilistic Couplings in Higher-Order Separation Logic”.</p>",
        "keywords": "coq, iris, probabilistic, probabilistic coupling, separation logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8424626": {
        "doi": "10.5281/zenodo.8424626",
        "author": "Ang, Zhendong and Mathur, Umang",
        "title": "Artefact for ``Predictive Monitoring against Pattern Regular Languages''",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8424626",
        "abstract": "<p>This artefact implements the predictive monitoring tool PatternTrack and the algorithm Bertoni described in our paper. We provide evaluation workflow in this artefact to demonstrate the bug-finding ability and the scalability of our tool PatternTrack.</p>",
        "keywords": "concurrent system, dynamic analysis, predictive monitoring",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8424750": {
        "doi": "10.5281/zenodo.8424750",
        "author": "Parreaux, Lionel and Boruch-Gruszecki, Aleksander and Fan, Andong and Chau, Chun Yin",
        "title": "When Subtyping Constraints Liberate: A Novel Type Inference Approach for First-Class Polymorphism (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8424750",
        "abstract": "<p>This is the artifact of our POPL 2024 paper entitled “When Subtyping Constraints Liberate: A Novel Type Inference Approach for First-Class Polymorphism”. You can find the latest version of the project at github.com/hkust-taco/superf and a web demo at hkust-taco.github.io/superf.</p>",
        "keywords": "constraint solving, first-class polymorphism, subtyping, type inference",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8424953": {
        "doi": "10.5281/zenodo.8424953",
        "author": "Heim, Philippe and Dimitrova, Rayna",
        "title": "Artifact of \"Solving Infinite-State Games via Acceleration\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8424953",
        "abstract": "<p>This artifact contains the code and benchmarks for reproducing the results from the paper “Solving Infinite-State Games via Acceleration”.</p>",
        "keywords": "infinite-duration games, infinite-state games, reactive synthesis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8425392": {
        "doi": "10.5281/zenodo.8425392",
        "author": "Zhang, Xing and Xie, Ruifeng and Guo, Guanchen and He, Xiao and Zan, Tao and Hu, Zhenjiang",
        "title": "Reproduction Package for Article 'Fusing Direct Manipulations into Functional Programs'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8425392",
        "abstract": "<p>Our paper (Fusing Direct Manipulations into Functional Programs) proposes a new operation-based framework for bidirectional live programming with a key technique that can fuse direct manipulations into general-purpose functional programs. The artifact FuseDM is a prototype tool to support our operation-based bidirectional live programming framework. As shown below, FuseDM supports developers not only to write functional programs on the left editor and get the output (i.e., SVG) on the right, but also to directly manipulate the output on the right, and automatically synchronize the left code to get the manipulated output. FuseDM offers a series of direct manipulations, as listed in Table 5 of our paper, to edit the output SVG graphics. We successfully designed 14 benchmark examples starting from blank code using direct manipulations supported by FuseDM.</p>",
        "keywords": "Bidirectional Live Programming, Direct Manipulations, FuseDM",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8425443": {
        "doi": "10.5281/zenodo.8425443",
        "author": "Elsman, Martin",
        "title": "Artifact for the POPL 2024 paper Explicit Effects and Effect Constraints in ReML",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8425443",
        "abstract": "<p>This artifact includes (1) a tutorial aiming at demonstrating the features of ReML presented in the POPL 2024 paper “Explicit Effects and Effect Constraints in ReML”, and (2) the source code for ReML, including a description of the implementation aspects of ReML. The artifact consists of a docker image containing a preinstalled version of the ReML compiler, demonstration programs, and the source code for ReML. The artifact establishes the following main claims mentioned in the paper:</p>\n<ul>\n<li><p>ReML has been implemented and syntactic constructs are available on top of Standard ML syntax to control the underlying region inference process.</p></li>\n<li><p>A few larger ReML examples demonstrate how ReML can be used to reason about effects and in particular about the lack of allocation races (Mergesort, ray tracing, and Mandelbrot).</p></li>\n</ul>",
        "keywords": "Effect Systems, Memory Management, Parallelism, Region-inference",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8425923": {
        "doi": "10.5281/zenodo.8425923",
        "author": "Atkey, Robert",
        "title": "Agda formalisation of Polynomial Time and Dependent Types",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8425923",
        "abstract": "<p>The Agda code formalising the construction of the realisability model described in Sections 5 and 6 of the paper. Please refer to the module names in the paper to find the relevant formalisations.</p>",
        "keywords": "agda, formal proof",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.8425960": {
        "doi": "10.5281/zenodo.8425960",
        "author": "Borkowski, Michael H. and Vazou, Niki and Jhala, Ranjit",
        "title": "Artifact for \"Mechanizing Refinement Types\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8425960",
        "abstract": "<p>Artifact containing the mechanized proofs for POPL 2024 paper “Mechanizing Refinement Types.”</p>",
        "keywords": "Coq, LiquidHaskell, Mechanized metatheory",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10124427": {
        "doi": "10.5281/zenodo.10124427",
        "author": "Frumin, Dan and Timany, Amin and Birkedal, Lars",
        "title": "Coq formalization of Guarded Interaction Trees",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10124427",
        "abstract": "<p>This is the Coq formalization of guarded interaction trees, associated examples and case studies.</p>",
        "keywords": "coq, formalization, separation logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/logsem/gitrees/tree/popl24"
    },
    "10.5281/zenodo.10366484": {
        "doi": "10.5281/zenodo.10366484",
        "author": "Zhao, Qiyuan and P\\^{\\i",
        "title": "Artefact for Article 'Rooting for Efficiency: Mechanised Reasoning about Array-Based Trees in Separation Logic'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10366484",
        "abstract": "<p>This is the research artefact for the article Rooting for Efficiency: Mechanised Reasoning about Array-Based Trees in Separation Logic which has been accepted to 13th ACM SIGPLAN International Conference on Certified Programs and Proofs (CPP 2024). Please see the README.md file inside the zip archive for detailed instructions.</p>",
        "keywords": "array-based trees, logical clocks, separation logic",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8337004": {
        "doi": "10.5281/zenodo.8337004",
        "author": "Nguyen, Duc-Than and Beringer, Lennart and Mansky, William and Wang, Shengyi",
        "title": "Compositional Verification of Concurrent C Programs with Search Structure Templates (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8337004",
        "abstract": "<p>Files and virtual machine containing C and Coq code for verified implementations of binary search trees with concurrent search structure templates, as described in the paper.</p>",
        "keywords": "concurrent separation logic, fine-grained locking, interactive theorem proving, Iris, logical atomicity, Verified Software Toolchain",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8367154": {
        "doi": "10.5281/zenodo.8367154",
        "author": "Adjedj, Arthur and Lennon-Bertrand, Meven and Maillard, Kenji and P\\'{e",
        "title": "Coq Formalisation for Article `Martin-L\\\"{o",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8367154",
        "abstract": "<p>A mechanization of the meta-theory of Martin-L\\\"{o",
        "keywords": "Bidirectional typing, Dependent type systems, Logical relations",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8423866": {
        "doi": "10.5281/zenodo.8423866",
        "author": "Mansky, William and Du, Ke",
        "title": "VST on Iris",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8423866",
        "abstract": "<p>An Iris Instance for Verifying CompCert C Programs.</p>",
        "keywords": "concurrent separation logic, interactive theorem\nproving, Iris, program verification, software verification, Verified Software Toolchain",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10457086": {
        "doi": "10.5281/zenodo.10457086",
        "author": "Salvador Rohwedder, Caio and L. De Carvalho, Jo\\~{a",
        "title": "Artifact of \"Region-Based Data Layout via Data Reuse Analysis\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10457086",
        "abstract": "<ul>\n<li>docker-artifact.tar.gz: docker image for the execution of experiments.</li>\n<li>results.zip: log files, graphs, and tables that were used in the paper, as well as additional figures/tables not shown in the paper due to space constraints.</li>\n<li>region-packing-pass.zip: source code for the out-of-tree LLVM implementation of the analysis that finds region-based data layout transformation candidates (.so file in docker image).</li>\n<li>region-packing-scripts.zip: scripts used to run experiments and Dockerfile source (also provided in docker image).</li>\n<li>artifact-appendix.pdf: Instructions on how to use this artifact.</li>\n</ul>",
        "keywords": "Data-Layout Transformation, LLVM, Structure Splitting",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10464417": {
        "doi": "10.5281/zenodo.10464417",
        "author": "Nahian, Ahamed Al and Demsky, Brian",
        "title": "Artifact of CC 2024 Paper 'FlowProf: Profiling Multi-threaded Programs using Information-Flow'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10464417",
        "abstract": "<p>FlowProf is implemented as a SOOT compiler pass and instruments the bytecode of the application to be profiled. The input of FlowProf is multi-threaded Java application on which dynamic program analysis is performed. FlowProf has a lock profiler that detects lock contention. Then FlowProf performs full analysis for the most contended class. The FlowProf runtime records the execution of synchronized regions, records shared memory accesses, and tracks information flows. After running the instrumented program it performs analysis of the trace and reports waiting times of three different types of conflicts which is the output of FlowProf. The three different types of conflicts are: lock conflicts, memory access conflicts and information flow.</p>\n<p>Finally we have optimized implementation of the benchmarks to see how much performance improvement can be achieved by performing the optimization.</p>",
        "keywords": "Dynamic Program Analysis, Optimization, Profiling, Scalable Concurrency Control, Synchronization",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.10525151": {
        "doi": "10.5281/zenodo.10525151",
        "author": "Dura, Alexandru and Reichenbach, Christoph",
        "title": "Reproduction Package for 'Clog: A Declarative Language for C Static Code Checkers'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10525151",
        "abstract": "<p>Clog is a declarative language for describing static code checkers for C. Clog is a dialect of Datalog and adds syntactic pattern matching over the C language. We have built Clog using the MetaDL framework and the Clang C compiler frontend. The MetaDL framework supports Datalog evaluation and syntactic patterns, while the Clang frontend provides AST facts and an AST matching mechanism.</p>\n<p>We provide the Clog artifact as a Docker image. The artifact contains the Clog implementation, the evaluation framework and the test suites we have used in our evaluation.</p>",
        "keywords": "C, Datalog, Static Analysis Frameworks, Syntactic Patterns",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10566216": {
        "doi": "10.5281/zenodo.10566216",
        "author": "Li, Wei and He, Dongjie and Gui, Yujiang and Chen, Wenguang and Xue, Jingling",
        "title": "Artifact for \"A Context-Sensitive Pointer Analysis Framework for Rust and Its Application to Call Graph Construction\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10566216",
        "abstract": "<p>This is the artifact for the CC’24 paper titled “A Context-Sensitive Pointer Analysis Framework for Rust and Its Application to Call Graph Construction”. It includes a docker image and a READEME file.</p>",
        "keywords": "Call Graph Construction, Pointer Analysis, Rust",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10567311": {
        "doi": "10.5281/zenodo.10567311",
        "author": "Mavrogeorgis, Nikolaos and Vasiladiotis, Christos and Mu, Pei and Khordadi, Amir and Franke, Bj\\\"{o",
        "title": "Reproduction Package for Article 'UNIFICO: Thread Migration in Heterogeneous-ISA CPUs without State Transformation'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10567311",
        "abstract": "<p>Artifact of the paper “UNIFICO: Thread Migration in Heterogeneous-ISA CPUs without State Transformation”. - unificocc24-unifico.tar.gz: docker image for the execution of experiments - llvm-unifico.tar.gz: LLVM source code with Unifico implementation (binaries in docker image) - unifico.tar.gz: scripts used to run experiments, the NPB benchmark suite, logs, plots, and Dockerfile source (also provided in docker image)</p>\n<ul>\n<li>figures.tar.gz: generated result plots from the paper</li>\n</ul>",
        "keywords": "Compilers, Computer Systems, LLVM",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10568392": {
        "doi": "10.5281/zenodo.10568392",
        "author": "Stinnett, J. Ryan and Kell, Stephen",
        "title": "Accurate Coverage Metrics for Compiler-Generated Debugging Information (artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10568392",
        "abstract": "<p>This is the artifact for the CC 2024 paper:</p>\n<p>Accurate Coverage Metrics for Compiler-Generated Debugging Information</p>\n<p>by J. Ryan Stinnett and Stephen Kell.</p>\n<p>The source for this artifact is available at https://github.com/jryans/debug-info-metrics-artifact</p>",
        "keywords": "debug information, optimisation",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/jryans/debug-info-metrics-artifact"
    },
    "10.5281/zenodo.10570638": {
        "doi": "10.5281/zenodo.10570638",
        "author": "Zhu, Yifan and Cat, Quartic and Ge, Boluo and Sun, Shaotong",
        "title": "Paguroidea: Fused Parser Generator with Transparent Semantic Actions",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10570638",
        "abstract": "<p>This artifact provides source code and detailed guidance on building and benchmarking the Paguroidea parser generator. Paguroidea integrates lexer-parser fusion alongside a unique transparent encoding of semantic actions, delivering flexibility and performance. Developed using the Rust programming language, the Paguroidea enjoys good portability. Therefore, the setup process and the acquisition of results would not require too much effort.</p>",
        "keywords": "compiler, context-free grammar, parser, parser generator, substructural logic",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10571103": {
        "doi": "10.5281/zenodo.10571103",
        "author": "Drescher, Florian and Engelke, Alexis",
        "title": "Artifact for CC'24 paper on \"Fast Template-Based Code Generation for MLIR\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10571103",
        "abstract": "<p>The artifact contains the sources for building the template-based MLIR compiler and the dependent LLVM sources (commit 5d4927 with some modifications). It compiles and executes MLIR programs consisting of supported operations (multiple sample programs are included; similar to mlir-cpu-runner); on first execution, it generates required templates and persists them. Furthermore, the artifact contains the modified sources for LingoDB with integrated template-based code-generation backend and Polygeist (commit fd4194b) for conversion of C files to MLIR upstream dialect operations. Sample MLIR programs and scripts for preparing/running the benchmarks from Figures 2-5 are attached.</p>",
        "keywords": "Binary Code Patching, Fast Compilation, JIT Compilation, MLIR, Template-based Compilation",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10574579": {
        "doi": "10.5281/zenodo.10574579",
        "author": "VenkataKeerthy, S. and Jain, Siddharth and Kalvakuntla, Umesh and Gorantla, Pranav Sai and Chitale, Rajiv Shailesh and Brevdo, Eugene and Cohen, Albert and Trofin, Mircea and Upadrasta, Ramakrishna",
        "title": "ML-Compiler-Bridge: The Next 700 ML-Enabled Compiler Optimizations",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10574579",
        "abstract": "<p>This artifact corresponds to the tool described in the paper, “The Next 700 ML-Enabled Compiler Optimizations”, published in CC 2024.</p>\n<p>Please visit our project page - https://compilers.cse.iith.ac.in/publications/mlcompilerbridge for the latest version of ML-Compiler-Bridge.</p>",
        "keywords": "Compilers, ML-based Compiler Optimizations",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.10577943": {
        "doi": "10.5281/zenodo.10577943",
        "author": "Mu, Pei and Mavrogeorgis, Nikolaos and Vasiladiotis, Christos and Tsoutsouras, Vasileios and Kaparounakis, Orestis and Stanley-Marbell, Phillip and Barbalace, Antonio",
        "title": "CoSense Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10577943",
        "abstract": "<p>The artifact of CoSense, which is a CC’2024 paper.</p>",
        "keywords": "compiler optimizations, embedded systems, interval arithmetic, sensors, value interval propagation",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.10452601": {
        "doi": "10.5281/zenodo.10452601",
        "author": "Yuan, Charles and Villanyi, Agnes and Carbin, Michael",
        "title": "Artifact for Quantum Control Machine: The Limits of Control Flow in Quantum Programming",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10452601",
        "abstract": "<p>This artifact contains an implementation of a simulator for the quantum control machine and the programs from the case study as presented in the paper.</p>",
        "keywords": "quantum instruction set architectures, quantum programming languages",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10457566": {
        "doi": "10.5281/zenodo.10457566",
        "author": "Chatterjee, Krishnendu and Goharshady, Amir Kafshdar and Meggendorfer, Tobias and \\v{Z",
        "title": "Artefact for: Quantitative Bounds on Resource Usage of Probabilistic Programs",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10457566",
        "abstract": "<p>The artefact for the OOPSLA 2024 paper “Quantitative Bounds on Resource Usage of Probabilistic Programs”.</p>",
        "keywords": "Cost Analysis, Martingales, Probabilistic Programming, Quantitative Bounds, Static Analysis",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10463878": {
        "doi": "10.5281/zenodo.10463878",
        "author": "Yadavally, Aashish and Li, Yi and Wang, Shaohua and Nguyen, Tien N.",
        "title": "Artifact for \"A Learning-Based Approach to Static Program Slicing\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10463878",
        "abstract": "<p>NS-Slicer is a learning-based static program slicing tool, which extends such an analysis to partial Java programs. The source code, data, and model artifacts are publicly available on GitHub (https://github.com/aashishyadavally/ns-slicer), and Zenodo (https://zenodo.org/records/10463878).</p>",
        "keywords": "AI4SE, Debugging, Neural Networks, Pre-Trained Language Models, Static Slicing, Vulnerability Detection",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10463907": {
        "doi": "10.5281/zenodo.10463907",
        "author": "Li, Zikun and Peng, Jinjun and Mei, Yixuan and Lin, Sina and Wu, Yi and Padon, Oded and Jia, Zhihao",
        "title": "Reproduction Package for \"Quarl: A learning-based quantum circuit optimizer\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10463907",
        "abstract": "<p>This package contains the source code and instructions for the reproduction of the evaluation results in the paper “Quarl: A learning-based quantum circuit optimizer”.</p>",
        "keywords": "Compilers, Quantum Computation, Reinforcement Learning",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.10463960": {
        "doi": "10.5281/zenodo.10463960",
        "author": "Nelson, Tim and Greenman, Ben and Prasad, Siddhartha and Dyer, Tristan and Bove, Ethan and Chen, Qianfan and Cutting, Charles and Del Vecchio, Thomas and LeVine, Sidney and Rudner, Julianne and Ryjikov, Ben and Varga, Alexander and Wagner, Andrew and West, Luke and Krishnamurthi, Shriram",
        "title": "Artifact for Forge: A Tool and Language for Teaching Formal Methods",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10463960",
        "abstract": "<p>The purpose of this artifact is to show that Forge works as advertised. To that end, we provide instructions for installing Forge (similar to what our students see), links to the documentation, and code from the paper.</p>",
        "keywords": "formal-methods education, language levels, lightweight formal-methods",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10464500": {
        "doi": "10.5281/zenodo.10464500",
        "author": "Liu, Jie and Zhao, Zhongyuan and Ding, Zijian and Brock, Benjamin and Rong, Hongbo and Zhang, Zhiru",
        "title": "Reproduction Package for Article `UniSparse: An Intermediate LanguageforGeneralSparseFormatCustomization'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10464500",
        "abstract": "<p>UniSparse is an intermediate language for general sparse format customization. UniSparse automates code generation for custom sparse format conversion and compute operations targeting heterogeneous architectures.</p>",
        "keywords": "compilers, heterogeneous systems, programming languages, sparse data formats",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/cornell-zhang/UniSparse/tree/v1.0-oopsla"
    },
    "10.5281/zenodo.10517828": {
        "doi": "10.5281/zenodo.10517828",
        "author": "Avanzini, Martin and Barthe, Gilles and Gr\\'{e",
        "title": "ehoare",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10517828",
        "abstract": "<p>This artifact provides a docker image that contains a working installation of Easycrypt together with three proof scripts related to the examples given in the paper.</p>\n<ul>\n<li><code>qselect.ec</code> contains the formalisation of quickselect from Section 3. It relies on an auxiliary library <code>partition.eca</code> concerned with properties of the partitioning scheme.</li>\n<li><code>skip_list.ec</code> contains the formalisation of skip-lists outlined in Section 6</li>\n<li><code>adversary.ec</code> contains the prototypical cryptography proof example outlined in Section 7</li>\n</ul>",
        "keywords": "expectation logic, skip list",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10609061": {
        "doi": "10.5281/zenodo.10609061",
        "author": "Zhang, Chi and Wang, Linzhang and Rigger, Manuel",
        "title": "Artifact for \"Finding Cross-rule Optimization Bugs in Datalog Engines\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10609061",
        "abstract": "<p>The artifact consists of two main components:</p>\n<p>1、The source code of the tool Datalog Engine Optimization Tester (Deopt), which we used to find all of the bugs presented in our paper. 2、The data and reproduce documents for the results of the evaluation in the paper.</p>",
        "keywords": "cross-rule optimization bugs, Datalog engine testing, test oracle",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.10701642": {
        "doi": "10.5281/zenodo.10701642",
        "author": "Ye, Qianchuan and Delaware, Benjamin",
        "title": "Taypsi: Static Enforcement of Privacy Policies for Policy-Agnostic Oblivious Computation: OOPSLA24 Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10701642",
        "abstract": "<p>This is the artifact for the OOPSLA24 paper “Taypsi: Static Enforcement of Privacy Policies for Policy-Agnostic Oblivious Computation”. It contains:</p>\n<ul>\n<li>README.md: artifact instructions in markdown format</li>\n<li>README.pdf: artifact instructions in pdf format</li>\n<li>taypsi-image-amd64.tar.xz: docker image for amd64 (x86_64) architecture</li>\n<li>taypsi-image-arm64.tar.xz: docker image for arm64 architecture</li>\n<li>Dockerfile: docker file used to generate the docker images</li>\n<li>taypsi.tar.xz: source code of the Taypsi type checker, compiler, examples and benchmarks</li>\n<li>taype-pldi.tar.xz: source code of the Taype type checker and compiler (PLDI23), extended with additional benchmarks for comparison with Taypsi</li>\n<li>taype-sa.tar.xz: source code of a version of Taype with an additional optimization (smart array) for a fairer comparison with Taypsi</li>\n<li>taype-drivers.tar.xz: source code of drivers that implement the cryptographic primitives and oblivious array, used by taypsi and taype-sa</li>\n<li>taype-drivers-legacy.tar.xz: source code of the drivers used by taype-pldi</li>\n<li>taypsi-theories.tar.xz: Coq formalization of the Taypsi core calculus</li>\n<li>taype-vscode.tar.xz: source code of a VS Code extension that provides basic syntax highlighting for Taypsi programs</li>\n</ul>\n<p>To evaluate this artifact, you only need to download the docker image for your architecture. Other tarballs provide clean versions of the source code, but you do not need them for evaluation. See README.md / README.pdf for details about this artifact and evaluation instructions. The same README.md is also available in the docker images.</p>",
        "keywords": "Algebraic Data types, Coq Proof Assistant, Dependent Types, Oblivious Computation, Secure Multiparty Computation",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10723160": {
        "doi": "10.5281/zenodo.10723160",
        "author": "Naik, Aaditya and Stein, Adam and Wu, Yinjun and Naik, Mayur and Wong, Eric",
        "title": "Artifact for `TorchQL: A Programming Framework for Integrity Constraints in Machine Learning`",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10723160",
        "abstract": "<p>This artifact contains the queries in the paper and reproduces the results. Follow the README.md file for more information.</p>",
        "keywords": "integrity constraints, machine learning, query language",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.10727570": {
        "doi": "10.5281/zenodo.10727570",
        "author": "Honor\\'{e",
        "title": "Artifact For \"AdoB: Bridging Benign and Byzantine Consensus with Atomic Distributed Objects\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10727570",
        "abstract": "<p>This artifact includes the Coq definitions and proofs to support the claims in the paper. It also includes the OCaml shim layer needed to evaluate the GenJolteon implementation.</p>",
        "keywords": "byzantine, consensus protocols, distributed systems, formal verification, liveness, proof assistants, refinement",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.10774458": {
        "doi": "10.5281/zenodo.10774458",
        "author": "Sundram, Shiv and Tariq, Muhammad Usman and Kjolstad, Fredrik",
        "title": "Artifact for OOPSLA 2024 Paper: Compiling Recurrences over Dense and Sparse Arrays (version 1)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10774458",
        "abstract": "<p>This is a docker container containing the artifact for the OOPSLA 2024 accepted paper “Compiling Recurrences over Dense and Sparse Arrays” by Shiv Sundram, Muhammad Usman Tariq, Fredrik Kjolstad</p>\n<p>Directions for running artifact and reproducing the paper’s figures can be found in the Getting Started Guide:</p>\n<p>https://docs.google.com/document/d/1YCC8AskQYFQfUQ1_jtW2OOqWrT9-qpizTR4BUmbYBXQ/edit?usp=sharing</p>",
        "keywords": "Domain specific languages, Recurrences, Software and its engineering, Source code generation",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.10775922": {
        "doi": "10.5281/zenodo.10775922",
        "author": "Chen, Zhe and Zhu, Yunlong and Wang, Zhemin",
        "title": "Reproduction Package for Article `Design and Implementation of an Aspect-Oriented C Programming Language'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10775922",
        "abstract": "<p>The artifact contains the Movec compiler for Aclang and all the benchmarks used in our experiments. The purpose of the artifact is to reproduce the experiments in Section 7 and support the main claims in the paper.</p>",
        "keywords": "aspect-oriented programming, C language, compiler, instrumentation, semantics, transformation",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/drzchen/movec"
    },
    "10.5281/zenodo.10777503": {
        "doi": "10.5281/zenodo.10777503",
        "author": "Paradis, Anouk and Dekoninck, Jasper and Bichsel, Benjamin and Vechev, Martin",
        "title": "Reproduction Package for the Article \"Synthetiq: Fast and Versatile Quantum Circuit Synthesis\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10777503",
        "abstract": "<p>This artifact contains the code for the paper ‘Synthetiq: Fast and Versatile Quantum Circuit Synthesis’. Synthetiq is a tool to synthesize quantum circuits implementing a given (partial) specification over arbitrary finite gate sets and is faster and more versatile than existing works.</p>\n<p>This artifact contains: - the code of our tool Synthetiq and installation instructions; - precise instructions to reproduce our evaluation; - usage guide to use Synthetiq on new operators; - all quantum circuits found by Synthetiq and mentioned in the paper.</p>",
        "keywords": "Clifford+T, Quantum Circuits, Synthesis",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10779424": {
        "doi": "10.5281/zenodo.10779424",
        "author": "Binder, David and Skupin, Ingo and S\\\"{u",
        "title": "Artifact for the article \"Deriving Dependently-Typed OOP from First Principles\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10779424",
        "abstract": "<p>Contained in the artifact is a Rust implementation of a dependently-typed programming language. This implementation contains a typechecker as well as an LSP server, VScode plugin and the infrastructure necessary to produce a static website in which snippets from the programming language can be typechecked in the browser. The language server provides a code action which can transform any codata type into a data type using defunctionalization, and any data type into a codata type using refunctionalization.</p>",
        "keywords": "algebraic data types, codata, defunctionalization, dependent types, refunctionalization",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10780591": {
        "doi": "10.5281/zenodo.10780591",
        "author": "Li, Haonan and Hao, Yu and Zhai, Yizhuo and Qian, Zhiyun",
        "title": "Enhancing Static Analysis for Practical Bug Detection: An LLM-Integrated Approach (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10780591",
        "abstract": "<p>This repo contains all the code and test cases for the paper “Enhancing Static Analysis for Practical Bug Detection: An LLM-Integrated Approach”. LLift is an automated framework enhancing static analysis in bug detection with LLMs.</p>",
        "keywords": "bug detection, large language model, Static analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.10782412": {
        "doi": "10.5281/zenodo.10782412",
        "author": "Klinkenberg, Lutz and Blumenthal, Christian and Chen, Mingshuai and Haase, Darion and Katoen, Joost-Pieter",
        "title": "Exact Bayesian Inference for Loopy Probabilistic Programs using Generating Functions - Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10782412",
        "abstract": "<p>The artifact includes a Docker image with the Prodigy tool and program examples that were used for the benchmarks in the paper. It includes scripts and documentation to allow for easy replication of the presented benchmark results.</p>",
        "keywords": "Bayesian inference, conditioning, denotational semantics, generating functions, non-termination, probabilistic programs, quantitative verification",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10783906": {
        "doi": "10.5281/zenodo.10783906",
        "author": "Xu, Ziyang and Chon, Yebin and Su, Yian and Tan, Zujun and Apostolakis, Sotiris and Campanoni, Simone and August, David I.",
        "title": "Artifact for Paper \"PROMPT: A Fast and Extensible Memory Profiling Framework\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10783906",
        "abstract": "<p>This repository contains the artifact evaluation for the PROMPT paper. PROMPT is a fast and extensible memory profiling framework.</p>",
        "keywords": "compiler optimizations, memory profiling, profiler framework",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10791709": {
        "doi": "10.5281/zenodo.10791709",
        "author": "Wang, Di and Reps, Thomas",
        "title": "Newtonian Program Analysis of Probabilistic Programs (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10791709",
        "abstract": "<p>This artifact provides a prototype implementation of the framework of Newtonian Program Analysis with Pre-Markov Algebras (NPA-PMA). NPA-PMA is an interprocedural dataflow-analysis framework for designing and implementing (partially) non-iterative program analyses of probabilistic programs with unstructured control-flow, nondeterminism, and general recursion. To demonstrate the usage of NPA-PMA, this artifact also includes five instantiations for four analyses: Bayesian-inference analysis, higher-moment analysis of accumulated rewards, expectation-invariant analysis, and expectation-recurrence analysis.</p>",
        "keywords": "Algebraic Program Analysis, Interprocedural Program Analysis, Newton's Method, Probabilistic Programs",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10794350": {
        "doi": "10.5281/zenodo.10794350",
        "author": "Smith, Scott and Zhang, Robert",
        "title": "Software Artifact for A Pure Demand Operational Semantics with Applications to Program Analysis",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10794350",
        "abstract": "<p>This artifact facilitates building, testing, benchmarking, and evolving the interpreter and program analyses presented in the paper.</p>",
        "keywords": "Higher-Order Functional Programming, Operational Semantics, Program Analysis",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/JHU-PL-Lab/dde/tree/v1.0.0"
    },
    "10.5281/zenodo.10795614": {
        "doi": "10.5281/zenodo.10795614",
        "author": "He, Yang and Zhao, Pinhan and Wang, Xinyu and Wang, Yuepeng",
        "title": "Artifact Evaluation VeriEQL: Bounded Equivalence Verification for Complex SQL Queries with Integrity Constraints",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10795614",
        "abstract": "<p>The artifact aims to show that our claims and conclusions in the paper (VeriEQL: Bounded Equivalence Verification for Complex SQL Queries with Integrity Constraints) are well-founded and that others can reproduce the experimental results. It employs a SQL encoder and an SMT solver to encode and check equivalence of two SQL queries on relational schemas.</p>",
        "keywords": "Equivalence Checking, Program Verification, Relational Databases",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.10796440": {
        "doi": "10.5281/zenodo.10796440",
        "author": "Alshnakat, Anoud and Lundberg, Didrik and Guanciale, Roberto and Dam, Mads",
        "title": "OOPSLA 2024 Artifact: HOL4P4: Mechanized Small-Step Semantics for P4",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10796440",
        "abstract": "<p>For a detailed description of this artifact, see OVERVIEW.md or OVERVIEW.pdf among the files.</p>\n<p>HOL4P4-OOPSLA2024-source.tar.gz is a compressed directory with the source code, and hol4p4-amd64.tar.gz and hol4p4-aarch64.tar.gz are compressed Docker images for x86_64-based and ARM64-based CPUs, respectively.</p>",
        "keywords": "formal verification, interactive theorem proving, P4, programming language semantics",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10796555": {
        "doi": "10.5281/zenodo.10796555",
        "author": "Stjerna, Amanda and R\\\"{u",
        "title": "Reproduction Package for `A Constraint Solving Approach to Parikh Images of Regular Languages'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10796555",
        "abstract": "<p>This is a reproduction and software package for A Constraint Solving Approach to Parikh Images of Regular Languages, published in OOPSLA 2024. For more information, see Artifact Overview.md.</p>\n<p>It contains all software developed for the paper, as well as Jupyter notebooks for analysing experiments and relevant scripts for building them.</p>",
        "keywords": "automata, automated theorem proving, parikh automata, parikh images, regular languages, SMT, string solving",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.10797459": {
        "doi": "10.5281/zenodo.10797459",
        "author": "Rose, Abhishek and Bansal, Sorav",
        "title": "Artifact for paper \"Modeling Dynamic (De)Allocations of Local Memory for Translation Validation\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10797459",
        "abstract": "<p>This artifact contains a prototype implementation of the Dynamo algorithm described in the paper “Modeling Dynamic (De)Allocations of Local Memory for Translation Validation”. The artifact is packaged as a Docker application and is tested to run on Ubuntu 20.04 operating system. Please see README.pdf (packaged inside the archive) for more details.</p>",
        "keywords": "Certified compilation, Equivalence checking, Translation validation",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.10797791": {
        "doi": "10.5281/zenodo.10797791",
        "author": "Marshall, Daniel and Orchard, Dominic",
        "title": "Functional Ownership through Fractional Uniqueness (Artefact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10797791",
        "abstract": "<p>Artifact for the paper of the same title that appears at OOPSLA 2024. Includes code examples in both Granule and Rust. See overview.pdf for more information.</p>",
        "keywords": "borrowing, fractional permissions, graded modal types, ownership",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10798266": {
        "doi": "10.5281/zenodo.10798266",
        "author": "Kravchuk-Kirilyuk, Anastasiya and Feng, Gary and Iskander, Jonas and Zhang, Yizhou and Amin, Nada",
        "title": "Persimmon: Nested Family Polymorphism with Extensible Variant Types (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10798266",
        "abstract": "<p>Our implementation consists of the Persimmon type checker and our prototype compiler to Scala.</p>",
        "keywords": "composable extensions, extensibility, family polymorphism, nested inheritance, Persimmon",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10798571": {
        "doi": "10.5281/zenodo.10798571",
        "author": "Crichton, Will and Krishnamurthi, Shriram",
        "title": "Artifact for \"Profiling Programming Language Learning\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10798571",
        "abstract": "<p>These are Docker images that contain the codebase, data, and analysis scripts for our OOPSLA 2024 paper “Profiling Programming Language Learning”.</p>",
        "keywords": "digital textbooks, item response theory, rust education",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10798978": {
        "doi": "10.5281/zenodo.10798978",
        "author": "Lamba, Ada and Taylor, Max and Beardsley, Vincent and Bambeck, Jacob and Bond, Michael D. and Lin, Zhiqiang",
        "title": "Implementation for \"Cocoon: Static Information Flow Control in Rust\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10798978",
        "abstract": "<p>Cocoon is a Rust library that provides types and mechanisms for statically enforcing information flow control in Rust programs. Cocoon is currently intended to prevent programmer errors such as accidentally leaking a “private” value to an untrusted function or other value. Cocoon does not currently address dynamic labels, integrity labels, OS integration, or leaks caused by other means such as side-channel attacks.</p>\n<p>This artifact contains the Cocoon library itself, all examples presented in the paper, and evaluation scripts.</p>",
        "keywords": "information flow control, Rust, type and effect systems",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/abarach/Cocoon-artifact/tree/oopsla-2024"
    },
    "10.5281/zenodo.10814650": {
        "doi": "10.5281/zenodo.10814650",
        "author": "Enea, Constantin and Koskinen, Eric",
        "title": "CION: Concurrent Trace Reductions",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10814650",
        "abstract": "<p>A proof-of-concept implementation to automatically generate candidate layer quotient automata directly form the source code of concurrent object implementations. See f OOPSLA 2024 paper, “Scenario-Based Proofs for Concurrent Objects”.</p>",
        "keywords": "concurrent objects, layer quotients, linearizability, proofs of concurrent objects, Quotients",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/quotientprovers/cion/tree/oopsla2024-artifact"
    },
    "10.5281/zenodo.10897277": {
        "doi": "10.5281/zenodo.10897277",
        "author": "Zhang, Yifan and Shi, Yuanfeng and Zhang, Xin",
        "title": "Learning Abstraction Selection for Bayesian Program Analysis (Paper Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10897277",
        "abstract": "<p>Our artifact includes all code, scripts, data, and statistics in our experiments. It supports the following things: 1. Reproduction of all results in our experiments automatically. 2. Transformation from the results to Tables 7-11 and Figures 8-10 in our paper automatically. 3. Reusability guide for applying BinGraph framework to other settings and extensions.</p>",
        "keywords": "abstract interpretation, alarm ranking, Bayesian network, machine learning for program analysis, Static analysis",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10723168": {
        "doi": "10.5281/zenodo.10723168",
        "author": "Chatterjee, Krishnendu and Goharshady, Ehsan Kafshdar and Novotn\\'{y",
        "title": "Equivalence and Similarity Refutation for Probabilistic Programs",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10723168",
        "abstract": "<p>This repository contains the artifact of the paper titled “Equivalence and Similarity Refutation for Probabilistic Programs” accepted at PLDI 2024.</p>\n<p>The tool takes two probabilistic transition systems with specified initial configurations as input and based on user preferences either (i) tries to prove whether the two programs generate equivalent output distributions, or (ii) tries to find a lowerbound on Kantorovich distance between the output distributions of the input programs.</p>",
        "keywords": "Kantorovich distance, Martingales, Probabilistic programming, Probability distribution equivalence, Static program analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10729070": {
        "doi": "10.5281/zenodo.10729070",
        "author": "Yuan, Charles and Carbin, Michael",
        "title": "The T-Complexity Costs of Error Correction for Control Flow in Quantum Computation",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10729070",
        "abstract": "<p>The artifact contains the sources for the Spire compiler, the benchmark programs and circuits used in the paper, and the evaluation package.</p>",
        "keywords": "quantum compilers, quantum programming languages",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10740687": {
        "doi": "10.5281/zenodo.10740687",
        "author": "Kakarla, Siva Kesava Reddy and Yan, Francis Y. and Beckett, Ryan",
        "title": "Source code for article \"Diffy: Data-Driven Bug Finding for Configurations\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10740687",
        "abstract": "<p>Diffy is a push-button configuration analyzer that detects potential bugs in JSON configurations. It learns a common template from a set of similar configurations and uses unsupervised learning to identify anomalous template parameters as likely bugs.</p>\n<p>We have used F# and C# as our programming languages and have provided instructions in our README on how to operate the tool.</p>\n<p>In the paper, we used three datasets: - A large cloud provider’s wide-area network configurations - Operational configurations from a 5GvRAN network testbed - MySQL configurations</p>\n<p>We have uploaded the 5GvRAN configurations and MySQL configurations to the repository under the examples directory. The majority of the evaluation section in the paper is based on the WAN configurations, which unfortunately, we cannot release publicly.</p>",
        "keywords": "anomaly detection, configuration bug finding, template synthesis",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/microsoft/DiffyConfigAnalyzer"
    },
    "10.5281/zenodo.10775789": {
        "doi": "10.5281/zenodo.10775789",
        "author": "Nikolaev, Ruslan and Ravindran, Binoy",
        "title": "A Family of Fast and Memory Efficient Lock- and Wait-Free Reclamation - Artifact for PLDI'24",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10775789",
        "abstract": "<p>The artifact contains a VM image (VirtualBox) with preinstalled Ubuntu 18.04 and the (precompiled) benchmark. The artifact also contains source code and instructions for manual (bare-metal) installations. The artifact also includes our data measurements and scripts for generating plots. Please see README.txt for more details.</p>",
        "keywords": "hazard pointers, memory reclamation, wait-free",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10781381": {
        "doi": "10.5281/zenodo.10781381",
        "author": "Fang, Wang and Ying, Mingsheng",
        "title": "Artifact: Symbolic Execution for Quantum Error Correction Programs",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10781381",
        "abstract": "<p>We define QSE, a symbolic execution framework for quantum programs by integrating symbolic variables into quantum states and the outcomes of quantum measurements.&nbsp;The soundness of QSE is established through a theorem that ensures the correctness of symbolic execution within operational semantics.&nbsp;We further introduce symbolic stabilizer states, which symbolize the phases of stabilizer generators, for the efficient analysis of quantum error correction (QEC) programs.&nbsp;Within the QSE framework, we can use symbolic expressions to characterize the possible discrete Pauli errors in QEC, providing a significant improvement over existing methods that rely on sampling with simulators.&nbsp;We implement QSE &nbsp;with the support of symbolic stabilizer states in a prototype tool named QuantumSE.jl. Our experiments on representative QEC codes, including quantum repetition codes, Kitaev’s toric codes, and quantum Tanner codes, demonstrate the efficiency of QuantumSE.jl for debugging QEC programs with over 1000 qubits.&nbsp;In addition, by substituting concrete values in symbolic expressions of measurement results, QuantumSE.jl is also equipped with a sampling feature for stabilizer circuits.&nbsp;Despite a longer initialization time than the state-of-the-art stabilizer simulator, Google’s Stim, QuantumSE.jl offers a quicker sampling rate in the experiments.</p>",
        "keywords": "quantum error correction, quantum programs, stabilizer formalism, symbolic execution",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10783891": {
        "doi": "10.5281/zenodo.10783891",
        "author": "Jeon, Minseok and Park, Jihyeok and Oh, Hakjoo",
        "title": "PL4XGL: A Programming Language Approach to Explainable Graph Learning",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10783891",
        "abstract": "<p>This artifact aims to reproduce the main results of the technique PL4XGL on eleven node and graph classification datasets in our paper “PL4XGL: A Programming Language Approach to Explainable Graph Learning” submitted to PLDI 2024. Specifically, the artifact will reproduce the results of PL4XGL in Figure 11 (Sparsity and Fidelity), Table 5 (accuracy) in our paper, and Figure 2 (Precision and Generality) of our supplementary material. This artifact requires only Python 3.x (we used Python 3.8.8).</p>",
        "keywords": "Domain-Specific Language, Graph Learning, Program Synthesis",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.10790231": {
        "doi": "10.5281/zenodo.10790231",
        "author": "Lorenzen, Anton and Leijen, Daan and Swierstra, Wouter and Lindley, Sam",
        "title": "The Functional Essence of Imperative Binary Search Trees (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10790231",
        "abstract": "<p>Our artifact contains implementations of the binary search tree algorithms discussed in the paper in Koka, C, OCaml and Haskell as well as a benchmarking setup to reproduce our numbers. We also include the AddressC proofs of all lemmas in the paper.</p>",
        "keywords": "FBIP, FIP, Splay Trees, Tail Recursion Modulo Cons, Zip Trees, Zippers",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10795858": {
        "doi": "10.5281/zenodo.10795858",
        "author": "Hong, Jaemin and Ryu, Sukyoung",
        "title": "Don't Write, but Return: Replacing Output Parameters with Algebraic Data Types in C-to-Rust Translation (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10795858",
        "abstract": "<p>This artifact is for the paper Don’t Write, but Return: Replacing Output Parameters with Algebraic Data Types in C-to-Rust Translation. It introduces static analysis that identifies output parameters and program transformation that removes these parameters, enhancing automatic C-to-Rust translation. The tool, Nopcrat, which embodies the proposed method, is developed in Rust. Our evaluation dataset comprises 35 real-world C programs. You need the capability to run Docker containers, as the artifact is provided via a Docker image. To replicate the study’s results, a computer with at least 32 GB of RAM is necessary.</p>\n<p>Nopcrat translates C code to Rust while replacing output parameters with Rust’s algebraic data types. It consists of four components: a modified version of the C2Rust translator, Extern2use, a static analyzer, and a code transformer. The translator translates C code to Rust. Extern2use replaces extern declarations in C2Rust-generated code with use. The analyzer analyzes the Rust code to identify output parameters and stores the information in a JSON file. The transformer removes output parameters in the Rust code using the analysis results.</p>\n<p>The artifact supports the claims made in Section 5 of the paper by allowing the reproduction of the experimental results.</p>",
        "keywords": "Algebraic Data Type, Automatic Translation, C, Output Parameter, Rust",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10801691": {
        "doi": "10.5281/zenodo.10801691",
        "author": "Albert, Elvira and Garcia de la Banda, Maria and Hern\\'{a",
        "title": "Artifact for \"SuperStack: Superoptimization of Stack-Bytecode via Greedy, Constraint-based, and SAT Techniques\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10801691",
        "abstract": "<p>This artifact includes the necessary data to reproduce the experiments in the paper “SuperStack: Superoptimization of Stack-Bytecode via Greedy, Constraint-based, and SAT Techniques,” accepted in PLDI’24.</p>",
        "keywords": "EVM, Program Synthesis, SAT, Superoptimization, WebAssembly",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10802176": {
        "doi": "10.5281/zenodo.10802176",
        "author": "Parthasarathy, Gaurav and Dardinier, Thibault and Bonneau, Benjamin and M\\\"{u",
        "title": "Towards Trustworthy Automated Program Verifiers: Formally Validating Translations into an Intermediate Verification Language -- Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10802176",
        "abstract": "<p>This artifact includes (1) a formalisation in the Isabelle theorem prover formalising the rules and definitions in the paper, (2) our proof-producing fork of the existing Viper-to-Boogie translation (implemented in Scala), which generates proofs in Isabelle on every run, and (3) the verifier test suites on which we evaluated our tool on as well as some of the corresponding verifiers (Gobra and VerCors) to generate the corresponding Viper files. The artifact describes the Isabelle formalisation and the proof-producing fork, and shows how to do the evaluation described in the paper. The entire artifact is packaged as a virtual machine using VirtualBox.</p>",
        "keywords": "Boogie, Intermediate Verification Languages, Proof Certification, Viper",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10802503": {
        "doi": "10.5281/zenodo.10802503",
        "author": "Lubin, Justin and Ferguson, Jeremy and Ye, Kevin and Yim, Jacob and Chasins, Sarah E.",
        "title": "Reproduction Package for \"Equivalence by Canonicalization for Synthesis-Backed Refactoring\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10802503",
        "abstract": "<p>This artifact is a self-contained virtual machine for the artifact evaluation of the paper “Equivalence by Canonicalization for Synthesis-Backed Refactoring.” It includes our program synthesizer (Cobbler) as well as the data necessary for our empirical evaluation.</p>",
        "keywords": "Program Equivalence Checking, Program Synthesis, Refactoring",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10802748": {
        "doi": "10.5281/zenodo.10802748",
        "author": "Geng, Chujun and Blanas, Spyros and Bond, Michael D. and Wang, Yang",
        "title": "Reproduction Package for 'IsoPredict: Dynamic Predictive Analysis for Detecting Unserializable Behaviors in Weakly Isolated Data Store Applications'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10802748",
        "abstract": "<p>The artifact contains IsoPredict and its benchmarks. IsoPredict was written in Python and benchmarks were written in Java and Rust. The benchmarks generate traces that will be analyzed by IsoPredict. IsoPredict will perform both predictive analysis and validation. Everything will be provided as a docker container image. We recommend running them on a Linux machine with at least 16GB of RAM.</p>",
        "keywords": "concurrency, database isolation levels, Dynamic predictive analysis, software debugging",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10802849": {
        "doi": "10.5281/zenodo.10802849",
        "author": "Kellison, Ariel E. and Hsu, Justin",
        "title": "Artifact for Numerical Fuzz: A Type System for Rounding Error Analysis",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10802849",
        "abstract": "<p>This is the artifact for NumFuzz (“Numerical Fuzz”), a prototype implementation of the type system and floating-point error analysis tool described in the paper “Numerical Fuzz: A Type System for Rounding Error Analysis”.</p>",
        "keywords": "Floating point, Linear type systems, Roundoff error",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10804712": {
        "doi": "10.5281/zenodo.10804712",
        "author": "Anand, Aditya and Adithya, Solai and Rustagi, Swapnil and Seth, Priyam and Sundaresan, Vijay and Maier, Daryl and Nandivada, V. Krishna and Thakur, Manas",
        "title": "Optimistic Stack Allocation and Dynamic Heapification for Managed Runtimes",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10804712",
        "abstract": "<p>Artifact for PLDI 2024 paper title “Optimistic Stack Allocation and Dynamic Heapification for Managed Runtimes”.</p>",
        "keywords": "Escape analysis, Managed runtimes, Stack allocation",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.10806044": {
        "doi": "10.5281/zenodo.10806044",
        "author": "Barri\\`{e",
        "title": "Artifact for \"Linear Matching of JavaScript Regular Expressions\" at PLDI 2024",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10806044",
        "abstract": "<p>Description of artifact</p>\n<p>The artifact consists of the source code and build scripts for our OCaml matchers; the patches that we wrote for V8; scripts to compute statistics on regex corpora; and the scripts to run our performance experiments and plot their results.</p>\n<p>We have documented the directory structure of the OCaml matcher and the correspondence between the paper’s definitions and the source code in the OCaml matcher’s README in ocaml/allf/README.md. We recommend using this README as a guide to the OCaml code while reading the paper. Required hardware</p>\n<p>We recommend running on an Ubuntu 22.04 LTS machine with at least 16GB of RAM. The VM is configured to use:</p>\n<pre><code>12GB of RAM (to run experiments)\nA CPU supporting the RDTSC instruction (for benchmarking)\n40GB of free space on your hard drive (each V8 build takes ~12GB)</code></pre>",
        "keywords": "Automata, JavaScript, Regex",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10806323": {
        "doi": "10.5281/zenodo.10806323",
        "author": "Gruetter, Samuel and Fukala, Viktor and Chlipala, Adam",
        "title": "Code Artifact for Live Verification in an Interactive Proof Assistant",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10806323",
        "abstract": "<p>Code artifact submitted to Artifact Evaluation</p>",
        "keywords": "interactive proof assistants, software verification, symbolic execution",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10806686": {
        "doi": "10.5281/zenodo.10806686",
        "author": "Zhou, Zhe and Ye, Qianchuan and Delaware, Benjamin and Jagannathan, Suresh",
        "title": "PLDI2024 Artifact: A HAT Trick: Automatically Verifying Representation Invariants Using Symbolic Finite Automata",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10806686",
        "abstract": "<p>This artifact contains:</p>\n<ol type=\"1\">\n<li>README.md : the artifact guide.</li>\n<li>marple-original-submission.pdf: the original submitted paper.</li>\n<li>marple:pldi-2024.tar.gz: the docker image (optional, we recommend to pull from the docker hub, see README.md).</li>\n<li>Dockerfile: the docker file that can reproduce the docker image (optional, we recommend to pull from the docker hub, see README.md).</li>\n</ol>",
        "keywords": "refinement types, representation invariants, symbolic finite automata",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10806719": {
        "doi": "10.5281/zenodo.10806719",
        "author": "Rivera, Joao and Franchetti, Franz and P\\\"{u",
        "title": "Artifact: Floating-Point TVPI Abstract Domain",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10806719",
        "abstract": "<p>Artifact for the paper “Floating-Point TVPI Abstract Domain” at PLDI 2024. The artifact comes in the form of a virtual machine running Ubuntu 20.04. It contains the full source code of TVPI-FP, and benchmarks and scripts for reproducing main experiments.</p>",
        "keywords": "abstract interpretation, numerical program analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10806736": {
        "doi": "10.5281/zenodo.10806736",
        "author": "Jung, Jaehwang and Kim, Jeonghyeon and Parkinson, Matthew J. and Kang, Jeehoon",
        "title": "Artifact for \"Concurrent Immediate Reference Counting\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10806736",
        "abstract": "<p>This is the artifact for PLDI 2024 paper: “Concurrent Immediate Reference Counting”.</p>\n<p>This artifact comprises the following files:</p>\n<ul>\n<li><code>circ-benchmark.zip</code>: This archive mainly contains a benchmark suite used to produce the results presented in the paper. Additionally, it contains:\n<ul>\n<li><code>README.md</code>: instructions on how to reproduce the benchmark results, and</li>\n<li><code>paper-results</code>: generated result files that are included in the paper.</li>\n</ul></li>\n<li><code>circ-docker.tar.gz</code>: This file is a pre-built Docker image for conveniently running the benchmark.</li>\n</ul>\n<p>Refer to the README.md in the attached file for more information on this artifact.</p>",
        "keywords": "automatic memory reclamation, concurrent data structures, reference counting",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10806763": {
        "doi": "10.5281/zenodo.10806763",
        "author": "Liu, Jiawen and Qu, Weihao and Gaboardi, Marco and Garg, Deepak and Ullman, Jonathan",
        "title": "Adaptfun: Program analysis for Adaptive analysis",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10806763",
        "abstract": "<p>The software of program anlaysis tool Adaptfun, which provides the estimated upper bound on the adaptivity of adaptive data analysis algorithms. The tool is implemened using OCaml and Python. The reuslts are also evaluated in Python.</p>",
        "keywords": "Adaptive data analysis, dependency graph, program analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10807084": {
        "doi": "10.5281/zenodo.10807084",
        "author": "Erbsen, Andres and Philipoom, Jade and Jamner, Dustin and Lin, Ashley and Gruetter, Samuel and Pit-Claudel, Cl\\'{e",
        "title": "Proof Artifact for `Foundational Integration Verification of a Cryptographic Server'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10807084",
        "abstract": "<p>This is the computer-checked-proof artifact for `Foundational Integration Verification of a Cryptographic Server’. It contains the component proofs, integration proofs, and software for checking them, supporting all verification claims in the paper. Static quantiative-evaluation claims about memory usage are also supported by these proofs.</p>",
        "keywords": "bare-metal programming, elliptic-curve cryptography, proof assistants",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10807169": {
        "doi": "10.5281/zenodo.10807169",
        "author": "Youn, Dongjun and Shin, Wonho and Lee, Jaehyun and Ryu, Sukyoung and Breitner, Joachim and Gardner, Philippa and Lindley, Sam and Pretnar, Matija and Rao, Xiaojia and Watt, Conrad and Rossberg, Andreas",
        "title": "Artifact for \"Bringing the WebAssembly Standard up to Speed with SpecTec\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10807169",
        "abstract": "<p>Artifact for “Bringing the WebAssembly Standard up to Speed with SpecTec”, containing the source code and evaluation results.</p>",
        "keywords": "DSL, executable prose, language specification, WebAssembly",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/pldi24-spectec/artifact/tree/v1.0.1"
    },
    "10.5281/zenodo.10807175": {
        "doi": "10.5281/zenodo.10807175",
        "author": "Sharma, Ritvik and Achour, Sara",
        "title": "DARE Qutrit Compiler",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10807175",
        "abstract": "<p>This contains all code required to regenerate results of Compilation of Qubit Circuits to Optimized Qutrit Circuits and use the DARE compiler.</p>",
        "keywords": "Quantum computing, Qutrits, Rewriting Tools, Synthesis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10807316": {
        "doi": "10.5281/zenodo.10807316",
        "author": "Banerjee, Debangshu and Xu, Changming and Singh, Gagandeep",
        "title": "Input-Relational Verification of Deep Neural Networks",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10807316",
        "abstract": "<p>We consider the verification of input-relational properties defined over deep neural networks (DNNs) such as robustness against universal adversarial perturbations, monotonicity, etc. Precise verification of these properties requires reasoning about multiple executions of the same DNN. We introduce a novel concept of difference tracking to compute the difference between the outputs of two executions of the same DNN at all layers. We design a new abstract domain, DiffPoly for efficient difference tracking that can scale large DNNs. DiffPoly is equipped with custom abstract transformers for common activation functions (ReLU, Tanh, Sigmoid, etc.) and affine layers and can create precise linear cross-execution constraints. We implement a input-relational verifier for DNNs called RaVeN which uses DiffPoly and linear program formulations to handle a wide range of input-relational properties. Our experimental results on challenging benchmarks show that by leveraging precise linear constraints defined over multiple executions of the DNN, RaVeN gains substantial precision over baselines on a wide range of datasets, networks, and input-relational properties.</p>",
        "keywords": "Abstract Interpretation, Deep Learning, Relational Verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10808233": {
        "doi": "10.5281/zenodo.10808233",
        "author": "Herklotz, Yann and Wickerson, John",
        "title": "Artefact: Hyperblock Scheduling for Verified High-Level Synthesis",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10808233",
        "abstract": "<p>Artefact of the implementation and verification of hyperblock scheduling on top of an existing verified high-level synthesis tool called Vericert. The artefact includes a VM with all software pre-installed to reproduce the results of the paper. The instructions can be found in README.pdf and README.md.</p>",
        "keywords": "CompCert, Coq, operation chaining, symbolic evaluation, translation validation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10808236": {
        "doi": "10.5281/zenodo.10808236",
        "author": "Dardinier, Thibault and M\\\"{u",
        "title": "Hyper Hoare Logic: (Dis-)Proving Program Hyperproperties (artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10808236",
        "abstract": "<p>This artifact supports the PLDI 2024 paper “Hyper Hoare Logic: (Dis-)Proving Program Hyperproperties”. It consists of an Isabelle/HOL mechanization that fully supports the formal claims made in the paper and a VirtualBox VM image with Ubuntu 22.04 that contains Isabelle 2023 and our mechanization.</p>",
        "keywords": "Compositionality, Hoare Logic, Hyper Hoare Logic, Hyperproperties, Incorrectness Logic, Isabelle, Program Logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10808465": {
        "doi": "10.5281/zenodo.10808465",
        "author": "Theodoridis, Theodoros and Su, Zhendong",
        "title": "PLDI 2024 Artifact for \"Refined Input, Degraded Output: The Counterintuitive World of Compiler Behavior\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10808465",
        "abstract": "<p>Ths artifact consists of a docker image with instructions, the dataset, and the code necessary to reproduce the evaluation of Refined Input, Degraded Output: The Counterintuitive World of Compiler Behavior PLDI 2024.</p>",
        "keywords": "automated compiler testing, missed compiler optimizations",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10892762": {
        "doi": "10.5281/zenodo.10892762",
        "author": "Ball, Thomas and de Halleux, Peli and Devine, James and Hodges, Steve and Moskal, Micha\\l{",
        "title": "Jacdac: Service-based Prototyping of Embedded Systems (PLDI 2024 Artifact Evaluation)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10892762",
        "abstract": "<p>This artifact allows others to reproduce and explore the results seen in “Jacdac: Service-based Prototyping of Embedded Systems”. The artifact contains a prebuilt docker image and the Dockerfile source used to produce the prebuilt docker image. Evaluators should follow the README contained in this artifact for complete instruction.</p>",
        "keywords": "embedded systems, microcontrollers, plug-and-play, services",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10892936": {
        "doi": "10.5281/zenodo.10892936",
        "author": "Lei, Yuxiang and Bossut, Camille and Sui, Yulei and Zhang, Qirun",
        "title": "Artifact of \"Context-Free Language Reachability via Skewed Tabulation\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10892936",
        "abstract": "<p>This is the artifact of the paper “Context-Free Language Reachability via Skewed Tabulation” accepted to PLDI 2024. The artifact is packaged as a Docker image “cflskewed.tar.gz”, which is to reproduce the experiment results of the paper.</p>",
        "keywords": "CFL-reachability, performance, tabulation schemes",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10895582": {
        "doi": "10.5281/zenodo.10895582",
        "author": "Lesbre, Dorian and Lemerre, Matthieu",
        "title": "Artifact for paper \"Compiling with abstract interpretation\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10895582",
        "abstract": "<p>This is an artifact for the paper Compiling with Abstract Interpretation, submitted at PLDI 2024. It contains two abstract interpreters:</p>\n<pre><code>TAI, very simple frama-c plugin that closely follows the paper definitions, but only supports a small subset of C (only integer variables, macro, and non-recursive function calls). It is used to demonstrate our technique but isn't very time or memory efficient.\n\nIt's a frama-c plugin but only uses frama-c as a C parser, so no knowledge of frama-c is required to understand it.\n\nCodex: a much larger abstract interpretation library. It supports every aspect of C (as a frama-c plugin) and a number of binary formats (as a binsec plugin). This library implements many techniques and domains beyond the scope of the paper, but some ideas from our paper such as translation to SSA as an abstract interpretation pass have made it into its codebase.</code></pre>",
        "keywords": "Abstract Interpretation, Compilation, Frama-C, OCaml, SSA",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/codex-semantics-library/codex"
    },
    "10.5281/zenodo.10895770": {
        "doi": "10.5281/zenodo.10895770",
        "author": "Mikek, Benjamin and Zhang, Qirun",
        "title": "STAUB: SMT Theory Arbitrage from Unbounded to Bounded",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10895770",
        "abstract": "<p>Implementation of STAUB in C++ and experimental data reflecting STAUB’s effectiveness in speeding up SMT solving for unbounded constraints.</p>",
        "keywords": "abstract interpretation, constraint solving, SMT",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/mikekben/STAUB/tree/v1.2"
    },
    "10.5281/zenodo.10897200": {
        "doi": "10.5281/zenodo.10897200",
        "author": "Wang, Peixin and Yang, Tengshun and Fu, Hongfei and Li, Guanyan and Ong, C.-H. Luke",
        "title": "Updated Artifact for \"Static Posterior Inference of Bayesian Probabilistic Programming via Polynomial Solving\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10897200",
        "abstract": "<p>This is the artifact for the paper “Static Posterior Inference of Bayesian Probabilistic Programming via Polynomial Solving”, which aims to derive guaranteed bounds for the normalised posterior distribution (NPD) over probabilistic programs.</p>",
        "keywords": "F#, Matlab, Mosek",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10901544": {
        "doi": "10.5281/zenodo.10901544",
        "author": "Garg, Poorva and Holtzen, Steven and Van den Broeck, Guy and Millstein, Todd",
        "title": "Reproduction Package for Article \"Bit Blasting Probabilistic Programs\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10901544",
        "abstract": "<p>The artifact consists of implementation of HyBit, a probabilistic programming system based on bit blasting. It scales inference for hybrid probabilistic programs with respect to the discrete structure. The artifact also consists of all the necessary scripts to reproduce the experiment in the article “Bit Blasting Probabilistic Programs”.</p>",
        "keywords": "bit blasting, discretization, probabilistic inference, probabilistic programming system",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.10901598": {
        "doi": "10.5281/zenodo.10901598",
        "author": "Wang, Ziteng and Pailoor, Shankara and Prakash, Aaryan and Wang, Yuepeng and Dillig, I\\c{s",
        "title": "Software Artifact for `From Batch to Stream: Automatic Generation of Online Algorithms'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10901598",
        "abstract": "<p>Opera is written in Python using both Poetry and Nix for managing dependencies. A recent installation of Nix (version 2.18.1 or higher) is the only prerequisite to get started. Additionally, we offer a Docker-based solution for running Nix.</p>",
        "keywords": "Incremental Computation, Online Algorithms, Program Synthesis, Stream Processing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10906088": {
        "doi": "10.5281/zenodo.10906088",
        "author": "Fitzgibbons, Michael and Paraskevopoulou, Zoe and Mushtak, Noble and Thalakottur, Michelle and Sulaiman Manzur, Jose and Ahmed, Amal",
        "title": "RichWasm Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10906088",
        "abstract": "<p>This artifact is a self-contained environment to reproduce the claims in the PLDI’24 paper “RichWasm: Bringing Safe, Fine-Grained, Shared-Memory Interoperability Down to WebAssembly”. This artifact contains, a mechanized proof of RichWasm’s type safety, compilers from ML and L3 to RIchWasm, an annotator and type checker for RichWasm code and a compiler from RichWasm to WebAssembly. This artifact can be used to compile the proofs, use the various compilers and run and inspect their tests.</p>",
        "keywords": "RichWasm, Type-Preserving Compilation, WebAssembly",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/RichWasm/RichWasm-artifact/tree/artifactv9"
    },
    "10.5281/zenodo.10906216": {
        "doi": "10.5281/zenodo.10906216",
        "author": "Laird, Avery and Liu, Bangtian and Bj\\o{",
        "title": "SpEQ: Translation of Sparse Codes using Equivalences",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10906216",
        "abstract": "<p>Software to replicate the results of “SpEQ: Translation of Sparse Codes using Equivalences.”</p>",
        "keywords": "Equality Saturation, Equivalence Checking, Program Analysis, Verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10906305": {
        "doi": "10.5281/zenodo.10906305",
        "author": "Jang, Minseong and Rhee, Jungin and Lee, Woojin and Zhao, Shuangshuang and Kang, Jeehoon",
        "title": "Modular Hardware Design of Pipelined Circuits with Hazards",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10906305",
        "abstract": "<p>This is the <strong>Modular Hardware Design of Pipelined Circuits with Hazards</strong> paper artifact submitted for evaluation of the 45th ACM SIGPLAN conference on Programming Language Design and Implementation (PLDI`24).</p>\n<p>It contains two files:</p>\n<ul>\n<li><code>hazardflow-artifact-pldi2024.zip</code>: Repository of the artifacts. Follow the README inside to reproduce the results.</li>\n<li><code>artifact_evaluation_latest.tar.gz</code>: Docker image to run the CPU experiments.</li>\n</ul>",
        "keywords": "Functional Hardware Description, HazardFlow, PLDI24",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10909272": {
        "doi": "10.5281/zenodo.10909272",
        "author": "Qiu, Longfei and Kim, Yoonseung and Shin, Ji-Yong and Kim, Jieung and Honor\\'{e",
        "title": "Artifact for PLDI 2024 paper #290: LiDO: Linearizable Byzantine Distributed Objects with Refinement-Based Liveness Proofs.",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10909272",
        "abstract": "<p>This is artifact for PLDI 2024 paper #290: LiDO: Linearizable Byzantine Distributed Objects with Refinement-Based Liveness Proofs.</p>\n<p>Included files are the LiDO model formalized in Coq, together with three implementations of LiDO (unpipelined Jolteon, unpipelined Jolteon with improved pacemaker, and pipelined Jolteon), each having safety and liveness proofs.</p>\n<p>See README.md inside artifact package for more details.</p>",
        "keywords": "byzantine fault-tolerance, consensus protocols, distributed systems, formal verification, liveness, proof assistants, refinement, safety",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10909730": {
        "doi": "10.5281/zenodo.10909730",
        "author": "Buckley, Anita and Chuprikov, Pavel and Otoni, Rodrigo and Soul\\'{e",
        "title": "Artifact for the article An Algebraic Language for Specifying Quantum Networks",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10909730",
        "abstract": "<p>The artifact is a Haskell library bellkat plus several examples provided as executables within the same Haskell package.</p>",
        "keywords": "entanglement, Kleene algebra, quantum networks",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10910395": {
        "doi": "10.5281/zenodo.10910395",
        "author": "Jiang, Hanru",
        "title": "Artifact for PLDI' 24 submission #350 \"Qubit Recycling Revisited\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10910395",
        "abstract": "<p>This is the artifact of PLDI’24 submission #350 “Qubit Recycling Revisited”, containing a certified prototype qubit recycler featuring various heuristics reported in the paper, and a subset of RevLib circuits for evaluation purpose. It is provided to reproduce the results of Sec. 7, and to check the mechanized proof of Theorem6.8. It also comes with a Docker image with the experimental environment setup, to make this artifact cross-platform.</p>",
        "keywords": "Certified Compilation, Quantum Circuit Optimization",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10912439": {
        "doi": "10.5281/zenodo.10912439",
        "author": "G\\\"{a",
        "title": "Artifact for \"RefinedRust: A Type System for High-Assurance Verification of Rust Programs\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10912439",
        "abstract": "<p>This is the artifact for the PLDI’24 paper “RefinedRust: A Type System for High-Assurance Verification of Rust Programs”. It contains the implementation of RefinedRust and Coq development formalizing the results of the paper.</p>",
        "keywords": "Iris, program verification, Rust, separation logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10918754": {
        "doi": "10.5281/zenodo.10918754",
        "author": "Jia, Xiaodong and Tan, Gang",
        "title": "V-Star Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10918754",
        "abstract": "<p>This artifact includes the V-Star library, detailed instructions, and a Docker image file necessary to reproduce the results presented in Table 1 of the paper V-Star: Learning Visibly Pushdown Grammars from Program Inputs.</p>",
        "keywords": "artifact, grammar inference, v-star, visibly pushdown grammars",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10925596": {
        "doi": "10.5281/zenodo.10925596",
        "author": "Svyatlovskiy, Mikhail and Mermelstein, Shai and Lahav, Ori",
        "title": "Coq Mechanization for \"Compositional Semantics for Shared-Variable Concurrency\" (PLDI 2024)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10925596",
        "abstract": "<p>Coq mechanization for the paper “Compositional Semantics for Shared-Variable Concurrency” (PLDI 2024)</p>",
        "keywords": "Compiler Optimizations, Concurrency, Denotational Semantics, Shared-Memory",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10930752": {
        "doi": "10.5281/zenodo.10930752",
        "author": "Laursen, Mathias Rud and Xu, Wenyuan and M\\o{",
        "title": "Artifact for \"Reducing Static Analysis Unsoundness with Approximate Interpretation\", PLDI 2024",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10930752",
        "abstract": "<p>This artifact consists of a VirtualBox image that contains program code and experimental data for the paper Reducing Static Analysis Unsoundness with Approximate Interpretation by Mathias Rud Laursen, Wenyuan Xu and Anders M\\o{",
        "keywords": "call graphs, JavaScript, points-to analysis, program analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10932109": {
        "doi": "10.5281/zenodo.10932109",
        "author": "Liu, Amanda and Bernstein, Gilbert and Chlipala, Adam and Ragan-Kelley, Jonathan",
        "title": "A Verified Compiler for a Functional Tensor Language",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10932109",
        "abstract": "<p>Virtual machine for AEC PLDI 2024. This contains the source for the ATL language, its verified rewrite framework, and the proof of correctness for its lowering algorithm embedded and implemented in Coq.</p>",
        "keywords": "array programming, formal verification, functional programming, tensors, type systems",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10932590": {
        "doi": "10.5281/zenodo.10932590",
        "author": "Lutze, Matthew and Madsen, Magnus",
        "title": "Associated Effects (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10932590",
        "abstract": "<p>This artifact contains a Flix compiler, modified to support associated effects, as detailed in the paper. The artifact includes example files from the standard library, accessible in a QEMU virtual machine, in order to allow browsing files using Flix’s VSCode extension.</p>",
        "keywords": "ad-hoc polymorphism, associated effects, associated types, effect systems, generic programming, type classes, type functions",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10933110": {
        "doi": "10.5281/zenodo.10933110",
        "author": "Chen, Tianyu and Siek, Jeremy G.",
        "title": "Agda code for 'Quest Complete: The Holy Grail of Gradual Security'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10933110",
        "abstract": "<p>The artifact contains Agda code of the definitions and proofs in the paper ‘Quest Complete: The Holy Grail of Gradual Security’.</p>",
        "keywords": "Agda, gradual typing, information flow security, machine-checked proofs",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/cty12/pldi2024-ae/tree/release-20240405"
    },
    "10.5281/zenodo.10933398": {
        "doi": "10.5281/zenodo.10933398",
        "author": "Park, Sunho and Kim, Jaewoo and Mulder, Ike and Jung, Jaehwang and Lee, Janggun and Krebbers, Robbert and Kang, Jeehoon",
        "title": "Artifact for \"A Proof Recipe for Linearizability in Relaxed Memory Separation Logic\", PLDI 2024",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10933398",
        "abstract": "<p>This is the formalization for the paper “A Proof Recipe for Linearizability in Relaxed Memory Separation Logic”, written in Coq, along with a Docker image file (<code>artifact.tar.gz</code>) that contains a compiled version of the project and all dependencies installed.</p>\n<p>Detailed instructions and explanations are written in the README.md inside <code>pldi24-36-artifact.zip</code>.</p>",
        "keywords": "automation, linearizability, relaxed memory, separation logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10935596": {
        "doi": "10.5281/zenodo.10935596",
        "author": "Becker, McCoy R. and Lew, Alexander K. and Wang, Xiaoyan and Ghavami, Matin and Huot, Mathieu and Rinard, Martin C. and Mansinghka, Vikash K.",
        "title": "Reproduction Packager for Article \"Probabilistic Programming with Programmable Variational Inference\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10935596",
        "abstract": "<p>A package which contains the JAX implementation that accompanies the paper “Probabilistic Programming with Programmable Variational Inference”, as well as the experiments used to generate figures and numbers in the empirical evaluation section.</p>",
        "keywords": "automatic differentiation, probabilistic programming, variational inference",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/probcomp/programmable-vi-pldi-2024/tree/v0.1.2"
    },
    "10.5281/zenodo.10936488": {
        "doi": "10.5281/zenodo.10936488",
        "author": "Ferreira, Mafalda and Monteiro, Miguel and Brito, Tiago and Coimbra, Miguel E. and Santos, Nuno and Jia, Limin and Santos, Jos\\'{e",
        "title": "Artifact for paper \"Efficient Static Vulnerability Analysis for JavaScript with Multiversion Dependency Graphs\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10936488",
        "abstract": "<p>This artifact evaluates Graph.js, a novel static vulnerability detection tool for Node.js applications, that detects taint-style and prototype pollution vulnerabilities. The repository includes all source code, reference datasets and instructions on how to build and run the experiments. These experiments result in the tables and plots presented in the paper, which can be used to validate the results.</p>",
        "keywords": "JavaScript, Static Analysis, Vulnerability Detection",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10937074": {
        "doi": "10.5281/zenodo.10937074",
        "author": "Pham, Long and Saad, Feras A. and Hoffmann, Jan",
        "title": "Hybrid Resource-Aware ML",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10937074",
        "abstract": "<p>Hybrid Resource-Aware ML (Hybrid RaML) is a program analysis tool that takes in an OCaml program and infers its polynomial cost bound using the technique Hybrid Automatic Amortized Resource Analysis (AARA). It integrates data-driven resource analysis (specifically linear programming and Bayesian inference) and static resource analysis (specifically the conventional AARA). Hybrid RaML is wrapped inside a Docker image, and it comes with (i) a guide README.pdf describing how to use run the software and (ii) a paper paper.pdf describing Hybrid AARA.</p>",
        "keywords": "Bayesian inference, data-driven analysis, hybrid analysis, program analysis, resource analysis, static analysis, type systems, worst-case costs",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10937816": {
        "doi": "10.5281/zenodo.10937816",
        "author": "Matute, Gabriel and Ni, Wode and Barik, Titus and Cheung, Alvin and Chasins, Sarah E.",
        "title": "Syntactic Code Search with Sequence-to-Tree Matching",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10937816",
        "abstract": "<p>A docker image <code>stbench</code> to evaluate our tool <code>stsearch</code>, under <code>/artifact</code> we include: * <code>stsearch</code>, the Rust source code (together with a release build) of our tool; * <code>queries</code>, the Semgrep rules used to curate our real-world query benchmark; * <code>corpus</code>, the Javascript corpus (scrapped from <code>npm</code>) to search over; and * <code>stbench</code>, a Python package to collect and analyze matches.</p>",
        "keywords": "Code Search, Syntactic Analysis, Tree Wildcards",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.10940320": {
        "doi": "10.5281/zenodo.10940320",
        "author": "Spies, Simon and G\\\"{a",
        "title": "Artifact and Appendix for Quiver: Guided Abductive Inference of Separation Logic Specifications in Coq",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10940320",
        "abstract": "<p>This is the artifact for “Quiver: Guided Abductive Inference of Separation Logic Specifications in Coq”, submitted to PLDI 2024. It consists of a Coq implementation of a new specification inference technique in separation logic introduced in the paper.</p>",
        "keywords": "abduction, Coq, functional correctness, Iris, specification inference",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10948026": {
        "doi": "10.5281/zenodo.10948026",
        "author": "Ketkar, Ameya and Ramos, Daniel and Clapp, Lazaro and Barik, Raj and Ramanathan, Murali Krishna",
        "title": "Replication of A Lightweight Polyglot Code Transformation Language",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10948026",
        "abstract": "<p>The artifact contains the necessary instructions to replicate part of the experiments in the paper. It also provides with users with an environment to run our tool.</p>\n<p>Detailed instructions can be found within the zip file.</p>",
        "keywords": "code cleanup, code transformation, refactoring",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.10949342": {
        "doi": "10.5281/zenodo.10949342",
        "author": "Zakhour, George and Weisenburger, Pascal and Salvaneschi, Guido",
        "title": "Automated Verification of Fundamental Algebraic Laws",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10949342",
        "abstract": "<p>Propel – Automated Verification of Fundamental Algebraic Laws</p>\n<p>Artifact for the paper #174 “Automated Verification of Fundamental Algebraic Laws”</p>\n<h2 id=\"claims-addressed-by-this-artifact\">CLAIMS ADDRESSED BY THIS ARTIFACT</h2>\n<p>This artifact addresses the following claims made in the paper:</p>\n<ul>\n<li><p>Propel is implemented in Scala for proving a subset of Scala (cf.&nbsp;“USING PROPEL AS A SCALA DSL”) translated into an intermediate representation (cf.&nbsp;“USING PROPEL STANDALONE (OUTSIDE OF SCALA)”).</p></li>\n<li><p>Propel outperforms cvc5, vawpire, Zeno, HipSpec, and CycleQ as claimed in Table 1 Section 4 (cf. “RUNNING THE BENCHMARKS”) on 142 algebraic properties.</p></li>\n<li><p>The implementation of Propel is in Scala 3 and is about 10 K lines long throughout 46 Scala files (cf.&nbsp;“STRUCTURE OF THE PROPEL SOURCE CODE”).</p></li>\n</ul>\n<h2 id=\"getting-started\">GETTING STARTED</h2>\n<h3 id=\"building-and-loading-the-docker-image\">BUILDING AND LOADING THE DOCKER IMAGE</h3>\n<p>We provide you with <code>propel.tar.xz</code>, which is a pre-built container image that contains all necessary programs. To load, run the following command:</p>\n<pre><code>$ docker load &lt; propel.tar.xz</code></pre>\n<p>Further, we also provide the option to build the contain anew. To build, run the following command which takes between 10 and 20 minutes:</p>\n<pre><code>$ docker build -t propel .</code></pre>\n<p>Rebuilding the image may not work on Apple M1 machines because of incomplete emulation of system calls (specifically the inotify kernel subsystem). Hence, we recommend rebuilding the image on a platform fully supported by Docker, like x86-64 systems.</p>\n<h3 id=\"checking-if-the-container-and-the-relevant-programs-run-correctly\">CHECKING IF THE CONTAINER AND THE RELEVANT PROGRAMS RUN CORRECTLY</h3>\n<p>We provide a script that runs fast checks on Propel and the other provers (HipSpec, Zeno, CycleQ, cvc5, Vampire) used in the evaluation.</p>\n<p>The check verifies commutativity of natural number addition – a task which all programs are able to prove correct quickly. The following command runs the check:</p>\n<pre><code>$ docker run -it --rm propel /check_image/check</code></pre>\n<p>If you see in green the line “Check Done” at the end, the container is behaving as expected.</p>\n<p>The check will show the provers’ output, which should look similar to the following (shortened) excerpt:</p>\n<pre><code>Checking Zeno\n\n[...]\n\nSearching for proofs...\nProved \"CommutativityAddition.prop_add_comm : add x y = add y x\"\n\n[...]\n\nChecking HipSpec\n\n[...]\n\nProved:\n    add m n == add n m\n    add m (add n o) == add n (add m o)\n    prop_add_comm {- add x y == add y x -",
        "keywords": "Algebraic Properties, Type Systems, Verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10949799": {
        "doi": "10.5281/zenodo.10949799",
        "author": "Huot, Mathieu and Ghavami, Matin and Lew, Alexander K. and Schaechtle, Ulrich and Freer, Cameron E. and Shelby, Zane and Rinard, Martin C. and Saad, Feras A. and Mansinghka, Vikash K.",
        "title": "PLDI artifact evaluation for \"GenSQL: A Probabilistic Programming System for Querying Generative Models of Database Tables\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10949799",
        "abstract": "<p>This tarball provides evaluators with all means necessary to fully reproduce the results we show in the paper. We recommend users to check out the official GitHub repositories for GenSQL at https://github.com/OpenGen/GenSQL.query.</p>",
        "keywords": "Experimental evaluation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10951313": {
        "doi": "10.5281/zenodo.10951313",
        "author": "Li, Shaohua and Theodoridis, Theodoros and Su, Zhendong",
        "title": "Artifact for PLDI'2024 paper \"Boosting Compiler Testing by Injecting Real-world Code\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10951313",
        "abstract": "<p>This is the artifact for the PLDI’2024 paper “Boosting Compiler Testing by Injecting Real-World Code”. Please first untar the package and then refer to the README.pdf file for detailed instructions.</p>",
        "keywords": "Compiler testing, compilers, miscompilation, reliability, testing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10951760": {
        "doi": "10.5281/zenodo.10951760",
        "author": "Ji, Ruyi and Zhao, Yuwei and Polikarpova, Nadia and Xiong, Yingfei and Hu, Zhenjiang",
        "title": "Artifact for PLDI'24: Superfusion: Eliminating Intermediate Data Structures via Inductive Synthesis",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10951760",
        "abstract": "<p>This project will be maintained at https://github.com/jiry17/SuFu.</p>",
        "keywords": "Fusion, Inductive Program Synthesis, Program Optimization",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10951893": {
        "doi": "10.5281/zenodo.10951893",
        "author": "Li, Jianlin and Wang, Eric and Zhang, Yizhou",
        "title": "Artifact for Paper 'Variable Elimination for an Expressive Probabilistic Programming Language'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10951893",
        "abstract": "<p>This repository contains the tool source code, benchmarks and instructions to reproduce the results in paper ‘Variable Elimination for an Expressive Probabilistic Programming Language’.</p>",
        "keywords": "compiler, continuation-passing style, CPS, information flow type system, probabilistic programming, type checker, type system, variable elimination",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/mappl-pldi24-ae/mappl-pldi24-ae/tree/v0.2-alpha"
    },
    "10.5281/zenodo.10951930": {
        "doi": "10.5281/zenodo.10951930",
        "author": "Gladshtein, Vladimir and Zhao, Qiyuan and Ahrens, Willow and Amarasinghe, Saman and Sergey, Ilya",
        "title": "LGTM: the Logic for Graceful Tensor Manipulation",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10951930",
        "abstract": "<p>This is the research artefact for the paper Mechanised Hypersafety Proofs about Structured Data to appear in the proceedings of the 45th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI 2024).</p>",
        "keywords": "coq, mechanised proofs, relational logic, sparse data structures",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/verse-lab/coq-lgtm/tree/pldi24AE"
    },
    "10.5281/zenodo.10953315": {
        "doi": "10.5281/zenodo.10953315",
        "author": "Girol, Guillaume and Lacombe, Guilhem and Bardin, S\\'{e",
        "title": "Quantitative Robustness for Vulnerability Assessment",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10953315",
        "abstract": "<p>Most software analysis techniques focus on bug reachability. However, this approach is not ideal for security evaluation as it does not take into account the difficulty of triggering said bugs. The recently introduced notion of robust reachability tackles this issue by distinguishing between bugs that can be reached independently from uncontrolled inputs, from those that cannot. Yet, this qualitative notion is too strong in practice as it cannot distinguish mostly replicable bugs from truly unrealistic ones.</p>\n<p>In this work we propose a more flexible quantitative version of robust reachability together with a dedicated form of symbolic execution, in order to automatically measure the difficulty of triggering bugs. This quantitative robust symbolic execution (QRSE) relies on a variant of model counting, called functional E-MAJSAT, which allows to account for the asymmetry between attacker-controlled and uncontrolled variables. While this specific model counting problem has been studied in AI research fields such as Bayesian networks, knowledge representation and probabilistic planning, its use within the context of formal verification presents a new set of challenges. We show the applicability of our solutions through security-oriented case studies, including real-world vulnerabilities such as CVE-2019-20839 from libvncserver.</p>",
        "keywords": "Security, Static Analysis, Verification (automated)",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10960926": {
        "doi": "10.5281/zenodo.10960926",
        "author": "Yi, Qiuping and Yu, Yifan and Yang, Guowei",
        "title": "Reproduction Package For Article `Compatible Branch Coverage Driven Symbolic Execution for Efficient Bug Finding`",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10960926",
        "abstract": "<p>The current artifact comprises all the tool source code related to the paper, along with the scripts and data needed to reproduce the experiments. We provide both source code and Docker build options.</p>",
        "keywords": "program analysis, software testing, symbolic execution",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/PLDI-CBC/CBC-SE/tree/CBC-V2.1"
    },
    "10.5281/zenodo.10961123": {
        "doi": "10.5281/zenodo.10961123",
        "author": "Moeller, Mark and Jacobs, Jules and Belanger, Olivier Savary and Darais, David and Schlesinger, Cole and Smolka, Steffen and Foster, Nate and Silva, Alexandra",
        "title": "KATch: A Fast Symbolic Verifier for NetKAT",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10961123",
        "abstract": "<p>The artifact is the Scala implementation of the symbolic NetKAT verifier described in the paper, along with the NetKAT input files corresponding to the benchmark sets.</p>",
        "keywords": "Automata equivalence, Kleene Algebra with Tests, NetKAT Verifier, Network Verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10961342": {
        "doi": "10.5281/zenodo.10961342",
        "author": "Chen, Hongzheng and Zhang, Niansong and Xiang, Shaojie and Zeng, Zhichen and Dai, Mengjia and Zhang, Zhiru",
        "title": "Allo: A Programming Model for Composable Accelerator Design",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10961342",
        "abstract": "<p>This artifact contains scripts for setting up environments and reproducing results presented in the PLDI 2024 paper entitled “Allo: A Programming Model for Composable Accelerator Design”. Please refer to our github repo for instructions on how to install and run the artifact. https://github.com/cornell-zhang/allo-pldi24-artifact</p>",
        "keywords": "accelerator design language, compiler optimization, Hardware accelerators, schedule language",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10961908": {
        "doi": "10.5281/zenodo.10961908",
        "author": "Wimmer, Christian and Stancu, Codrut and Kozak, David and W\\\"{u",
        "title": "Scaling Points-to Analysis using Saturation - Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10961908",
        "abstract": "<p>The artifact presents our work on scaling points-to analysis using saturation. The content is a docker image containing GraalVM release and our benchmarking infrastructure. There is no need for special hardware, everything should work out of the box. The evaluation runs GraalVM Native Image in various configurations on our benchmarks and output the results, so that they can be compared with the values presented in the paper. However, due to resource constraints, we chose only a small subset that finishes fast. We provide a full configuration as well, but please note the full setup would take weeks to finish is executed on a single machine.</p>",
        "keywords": "GraalVM, Java, pointer analysis, points-to analysis, static analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10963124": {
        "doi": "10.5281/zenodo.10963124",
        "author": "Murali, Adithya and Rivera, Cody and Madhusudan, P.",
        "title": "Artifact for ``Predictable Verification using Intrinsic Definitions''",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10963124",
        "abstract": "<p>This is the artifact for our paper “Predictable Verification using Intrinsic Definitions”.</p>\n<p>ids-artifact.zip contains our benchmarks, while ids-docker.zip contains a Docker image. Please see README.md for instructions on how to use the artifact.</p>",
        "keywords": "Boogie, Dafny, Decidability, Ghost-Code Annotations, Intrinsic Definitions, Predictable Verification, Verification of Linked Data Structures",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10965986": {
        "doi": "10.5281/zenodo.10965986",
        "author": "Raskind, Joseph and Babakol, Timur and Mahmoud, Khaled and Liu, Yu David",
        "title": "Reproduction Artifact for VESTA",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10965986",
        "abstract": "<p>An artifact that reproduces the VESTA model</p>",
        "keywords": "BPF, Java virtual machines, language runtimes, power modeling",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10966813": {
        "doi": "10.5281/zenodo.10966813",
        "author": "Diatchki, Iavor S. and Dodds, Mike and Goldstein, Harrison and Harris, Bill and Holland, David A. and Razet, Benoit and Schlesinger, Cole and Winwood, Simon",
        "title": "Daedalus",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10966813",
        "abstract": "<p>Daedalus artifact submitted to PLDI</p>",
        "keywords": "parser-generator, parsing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10971411": {
        "doi": "10.5281/zenodo.10971411",
        "author": "Kokologiannakis, Michalis and Marmanis, Iason and Vafeiadis, Viktor",
        "title": "Replication Package for \"SPORE: Combining Symmetry and Partial Order Reduction\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10971411",
        "abstract": "<p>The artifact contains the tools GenMC (which implements theTruStalgorithm) and SPORE, as well as the tests used in the evaluation section of the paper.</p>\n<p>SPORE is publicly available as part of GenMC: https://github.com/MPI-SWS/genmc.</p>",
        "keywords": "concurrency, model checking, partial order reduction, symmetry reduction, weak memory models",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10972076": {
        "doi": "10.5281/zenodo.10972076",
        "author": "Pitchanathan, Arjun and Grover, Kunwar and Grosser, Tobias",
        "title": "Artifact for \"Falcon: A Scalable Analytical Cache Model\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10972076",
        "abstract": "<h2 id=\"artifact-for-falcon-a-scalable-analytical-cache-model\">Artifact for Falcon: A Scalable Analytical Cache Model</h2>\n<p>This is the supporting artifact for the Falcon paper. It can be used to replicate all results in the submitted version of the paper (submission_paper.pdf), given enough time and appropriate hardware. To be precise, it takes around two weeks to reproduce all the results.</p>\n<h3 id=\"quick-version-of-the-artifact\">Quick Version of the Artifact</h3>\n<p>To facilitate evaluation, we also provide a “quick” version of the artifact that reproduces the main results. It reproduces all the evaluation figures in the paper, with the following differences:</p>\n<ul>\n<li><p>Figure 1: we run the models at all x values of 20 up to 100 instead of multiples of 5. This is sufficient to establish the same trend.</p></li>\n<li><p>Figure 6 \\&amp; 7: we evaluate on the last four benchmarks files in the ordering of Figure 6, showing that even on the “worst” inputs in the benchmark, Falcon takes minutes. (base models time out after four hours)</p></li>\n<li><p>Figure 8: we evaluate on thread counts [1, 2, 4, 8, 12, 16] instead of all counts up to 16. This is sufficient to establish the same trend.</p></li>\n</ul>\n<p>All of the above choices can be easily customized by the user before running the artifact; see “Running the Artifact” below.</p>\n<h3 id=\"hardware-requirements\">Hardware Requirements</h3>\n<h4 id=\"requirements-for-the-quick-version\">Requirements for the quick version</h4>\n<p>For hardware measurement, our method requires a machine with an AMD Zen3/Zen4 CPU and access to the <code>perf_event_open</code> syscall. Note that many cloud machines disallow this syscall. If such a machine is not available, you can still use the hardware measurement data from our machine and run the rest of the artifact. The only difference will be that the accuracy figures will be plotted against our measurement data on our machine instead of yours.</p>\n<p>For the parallelism experiment, a machine with 16 cores is required. If there are fewer cores, then running on 16 threads will not improve performance as much so the speedup would be less than that reported in the paper. Other than that, the artifact will still work fine on a machine with fewer cores.</p>\n<h4 id=\"requirements-for-the-full-version\">Requirements for the full version</h4>\n<p>For the complete version, a machine with 192 GiB RAM is required. This is because the baseline model Haystack that we compare against can sometimes take a large amount of RAM.</p>\n<p>When the full artifact is run on a machine with insufficient RAM, if Haystack runs out of memory when running some file, that file will be gracefully dropped from Figure 6. Otherwise, the rest of the artifact will continue to function normally. In such a scenario it may help system stability to run <code>./earlyoom.sh</code> before running the models, though when we tested on a low RAM machine, we did not find this to be necessary.</p>\n<p>It may be difficult to obtain a single machine satisfying the high RAM requirement as well as the requirement to have access to the <code>perf_event_open</code> syscall, as the latter is often not available on cloud machines. Therefore, we provide the option to run each part on a different machine, as long as one machine is available with high RAM and another with the requirements specific for hardware measurements.</p>\n<h3 id=\"software-requirements\">Software Requirements</h3>\n<p>The artifact requires <a href=\"https://docs.docker.com/get-docker/\">Docker</a>. We tested on version <code>24.0.6</code> on a Linux machine.</p>\n<h3 id=\"getting-started\">Getting Started</h3>\n<p>The artifact comes with pre-built binaries. To rebuild from scratch, see that section below. To setup the artifact and docker image:</p>\n<ol type=\"1\">\n<li>Extract the provided archive and <code>cd</code> into the extracted directory.</li>\n<li>Load the provided docker image with <code>docker load -i docker/docker_image.tar</code>.</li>\n<li>Run the image with <code>docker run -v $(pwd):/app -it --security-opt seccomp=docker/seccomp.json falcon-artifact</code></li>\n</ol>\n<p>This mounts the project root directory (which should be the current directory) to the VM. Changes made in the VM will be persisted here.</p>\n<p>The argument <code>--security-opt seccomp=docker/seccomp.json</code> loads a custom security configuration. The only difference between the custom one and the default is that the <code>perf_event_open</code> syscall is permitted, which is required for hardware measurement. The argument can be omitted if hardware measurement is not needed. If the measurement test assert-fails as described in the next section even though you expect it to work on your system, you can try adding the flag <code>--privileged</code>, though we did not need it during testing.</p>\n<p>Note that during development, our tool was called <code>lazystack</code>, so it is referred to as such in scripts and source code.</p>\n<h4 id=\"test-running-hardware-measurement\">Test-running hardware measurement</h4>\n<p>To test the hardware measurement, run <code>examples/measurement-example</code>. If it succeeds, the output will contain four numbers. On our system, we got:</p>\n<pre><code>0.18134\n1359152\n16981\n68</code></pre>\n<p>The first output number is runtime and the next three are cache accesses and misses; none of these numbers are expected to be zero. If any of the last three lines are zero then your CPU is probably unsupported. In this case, you can use the measurement data from our system (see below for more details).</p>\n<p>On the other hand, if the <code>perf_event_open</code> syscall is not supported, an error like the following will be reported:</p>\n<pre><code>measurement-example: ../src/c-gen-perf-main.cpp:66: read_format&lt;nr&gt; disable_and_get_count_group(int) [nr = 3U]: Assertion `data.nr == nr' failed.\nAborted (core dumped)</code></pre>\n<h4 id=\"test-running-the-cache-models\">Test-running the cache models</h4>\n<p><code>cd</code> into the <code>experiments</code> directory and run <code>python perf-all.py -b polybench-S -c 512,512 --output-suffix test --filter gemm</code>. This should produce output like the following.</p>\n<pre><code>root@53846d9af34b:/app/experiments# python perf-all.py -b polybench-S -c 512,512 --output-suffix test --filter gemm\nWill output to data/perf-polybench-S-512-512-test.json\nRunnning haystack on gemm\nRunning warping on gemm\nRunning lazystack on gemm... 78ms\n{\n  \"gemm\": {\n    \"haystack\": {\n      \"L1\": 0,\n      \"L2\": 0,\n      \"L3\": 0,\n      \"accesses\": 1352400,\n      \"capacity\": 0,\n      \"compulsory\": 1000,\n      \"misses\": 1000,\n      \"time\": 188.77",
        "keywords": "cache modeling, performance analysis, static analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10975363": {
        "doi": "10.5281/zenodo.10975363",
        "author": "Forster, Yannick and Sozeau, Matthieu and Tabareau, Nicolas",
        "title": "Artifact for \"Verified Extraction from Coq to OCaml\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10975363",
        "abstract": "<p>The Coq code corresponding to the development described in the paper, and benchmarks corresponding to section 6.</p>",
        "keywords": "Coq, extraction, functional programming, verified compilation",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.10976438": {
        "doi": "10.5281/zenodo.10976438",
        "author": "Cui, Guofeng and Wang, Yuning and Qiu, Wenjie and Zhu, He",
        "title": "ReGuS - Reproduction Package for Article `Reward-Guided Synthesis of Intelligent Agents with Control Structures`",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10976438",
        "abstract": "<p>This artifact is provided as a Docker image. Before proceeding, ensure you have Docker installed. The artifact was tested with Docker version 20.10.23. We recommend that your machine has at least 16GB of memory and 16GB of available disk space for building and running Docker images. All benchmarks were tested on a Mac Mini 2023 with an Apple M2 Pro CPU and 16GB of RAM. Please refer to the README file for instructions on reproducing the experiments.</p>",
        "keywords": "Program Synthesis, Reinforcement Learning, Sequential Decision Making",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11097757": {
        "doi": "10.5281/zenodo.11097757",
        "author": "Blaauwbroek, Lasse and Ol\\v{s",
        "title": "Artifact for: Hashing Modulo Context-Sensitive Alpha-Equivalence",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11097757",
        "abstract": "<p>Reference implementation for hashing modulo context-sensitive alpha-equivalence</p>",
        "keywords": "Alpha Equivalence, Bisimilarity, Hashing, Lambda Calculus, Syntax Tree",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/LasseBlaauwbroek/lambda-globalize/tree/5.0"
    },
    "10.5281/zenodo.11099781": {
        "doi": "10.5281/zenodo.11099781",
        "author": "Brahmakshatriya, Ajay and Rinard, Chris and Ghobadi, Manya and Amarasinghe, Saman",
        "title": "Replication package for the PLDI 2024 paper: NetBlocks: Staging Layouts for High-Performance Custom Host Network Stacks",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11099781",
        "abstract": "<p>Replication package for the PLDI 2024 paper: NetBlocks: Staging Layouts for High-Performance Custom Host Network Stacks</p>",
        "keywords": "compilers, layouts, network-protocols",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11113582": {
        "doi": "10.5281/zenodo.11113582",
        "author": "Brain, Martin and Malkawi, Mahdi",
        "title": "[artifact] Misconceptions About Loops in C",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11113582",
        "abstract": "<p>This artifact collects the examples used in the paper and provides them as a test suite. Each example is a separate program that can be used in a number of ways. The program’s text is used in the paper. No results are generated.</p>\n<p>Each program takes a single input that controls which path through the program is taken and gives a single output that records which branches were taken. This allows them to be used for back-to-back testing with compilers, interpreters, source-to-source translation, or dynamic analysis tools. If the input/output relation changes, then transformation is buggy and unable to handle that kind of loop.</p>\n<p>They also have assertions that hold true only for valid paths through the program, making them ideal for testing with static analysis tools. If an assertion fails, it indicates a bug in the static analysis tool. To demonstrate how these can be used, we provide a setup to test CBMC.</p>",
        "keywords": "Loop Analysis, Software Verification, Static Analysis",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.10063353": {
        "doi": "10.5281/zenodo.10063353",
        "author": "Dey, Tapajit and Loungani, Jonathan and Ivers, James",
        "title": "Replication Package for \"Smarter Project Selection For Software Engineering Research\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10063353",
        "abstract": "<p>This dataset represents the replication package for the paper: Smarter Project Selection For Software Engineering Research, accepted at PROMISE 2024 - 20th International Conference on Predictive Models and Data Analytics in Software Engineering. The README file contains the details of the dataset.</p>",
        "keywords": "Application, categorization, Doc2Vec, GitHub, Library, machine learning, multi-class classification, Open Source, OSS projects, Plug-in, random forest",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.10570961": {
        "doi": "10.5281/zenodo.10570961",
        "author": "Birchler, Christian and Mohammed, Tanzil Kombarabettu and Rani, Pooja and Nechita, Teodora and Kehrer, Timo and Panichella, Sebastiano",
        "title": "Replication Package - \"How does Simulation-based Testing for Self-driving Cars match Human Perception?\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10570961",
        "abstract": "<p>Software metrics such as coverage and mutation scores have been extensively explored for the automated quality assessment of test suites. While traditional tools rely on such quantifiable software metrics, the field of self-driving cars (SDCs) has primarily focused on simulation-based test case generation using quality metrics such as the out-of-bound (OOB) parameter to determine if a test case fails or passes. However, it remains unclear to what extent this quality metric aligns with the human perception of the safety and realism of SDCs, which are critical aspects in assessing SDC behavior. To address this gap, we conducted an empirical study involving 50 participants to investigate the factors that determine how humans perceive SDC test cases as safe, unsafe, realistic, or unrealistic. To this aim, we developed a framework leveraging virtual reality (VR) technologies, called SDC-Alabaster, to immerse the study participants into the virtual environment of SDC simulators. Our findings indicate that the human assessment of the safety and realism of failing and passing test cases can vary based on different factors, such as the test’s complexity and the possibility of interacting with the SDC. Especially for the assessment of realism, the participants’ age as a confounding factor leads to a different perception. This study highlights the need for more research on SDC simulation testing quality metrics and the importance of human perception in evaluating SDC behavior.</p>",
        "keywords": "Human Perception, Self-driving Cars, Simulation, Software Testing, VR",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10622332": {
        "doi": "10.5281/zenodo.10622332",
        "author": "de Oliveira Neto, Francisco Gomes",
        "title": "Package for the paper Unveiling Assumptions: Exploring the Decisions of AI Chatbots and Human Testers",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10622332",
        "abstract": "<p>This package includes the data for the study reported in the paper “Unveiling Assumptions: Exploring the Decisions of AI Chatbots and Human Testers”. The files can be used to re-generate figures, and see the additional chatlogs from AI Chatbots that were not included in the paper due to space. Intructions about using the paper are in the README.md file.</p>",
        "keywords": "Chatbots, Software Testing, Test Prioritization",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.10626343": {
        "doi": "10.5281/zenodo.10626343",
        "author": "Y\\i{",
        "title": "Artifact from \"Maximizing Patch Coverage for Testing of Highly-Configurable Software without Exploding Build Times\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10626343",
        "abstract": "<p>Artifact from “Maximizing Patch Coverage for Testing of Highly-Configurable Software without Exploding Build Times”</p>",
        "keywords": "krepair",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.10656106": {
        "doi": "10.5281/zenodo.10656106",
        "author": "Xiao, Tao and Hata, Hideaki and Treude, Christoph and Matsumoto, Kenichi",
        "title": "Research Artifact - Generative AI for Pull Request Descriptions: Adoption, Impact, and Developer Interventions",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10656106",
        "abstract": "<p>This is a research artifact for “Generative AI for Pull Request Descriptions: Adoption, Impact, and Developer Interventions”. This artifact is a repository that includes lists of studied PRs from GitHub, both with and without the use of Copilot for PRs. It also provides the features of PRs that were either generated or not generated by Copilot for PRs (pertaining to RQ2), coding results for RQ3, and scripts. The purpose of this artifact is enabling researchers to replicate our results of the paper, and to reuse our dataset of Copilot for PRs for further research.</p>",
        "keywords": "Copilot, Generative AI, GitHub, Pull Requests",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10669580": {
        "doi": "10.5281/zenodo.10669580",
        "author": "Kim, Tae Eun and Choi, Jaeseung and Im, Seongjae and Heo, Kihong and Cha, Sang Kil",
        "title": "Evaluating Directed Fuzzers: Are We Heading in the Right Direction? (Paper Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10669580",
        "abstract": "<p>A research artifact associated with the paper “Evaluating Directed Fuzzers: Are We Heading in the Right Direction?” (FSE 2024). This artifact provides the end-to-end system to reproduce the experiments in the paper either by running the experiment or analyzing the experimental data used in the paper.</p>",
        "keywords": "Directed fuzzing, Fuzz testing, Fuzzer evaluation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10683405": {
        "doi": "10.5281/zenodo.10683405",
        "author": "Cai, Luwei and Song, Fu and Chen, Taolue",
        "title": "S3L-official/CT_Prover: CT_Prover",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10683405",
        "abstract": "<p>Source code for “Towards Efficient Verification of Constant-Time Cryptographic Implementations” accepted by FSE24</p>",
        "keywords": "constant-time cryptographic implementation, formal verification, taint analysis, Timing side-channel",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/S3L-official/CT_Prover/tree/v1.0.0"
    },
    "10.5281/zenodo.10684856": {
        "doi": "10.5281/zenodo.10684856",
        "author": "Eom, Haeun and Kim, Dohee and Lim, Sori and Koo, Hyungjoon and Hwang, Sungjae",
        "title": "R2I: A Relative Readability Metric for Decompiled Code",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10684856",
        "abstract": "<p>This artifact comprises the replication package for the paper titled “R2I: A Relative Readability Metric for Decompiled Code” (FSE 2024). It encompasses the source code of R2I, a readability metric designed specifically for decompiled code, along with the dataset utilized in the paper. The dataset consists of decompiled code samples from prominent decompilers such as Hex-Rays, Ghidra, and Binary Ninja.</p>",
        "keywords": "Code Metric, Decompiled Code Readability",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.10684985": {
        "doi": "10.5281/zenodo.10684985",
        "author": "Zhang, Yifan and Li, Jiliang and Karas, Zachary and Bansal, Aakash and Li, Toby Jia-Jun and McMillan, Collin and Leach, Kevin and Huang, Yu",
        "title": "Reproduction Package for the FSE 2024 Paper \"EyeTrans: Merging Human and Machine Attention for Neural Code Summarization\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10684985",
        "abstract": "<p>This artifact accompanies our paper “EyeTrans: Merging Human and Machine Attention for Neural Code Summarization,” which has been accepted for presentation at the ACM International Conference on the Foundations of Software Engineering (FSE) 2024.</p>\n<p>The artifact contains the dataset derived from a human study using eye-tracking for code comprehension, crucial for the development of the EyeTrans model. Additionally, it includes the source code related to the research questions addressed within our work.</p>\n<p>This includes the unprocessed data from the eye-tracking study, scripts for data processing, and the source code for the EyeTrans model, which merges human and machine attention within Transformer models. This resource is intended for researchers aiming to replicate our study, conduct further inquiry, or extend the techniques to new datasets in software engineering research.</p>",
        "keywords": "Code Summarization, Eye-tracking, Human Attention, Machine Attention, Transformer",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.10719029": {
        "doi": "10.5281/zenodo.10719029",
        "author": "Sun, Gengyi and Habchi, Sarra and McIntosh, Shane",
        "title": "RavenBuild: Context, Relevance, and Dependency Aware Build Outcome Prediction",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10719029",
        "abstract": "<p>Open-Source Dataset: Data collection, Feature Extraction, and Model Training</p>",
        "keywords": "build outcome prediction, continuous integration, maintenance cost, mining software repositories",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.10775868": {
        "doi": "10.5281/zenodo.10775868",
        "author": "Rahman, Md Shamimur and Codabux, Zadia and Roy, Chanchal K.",
        "title": "Replication Package for Do Words Have Power? Understanding and Fostering Civility in Code Review Discussion",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10775868",
        "abstract": "<p>Dataset and replication</p>",
        "keywords": "Code Review, Incivility",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.10828316": {
        "doi": "10.5281/zenodo.10828316",
        "author": "Mohajer, Mohammad Mahdi and Aleithan, Reem and Harzevili, Nima Shiri and Wei, Moshi and Belle, Alvine Boaye and Pham, Hung Viet and Wang, Song",
        "title": "Replication Package for \"Effectiveness of ChatGPT for Static Analysis: How Far Are We?\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10828316",
        "abstract": "<p>This artifact contains the replication package for the paper “Effectiveness of ChatGPT for Static Analysis: How Far Are We?”. This package contains a README.md file instructing how to run the experiments performed on the paper. It also contains datasets, all the experiment codes, and the packages that are required to install.</p>",
        "keywords": "ChatGPT, Large language models, Static analysis",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.11068809": {
        "doi": "10.5281/zenodo.11068809",
        "author": "Zhang, Zhaoxu and Tawsif, Fazle Mohammed and Ryu, Komei and Yu, Tingting and Halfond, William G. J.",
        "title": "Reproduction Package for \"Mobile Bug Report Reproduction via Global Search on the App UI Model\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11068809",
        "abstract": "<p>This is the artifact of the paper “Mobile Bug Report Reproduction via Global Search on the App UI Model” accepted by FSE 2024.</p>",
        "keywords": "Bug Report Reproduction",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11069504": {
        "doi": "10.5281/zenodo.11069504",
        "author": "Haroon, Sabaat and Brown, Chris and Gulzar, Muhammad Ali",
        "title": "Reproduction package for \"DeSQL: Interactive Debugging of SQL in Data-Intensive Scalable Computing\".",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11069504",
        "abstract": "<p>DeSQL artifacts provide clear and detailed documentation that guides users through a verified local setup process, ensuring the system is both functional and resuable, which streamlines the experience from installation to utilization.</p>",
        "keywords": "data intensive scalable computing, Debugging, SQL",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11072823": {
        "doi": "10.5281/zenodo.11072823",
        "author": "Gong, Jingzhi and Chen, Tao",
        "title": "Artifact Repository for Paper \"Predicting Configuration Performance in Multiple Environments with Sequential Meta-Learning\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11072823",
        "abstract": "<p>This repository contains the key codes, full data used, raw experiment results, and the supplementary tables for the paper.</p>",
        "keywords": "configuration performance learning, configuration performance prediction, deep learning, highly configurable software, machine learning, meta-learning, software engineering",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11077099": {
        "doi": "10.5281/zenodo.11077099",
        "author": "Cheng, Xiao and Ren, Jiawei and Sui, Yulei",
        "title": "Fast Graph Simplification for Path-Sensitive Typestate Analysis through Tempo-Spatial Multi-Point Slicing (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11077099",
        "abstract": "<p>This artifact is for Fast Graph Simplification for Path-Sensitive Typestate Analysis through Tempo-Spatial Multi-Point Slicing by Xiao Cheng, Jiawei Ren and Yulei Sui published at FSE 2024. The artifact can be reused to analyze customized programs. The source code can also be modified to fit specific needs.</p>\n<p>Typestate analysis is a commonly used static technique to identify software vulnerabilities by assessing if a sequence of operations violates temporal safety specifications defined by a finite state automaton. Path-sensitive typestate analysis (PSTA) offers a more precise solution by eliminating false alarms stemming from infeasible paths. To improve the efficiency of path-sensitive analysis, previous efforts have incorporated sparse techniques, with a focus on analyzing the path feasibility of def-use chains. However, they cannot be directly applied to detect typestate vulnerabilities requiring temporal information within the control flow graph, e.g., use-to-use information.</p>\n<p>In this paper, we introduce FGS, a Fast Graph Simplification approach designed for PSTA by retaining multi-point temporal information while harnessing the advantages of sparse analysis. We propose a new multi-point slicing technique that captures the temporal and spatial correlations within the program. By doing so, it optimizes the program by only preserving the necessary program dependencies, resulting in a sparser structure for precision-preserving PSTA. Our graph simplification approach, as a fast preprocessing step, offers several benefits for existing PSTA algorithms. These include a more concise yet precision-preserving graph structure, decreased numbers of variables and constraints within execution states, and simplified path feasibility checking. As a result, the overall efficiency of the PSTA algorithm exhibits significant improvement.</p>\n<p>We evaluated FGS using NIST benchmarks and ten real-world large-scale projects to detect four types of vulnerabilities, including memory leaks, double-frees, use-after-frees, and null dereferences. On average, when comparing FGS against ESP (baseline PSTA), FGS reduces 89\\% of nodes, 86\\% of edges, and 88\\% of calling context of the input graphs, obtaining a speedup of 116<span class=\"math inline\">\\texttimes{",
        "keywords": "Graph simplification, Multi-point slicing, Path-sensitive typestate analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11079042": {
        "doi": "10.5281/zenodo.11079042",
        "author": "Qin, Yi and Tong, Yanxiang and Xu, Yifei and Cao, Chun and Ma, Xiaoxing",
        "title": "Active Monitoring Mechanism",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11079042",
        "abstract": "<p>AMM is a runtime monitoring solution for detecting potentially abnormal behavior of control-based self-adaptive systems. The basic intuition of AMM is to stimulate the control-SAS with an active control signal when vague observations might mask model deviations. To determine the appropriate time for triggering the active signals, AMM proposes a stochastic framework to quantify the relationship between the implicit variation of a control-SAS and its explicit observation. Based on this framework, AMM’s monitor and remediator enhance model deviation detection by generating active control signals of well-designed timing and intensity.</p>",
        "keywords": "control-based sefl-adpative systems, model deviation, runtime monitoring",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.11090237": {
        "doi": "10.5281/zenodo.11090237",
        "author": "Wu, Yaoxuan and Humayun, Ahmad and Gulzar, Muhammad Ali and Kim, Miryung",
        "title": "Reproduction Package for Article \"Natural Symbolic Execution-based Testing for Big Data Analytics\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11090237",
        "abstract": "<p>This artifact includes NaturalSym, a symbolic-execution-based test generator. Given subject DISC programs, NaturalSym can produce high path-coverage and natural-looking test cases. This package contains both NaturalSym itself and all the necessary components to reproduce our evaluation results.</p>",
        "keywords": "DISC Applications, Naturalness, Symbolic Execution",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11091402": {
        "doi": "10.5281/zenodo.11091402",
        "author": "Yoon, Jaehan and Cha, Sooyoung",
        "title": "(Artifact Evaluation) FeatMaker: Automated Feature Engineering for Search Strategy of Symbolic Execution",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11091402",
        "abstract": "<p>FeatMaker is a novel technique that automatically generates state features to enhance the search strategy of symbolic execution. This technique is implemented on the top of KLEE, a widely adopted symbolic execution tool for testing C programs.</p>",
        "keywords": "software testing, Symbolic execution",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11094092": {
        "doi": "10.5281/zenodo.11094092",
        "author": "Pham, Luan and Ha, Huong and Zhang, Hongyu",
        "title": "Software Artifact for \"BARO: Robust Root Cause Analysis for Microservices via Multivariate Bayesian Online Change Point Detection\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11094092",
        "abstract": "<p>This repository contains the Software Artifact for reproducing the main experimental results in our paper accepted to FSE 2024: “BARO: Robust Root Cause Analysis for Microservices via Multivariate Bayesian Online Change Point Detection”</p>\n<p>The artifact is also available in the Github repository: https://github.com/phamquiluan/baro</p>",
        "keywords": "Anomaly Detection, Microservice Systems, Root Cause Analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/phamquiluan/baro/tree/0.2.0"
    },
    "10.5281/zenodo.11094381": {
        "doi": "10.5281/zenodo.11094381",
        "author": "de Souza, Cleidson R. B. and Ma, Emilie and Wong, Jesse and Yoon, Dongwook and Beschastnikh, Ivan",
        "title": "Reproduction Package for Article \"Revealing Software Development Work Patterns with PR-Issue Graph Topologies\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11094381",
        "abstract": "<p>Scripts and data for quantitative analysis in the above paper. The goal of this work is to enable topological analysis of PR-Issue networks on GitHub via graph database queries, an image generation module, and many statistics scripts. This repository includes:</p>\n<ul>\n<li>Data scraped from over 50 large open source projects on GitHub and converted into a Neo4j data dump.</li>\n<li>Reusable Cypher (Neo4j query language) queries to surface instances of workflow types.</li>\n<li>Image generation modules written in Python to visualize workflow types and clusters of Issues and PRs, used during the paper’s qualitative coding process.</li>\n<li>Interactive web-based project explorer to aggregate workflow types found in a project, used during developer interviews.</li>\n</ul>\n<p>These were primarily used to support the qualitative aspects of this paper.</p>",
        "keywords": "collaboration, open source, repository mining, software engineering",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/ubcdlab/pr-issue-topology-project/tree/v1.0.0"
    },
    "10.5281/zenodo.11094742": {
        "doi": "10.5281/zenodo.11094742",
        "author": "Wintersgill, Nathan and Stalnaker, Trevor and Heymann, Laura A. and Chaparro, Oscar and Poshyvanyk, Denys",
        "title": "\"The Law Doesn't Work Like a Computer\": Exploring Software Licensing Issues Faced by Legal Practitioners - Replication Package",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11094742",
        "abstract": "<p>Contains survey and interview protocols, survey questions, aggregated results, a code catalog for survey and interview responses with definitions, and code to process results. Its purpose is to present the data we obtained from our surveys as well as the tools we used to analyze the data to promote independent verification of our conclusions. All data presented has been anonymized.</p>",
        "keywords": "Legal Practitioners, Open Source Software, Software Licensing",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.11095172": {
        "doi": "10.5281/zenodo.11095172",
        "author": "Bittner, Paul Maximilian and Schulthei\\ss{",
        "title": "Demo for Article 'Variability-Aware Differencing with DiffDetective'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11095172",
        "abstract": "<p>This is a small demonstration of <a href=\"https://github.com/VariantSync/DiffDetective\">DiffDetective</a> (DOI: 10.5281/zenodo.11095140), and the supplementary artifact to our paper <em>Variability-Aware Differencing with DiffDetective</em>. The purpose of this demo is to provide an example of how to use DiffDetective and to serve as a template project for you to clone and adapt as a quickstart for developing with DiffDetective. There is a screencast available on YouTube, guiding you through the demo’s setup with Maven in IntelliJ and how to implement variability-aware differencing and analyses of Git histories. For further information (including installation instructions and documentation) please head to the respective <a href=\"https://github.com/VariantSync/DiffDetective-Demo\">website</a> or <a href=\"https://doi.org/10.5281/zenodo.11095172\">archive</a>.</p>",
        "keywords": "software evolution, software product lines, software variability",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/VariantSync/DiffDetective-Demo/tree/fse-24-artifact-submission"
    },
    "10.5281/zenodo.11095274": {
        "doi": "10.5281/zenodo.11095274",
        "author": "Drosos, Georgios-Petros and Sotiropoulos, Thodoris and Spinellis, Diomidis and Mitropoulos, Dimitris",
        "title": "Artifact for \"Bloat beneath Python's Scales: A Fine-Grained Inter-Project Dependency Analysis\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11095274",
        "abstract": "<p>This artifact complements the FSE’24 paper titled “Bloat beneath Python’s Scales: A Fine-Grained Inter-Project Dependency Analysis” by providing comprehensive resources for reproducing its research findings. The artifact includes a meticulously structured dataset, comprising of the code bloat metrics of 1,302 Python projects and their 3,232 dependencies analyzed in the paper. It offers detailed scripts and tools for analyzing software bloat at multiple granular levels—dependencies, files, and methods and reproducing the tables and figures presented in the paper. Additionally, the artifact provides step-by-step instructions for reapplying these analyses and for constructing fine-grained project dependency graphs (FPDGs). Moreover, it includes data on identified software vulnerabilities within bloated code sections, enabling users to recreate the vulnerability assessment presented in the paper. The DOI of the artifact is the following: https://doi.org/10.5281/zenodo.11095274</p>",
        "keywords": "call graph, debloating, dependencies, PyPI",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/gdrosos/bloat-study-artifact/tree/v1.0"
    },
    "10.5281/zenodo.11095396": {
        "doi": "10.5281/zenodo.11095396",
        "author": "Jin, Xin and Lin, Zhiqiang",
        "title": "SimLLM: Calculating Semantic Similarity in Code Summaries Using a Large Language Model-Based Approach",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11095396",
        "abstract": "<p>This is the artifact for the ACM FSE’2024 paper: “SimLLM: Calculating Semantic Similarity in Code Summaries Using a Large Language Model-Based Approach”.</p>\n<p>After downloading the zip file, please read and follow the README.md file to install and use it.</p>",
        "keywords": "automated code summarization, large language models, summary semantic similarity",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.11095456": {
        "doi": "10.5281/zenodo.11095456",
        "author": "Paltenghi, Matteo and Pradel, Michael",
        "title": "Reproduction Package for Analyzing Quantum Programs with LintQ: A Static Analysis Framework for Qiskit",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11095456",
        "abstract": "<p>LintQ: A Static Analysis Framework for Qiskit Quantum Programs LintQ is a framework for static analysis of quantum programs written in Qiskit. It comprises:</p>\n<ul>\n<li>LintQ Core: a set of quantum-specific concepts that supports the definition of static analysis of quantum programs.</li>\n<li>LintQ Analyses: a set of analyses build on top of the abstractions offered by the core.</li>\n</ul>\n<p>Use Cases You can run LintQ with two objectives:</p>\n<p>Replication Package Level 1: reproduce the figures and tables from the paper. Replication Package Level 2: analyze a new dataset of quantum programs with LintQ.</p>",
        "keywords": "program analysis, quantum computing, software engineering, static analysis",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/sola-st/LintQ/tree/v1.0.0"
    },
    "10.5281/zenodo.11096386": {
        "doi": "10.5281/zenodo.11096386",
        "author": "Su, Zian and Xu, Xiangzhe and Huang, Ziyang and Zhang, Zhuo and Ye, Yapeng and Huang, Jianjun and Zhang, Xiangyu",
        "title": "Reproduction Package for the Article \"CodeArt: Better Code Models by Attention Regularization When Symbols Are Lacking\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11096386",
        "abstract": "<p>This artifact includes the code for reproducing the major experiment results in the paper. A docker environment is provided. Data and model checkpoints are hosted on Hugging Face Hub and can be downloaded automatically for experiments.</p>",
        "keywords": "Attention Regularization, Code Language Models, Self-supervised Learning",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/ziansu/codeart/tree/v0.2"
    },
    "10.5281/zenodo.11097202": {
        "doi": "10.5281/zenodo.11097202",
        "author": "Bouzenia, Islem and Krishan, Bajaj Piyush and Pradel, Michael",
        "title": "DyPyBench Docker Image",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11097202",
        "abstract": "<p>The first benchmark of Python projects that is large-scale, diverse, ready-to-run (i.e., with fully configured and prepared test suites), and ready-to-analyze (i.e., using an integrated Python dynamic analysis framework). The benchmark encompasses 50 popular open-source projects from various application domains, with a total of 681K lines of Python code, and 30K test cases.</p>",
        "keywords": "Benchmarking of Software Systems, Executable collection of software, Program analysis, Python",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11097846": {
        "doi": "10.5281/zenodo.11097846",
        "author": "Xin, Qi and Wu, Haojun and Tang, Jinran and Liu, Xinyu and Reiss, Steven P. and Xuan, Jifeng",
        "title": "Reproduction Package for Article Detecting, Creating, Repairing, and Understanding Indivisible Multi-Hunk Bugs",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11097846",
        "abstract": "<p>The artifact includes the source code of our IBugFinder tool for indivisible bug detection and creation, the new bug dataset CatenaD4J, the result of the study of multi-hunk fixes, and the repair tools and test scripts used in the repair experiment. The artifact is intended to facilitate the evaluation and development of new multi-hunk repair techniques.</p>",
        "keywords": "Automated program repair, indivisible multi-hunk bugs, partial patch relationship",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/qixin5/indivisible_multihunk_bug_repair/tree/v1.0.3"
    },
    "10.5281/zenodo.11130683": {
        "doi": "10.5281/zenodo.11130683",
        "author": "Wang, Yiran and L\\'{o",
        "title": "Repository of paper - Using Run-time Information to Enhance Static Analysis of Machine Learning Code in Notebooks",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11130683",
        "abstract": "<p>This repository offers a thorough explanation of the experiments detailed in the paper, encompassing detailed documentation of configurations, procedures, intermediate logs, and final results. Its goal is to promote transparency and reproducibility in the research process, empowering others to verify and expand upon the findings presented in the paper.</p>",
        "keywords": "large language models, machine learning bugs, notebook, run-time information, static analysis, tensor shape mismatch",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.11160861": {
        "doi": "10.5281/zenodo.11160861",
        "author": "Denaro, Giovanni and El Moussa, Noura and Heydarov, Rahim and Lomio, Francesco and Pezz\\`{e",
        "title": "Reproduction Package for Article `Predicting Failures of Autoscaling Distributed Applications`",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11160861",
        "abstract": "<p>This replication package includes:</p>\n<p>A large dataset of KPIs collected from Alemira, a commercial Learning Managing System developed in Constructor Tech and currently in use in several educational institutions, and TrainTicket, a microservice application widely used in research projects. Both are microservice-based applications deployed on Kubernetes that takes full advantage of its autoscaling mechanisms.</p>\n<p>The results of the experiments of PREFACE, PREdicting Failures in AutosCaling distributEd Applications, the approach presented in our manuscript which predicts and localizes failures in autoscaling distributed applications.</p>\n<p>The toolset to execute PREFACE to replicate the results obtained based on the provided dataset.</p>",
        "keywords": "Failure Prediction, Fault Localization, Kubernetes",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.11168191": {
        "doi": "10.5281/zenodo.11168191",
        "author": "McQueary, Wren and Mim, Sadia Afrin and Raihan, Md Nishat and Smith, Justin and Johnson, Brittany",
        "title": "Py-holmes FSE 2024 artifact version 1",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11168191",
        "abstract": "<p>Artifact version 1 for FSE 2024, accompanying the paper Py-holmes: Causal Testing for Deep Neural Networks in Python</p>",
        "keywords": "Adversarial Sample Generation, Causal Testing, Counterfactual Explanation, Deep Learning",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.11180765": {
        "doi": "10.5281/zenodo.11180765",
        "author": "Khan, Nafiz Imtiaz and Filkov, Vladimir",
        "title": "ReACTive: Visualizing ReACTs and Their Impact on Features",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11180765",
        "abstract": "<p>This artifact contains the dataset of Researched Actionables (ReACTs) and the source code for generating the network figures used in the ReACTive tool. Along with that, this artifact includes all the necessary files to visualize the ReACT tool on the client-side/web browser. These files encompass the HTML, CSS, and JavaScript components that power the tool’s front-end, ensuring a seamless and interactive user experience.</p>",
        "keywords": "Literature Review, Open Source Software, Research Actionable, Sustainability",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.11186613": {
        "doi": "10.5281/zenodo.11186613",
        "author": "Bettscheider, Leon and Zeller, Andreas",
        "title": "Replication package for Look Ma, No Input Samples! Mining Input Grammars from Code with Symbolic Parsing",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11186613",
        "abstract": "<p>This replication package contains our prototype implementation of STALAGMITE as a Dockerfile to reproduce the evaluation, as well as experimental data.</p>",
        "keywords": "fuzzing, Input grammars, symbolic analysis, test generation",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.11194557": {
        "doi": "10.5281/zenodo.11194557",
        "author": "Chen, Zhiyang and Liu, Ye and Beillahi, Sidi Mohamed and Li, Yi and Long, Fan",
        "title": "Reproduction package of the paper \"Demystifying Invariant Effectiveness for Securing Smart Contracts\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11194557",
        "abstract": "<p>This artifact accompanies the paper titled “Demystifying Invariant Effectiveness for Securing Smart Contracts” and provides the source code along with a complete replication package. The purpose of this artifact is to facilitate the validation and reproduction of the research results presented in the paper. Users can explore the methodologies, execute the provided scripts, and verify the findings by using this carefully prepared package.</p>\n<p>The main artifact repo is https://github.com/Trace2Inv-Artifact/Trace2Inv-Artifact-FSE24.git, which also contains instructions for using Docker</p>\n<p>For results related to the invariant study discussed in the paper, please refer to a separate repository available at <a href=\"https://github.com/Trace2Inv-Artifact/Trace2Inv-Invariant-Study-FSE24\">another separate repository</a></p>\n<p>For benchmarks used in this paper, please refer to a separate repository available at <a href=\"https://github.com/Trace2Inv-Artifact/Trace2Inv-Benchmarks\">another separate repository</a></p>",
        "keywords": "Blockchain, Dynamic Analysis, Invariant Generation, Program Analysis, Runtime Guard, Security, Smart Contract",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/Trace2Inv-Artifact/Trace2Inv-Artifact-FSE24/tree/artifact"
    },
    "10.5281/zenodo.11199120": {
        "doi": "10.5281/zenodo.11199120",
        "author": "Akhoundali, Jafar and Nouri, Sajad Rahim and Rietveld, Kristian and Gadyatskaya, Olga",
        "title": "MoreFixes: Largest CVE dataset with fixes, Source code for \"MoreFixes\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11199120",
        "abstract": "<p>There are two artifacts in this project, one of them is the source code and the other one is the dataset produced by it.</p>\n<p>Dataset: <code>cvedataset-patches.zip</code> file contains fix patches, and <code>dump_morefixes_27-03-2024_19_52_58.sql.zip</code> contains a postgtesql dump of fixes, together with several other fields such as CVEs, CWEs, repository meta-data, commit data, file changes, method changed, etc. https://zenodo.org/records/11199120</p>\n<p>Source code: https://zenodo.org/records/11110595</p>\n<p>Specific steps to run and use the artifacts is documented on their description.</p>",
        "keywords": "dataset, ecurity vulnerabilities, security metrics, vulnerability identification, vulnerability repair",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.11210209": {
        "doi": "10.5281/zenodo.11210209",
        "author": "Caddy, James and Treude, Christoph",
        "title": "Prioritising GitHub Priority Labels - Data Set and Software",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11210209",
        "abstract": "<p>This is the data set and software produced for the paper Prioritising GitHub Priority Labels, J. Caddy and C. Treude.</p>\n<p>The CSV file contains a manually categorised set of GitHub issue labels that are priority-related. They have been ranked and normalised into three values; “High”, “Medium”, and “Low” priorities. These labels have been gathered from the 5000 most-starred repositories on GitHub as of 2022-06-01.</p>\n<p>The Python script makes use of this data set as an example, and will retrieve the highest priority issues from all of the repositories contributed to by the author specified.</p>\n<p>Run the python script from the same directory as the CSV file, providing the username you wish to see the highest priority issues for as the first command line argument. Supply your GitHub Personal Access Token either at the prompt so it’s not displayed, or as the second command line argument.</p>",
        "keywords": "GitHub issues, issue labels, task priority",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.11406940": {
        "doi": "10.5281/zenodo.11406940",
        "author": "Chen, Yuntianyi and Huai, Yuqi and Li, Shilong and Hong, Changnam and Garcia, Joshua",
        "title": "ConfVE",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11406940",
        "abstract": "<p>Source code and data of ConfVE</p>",
        "keywords": "Autonomous driving systems, Software configuration",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11498333": {
        "doi": "10.5281/zenodo.11498333",
        "author": "Jayasuriya, Dhanushka and Terragni, Valerio and Dietrich, Jens and Blincoe, Kelly",
        "title": "Replication Package for Understanding the Impact of APIs Behavioral Breaking Changes on Client Applications",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11498333",
        "abstract": "<p>This repository contains the replication package for the paper Understanding the Impact of APIs Behavioral Breaking Changes on Client Applications. This paper will be published in the Proceedings of the ACM on Software Engineering journal. The replication package includes the scripts and data we extracted, leading us to our findings.</p>",
        "keywords": "behavioral breaking changes, breaking changes, software dependency, software evolution, software libraries",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.11528723": {
        "doi": "10.5281/zenodo.11528723",
        "author": "Landauer, Max and Skopik, Florian and Wurzenberger, Markus",
        "title": "Reproduction package for article \"A Critical Review of Common Log Data Sets Used for Evaluation of Sequence-Based Anomaly Detection Techniques\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11528723",
        "abstract": "<p>The repository contains scripts to analyze publicly available log data sets (HDFS, BGL, OpenStack, Hadoop, Thunderbird, ADFA, AWSCTD) that are commonly used to evaluate sequence-based anomaly detection techniques. The repository contains documentation and code to get the data sets, parse and group them into sequences of event types, and apply some basic anomaly detection techniques. The repository also comes with some pre-processed samples in each data set directory, which allow to get started without having to download all the data sets.</p>",
        "keywords": "anomaly detection, data sets, log data analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/ait-aecid/anomaly-detection-log-datasets/tree/v1.1"
    },
    "10.5281/zenodo.11563223": {
        "doi": "10.5281/zenodo.11563223",
        "author": "Beyer, Dirk and Kettl, Matthias and Lemberger, Thomas",
        "title": "Reproduction Package for FSE 2024 Article `Decomposing Software Verification Using Distributed Summary Synthesis'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11563223",
        "abstract": "<h2 id=\"distributed-summary-synthesis\">Distributed Summary Synthesis</h2>\n<p>We distribute the verification of a single task by dividing the task into smaller verification tasks. We communicate new pre- and violation conditions through messages.</p>\n<p>VM username: vagrant VM password: vagrant</p>\n<h3 id=\"system-requirements\">System Requirements</h3>\n<p>The artifact requires 8 CPU cores and 16 GB of RAM. Additionally, we require 15 GB of empty disk space. The VM was tested on Ubuntu 22.04 with Virtual Box Version 7.0.10 r158379 (Qt5.15.3).</p>\n<h3 id=\"implementation\">Implementation</h3>\n<p>The core parts of the implementation of DSS can be found in the package <code>~/DSS/cpachecker/src/org/sosy_lab/cpachecker/core/algorithm/distributed_summaries</code>. It contains several packages: - <code>block_analysis</code> (The DSS algorithm) - <code>decomposition</code> (All available decomposition algorithms) - <code>distributed_cpa</code> ((De-)serialization of abstract states for different CPAs) - <code>exchange</code> (Definitions of messages) - <code>visualization</code> (Utility for exporting an HTML report of DSS) - <code>worker</code> (The actors of the actor model) Additionally, we added a BlockCPA to ensure that CPAcheckers’ analysis stays within the assigned block. Its implementation can be found in the package <code>~/DSS/cpachecker/src/org/sosy_lab/cpachecker/cpa/block</code>.</p>\n<h3 id=\"reproduction\">Reproduction</h3>\n<h4 id=\"reproduce-the-example-in-the-paper\">Reproduce the Example in the Paper</h4>\n<p>Navigate to <code>~/DSS</code> and execute <code>./example.sh test/programs/block_analysis/abstraction_safe.c</code>.</p>\n<p>CPAchecker will decompose the example program in blocks and verify the program using DSS. The example program is located at <code>~/DSS/cpachecker/test/programs/block_analysis/abstraction_safe.c</code> After DSS finished, an HTML page containing the block graph and a table of messages automatically appears. We use a simplified version of the block graph in our paper, however, the idea and the verification works as described in the paper. In case, it does not appear automatically, execute <code>open ~/DSS/cpachecker/output/block_analysis/visualized/report.html</code>.</p>\n<p>Red messages represent violation conditions (ERROR_CONDITION). Yellow messages represent preconditions (BLOCK_POSTCONDITION). The column of the message indicates which block sent the message. On the far left, the passed time in nanoseconds since the start of the execution is displayed.</p>\n<p>We observe that blocks “L1” and “L2” send the summary “x = y”. No new violation conditions emerge, therefore DSS finds a proof (FOUND_RESULT in green).</p>\n<p>We expect the last messages of “L1” and “L2” in the automatically opened browser tab to look like this:</p>\n<pre><code>↓ React to message from &lt;SNIP&gt; (ID: &lt;SNIP&gt;):\n\nCalculated new BLOCK_POSTCONDITION message for &lt;SNIP&gt;\n\n{\"readable\":\"(`=_T(18)` main::x@1 main::y@1)\"",
        "keywords": "Block Summaries, Decomposition Strategies, Parallelization, Program Analysis, Software Model Checking",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.8252997": {
        "doi": "10.5281/zenodo.8252997",
        "author": "Chen, Tao and Li, Miqing",
        "title": "Reproduction package for \"Adapting Multi-objectivized Software Configuration Tuning\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8252997",
        "abstract": "<p>The artifact contains the same code from Github: https://github.com/ideas-labo/admmo</p>",
        "keywords": "Configuration tuning, multi-objectivization, search based software engineering",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.8388488": {
        "doi": "10.5281/zenodo.8388488",
        "author": "Song, Yahui and Gao, Xiang and Li, Wenhua and Chin, Wei-Ngan and Roychoudhury, Abhik",
        "title": "ProveNFix: Temporal Property guided Program Repair",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.8388488",
        "abstract": "<p>This is the supporting data from a paper submission to FSE24, including the source code and the benchmarks, by the time of the submission.</p>\n<p>However, please check out the latest implementation and documentation (and paper) on Github: https://github.com/songyahui/infer_TempFix.</p>\n<p>The summary of all the bugs in different projects is in the folder “notes.zip”; the appendixes are attached.</p>\n<p>We recommend you to try out our docker image with all the benchmarked integrated and configured inside:</p>\n<p>https://github.com/songyahui/infer_TempFix/blob/main/ProveNFix_Artifact_Evaluation.pdf</p>",
        "keywords": "Design Science, Program analysis, Program repair, Program synthesis, Programming languages",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11070973": {
        "doi": "10.5281/zenodo.11070973",
        "author": "Beyer, Dirk and Chien, Po-Chun and Jankola, Marek and Lee, Nian-Ze",
        "title": "Reproduction Package for FSE 2024 Article `A Transferability Study of Interpolation-Based Hardware Model Checking for Software Verification'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11070973",
        "abstract": "<p>This artifact is a reproduction package for the article “A Transferability Study of Interpolation-Based Hardware Model Checking for Software Verification”, accepted at FSE 2024. It is archived on Zenodo with the DOI 10.5281/zenodo.11070973.</p>\n<p>The FSE article investigates the transferability of the claims reported in two prior publications on interpolation-based hardware model checking to software verification. The two publications are (1) Interpolation-Sequence-Based Model Checking (Vizel and Grumberg, 2009) and (2) Intertwined Forward-Backward Reachability Analysis Using Interpolants (Vizel, Grumberg, and Shoham, 2013), proposing model-checking algorithms ISMC and DAR for hardware circuits, respectively. In the FSE article, we adopted ISMC and DAR for programs and implemented them in a software-verification framework CPAchecker. This artifact supports the reproduction of the experiments in the FSE article, which compared the implementations of ISMC and DAR against existing interpolation-based verification techniques in CPAchecker, including IMC (McMillan, 2003), Impact (McMillan, 2006), and PredAbs (Henzinger, Jhala, Majumdar, and McMillan, 2004), to validate the claims in the above two publications as well as investigate their performance characteristics versus classical approaches for software verification.</p>\n<p>The artifact consists of source code, precompiled executables, and input data used in the evaluation of the transferability study, as well as the results produced from the experiments. Specifically, it includes the source code and binaries of CPAchecker (at revision 45787 of branch “itp-mc-with-slt”), which implements the verification algorithms compared in the article, the SV-COMP 2023 benchmark suite, the experimental data generated from the evaluation, and instructions to run the tools and experiments.</p>\n<p>This reproduction package works best with the SoSy-Lab Virtual Machine, which runs Ubuntu 22.04 LTS and has all the required dependencies installed. If you test this artifact with this VM, you do not need to install any package.</p>\n<p>By default, we assign 2 CPU cores, 15 GB of memory, and 1800 s of CPU time limit to each verification task. A full reproduction of all experiments took more than 10 months of CPU time on our machines. For demonstration purposes, a subset of the benchmark tasks can be executed, which requires roughly 2 hours of CPU time in total.</p>",
        "keywords": "CPAchecker, Craig Interpolation, Formal Verification, Invariant Synthesis, Model Checking, Program Analysis, Replicability, Reproducibility, Software Verification, Transferability",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11233589": {
        "doi": "10.5281/zenodo.11233589",
        "author": "Bahr, Patrick and Hutton, Graham",
        "title": "Supplementary Material for \"Beyond Trees: Calculating Graph-Based Compilers\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11233589",
        "abstract": "<p>This repository contains the supplementary material for the paper Beyond Trees: Calculating Graph-Based Compilers. The material includes Agda formalisations of all calculations in the paper. In addition, further examples and calculations are included as well.</p>",
        "keywords": "graphs, higher-order abstract syntax, program calculation",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11363460": {
        "doi": "10.5281/zenodo.11363460",
        "author": "Song, Yahui and Foo, Darius and Chin, Wei-Ngan",
        "title": "Specification and Verification for Unrestricted Algebraic Effects and Handling",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11363460",
        "abstract": "<p>This repository serves for the artifact evaluation for the ICFP24 (#95) submission: Specification and Verification for Unrestricted Algebraic Effects and Handling.</p>",
        "keywords": "Automated Verification, Effectful Specification Logic, Multi-shot Continuations, Separation Logic",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.11429428": {
        "doi": "10.5281/zenodo.11429428",
        "author": "Xue, Xu and Oliveira, Bruno C. d. S.",
        "title": "Contextual Typing (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11429428",
        "abstract": "<p>The artifact includes the Agda formalisation of the paper “Contextual Typing”.</p>",
        "keywords": "Bidirectional Typing, Type Inference",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11470739": {
        "doi": "10.5281/zenodo.11470739",
        "author": "Michelland, S\\'{e",
        "title": "Replication package for article: Abstract Interpreters: a Monadic Approach to Modular Verification",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11470739",
        "abstract": "<p>This software package is a Docker image and tarball of a project about building abstract interpreters out of a monadic denotation of source languages. The Docker image contains the tools needed to check the project’s proof scripts, namely opam, the Coq proof assistant, and a few Coq libraries.</p>",
        "keywords": "Abstract Interpretation, Coq, Formal Verification, Interaction Trees, Monadic Semantics",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11470781": {
        "doi": "10.5281/zenodo.11470781",
        "author": "Mulleners, Niek and Jeuring, Johan and Heeren, Bastiaan",
        "title": "Example-Based Reasoning About the Realizability of Polymorphic Programs",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11470781",
        "abstract": "<p>This is the code accompanying the ICFP ’24 paper “Example-Based Reasoning About the Realizability of Polymorphic Programs”. It includes the source code, as well as a virtual image containing the same sources, but with all dependencies installed.</p>",
        "keywords": "container functors, example propagation, parametricity, program synthesis, unrealizability",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11481248": {
        "doi": "10.5281/zenodo.11481248",
        "author": "Gregersen, Simon Oddershede and Aguirre, Alejandro and Haselwarter, Philipp G. and Tassarotti, Joseph and Birkedal, Lars",
        "title": "Almost-Sure Termination by Guarded Refinement - Coq Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11481248",
        "abstract": "<p>This artifact contains the Coq development accompanying the ICFP 2024 submission “Almost-Sure Termination by Guarded Refinement”.</p>\n<p>coq-caliper.tar.gz contains the Coq development which includes a README with instructions for installing dependencies and building the development. The archive also contains PAPER that maps definitions and results from the paper to its formalization.</p>\n<p>docker-caliper.tar.gz contains a pre-built Docker image with dependencies and the Coq development already installed. Suggested commands for loading, rebuilding, and interacting with the image is shown below. The Docker image is built using the instructions found in Dockerfile. Note that building the Dockerfile requires coq-caliper.tar.gz to be available in the same folder.</p>",
        "keywords": "almost-sure termination, coq, probabilistic coupling, separation logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11489778": {
        "doi": "10.5281/zenodo.11489778",
        "author": "Aguirre, Alejandro and Haselwarter, Philipp G. and de Medeiros, Markus and Li, Kwing Hei and Gregersen, Simon Oddershede and Tassarotti, Joseph and Birkedal, Lars",
        "title": "Error Credits: Resourceful Reasoning about Error Bounds for Higher-Order Probabilistic Programs - Coq Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11489778",
        "abstract": "<p>This is the artifact of the Eris logic, highlighted in the ICFP 2024 submission “Error Credits: Resourceful Reasoning about Error Bounds for Higher-Order Probabilistic Programs”.</p>\n<p>The logic is built using the Iris program logic framework and mechanized in the Coq proof assistant.</p>\n<p>This project is built on top of the Clutch project.</p>",
        "keywords": "almost-sure termination, Coq, error bounds, error credits, Iris",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11491613": {
        "doi": "10.5281/zenodo.11491613",
        "author": "Carette, Jacques and Heunen, Chris and Kaarsgaard, Robin and Sabry, Amr",
        "title": "Software for \"How to Bake a Quantum Pi\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11491613",
        "abstract": "<p>Agda source code and qemu VM for the implementation of the programming language described in the paper. Also contains runnable tests as well as some proofs reasoning with programs in QuantumPi.</p>",
        "keywords": "quantum programming language, reversible computing, rig category, unitary quantum computing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11493754": {
        "doi": "10.5281/zenodo.11493754",
        "author": "Xia, Li-yao and Israel, Laura and Kramarz, Maite and Coltharp, Nicholas and Claessen, Koen and Weirich, Stephanie and Li, Yao",
        "title": "Story of Your Lazy Function's Life: A Bidirectional Demand Semantics for Mechanized Cost Analysis of Lazy Programs (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11493754",
        "abstract": "<p>The Coq formalization of paper “Story of Your Lazy Function’s Life: A Bidirectional Demand Semantics for Mechanized Cost Analysis of Lazy Programs”.</p>\n<p>Original abstract of the paper:</p>\n<p>Lazy evaluation is a powerful tool that enables better compositionality and potentially better performance in functional programming, but it is challenging to analyze its computation cost. Existing works either require manually annotating sharing, or rely on separation logic to reason about heaps of mutable cells. In this paper, we propose a bidirectional demand semantics that allows for reasoning about the computation cost of lazy programs without relying on special program logics. To show the effectiveness of our approach, we apply the demand semantics to a variety of case studies including insertion sort, selection sort, Okasaki’s banker’s queue, and the implicit queue. We formally prove that the banker’s queue and the implicit queue are both amortized and persistent using the Rocq Prover (formerly known as Coq). We also propose the reverse physicist’s method, a novel variant of the classical physicist’s method, which enables mechanized, modular and compositional reasoning about amortization and persistence with the demand semantics.</p>",
        "keywords": "amortized analysis, computation cost, Coq, formal verification, lazy evaluation",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.11494317": {
        "doi": "10.5281/zenodo.11494317",
        "author": "De Santo, No\\'{e",
        "title": "Artifact for \"A Coq Mechanization of JavaScript Regular Expression Semantics\" at ICFP 2024",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11494317",
        "abstract": "<p>The artifact consists of a virtual machine with our Coq mechanization, our proof scripts, and our auxiliary code (fuzzer, tests), as well as scripts to recreate the virtual machine from scratch.</p>",
        "keywords": "Coq, ECMAScript, Mechanization, Regex",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11498450": {
        "doi": "10.5281/zenodo.11498450",
        "author": "Torrens, Paulo and Orchard, Dominic and Vasconcellos, Cristiano",
        "title": "Artifact for \"On the Operational Theory of the CPS-calculus\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11498450",
        "abstract": "<p>Archived copy of the artifact for the paper “On the Operational Theory of the CPS-calculus: Towards a Theoretical Foundation for IRs”, submitted to ICFP24.</p>",
        "keywords": "Continuations, intermediate representations, strong normalization.",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.11500453": {
        "doi": "10.5281/zenodo.11500453",
        "author": "Ho, Son and Fromherz, Aymeric and Protzenko, Jonathan",
        "title": "Artifact for: Sound Borrow-Checking for Rust via Symbolic Semantics",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11500453",
        "abstract": "<h2 id=\"paper-abstract\">Paper Abstract</h2>\n<p>The Rust programming language continues to rise in popularity, and as such, warrants the close attention of the programming languages community. In this work, we present a new foundational contribution towards the theoretical understanding of Rust’s semantics. We prove that LLBC, a high-level, borrow-centric model previously proposed for Rust’s semantics and execution, is sound with regards to a low-level pointer-based language \\`{a",
        "keywords": "Compiler, Semantics",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11500626": {
        "doi": "10.5281/zenodo.11500626",
        "author": "Chen, Yijia and Parreaux, Lionel",
        "title": "The Long Way to Deforestation: A Type Inference and Elaboration Technique for Removing Intermediate Data Structures (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11500626",
        "abstract": "<p>This artifact consists of an <code>sbt</code> project with a Scala implementation of Lumberhack as introduced in the corresponding paper. Lumberhack aims to improve the efficiency of programs by eliminating intermediate data structures. We provide a test suite containing all the examples in the paper and all the <code>nofib</code> benchmarks we have ported and presented in the paper. Related scripts in bash, R and Python to generate the figures and tables in the paper are also contained in this artifact.</p>",
        "keywords": "Compiler, Deforestation, OCaml, Optimization, Scala, Type Inference",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.11500966": {
        "doi": "10.5281/zenodo.11500966",
        "author": "Winterhalter, Th\\'{e",
        "title": "ICFP 2024 Artefact: Dependent Ghosts Have a Reflection for Free",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11500966",
        "abstract": "<p>Coq formalisation of the submission ‘Dependent Ghosts Have a Reflection for Free’.</p>\n<p>A README is provided in the zip file. It also explains how to run the VM provided as a QEMU file (artefact.qcow2).</p>",
        "keywords": "coq formalisation, dependent types, ghost data",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11502426": {
        "doi": "10.5281/zenodo.11502426",
        "author": "Melquiond, Guillaume and Moreau, Josu\\'{e",
        "title": "A Safe Low-level Language for Computer Algebra and its Formally Verified Compiler",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11502426",
        "abstract": "<p>This is the artifact for submission A Safe Low-level Language for Computer Algebra and its Formally Verified Compiler at ICFP’24.</p>",
        "keywords": "compiler, formal proof, programming language, safety",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11507455": {
        "doi": "10.5281/zenodo.11507455",
        "author": "Kura, Satoshi and Unno, Hiroshi",
        "title": "Artifact for \"Automated Verification of Higher-Order Probabilistic Programs via a Dependent Refinement Type System\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11507455",
        "abstract": "<p>The artifact is to reproduce the experimental result (Table 2) in the paper.</p>",
        "keywords": "dependent refinement type system, higher-order program",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11508050": {
        "doi": "10.5281/zenodo.11508050",
        "author": "Kurashige, Cole and Ji, Ruyi and Giridharan, Aditya and Barbone, Mark and Noor, Daniel and Itzhaky, Shachar and Jhala, Ranjit and Polikarpova, Nadia",
        "title": "CCLemma: E-Graph Guided Lemma Discovery for Inductive Equational Proofs",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11508050",
        "abstract": "<p>Artifact for ICFP’24: CCLemma: E-Graph Guided Lemma Discovery for Inductive Equational Proofs.</p>\n<p>C.C. Lemma is a tool for automating equational proofs. It is implemented as a command-line tool that takes as input a file specifying inductive datatype definitions, function definitions, and equalities over these datatypes and functions. It attempts to prove each equality, optionally outputting a proof in Liquid Haskell*.</p>\n<p>We include with our tool all of the datasets necessary to run the evaluation from our paper as well as scripts and instructions on how to reproduce our results. We also include the tools we evaluate against, which the scripts will also run.</p>\n<p>Our code can be found at https://github.com/cole-k/cc-lemma/tree/icfp-24.</p>\n<p>C.C. Lemma is implemented in Rust. At this time we do not expect there to be any special requirements for machines: modern laptops are sufficient, although even older machines ought to work fine. Some benchmarks, especially many in the optimization dataset, will run to timeout. We estimate running all benchmarks to take around 120 minutes in the worst-case; however, by default we set a much lower timeout so that testing the tool will only take a few minutes.</p>\n<p>*Proof emission is experimental and not guaranteed to generate proofs that Liquid Haskell accepts, although users may find it useful to inspect the proofs to see how C.C. Lemma proved an equality.</p>",
        "keywords": "Automated Theorem Proving, Equational Reasoning, Lemma Synthesis, Synthesis, Verification",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.11906121": {
        "doi": "10.5281/zenodo.11906121",
        "author": "Quiring, Benjamin and Van Horn, David",
        "title": "Experiments for \"Deriving with Derivatives: Optimizing Incremental Fixpoints for Higher-Order Flow Analysis\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.11906121",
        "abstract": "<p>This artifact contains the current implementation of the compiler for the 3CPS compiler and fixpoint methods for its static analysis. It also contains the benchmark programs from the paper, and a script to the run the experiments.</p>",
        "keywords": "compiler, fixpoint, higher-order, incremental-computation, Standard ML, static analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.12518800": {
        "doi": "10.5281/zenodo.12518800",
        "author": "Beck, Calvin and Yoon, Irene and Chen, Hanxi and Zakowski, Yannick and Zdancewic, Steve",
        "title": "Development for \"A Two-Phase Infinite/Finite Low-Level Memory Model\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12518800",
        "abstract": "<p>This paper provides a novel approach to reconciling complex low-level memory model features, such as pointer–integer casts, with desired refinements that are needed to justify the correctness of program transformations. The idea is to use a “two-phase” memory model, one with an unbounded memory and corresponding unbounded integer type, and one with a finite memory; the connection between the two levels is made explicit by a notion of refinement that handles out-of-memory behaviors. This approach allows for more optimizations to be performed and establishes a clear boundary between the idealized semantics of a program and the implementation of that program on finite hardware.</p>\n<p>The two-phase memory model has been incorporated into an LLVM IR semantics, demonstrating its utility in practice in the context of a low-level language with features like undef and bitcast. This yields infinite and finite memory versions of the language semantics that are proven to be in refinement with respect to out-of-memory behaviors. Each semantics is accompanied by a verified executable reference interpreter. The semantics justify optimizations, such as dead-alloca-elimination, that were previously impossible or difficult to prove correct.</p>\n<p>The artifact contains the development including the Coq proofs of the important theorems. The source code can be used to build the executable interpreter as well, which can execute LLVM programs. A VM is included with all of the dependencies pre-installed.</p>",
        "keywords": "Coq, integer--pointer casts, llvm, memory models, ocaml, semantics, vellvm",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.12656335": {
        "doi": "10.5281/zenodo.12656335",
        "author": "Kov\\'{a",
        "title": "ICFP 2024 artifact - \"Closure-Free Functional Programming in a Two-Level Type Theory\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12656335",
        "abstract": "<p>Artifact for the paper “Closure-Free Functional Programming in a Two-Level Type Theory”</p>",
        "keywords": "staged compilation, two-level type theory",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12659179": {
        "doi": "10.5281/zenodo.12659179",
        "author": "Vandenbogaerde, Bram and Sti\\'{e",
        "title": "Blame-Correct Support for Receiver Properties in Recursively-Structured Actor Contracts (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12659179",
        "abstract": "<p>This replication package contains an executable semantics as a PLT-Redex implementation for the formalisation presented in the paper titled “Blame-Correct Support for Receiver Properties in Recursively-Structured Actor Contracts”. It also contains an implementation of our contract language in Racket. This implementation is used for testing all examples presented in the paper which are also included in the replication package. Finally, the replication package also contains a virtual machine image which contains all prerequisites for running the replication package.</p>",
        "keywords": "actors, design-by-contract, formalisation, plt-redex, racket",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12684335": {
        "doi": "10.5281/zenodo.12684335",
        "author": "Elsman, Martin",
        "title": "Artifact for the ICFP 2024 paper Double-Ended Bit-Stealing for Algebraic Data Types",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12684335",
        "abstract": "<p>The artifact aims at replicating the performance results reported in the paper.</p>",
        "keywords": "Compilation, Data-type representations, Functional languages, Unboxing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12702677": {
        "doi": "10.5281/zenodo.12702677",
        "author": "Chen, Jiawei and de Mendon\\c{c",
        "title": "Artifact for \"Synchronous Programming with Refinement Types\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12702677",
        "abstract": "<p>Experimental data, source code, and an executable artifact image for MARVeLus, based on the Z\\'{e",
        "keywords": "refinement types, robotics, synchronous programming",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12704905": {
        "doi": "10.5281/zenodo.12704905",
        "author": "Binder, David and Tzschentke, Marco and M\\\"{u",
        "title": "Grokking the Sequent Calculus (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12704905",
        "abstract": "<p>A Haskell implementation of the algorithms described in the paper, together with a parser and type inference algorithm for the surface language. Code snippets can be run either on the console or via a web interface.</p>",
        "keywords": "compiler, intermediate representations, sequent calculus",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12792675": {
        "doi": "10.5281/zenodo.12792675",
        "author": "Serrano, Manuel and Findler, Robert Bruce",
        "title": "The Functional, the Imperative, and the Sudoku (artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12792675",
        "abstract": "<p>This artifact will let you run the HipHop solver described in the companion paper and let you conduct some experiments with new puzzles and solver extensions. The objective is to offer you a taste of programming in HipHop. For that, first, we briefly present the structure and organization of the solver and then we suggest three assignments to get you familiar with HipHop and the codebase.</p>\n<p>The artifact has no special requirement. It can be run within the provided virtual machine or installed locally using the GIT repository:</p>\n<pre><code>The VM can be download at: https://zenodo.org/records/11481893\nThe source of the artifact is available at: https://github.com/manuel-serrano/icfp2024-sudoku</code></pre>",
        "keywords": "Esterel, HipHop, JavaScript, Sudoku",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12771956": {
        "doi": "10.5281/zenodo.12771956",
        "author": "Garby, Zac and Hutton, Graham and Bahr, Patrick",
        "title": "Haskell and Agda code for the article \"Calculating Compilers Effectively\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12771956",
        "abstract": "<p>The Haskell and Agda source code for the paper</p>\n<p>Calculating Effectful Compilers</p>\n<p>Haskell (print.hs, state.hs, non-det.hs)</p>\n<p>In these files we give practical implementations of each of the three effects we consider in the paper. For each one, we include the full source code as described in the paper itself, and full definitions for each of the concrete effect interpretations.</p>\n<p>Agda (print.agda, state.agda, non-det.agda, lemmas.agda)</p>\n<p>As noted in the paper, we use Agda to formally verify the correctness of our calculations. These four files constitute those proofs. We use function extensionality, which is postulated in lemmas.agda.</p>\n<p>Each Agda file begins by translating the types and functions from Haskell into Agda’s syntax. We prove all relevant results:</p>\n<pre><code> * The functor and monad laws for each effect type\n\n * Compiler correctness\n\n      exec (comp e c) s = do v &lt;- eval e; exec c (v : s)\n\n * Correctness of the fusion of run and exec:\n\n      exec' c s = run (exec c s) </code></pre>\n<p>There are some differences between the Agda presentation and that given in the paper. In particular:</p>\n<pre><code> * Agda does not like partial functions, so we augment the stack\n   with an arity (essentially making it a vector) and the code with\n   tags to describe how it transforms the shape of the stack.  This\n   is a standard, straightforward transformation which doesn't\n   affect the validity of the proofs, but keeps Agda happy.\n\n * Agda's 'do' notation only permits one monad per file.  So we are\n   forced to translate the IO 'do' blocks into binds and lambdas.\n\n * The calculations are presented as \"calculational proofs\".  Agda\n   does not provide any utility for calculating data types and\n   functions *during* equational proofs, so we structure these by\n   first writing down the calculated definition and then following\n   up with the proof that it is correct.\n\n   These proofs, while technically not calculations, still follow the\n   same steps as in the paper, so the reader can follow along.</code></pre>",
        "keywords": "Agda, algebraic effects, compilers, Haskell, program calculation",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12774237": {
        "doi": "10.5281/zenodo.12774237",
        "author": "Vasconcelos, Pedro and Marques, Rodrigo",
        "title": "Haskelite implementation",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12774237",
        "abstract": "<p>An implementation of a web-based step-by-step interpreter for a subset of Haskell.</p>",
        "keywords": "interpreters, lazy evaluation, operational semantics, pattern matching, teaching",
        "badges": [
            "available"
        ]
    },
    "10.5072/zenodo.45711": {
        "doi": "10.5072/zenodo.45711",
        "author": "Ouyang, Yicheng and Yang, Jun and Zhang, Lingming",
        "title": "Reproduction Package for Article \"Benchmarking Automated Program Repair: An Extensive Study on Both Real-world and Artificial Bugs\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5072/zenodo.45711",
        "abstract": "<p>Reproduction Package for Article “Benchmarking Automated Program\nRepair: An Extensive Study on Both Real-world and Artificial Bugs”.\nContaining artificial bugs, Defects4J bugs, and patches generated on the\nbugs, and scripts for reproduction.</p>",
        "keywords": "Debugging, Mutation Testing., Patch Correctness Checking, Program Repair",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.10888532": {
        "doi": "10.5281/zenodo.10888532",
        "author": "Helm, Dominik and Keidel, Sven and Kampk\\\"{o",
        "title": "Total Recall? How Good are Static Call Graphs Really? - Companion Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10888532",
        "abstract": "<p>This artifact holds a pipeline that captures a dynamic callgraph for\na JVM program and a given set of inputs (input corpus). This dynamic\ncallgraph can then be used as a baseline to compute precision and recall\nof a defined set of static callgraphs.</p>\n<p>To achieve a good quality of the dynamic baseline, the pipeline\nprovides different techniques for creating a suitable input corpus.\nThese are:</p>\n<pre><code>Base Seed Corpus: Pre-existing input corpora found online, without any modification\nSeed Corpus: Manual additions to the Base Seed Corpus derived from inspecting the coverage values.\nFuzzing: A coverage-guided fuzzer (Jazzer) generates program inputs from scratch\nFuzzing Seed: Jazzer generates new inputs using the Seed Corpus as a starting point. This is the combination of all aforementioned techniques, which we found to be best suited for good quality dynamic callgraphs.</code></pre>\n<p>The pipeline evaluates precision and recall for the following fixed\nset of static callgraphs:</p>\n<pre><code>OPAL: CHA, RTA, 0-CFA\nWALA: CHA, RTA, 0-CFA\nSoot: CHA\nDoop: 0-CFA</code></pre>\n<p>Numerical values for precision and recall are computed for every\nstatic callgraph and every project. We further include scripts that\nvisualize those values for our set of four programs.</p>\n<p>The artifact consists of three archives:</p>\n<pre><code>total_recall_paper_supplementary.zip: Holds supplementary material for our paper, including proofs for bounds to precision and recall, as well as additional visualizations.\ntotal_recall_artifact.zip: Holds the implementation of our pipeline and most of the data generated for our evaluation. A detailed description on how to use this artifact can be found in the enclosed README.md file.\ntotal_recall_artifact_supplementary.zip: Holds supplementary data for our artifact. This may be helpful if you do not have access to the computing resources required to compute static callgraphs. Installation instructions can be found in the enclosed README.md file.</code></pre>",
        "keywords": "Call Graph, Dynamic Analysis, Precision, Recall, Static Analysis",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.10890011": {
        "doi": "10.5281/zenodo.10890011",
        "author": "Helm, Dominik and Roth, Tobias and Keidel, Sven and Reif, Michael and Mezini, Mira",
        "title": "Unimocg: Modular Call-Graph Algorithms for Consistent Handling of Language Features - Companion Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10890011",
        "abstract": "<p>This is the artifact of the paper: Unimocg: Modular Call-Graph\nAlgorithms for Consistent Handling of Language Features published at\nISSTA 2024. Our paper proposes a modular architecture for call-graph\nconstruction that decouples the computation of type information from\nresolving calls.</p>\n<p>Unimocg_Artifact.zip contains our artifact and results (excluding\ncomputed call graphs because of their size). The evaluation is performed\nin a docker container that can automatically be build from the files in\nthe artifact zip.</p>",
        "keywords": "call graph, static analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10897855": {
        "doi": "10.5281/zenodo.10897855",
        "author": "Zhou, Mingyi and Gao, Xiang and Liu, Pei and Grundy, John and Chen, Chunyang and Chen, Xiao and Li, Li",
        "title": "CustomDLCoder: Generating Pure Code Implementations to Replace On-Device DL Models",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10897855",
        "abstract": "<p>Code for our paper “Model-less Is the Best Model: Generating Pure\nCode Implementations to Replace On-Device DL Models” which has been\naccepted by ISSTA’24</p>",
        "keywords": "Program Analysis, Software Engineering for AI",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.10900080": {
        "doi": "10.5281/zenodo.10900080",
        "author": "Liu, Yunqi and Song, Wei",
        "title": "Reproduction Package of &nbsp;\"FunRedisp: Reordering Function Dispatch in Smart Contract to Reduce Invocation Gas Fees\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10900080",
        "abstract": "<p>FunRedisp is a bytecode refactoring tool to reduce the overall\ninvocation gas consumption of Solidity smart contracts. This artifact\nincludes the source code of FunRedisp written in Python, as well as\nsource code of the smart contracts and address information required for\nthe corresponding experiment. It also includes the addresses of all\nSolidity smart contracts required for empirical study in the\narticle.</p>",
        "keywords": "Ethereum, function dispatch, FunRedisp, gas optimization, smart contract, Solidity",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.10901816": {
        "doi": "10.5281/zenodo.10901816",
        "author": "Wang, Ruixin and Lu, Minghai and Yu, Cody Hao and Lai, Yi-Hsiang and Zhang, Tianyi",
        "title": "Reproduction Package for Article \"Automated Deep Learning Optimization via DSL-based Source Code Transformation\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10901816",
        "abstract": "<p>This artifact includes the source code and experimental result of the\ncorresponding research paper. This artifact aims to help with the\nreproduction work and future research.</p>",
        "keywords": "Deep Learning Optimization, Program Transformation",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12632401": {
        "doi": "10.5281/zenodo.12632401",
        "author": "Jiang, Zhihan and Liu, Jinyang and Huang, Junjie and Li, Yichen and Huo, Yintong and Gu, Jiazhen and Chen, Zhuangbin and Zhu, Jieming and Lyu, Michael R.",
        "title": "Reproduction Package for Article \"A Large-Scale Evaluation for Log Parsing Techniques: How Far Are We?\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12632401",
        "abstract": "<p>This is the artifact of [ISSTA’24] “A Large-Scale Evaluation for Log\nParsing Techniques: How Far Are We?”</p>",
        "keywords": "Benchmark, Log Analysis, Log Parsing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12633908": {
        "doi": "10.5281/zenodo.12633908",
        "author": "Wang, Tong and Gu, Taotao and Deng, Huan and Li, Hu and Kuang, Xiaohui and Zhao, Gang",
        "title": "ScenarioFuzz",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12633908",
        "abstract": "<p>ScenarioFuzz is a framework that focuses on conducting fuzz testing\non autonomous driving systems at the scenario level. The framework\nutilizes the following approaches:</p>\n<p>1.Leveraging map crawling techniques to construct a topological graph\nfrom road semantic web maps based on the OPENDRIVE format. It clusters\nscene-relevant waypoints and queries waypoint connectivity to build a\nscenario seed corpus.</p>\n<p>2.Based on the scenario seed corpus, the framework mutates the seed\nscenarios to generate realistic and effective scenario instances.</p>\n<p>3.The mutated seed scenarios are evaluated and filtered using a\nscenario evaluation model, which helps reduce trial-and-error costs.</p>\n<p>4.The constructed scenarios are then implemented in the CARLA\nsimulation engine and integrated with the system under test for testing\npurposes.</p>\n<p>5.The framework accurately identifies corner cases in the tested\nsystem’s scenarios.</p>\n<p>6.Multiple iterations of scenario evaluation model training can be\nperformed using the collected test data.</p>",
        "keywords": "Autonomous Driving Systems, Fuzzing, Scenario-based Testing",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/AtongWang/ScenarioFuzz/tree/v1.0.0"
    },
    "10.5281/zenodo.12639546": {
        "doi": "10.5281/zenodo.12639546",
        "author": "He, Yifeng and Huang, Jiabo and Rong, Yuyang and Guo, Yiwen and Wang, Ethan and Chen, Hao",
        "title": "UniTSyn: A Large-Scale Dataset Capable of Enhancing the Prowess of Large Language Models for Program Testing",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12639546",
        "abstract": "<p>Code to build and reproduce dataset UniTSyn.</p>",
        "keywords": "dataset, Large language models, software testing, test case generation",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12643079": {
        "doi": "10.5281/zenodo.12643079",
        "author": "Canelas, Paulo and Schmerl, Bradley and Fonseca, Alcides and Timperley, Christopher S.",
        "title": "Artifact for Understanding Misconfigurations in ROS: An Empirical Study and Current Approaches",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12643079",
        "abstract": "<p>This artifact contains all the information collected from ROS Answers\nand categorized in the empirical study and literature review.</p>",
        "keywords": "Empirical Study, Literature Review, Misconfigurations, ROS",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12647526": {
        "doi": "10.5281/zenodo.12647526",
        "author": "Zhao, Wenxuan and Zeng, Ruiying and Zhou, Yangfan",
        "title": "Code \\&amp; Data of \"Wapplique : Testing WebAssembly Runtime via Execution Context-Aware Bytecode Mutation\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12647526",
        "abstract": "<p>Artifact provide the code and data of Wapplique. demo/ and wapplique/\ndircetory is the code.coverage_data/ directory is the coverage data.</p>",
        "keywords": "Code Generation, Fuzzing, Runtime Testing, WebAssembly",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12653656": {
        "doi": "10.5281/zenodo.12653656",
        "author": "Charoenwet, Wachiraphan and Thongtanunam, Patanamon and Pham, Van-Thuan and Treude, Christoph",
        "title": "Dataset for An Empirical Study of Static Analysis Tools for Secure Code Review",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12653656",
        "abstract": "<p>This package contains the fundamental datasets and the core scripts\nin the study. The following sections describe the content of each\nfolder, and the technical instructions to obtain and analyze the dataset\nwith the provided scripts.</p>",
        "keywords": "secure code review, static application security testing tools, vulnerability-contributing commits",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12655683": {
        "doi": "10.5281/zenodo.12655683",
        "author": "Kukucka, James and Pina, Lu\\'{\\i",
        "title": "Artifact to accompany \"An Empirical Examination of Fuzzer Mutator Performance\" (ISSTA 2024 article)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12655683",
        "abstract": "<p>The primary purpose of this artifact is to store all of the data that\nis presented in the paper “An Empirical Examination of Fuzzer Mutator\nPerformance,” published at ISSTA 2024.</p>\n<p>The artifact has many directories, which are explained below:</p>\n<ol type=\"1\">\n<li>An example of how to run the experiments in the paper:\n<code>run_experiments.zip</code></li>\n<li>Our unprocessed, raw coverage data output from the modified AFL++\nthat we presented in our paper: <code>afl-knobs-output.tar</code></li>\n<li>Processed coverage JSON files that can be used for further analysis,\nas well as reports on bugs reached and found for each trial:\n<code>data.tar.gz</code></li>\n<li>Analysis scripts to convert the raw data from 1 into processable\nJSON files in 2: <code>analyze_data.zip</code></li>\n<li>TypeScript to parse coverage JSON files into CSVs:\n<code>coverage-parser</code></li>\n<li>Jupyter notebooks to analyze coverage and bug data after being\nconverted to CSVs: <code>notebooks</code></li>\n</ol>",
        "keywords": "AFL++, evaluation, fuzzing, mutators",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12657258": {
        "doi": "10.5281/zenodo.12657258",
        "author": "Ye, Zhenyu and Zhou, Lei and Zhang, Fengwei and Jin, Wenqiang and Ning, Zhenyu and Hu, Yupeng and Qin, Zheng",
        "title": "FortifyPatch: Towards Tamper-Resistant Live Patching in Linux-Based Hypervisor",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12657258",
        "abstract": "<p>The artifact of paper FortifyPatch for ISSTA’24.</p>",
        "keywords": "Arm, Confidential Compute Architecture, Live Patch",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12660892": {
        "doi": "10.5281/zenodo.12660892",
        "author": "Lin, Bo and Wang, Shangwen and Wen, Ming and Chen, Liqian and Mao, Xiaoguang",
        "title": "The artifacts of ISSTA 2024 paper titled \"One Size Does Not Fit All: Multi-Granularity Patch Generation for Better Automated Program Repair\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12660892",
        "abstract": "<p>The artifacts include the scripts for preprocessing and training.</p>",
        "keywords": "Automated Program Repair, Deep Learning, Pre-Training",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12661302": {
        "doi": "10.5281/zenodo.12661302",
        "author": "Luo, Chuan and Lyu, Shuangyu and Zhao, Qiyuan and Wu, Wei and Zhang, Hongyu and Hu, Chunming",
        "title": "Artifact for ISSTA 2024 Article `Beyond Pairwise Testing: Advancing 3-wise Combinatorial Interaction Testing for Highly Configurable Systems'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12661302",
        "abstract": "<p>ScalableCA is a novel and scalable algorithm that demonstrates\neffectiveness and efficiency in solving large-scale 3-wise CCAG\ninstances. This artifact includes the implementation of ScalableCA, the\ntesting instances adopted in the experiments and the experimental\nresults.</p>",
        "keywords": "Combinatorial Interaction Testing, Sampling, Satisfiability",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/chuanluocs/ScalableCA/tree/v1.0.0"
    },
    "10.5281/zenodo.12662049": {
        "doi": "10.5281/zenodo.12662049",
        "author": "Dasu, Vishnu Asutosh and Kumar, Ashish and Tizpaz-Niari, Saeid and Tan, Gang",
        "title": "Source code for \"NeuFair: Neural Network Fairness Repair with Dropout\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12662049",
        "abstract": "<p>This repository contains the source code to reproduce the results in\nthe paper “NeuFair: Neural Network Fairness Repair with Dropout”\naccepted at ACM ISSTA 2024.</p>",
        "keywords": "Machine Learning, Software Applications",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12662090": {
        "doi": "10.5281/zenodo.12662090",
        "author": "Cheng, Runxiang and Wang, Shuai and Jabbarvand, Reyhaneh and Marinov, Darko",
        "title": "Artifact for \"Revisiting Test-Case Prioritization on Long-Running Test Suites\" (ISSTA 2024)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12662090",
        "abstract": "<p>This is the artifact of the research paper “Revisiting Test-Case\nPrioritization on Long-Running Test Suites” in ISSTA 2024.</p>\n<p>This artifact provides a quick walkthrough of its general\nfunctionality (e.g., downloading and extracting data from more builds,\nrunning TCP techniques) using one of the evaluated projects as an\nexample, and steps to produce tables and figures analyzed in the paper’s\nevaluation section.</p>\n<p>This artifact provides: (1) steps to download and use the full\ndataset of Long-Running Test Suites (LRTS) we previously collected; (2)\nscripts to collect more builds from the evaluated projects; (3)\nimplementations of different categories of test-case prioritization\n(TCP) algorithms (time-based, history-based,\ninformation-retrieval-based, ML-based, RL-based); (4) experiment scripts\nto evaluate the implemented TCP algorithms on the collected, extensible\ndataset.</p>",
        "keywords": "regression testing, reliability, Software testing, test prioritization",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.12662219": {
        "doi": "10.5281/zenodo.12662219",
        "author": "Cui, Di and Wang, Qiangqiang and Zhao, Yutong and Wang, Jiaqi and Wei, Minjie and Hu, Jingzhao and Wang, Luqiao and Li, Qingshan",
        "title": "HECS: A Hypergraph Learning-based System for Detecting Extract Class Refactoring Opportunities",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12662219",
        "abstract": "<p>HECS is an advanced tool designed for Extract Class refactoring by\nleveraging hypergraph learning to model complex dependencies within\nlarge classes. Unlike traditional tools that rely on direct oneto-one\ndependency graphs, HECS uses intra-class dependency hypergraphs to\ncapture one-to-many relationships. This allows HECS to provide more\naccurate and relevant refactoring suggestions. The tool constructs\nhypergraphs for each target class, attributes nodes using a pre-trained\ncode model, and trains an enhanced hypergraph neural network. Coupled\nwith a large language model, HECS delivers practical refactoring\nsuggestions. In evaluations on largescale and real-world datasets, HECS\nachieved a 38.5\\% increase in precision, 9.7\\% in recall, and 44.4\\% in\nf1-measure compared to JDeodorant, SSECS, and LLMRefactor. These\nimprovements make HECS a valuable tool for developers, offering\npractical insights and enhancing existing refactoring techniques.</p>",
        "keywords": "Extract Class Refactoring, Hypergraph Neural Network",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.12663279": {
        "doi": "10.5281/zenodo.12663279",
        "author": "Nguyen, Thanh-Dat and Do-Viet, Tung and Nguyen-Duy, Hung and Luu, Tuan-Hai and Le, Hung and Le, Bach and Thongtanunam, Patanamon",
        "title": "VRDSynth Replication Package",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12663279",
        "abstract": "<p>Full replication package of VRDSynth</p>",
        "keywords": "Automatic Programming, Information Extraction, Program Synthesis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.12664081": {
        "doi": "10.5281/zenodo.12664081",
        "author": "Wang, Jikai and Wang, Haoyu",
        "title": "Artifact for \"NativeSummary: Summarizing Native Binary Code for Inter-language Static Analysis of Android Apps\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12664081",
        "abstract": "<p>NativeSummary is a new inter-language Android application static\nanalysis framework using static analysis (based on BinAbsInspector)\ninstead of symbolic execution to make binary code analysis more\nefficient. To make binary analysis results more generic, we translate\nthe semantic summary extracted from binary code to java bytecode, inject\nthe generated method body into the corresponding native method on the\njava side, and repack it as a new apk file.</p>",
        "keywords": "Android, Mobile Security, Static Analysis",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12664230": {
        "doi": "10.5281/zenodo.12664230",
        "author": "Zhang, Zhijie and Chen, Liwei and Wei, Haolai and Shi, Gang and Meng, Dan",
        "title": "Reproduction Package of \"Prospector: Boosting Directed Greybox Fuzzing for Large-Scale Target Sets with Iterative Prioritization\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12664230",
        "abstract": "<p>In order to support open science, we provide a supplementary material\ncontaining the source code of Prospector, the experimental scripts for\ninstrumentation, fuzzing and crash triaging, the data generated in our\nexperiments, as well as Dockerfile for building Docker images. With\nthese resources, we aim to provide a robust foundation for replicating\nand validating our work.</p>",
        "keywords": "bug finding, directed fuzzing",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12665353": {
        "doi": "10.5281/zenodo.12665353",
        "author": "Fiter\\u{a",
        "title": "SMBugFinder: An Automated Framework for Testing Protocol Implementations for State Machine Bugs",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12665353",
        "abstract": "<p>Source code of the SMBugFinder at the time of the submission of the\nISSTA’24 paper with the above title.</p>",
        "keywords": "model checking, model-based testing, network protocols, protocol security, protocol state fuzzing, Software security",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12667479": {
        "doi": "10.5281/zenodo.12667479",
        "author": "Jajal, Purvish and Jiang, Wenxin and Tewari, Arav and Kocinare, Erik and Woo, Joseph and Sarraf, Anusha and Lu, Yung-Hsiang and Thiruvathukal, George K. and Davis, James C.",
        "title": "Interoperability in Deep Learning: A User Survey and Failure Analysis of ONNX Model Converters",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12667479",
        "abstract": "<p>This is the artifact for Interoperability in Deep Learning: A User\nSurvey and Failure Analysis of ONNX Model Converters, that will be\npresented at the 2024 International Symposium on Software Testing and\nAnalysis (ISSTA).</p>\n<p>Instructions are in the README.</p>",
        "keywords": "Empirical software engineering, ONNX, Software Engineering",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.12668172": {
        "doi": "10.5281/zenodo.12668172",
        "author": "Wei, Haolai and Chen, Liwei and Zhang, Zhijie and Shi, Gang and Meng, Dan",
        "title": "Artifact of the ISSTA 2024 paper -- \"Sleuth: A Switchable Dual-Mode Fuzzer to Investigate Bug Impacts Following a Single PoC\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12668172",
        "abstract": "<p>Sleuth is an open-source fuzzer for automatically discovering bug\nimpacts following a single PoC. It is based on LLVM and the fuzzing tool\nAFL++. It employs SVF to construct the memory-relevant graph, and\nutilizes this graph to guide Fuzzer to efficiently discover new bug\nimpacts.</p>\n<p>The artifact contains a docker image and the source code with a\nREADEME file. The current version still has some cumbersome user\ninteractions. We will optimize this part in the future and release a\nmore stable version.</p>",
        "keywords": "Bug impact, Fuzzing, Patch testing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12668777": {
        "doi": "10.5281/zenodo.12668777",
        "author": "Mazouni, Quentin and Spieker, Helge and Gotlieb, Arnaud and Acher, Mathieu",
        "title": "Policy Testing with MDPFuzz (Replicability Study)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12668777",
        "abstract": "<p>This is the artifact implementing our replicability study of the\npolicy testing method MDPFuzz. The artifact is hosted on Zenodo as well\nas on GitHub. It contains all the source code for reproducing the\nexperiments of the paper. In particular, we provide detailed\ninstructions and a Dockerfile that can be used to build a Docker image\nand run the artifact as a Docker container. We also release the Docker\nimage on Docker Hub.</p>",
        "keywords": "Reinforcement Learning, Replicability, Software Testing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12668852": {
        "doi": "10.5281/zenodo.12668852",
        "author": "Gulcan, Ege Berkay and Neto, Jo\\~{a",
        "title": "Archived Repository of \"Generalized Concurrency Testing Tool for Distributed Systems\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12668852",
        "abstract": "<p>This artifact is a repository, containing the archived version of our\npaper “Generalized Concurrency Testing Tool for Distributed\nSystems”.</p>",
        "keywords": "Concurrency testing, Distributed systems",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12669081": {
        "doi": "10.5281/zenodo.12669081",
        "author": "Saha, Antu and Song, Yang and Mahmud, Junayed and Zhou, Ying and Moran, Kevin and Chaparro, Oscar",
        "title": "Toward the Automated Localization of Buggy Mobile App UIs from Bug Descriptions",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12669081",
        "abstract": "<p>This is the replication package for the ISSTA’24 paper titled “Toward\nthe Automated Localization of Buggy Mobile App UIs from Bug\nDescriptions”. Authors: Antu Saha, Yang Song, Junayed Mahmud, Ying Zhou,\nKevin Moran, and Oscar Chaparro</p>\n<p>Please visit the latest version (currently v5) for the most updated\nartifacts.</p>",
        "keywords": "Bug Reports, Information Retrieval, Mobile Applications, UI Data",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/sea-lab-wm/Toward-Automating-the-Localization-of-Buggy-UIs-Anonymized"
    },
    "10.5281/zenodo.12669148": {
        "doi": "10.5281/zenodo.12669148",
        "author": "Blumschein, Christoph and Niephaus, Fabio and Stancu, Codru\\c{t",
        "title": "Finding Cuts in Static Analysis Graphs to Debloat Software - Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12669148",
        "abstract": "<p>This artifact consists of two parts: the CutTool as described in\nsection 5.2 of our paper, and evaluation scripts for reproducing the\nresults of section 6.3 and 6.4.</p>",
        "keywords": "CutTool",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.12669650": {
        "doi": "10.5281/zenodo.12669650",
        "author": "Yan, Xiaoyong and He, Biao and Shen, Wenbo and Ouyang, Yu and Zhou, Kaihang and Zhang, Xingjian and Wang, Xingyu and Cao, Yukai and Chang, Rui",
        "title": "DIVER",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12669650",
        "abstract": "<p>DIVER is the first tool to automatically analyse data binding\nvulnerabilities in Java web frameworks. DIVER employs three new\ntechniques: the Nested Property Graph-based Extraction to extract nested\nproperties, the Bind-Site Instrumentation-based Identification to\nidentify bindable nested properties, and the Property-aware Fuzzing to\ntrigger and detect data binding vulnerabilities.</p>",
        "keywords": "data binding vulnerability, Java web framework",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12669708": {
        "doi": "10.5281/zenodo.12669708",
        "author": "Tan, Jovyn and Rigger, Manuel",
        "title": "Artefact for \"Inconsistencies in TeX-Produced Documents\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12669708",
        "abstract": "<p>This artefact comprises:</p>\n<ul>\n<li>The source code of our automated tool</li>\n<li>The data and results from running this tool, as well as relevant\nconfigurations, for:\n<ul>\n<li>RQ1 (Cross-engine comparisons)</li>\n<li>RQ2 (Cross-version comparisons)</li>\n<li>RQ3 (Root cause analysis)</li>\n<li>Motivating study</li>\n<li>Alignment study</li>\n</ul></li>\n</ul>\n<p>More details are included in <code>README.md</code> found in the root\ndirectory.</p>",
        "keywords": "LaTeX, PDF documents, TeX, typesetting",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12669927": {
        "doi": "10.5281/zenodo.12669927",
        "author": "Go, Gwihwan and Zhou, Chijin and Zhang, Quan and Zou, Xiazijian and Shi, Heyuan and Jiang, Yu",
        "title": "DeepConstr",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12669927",
        "abstract": "<p>Artifact of the paper “Towards More Complete Constraints for Deep\nLearning Library Testing via Complementary Set Guided Refinement”</p>",
        "keywords": "DL library, Fuzzing, Large Language Model",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12669964": {
        "doi": "10.5281/zenodo.12669964",
        "author": "Zhang, Mengxiao and Tian, Yongqiang and Xu, Zhenyang and Dong, Yiwen and Tan, Shin Hwei and Sun, Chengnian",
        "title": "Artifact for \"LPR: Large Language Models-Aided Program Reduction\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12669964",
        "abstract": "<p>This is the artifact for the paper “LPR: Large Language Models-Aided\nProgram Reduction”</p>",
        "keywords": "compiler testing, debugging, LLM, program reduction",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12670050": {
        "doi": "10.5281/zenodo.12670050",
        "author": "Chen, Yang and Jabbarvand, Reyhaneh",
        "title": "Artifact for \"Neurosymbolic Repair of Test Flakiness\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12670050",
        "abstract": "<p>This is the artifact for “Neurosymbolic Repair of Test\nFlakiness”.</p>",
        "keywords": "Large Language Models, Program Repair, Test Flakiness",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.12670309": {
        "doi": "10.5281/zenodo.12670309",
        "author": "Cao, Shangtong and He, Ningyu and She, Xinyu and Zhang, Yixuan and Zhang, Mu and Wang, Haoyu",
        "title": "WASMaker: Differential Testing of WebAssembly Runtimes via Semantic-aware Binary Generation",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12670309",
        "abstract": "<p>WASMaker, a novel differential testing framework that can generate\ncomplicated Wasm test cases by disassembling and assembling real-world\nWasm binaries, which can trigger hidden inconsistencies among Wasm\nruntimes.</p>",
        "keywords": "Differential Testing, WebAssembly",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12670528": {
        "doi": "10.5281/zenodo.12670528",
        "author": "Liu, Shuang and Lan, Junhao and Du, Xiaoning and Li, Jiyuan and Lu, Wei and Jiang, Jiajun and Du, Xiaoyong",
        "title": "Reproduction Package for Article \"Testing Graph Database Systems with Graph-State Persistence Oracle\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12670528",
        "abstract": "<p>The artifact contains the source code(including the configuration\nfile) of GraspDB and the executable jar file.One can follow the\ninstructions in the readme documentation to reproduce the results of our\nexperiment as well as to detect bugs.</p>",
        "keywords": "Database Testing, Graph Database, Writing-related Bug",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/ljhhuxiaoba/GraspDB-main/tree/v1.1.0"
    },
    "10.5281/zenodo.12670597": {
        "doi": "10.5281/zenodo.12670597",
        "author": "Nguyen, Huan and Priyadarshan, Soumyakant and Sekar, R.",
        "title": "Reproduction Package for the ISSTA 2024 Article 'Scalable, Sound and Accurate Jump Table Analysis'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12670597",
        "abstract": "<p>This artifact contains our state-of-the-art jump table analyzer,\nwhich is accepted for presentation at the ACM SIGSOFT International\nSymposium on Software Testing and Analysis (ISSTA) 2024. We ship our\nartifact as a VM that contains our source code and the scripts used to\nobtain the results in the paper.</p>",
        "keywords": "Binary Analysis, Program Analysis, Reverse Engineering, Static Analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12671411": {
        "doi": "10.5281/zenodo.12671411",
        "author": "Liu, Yunqi and Song, Wei",
        "title": "Reproduction Package of ‘FunRedisp: Reordering Function Dispatch in Smart Contract to Reduce Invocation Gas Fees’",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12671411",
        "abstract": "<p>FunRedisp is a function dispatch refactoring tool to reduce the\noverall invocation gas consumption of Solidity smart contracts.</p>",
        "keywords": "Ethereum, function dispatch, gas optimization, refactoring, smart contract, Solidity",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12671638": {
        "doi": "10.5281/zenodo.12671638",
        "author": "Guan, Hao and Bai, Guangdong and Liu, Yepang",
        "title": "Prototype of YanHui, the tools in `Large Language Models Can Connect the Dots: Exploring Model Optimization Bugs with Domain Knowledge-Aware Prompts'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12671638",
        "abstract": "<p>Prototype of YanHui, including the data and labels for GitHub issues.\nCode to generate test cases with large language models.</p>",
        "keywords": "Large Language Model, Library Testing, Model Optimization",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/YanHui-2024/YanHui/tree/2024-07-05"
    },
    "10.5281/zenodo.12673450": {
        "doi": "10.5281/zenodo.12673450",
        "author": "Liu, Zengyu and Chen, Liqian and Liu, Wanwei and Wang, Ji",
        "title": "Synthesizing Boxes Preconditions for Deep Neural Networks",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12673450",
        "abstract": "<p>This repository contains the artifact of the following ISSTA 2024\npaper. Zengyu Liu, Liqian Chen, Wanwei Liu and Ji Wang. Synthesizing\nBoxes Preconditions for Deep Neural Networks</p>",
        "keywords": "Boxes, Neural Network, Precondition Synthesis, Robustness, Safety",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.12771889": {
        "doi": "10.5281/zenodo.12771889",
        "author": "Zheng, Yingying and Dou, Wensheng and Tang, Lei and Cui, Ziyu and Gao, Yu and Song, Jiansen and Xu, Liang and Zhu, Jiaxin and Wang, Wei and Wei, Jun and Zhong, Hua and Huang, Tao",
        "title": "Testing Gremlin-Based Graph Database Systems via Query Disassembling",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12771889",
        "abstract": "<p>Query disassembling (QuDi) is an effective testing technique to\nautomatically detect logic bugs in individual graph database systems\n(GDBs). By disassembling a complex graph query into an equivalent atomic\ngraph traversal sequence, we can reveal logic bugs related to incorrect\nimplementations and optimizations of Gremlin queries in GDBs.</p>\n<p>We evaluate QuDi on six widely-used Gremlin-based GDBs, i.e., Neo4j,\nOrientDB, JanusGraph, HugeGraph, TinkerGraph, and ArcadeDB. In total, we\nhave found 25 logic bugs in these six GDBs, and 10 of them have been\nconfirmed as previously-unknown bugs by GDB developers.</p>",
        "keywords": "bug detection, Graph database systems, graph traversal, logic bug",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12786604": {
        "doi": "10.5281/zenodo.12786604",
        "author": "Kim, Hyungseok and Kim, Soomin and Lee, Jungwoo and Cha, Sang Kil",
        "title": "AsFuzzer: Differential Testing of Assemblers with Error-Driven Grammar Inference",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12786604",
        "abstract": "<p>This is an artifact for `AsFuzzer: Differential Testing of Assemblers\nwith Error-Driven Grammar Inference’, which will be published in the ACM\nSIGSOFT International Symposium on Software Testing and Analysis (ISSTA\n2024). AsFuzzer is an assembler testing tool that detects potential bugs\nin assemblers. The artifact includes the implementation of AsFuzzer,\nexperimental scripts, and the four real-world assemblers used in the\npaper.</p>",
        "keywords": "assembler testing, compiler testing, grammar inference",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12792159": {
        "doi": "10.5281/zenodo.12792159",
        "author": "He, Dongnan and Xie, Dongchen and Wang, Yujie and You, Wei and Liang, Bin and Huang, Jianjun and Shi, Wenchang and Zhang, Zhuo and Zhang, Xiangyu",
        "title": "Artifact for \"Define-Use Guided Path Exploration for Better Forced Execution\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12792159",
        "abstract": "<p>This artifact contains supplementary material for the paper\n“Define-Use Guided Path Exploration for Better Forced Execution”\n(ISSTA’24). The artifact contains a docker image and a READEME file.</p>",
        "keywords": "dynamic analysis, forced execution, path exploration",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13147364": {
        "doi": "10.5281/zenodo.13147364",
        "author": "Hayet, Ishrak and Scott, Adam and d'Amorim, Marcelo",
        "title": "Incompleter (source and dataset)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13147364",
        "abstract": "<p>This artifact includes the source and three datasets used for the\npaper “Feedback-Directed Partial Execution”.</p>",
        "keywords": "Code completion, Debugging, Rule mining",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.13340387": {
        "doi": "10.5281/zenodo.13340387",
        "author": "Xu, Qingxin and Gao, Yu and Wei, Jun",
        "title": "Dataset for ISSTA'24 An Empirical Study on Kubernetes Operator Bugs",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13340387",
        "abstract": "<p>This is the dataset for the ISSTA’24 submission An Empirical Study on\nKubernetes Operator Bugs. It contains 210 operator bugs collected from\n36 popular Kubernetes operators.</p>\n<p>It can be used to replicate and reproduce the paper’s study, as well\nas to serve as a bug benchmark for future work on combating operator\nbugs in Kubernetes.</p>",
        "keywords": "empirical study, Kubernetes, operation, operator bugs",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.13625004": {
        "doi": "10.5281/zenodo.13625004",
        "author": "Hu, Tianmin and Ye, Guixin and Tang, Zhanyong and Tan, Shin Hwei and Wang, Huanting and Li, Meng and Wang, Zheng",
        "title": "Artifact for the paper \"Upbeat: Test Input Checks of Q# Quantum Libraries\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13625004",
        "abstract": "<p>Upbeat is a fuzzing tool designed to generate random test cases for\nidentifying input-checking bugs in Q# libraries. This artifact includes\nthe source code and necessary data for Upbeat, along with documentation\nto guide users through installation and usage, ensuring a smooth and\nconvenient experience.</p>",
        "keywords": "Fuzzing, Quantum computing, Software testing",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.13690435": {
        "doi": "10.5281/zenodo.13690435",
        "author": "Xie, Linna and Li, Chongmin and Pei, Yu and Zhang, Tian and Pan, Minxue",
        "title": "BRAFAR: Bidirectional Refactoring, Alignment, Fault Localization, and Repair for Programming Assignments Linna Xie, Chongmin Li, Yu Pei, Tian Zhang, and Minxue Pan",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13690435",
        "abstract": "<p>The published version of this work.</p>",
        "keywords": "Program Repair, Programming Education, Software Refactoring",
        "badges": [
            "available",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/LinnaX7/brafar-python/tree/brafar-python"
    },
    "10.5281/zenodo.13119225": {
        "doi": "10.5281/zenodo.13119225",
        "author": "Norlinder, Jonas and Yang, Albert Mingkun and Black-Schaffer, David and Wrigstad, Tobias",
        "title": "Mutator-Driven Object Placement using Load Barriers (code)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13119225",
        "abstract": "<p>This artefact contains the implementation of LR-Z that was described\nin the paper Mutator-Driven Object Placement using Load Barriers.</p>",
        "keywords": "cache performance, garbage collection, locality",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12453932": {
        "doi": "10.5281/zenodo.12453932",
        "author": "Cassano, Federico and Gouwar, John and Lucchetti, Francesca and Schlesinger, Claire and Freeman, Anders and Anderson, Carolyn Jane and Feldman, Molly Q and Greenberg, Michael and Jangda, Abhinav and Guha, Arjun",
        "title": "Artifact: Knowledge Transfer from High-Resource to Low-Resource Programming Languages for Code LLMs",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12453932",
        "abstract": "<p>The artifact contains the code to fully reproduce the results in the\npaper.</p>",
        "keywords": "large language models trained on code",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.12552491": {
        "doi": "10.5281/zenodo.12552491",
        "author": "Lin, Zhengyao and Gancher, Joshua and Parno, Bryan",
        "title": "FlowCert: Translation Validation for Asynchronous Dataflow Programs via Dynamic Fractional Permissions",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12552491",
        "abstract": "<p>Implementation of FlowCert and evaluation data packaged in a Docker\nimage.</p>",
        "keywords": "Asynchronous Dataflow, Coarse-Grained Reconfigurable Arrays, Translation Validation",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12604575": {
        "doi": "10.5281/zenodo.12604575",
        "author": "Le, Callista and Gopinathan, Kiran and Lee, Koon Wen and Gilbert, Seth and Sergey, Ilya",
        "title": "OBatcher: Implementation, Data Structures, and Experiments (OOPSLA'24 Artefact) Creators",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12604575",
        "abstract": "<p>This release snapshots the functionality of the submitted artefact\nfor the OBatcher framework and data structures described in the OOPSLA\n24 paper “Concurrent Data Structures Made Easy”:</p>\n<ul>\n<li><p>Docker file with reproducible build environment</p></li>\n<li><p>Readme with getting started and step-by-step\ninstructions</p></li>\n<li><p>Source code and build files for OBatcher</p></li>\n<li><p>Instantiation of the OBatcher framework in Rust</p></li>\n<li><p>Benchmark code and scripts to reproduce the 33 graphs presented\nin the paper</p></li>\n</ul>",
        "keywords": "batched data structures, batching, concurrency, OCaml, programming languages, Rust",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12627576": {
        "doi": "10.5281/zenodo.12627576",
        "author": "Nagy, Shaan and Kim, Jinwoo and Reps, Thomas and D’Antoni, Loris",
        "title": "Wuldo Unrealizability Logic Proof Synthesizer",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12627576",
        "abstract": "<p>Automated verification of all members of a (potentially infinite) set\nof programs has the potential to be useful in program synthesis, as well\nas in verification of dynamically loaded code, concurrent code, and\nlanguage properties. Existing techniques for verification of sets of\nprograms are limited in scope and unable to create or use interpretable\nor reusable information about sets of programs. The consequence is that\none cannot learn anything from one verification problem that can be used\nin another. Unrealizability logic (UL), proposed by Kim et al.&nbsp;as the\nfirst Hoare-style proof system to prove properties over sets of programs\n(defined by a regular tree grammar), presents a theoretical framework\nthat can express and use reusable insight. In particular, UL features\nnonterminal summaries—inductive facts that characterize recursive\nnonterminals (analogous to procedure summaries in Hoare logic). In this\nwork, we design the first UL proof synthesis algorithm, implemented as\nWuldo. Specifically, we decouple the problem of deciding how to apply UL\nrules from the problem of synthesizing/checking nonterminal summaries by\ncomputing proof structure in a fully syntax-directed fashion. We show\nthat Wuldo, when provided nonterminal summaries, can express and prove\nverification problems beyond the reach of existing tools, including\nestablishing how infinitely many programs behave on infinitely many\ninputs. In some cases, Wuldo can even synthesize the necessary\nnonterminal summaries. Moreover, Wuldo can reuse previously proven\nnonterminal summaries across verification queries, making verification\n1.96 times as fast as when summaries are instead proven from\nscratch.</p>",
        "keywords": "automated reasoning, infinite sets of programs, Unrealizability logic",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12637140": {
        "doi": "10.5281/zenodo.12637140",
        "author": "Schwartz, David and Kowshik, Ankith and Pina, Lu\\'{\\i",
        "title": "Artifact for Jmvx: Fast Multi-threaded Multi-Version eXecution and Record-Replay for Managed Languages",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12637140",
        "abstract": "<p>Java Multi-Version Execution (JMVX) is a tool for performing\nMulti-Version Execution (MVX) and Record Replay (RR) in Java.</p>\n<p>Most tools for MVX and RR observe the behavior of a program at a low\nlevel, e.g., by looking at system calls.</p>\n<p>Unfortunately, this approach fails for high level language virtual\nmachines due to benign divergences (differences in behavior that\naccomplish that same result) introduced by the virtual machine –\nparticularly by garbage collection and just-in-time compilation.</p>\n<p>In other words, the management of the virtual machines creates\ndiffering sequences of system calls that lead existing tools to believe\na program has diverged, when in practice, the application running on top\nof the VM has not.</p>\n<p>JMVX takes a different approach, opting instead to add MVX and RR\nlogic into the bytecode of compiled programs running in the VM to avoid\nbenign divergences related to VM management.</p>\n<p>This artifact is a docker image that will create a container holding\nour source code, compiled system, and experiments with JMVX.</p>\n<p>The image allows you to run the experiments we used to address the\nresearch questions from the paper (from Section 4).</p>\n<p>This artifact is desiged to show:</p>\n<p>[Supported] JMVX performs MVX for Java [Supported] JMVX performs RR\nfor Java [Supported] JMVX is performant</p>",
        "keywords": "deterministic replay, Multi-version execution, record replay, reproducible debugging",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12637589": {
        "doi": "10.5281/zenodo.12637589",
        "author": "Raad, Azalea and Vanegue, Julien and O’Hearn, Peter",
        "title": "Non Termination Proving At Scale: Artifact (Pulse Infinite)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12637589",
        "abstract": "<p>This package contains the Pulse-Infinite project source code\ndistributed as part of the Infer framework as of 7/6/24.</p>\n<p>For the most recent version of Pulse-Infinite, please consult:\nhttps://github.com/jvanegue/infer/</p>",
        "keywords": "incorrectness, infer, logic, separation, termination",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12654518": {
        "doi": "10.5281/zenodo.12654518",
        "author": "Torczon, Cassia and Su\\'{a",
        "title": "Artifact Associated with \"Effects and Coeffects in Call-by-Push-Value\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12654518",
        "abstract": "<p>Coq mechanization of definitions and theorems</p>",
        "keywords": "CBPV, Coeffects, Coq, Effects",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12659527": {
        "doi": "10.5281/zenodo.12659527",
        "author": "Haselwarter, Philipp G. and Li, Kwing Hei and de Medeiros, Markus and Gregersen, Simon Oddershede and Aguirre, Alejandro and Tassarotti, Joseph and Birkedal, Lars",
        "title": "Tachis: Higher-Order Separation Logic with Credits for Expected Costs - Coq Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12659527",
        "abstract": "<p>Formalization of the results of the paper “Tachis: Higher-Order\nSeparation Logic with Credits for Expected Costs” in the Coq proof\nassistant.</p>",
        "keywords": "expected time complexity, probabilistic programs, resource analysis",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12663344": {
        "doi": "10.5281/zenodo.12663344",
        "author": "Yan, Zhenyu and Zhang, Xin and Di, Peng",
        "title": "Scaling Abstraction Refinement for Program Analyses in Datalog Using Graph Neural Networks (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12663344",
        "abstract": "<p>This is the artifact of the paper Scaling Abstraction Refinement for\nProgram Analyses in Datalog Using Graph Neural Networks to appear in\nOOPSLA 2024.</p>",
        "keywords": "abstraction refinement, graph neural networks, program analysis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.12666682": {
        "doi": "10.5281/zenodo.12666682",
        "author": "Liew, Dennis and Cogumbreiro, Tiago and Lange, Julien",
        "title": "Sound and partially-complete static analysis of data-races in GPU programs (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12666682",
        "abstract": "<p>An artifact with all the tools and datasets presented in Section 6,\nand mechanized proofs of the theoretical results mentioned in Section\n4.4.</p>",
        "keywords": "data-race detection, GPU programming, static analysis, true positives",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12668895": {
        "doi": "10.5281/zenodo.12668895",
        "author": "Drosos, Georgios-Petros and Sotiropoulos, Thodoris and Alexopoulos, Georgios and Mitropoulos, Dimitris and Su, Zhendong",
        "title": "Reproduction Package for Article: \"When Your Infrastructure Is a Buggy Program: Understanding Faults in Infrastructure as Code Ecosystems",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12668895",
        "abstract": "<p>The purpose of this artifact is (1) to reproduce the results\npresented in the OOPSLA 2024 paper titled “When Your Infrastructure Is a\nBuggy Program: Understanding Faults in Infrastructure as Code\nEcosystems”, and (2) to document the dataset and the proposed\ncategorization in order to facilitate further research. Specifically,\nthe artifact has the following structure:</p>\n<ul>\n<li><code>scripts/</code>: This directory contains the scripts necessary\nto replicate the findings, figures, and tables introduced in our\nstudy.</li>\n<li><code>scripts/fetch/</code>: This directory contains the scripts\nrequired to assemble the dataset of IaC bugs as outlined in Section 3.1\nof our study (i.e., this directory includes the code for our repository\ncollection gathering and bug collection stages).</li>\n<li><code>data/</code>: This directory contains the initial bug dataset\nof the data collection phase as well as the “pre-baked” dataset of the\n360 IaC bugs under study.</li>\n<li><code>figures/</code>: A directory which is going to store the\nproduced paper figures.</li>\n<li><code>requirements.txt</code>: A textual file declaring the required\nPyPI libraries to run our analysis.</li>\n</ul>",
        "keywords": "Ansible, bug, Chef, deployment, IaC, infrastructure as code, Puppet",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/gdrosos/iac-bug-study-artifact/tree/v1.0"
    },
    "10.5281/zenodo.12669479": {
        "doi": "10.5281/zenodo.12669479",
        "author": "Blinn, Andrew and Li, Xiang and Kim, June Hyung and Omar, Cyrus",
        "title": "Artifact for Statically Contextualizing Large Language Models with Typed Holes",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12669479",
        "abstract": "<p>Artifact for the paper ‘Artifact for Statically Contextualizing Large\nLanguage Models with Typed Holes’, to be published at OOPSLA2024. The\nartifact consists of raw data from the experiments, the testing harness\nused, the source for the Hazel Editor and Langauge Server, and a copy of\nthe StarCoder2 LLM weights. The archive is password protected to prevent\nthe benchmark data set from being automatically scrapped; see the Zenodo\ndescription for the password.</p>",
        "keywords": "Large Language Models, Program Synthesis, Programming Languages, Types",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12669572": {
        "doi": "10.5281/zenodo.12669572",
        "author": "Pham, Long and Wang, Di and Saad, Feras A. and Hoffmann, Jan",
        "title": "Artifact for Programmable MCMC with Soundly Composed Guide Programs",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12669572",
        "abstract": "<p>In probabilistic programming with a newly proposed coroutine-based\nprogrammable inference framework, the user provides (i) a model\ncoroutine and (ii) a sequential composition of guide coroutines. The\nmodel coroutine specifies a probabilistic model for Bayesian inference.\nMeanwhile, the sequential composition of guide coroutines customizes the\nBlock Metropolis-Hastings (BMH) algorithm, where we successively run the\nguide coroutines, each of which is followed by an MH acceptance routine.\nEach guide coroutine only updates a subset (i.e., block) of random\nvariables. The model and guide coroutines communicate with one another\nby message passing, and their communication protocols are described by\nguide types.</p>\n<p>This artifact is a program analysis tool for statically checking the\nsoundness of a probabilistic program in this coroutine-based framework.\nThe artifact offers three functionalities: - Type-equality checking:\ncheck structural type equality of guide types. - Type inference: infer\nguide types of model and guide coroutines (using the first functionality\nfor structural-type-equality checking) - Coverage checking: check\nwhether the support of sequentially composed guide coroutines coincides\nwith the support of a model coroutine.</p>",
        "keywords": "Bayesian inference, context-free types, coroutines, probabilistic programming, type systems",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12669638": {
        "doi": "10.5281/zenodo.12669638",
        "author": "Zhang, Chengyu and Su, Zhendong",
        "title": "SMT2Test: From SMT Formulas to Effective Test Cases",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12669638",
        "abstract": "<p>The main focus of this artifact is to help people 1) validate the\nfunctionality of the bugfinding tool SMT2Test, 2) check the bug\ntriggering test cases reported in the paper, 3) reproduce the\nperformance evaluation. This artifact includes the implementation of\nSMT2Test, bug-triggering test cases, seed formulas, and scripts for\nreproducing the experiments.</p>",
        "keywords": "program verification, SMT solving, software testing",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12669773": {
        "doi": "10.5281/zenodo.12669773",
        "author": "Johnson, Keith J.C. and Krishnan, Rahul and Reps, Thomas and D’Antoni, Loris",
        "title": "Automating Pruning in Top-Down Enumeration for Program Synthesis Problems with Monotonic Semantics",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12669773",
        "abstract": "<p>This is the artifact submission for OOPSLA’24 (R2) submission #377:\nAutomating Pruning in Top-Down Enumeration for Program Synthesis\nProblems with Monotonic Semantics</p>",
        "keywords": "abstract interpretation, grammar flow analysis, program synthesis",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12669929": {
        "doi": "10.5281/zenodo.12669929",
        "author": "Zhou, Litao and Wan, Qianyong and Oliveira, Bruno C. d. S.",
        "title": "Artifact for \"Full Iso-Recursive Types\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12669929",
        "abstract": "<p>This artifact accompanies the OOPSLA’24 paper titled Full\nIso-recursive Types. It provides the Coq formalization of the proofs\ndiscussed in the paper, including a pre-configured Docker image for easy\nverification and the original source code for those who wish to build\nthe proofs manually. The artifact includes all necessary scripts, proof\nfiles, and dependencies to reproduce the results presented in the paper,\nwith a focus on the formalization of iso-recursive types and their\nextensions.</p>",
        "keywords": "Coq, Mechanized Proof, Recursive types, Subtyping, Type system",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12670155": {
        "doi": "10.5281/zenodo.12670155",
        "author": "Sistla, Meghana and Chaudhuri, Swarat and Reps, Thomas",
        "title": "Weighted CFLOBDDs",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12670155",
        "abstract": "<p>The artifact contains source code and experiments to run Weighted\nCFLOBDDs (WCFLOBDDs)</p>",
        "keywords": "quantum simulation, Weighted decision diagrams",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.12670476": {
        "doi": "10.5281/zenodo.12670476",
        "author": "Reitz, Antonin and Fromherz, Aymeric and Protzenko, Jonathan",
        "title": "Artifact for OOPSLA 2024 paper: StarMalloc: Verifying a Modern, Hardened Memory Allocator",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12670476",
        "abstract": "<p>This is the artifact for the OOPSLA 2024 paper: StarMalloc: Verifying\na Modern, Hardened Memory Allocator. It includes the F* sources for\nStarMalloc, the generated C code, and the experimental setup to\nreproduce experiments presented in the paper.</p>",
        "keywords": "Formal Verification, Memory Allocators, Separation Logic",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12670660": {
        "doi": "10.5281/zenodo.12670660",
        "author": "Wang, Qian and Jung, Ralf",
        "title": "Reproduction Image for Article 'Rustlantis: Randomized Differential Testing of the Rust Compiler'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12670660",
        "abstract": "<p>Docker image to reproduce evaluations in OOPSLA 2024 paper\nRustlantis: Randomized Differential Testing of the Rust Compiler.</p>",
        "keywords": "Compiler testing, Differential fuzzing, Rust",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12671461": {
        "doi": "10.5281/zenodo.12671461",
        "author": "Li, Yichuan and Song, Wei and Huang, Jeff",
        "title": "VarLifter: Recovering Variables and Types from Bytecode of Solidity Smart Contracts",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12671461",
        "abstract": "<p>The artifact presented here is VarLifter, a tool designed to lift\nvariables and their types from compiled Solidity smart contract runtime\nbytecode. VarLifter provides precise variable and type information,\nfreeing researchers from the burden of dealing with intricate low-level\ndetails, and is proven to assist downstream tasks related to smart\ncontracts. VarLifter supports both command-line interface (CLI) and\ngraphical user interface (GUI) for ease of use.</p>",
        "keywords": "Blockchain, EVM, smart contract, Solidity bytecode, variable recovery",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.12671562": {
        "doi": "10.5281/zenodo.12671562",
        "author": "Dardinier, Thibault and Li, Anqi and M\\\"{u",
        "title": "Hypra: A Deductive Program Verifier for Hyperproperties (artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12671562",
        "abstract": "<p>This artifact consists of: - Our tool Hypra. - Our evaluation, with\ninstructions to replicate it. - An Isabelle/HOL proof of the soundness\nof the novel loop rule described in section 4.2 (Theorem 1), as well as\nLemma 1.</p>\n<p>The artifact is a VirtualBox VM image with Ubuntu 24.04 LTS that\ncontains our tool Hypra, all benchmarks used in our evaluation, Isabelle\n2024, and our Isabelle/HOL formalization. It uses 8GB of RAM and two\ncores by default.</p>",
        "keywords": "automated reasoning, deductive verification, hyperproperties, incorrectness logic",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12671619": {
        "doi": "10.5281/zenodo.12671619",
        "author": "Zhou, Chijin and Qian, Bingzhou and Go, Gwihwan and Zhang, Quan and Li, Shanshan and Jiang, Yu",
        "title": "PolyJuice: Detecting Mis-Compilation Bugs in Tensor Compilers with Equality Saturation Based Rewriting",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12671619",
        "abstract": "<p>This is the artifact for “PolyJuice: Detecting Mis-Compilation Bugs\nin Tensor Compilers with Equality Saturation Based Rewriting”, published\nin SPLASH/OOPSLA 2024. Reproducibility instructions can be found in the\n“oopsla24-polyjuice-artifact.pdf” file.</p>",
        "keywords": "Equality Saturation, Fuzzing, ML System, Tensor Compiler Testing",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12764370": {
        "doi": "10.5281/zenodo.12764370",
        "author": "Dias, Adhitha and Anderson, Logan and Sundararajah, Kirshanthan and Pelenitsyn, Artem and Kulkarni, Milind",
        "title": "Reproduction package of article \"SparseAuto: An Auto-Scheduler for Sparse Tensor Computations Using Recursive Loop Nest Restructuring\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12764370",
        "abstract": "<p>The artifact contains a self contained docker image with the dataset\nand the software package that was used to generate the graphs in the\npaper. The artifact also contains the source files without the docker\nimage. The artifact contains two main directories containing the\nauto-scheduler (written in Python) described in Section 06 in the paper,\nand the language extension to SparseLNR/TACO described in the Section 05\nin the paper.</p>",
        "keywords": "Asymptotic Analysis., Automatic Scheduling, Fusion, Loop Transformations, Sparse Tensor Algebra",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.12775308": {
        "doi": "10.5281/zenodo.12775308",
        "author": "Schenck, Robert and Hinnerskov, Nikolaj Hey and Henriksen, Troels and Madsen, Magnus and Elsman, Martin",
        "title": "futhark-oopsla24",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12775308",
        "abstract": "<p>Artifact for the paper AUTOMAP: Inferring Rank-Polymorphic Function\nApplications with Integer Linear Programming submitted to OOPSLA 24.</p>",
        "keywords": "array programming, constraint-based type systems, data parallelism",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.12783666": {
        "doi": "10.5281/zenodo.12783666",
        "author": "Yang, Chen and Chen, Junjie and Jiang, Jiajun and Huang, Yuliang",
        "title": "Dependency-aware code naturalness",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12783666",
        "abstract": "<p>Docker image and data for the artifact of DAN (dependency-aware code\nnaturalness)</p>",
        "keywords": "Code Entropy, Naturalness, Program Dependency",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.12785373": {
        "doi": "10.5281/zenodo.12785373",
        "author": "Campbell, Eric Hayden and Hojjat, Hossein and Foster, Nate",
        "title": "Capisce Source Code for paper ``Computing Precise Control Interface Specifications''",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12785373",
        "abstract": "<h2 id=\"capisce\">Capisce</h2>\n<p>Capisce is described in the OOPSLA paper entitled <em>Computing\nPrecise Control Interface Specifications</em>.</p>\n<p>The Capisce library comprises two key pieces:</p>\n<ul>\n<li><p>an OCAML library for writing down and specifying data plane\nprograms called <code>GPL</code>.</p>\n<ul>\n<li><p>Example programs can be seen in the\n<code>capisce/programs</code>.</p></li>\n<li><p>The core interface for writing programs can be found in\n<code>capisce/lib/ASTs.ml</code>.</p></li>\n</ul></li>\n<li><p>an instrumentation algorithm to translate <code>GPL</code>\nprograms into programs in the guarded command language</p>\n<ul>\n<li>the instrumentation algorithm <code>GPL.encode_tables</code> van be\nfound in <code>capisce/lib/AST.ml</code></li>\n</ul></li>\n<li><p>an inference algorithm to infer control interface specifications\nfor data plane programs</p>\n<ul>\n<li>The core algorithm (<code>cegqe</code>) can be found in\n<code>capisce/lib/Qe.ml</code>.</li>\n</ul></li>\n</ul>\n<p>Here we list the claims in the paper and how they are supported by\nthe artifact:</p>\n<ol type=\"1\">\n<li><p><em>Capisce compute control interface specifications for real\nprograms.</em> This artifact supports this via its survey of real world\nprograms that have been implemented in our library. We have provided\nscripts to automatically generate the tex for Figures 5 and 6 from the\npaper.</p></li>\n<li><p><em>A small proportion of paths suffice to compute control\ninterface specifications for real programs</em>. This can be seen in the\nfinal column of Figures 5 and 6, as well as qualitatively in Figure 7.\nWe have provided scripts to automatically generate the graphs in Figure\n7.</p></li>\n</ol>\n<h3 id=\"hardware-dependencies\">Hardware Dependencies</h3>\n<p>We ran our experiments on an Ubuntu 22.04.4 server with the following\nspecs: - CPU: Intel(R) Xeon(R) Silver 4216 CPU @ 2.10GHz - RAM: 0.5\nTB</p>\n<h3 id=\"getting-started\">Getting started</h3>\n<p>There are two ways to get started with Docker: using Docker, and\nbuilding from source. We have tested <code>Capisce</code> on Ubuntu\n20.04 and 22.04. We recommend using docker to get started quickly.</p>\n<p>Either way, the first step is to download the source code, by either\ncloning the repository using git, or unpacking the downloaded .zip file.\nThen change into the newly created directory. For instance:</p>\n<pre><code>git clone https://github.com/cornell-netlab/capisce.git\ncd capisce</code></pre>\n<h4 id=\"docker\">Docker</h4>\n<p>The easiest way to get Capisce running is using Docker.</p>\n<ul>\n<li>First install Docker.</li>\n<li>Finally, <code>build</code> and <code>run</code> the docker\nimage</li>\n</ul>\n<pre><code>docker build -t capisce .\ndocker run -it capisce</code></pre>\n<p>Once this succeeds (it may take a while), you should be greeted with\na shell prompt similar to the following:</p>\n<pre><code>opam@1497723f4b4d:~/capisce/capisce$</code></pre>\n<p>Now to build Capisce, run <code>make</code>.</p>\n<p>Verify your build by running <code>./capisce exp -help</code></p>\n<h6 id=\"known-issue\">Known Issue</h6>\n<p>On M1 Macs there may be an issue regarding the a missing\n<code>/lib64/ld-linux-x86-64.so.2</code> file. If you get such an error\ntry building with the flag <code>--platform linux/amd64</code></p>\n<h4 id=\"installing-from-source\">Installing from source</h4>\n<p>Capiscelib is an ocaml library, so we first need to install\n<code>opam</code>. Then, <code>switch</code> to the supported ocaml\ncompiler version</p>\n<pre><code>opam switch create 4.14.0\neval $(opam env)</code></pre>\n<p>Now install some basic ocaml tooling</p>\n<pre><code>opam install dune\nopam install menhir\nopam install utop</code></pre>\n<p>As well as a system dependency:</p>\n<pre><code>sudo apt install libgmp-dev -y</code></pre>\n<p>Now, change into the nested <code>capisce</code> directory\n(i.e.&nbsp;<code>/path/to/repo/capisce/capisce</code>), and install the\ndependencies in the <code>capisce.opam</code> file:</p>\n<pre><code>opam install . --deps-only</code></pre>\n<p>Now you should be ready to build <code>capisce</code> by running\n<code>make</code></p>\n<pre><code>make</code></pre>\n<p>Verify your installation by running\n<code>./capisce exp -help</code></p>\n<h5 id=\"dependencies-for-processing-the-experimental-results\">Dependencies\nfor processing the experimental results</h5>\n<p>The experimental results are processed using some python scripts.\nThey have their own dependencies that need to be installed:</p>\n<pre><code>sudo apt install python3 -y\nsudo apt install python3-pip -y\npip3 install sigfig\npip3 install matplotlib\npip3 install ipython</code></pre>\n<h4 id=\"hello-world-arp\">Hello World: ARP</h4>\n<p>Once you’ve installed <code>Capisce</code>, you can verify it works,\nby computing a specification for the <code>arp</code> program, which can\nbe found in <code>programs/Arp.ml</code>.</p>\n<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb10-1\"><a href=\"#cb10-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># wd: capisce/capisce</span></span>\n<span id=\"cb10-2\"><a href=\"#cb10-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">mkdir</span> ./survey_data_oopsla</span>\n<span id=\"cb10-3\"><a href=\"#cb10-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">./capisce</span> exp arp <span class=\"at\">-out</span> ./survey_data_oopsla <span class=\"at\">-hv</span></span></code></pre></div>\n<p><code>capisce</code> will spit out a collection of SMT formulae whose\nconjunction corresponds to the control interface specification (spec)\nthat enforces there are no invalid header reads (<code>-hv</code>). It\nshould take about 5 seconds.</p>\n<p>If the above command fails, with an error complaining about not being\nable to find <code>../solvers/z3.4.8.13</code> or\n<code>../solvers/princess</code>, you can specify the path to these\nsolvers (in the <code>solvers</code> directory) manually by using the\n<code>-z3</code> and <code>-princess</code> flags. For instance:</p>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb11-1\"><a href=\"#cb11-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">./capisce</span> exp <span class=\"at\">-name</span> arp <span class=\"at\">-hv</span> <span class=\"at\">-out</span> ./survey_data_oopsla <span class=\"at\">-z3</span> /path/to/z3 <span class=\"at\">-princess</span> /path/to/princess</span></code></pre></div>\n<p>In the sequel we will omit the explicit paths flags, but they may\nalways be added if needed.</p>\n<h3 id=\"step-by-step-instructions\">Step By Step Instructions</h3>\n<p>We’ve provided instructions for automatically exercising the\nexperiments using our scripts, and for running them manually.</p>\n<h4 id=\"exercising-the-experiments\">Exercising the Experiments</h4>\n<p>Now you can run the experiments from the paper. These will take\nseveral days. Note that because path selection is done by Z3, there may\nbe some variation in the precise numbers generated by this step.</p>\n<ul>\n<li><p><code>make survey</code> runs the experiments described in\nFigures 5 and 6. The output can be seen in\n<code>./survey_data_oopsla</code>. Running the experiments takes about 5\ndays of compute.</p></li>\n<li><p><code>make survey-tex</code> generates the TeX for Figures 5 and\n6. Note. Run this while <code>make survey</code> is running to see the\nresults computed so far.</p></li>\n<li><p><code>make coverage</code> generates the graphs in Figure 7. This\nwill take 2-3 hours</p></li>\n</ul>\n<h4 id=\"running-experiments-one-by-one\">Running Experiments\nOne-by-One</h4>\n<p>To run the experiments individually, execute the following command\nonce for each pipeline:</p>\n<pre><code>./capisce exp NAME -out ./survey_data_oopsla</code></pre>\n<p>where <code>OUT</code> is the output directory in which you wish to\nstore the results, and <code>NAME</code> is the name of the example\nprogram. The valid names can be seen by typing\n<code>./capisce exp</code>.</p>\n<p>Most of these will finish in minutes, but several will take nearly\ntwo days. For more-precise timing expectations, consult Figures 5 and\n6.</p>\n<p>Once you’ve done this, you can generate Figures 5 and 6 using the\nscript <code>./scripts/survey-to-tex.py</code>.</p>\n<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb13-1\"><a href=\"#cb13-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">python3</span> ./scripts/survey-to-tex.py</span></code></pre></div>\n<p>You may run this script after any number of examples have been run,\nand you will get partial results. Those results that haven’t finished\nrunning yet will be indicated by an infinity symbol in the “Result”\ncolumn.</p>\n<p>To reproduce Figure 7, re-run the relevant programs with the\n<code>-replay</code> flag. This will generate the additional data\nrequired to generate Figure 7. The coverage analysis is slow, and may\ntake several hours. To generate the data run the following commands:</p>\n<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb14-1\"><a href=\"#cb14-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">./capisce</span> exp arp <span class=\"at\">-replay</span> <span class=\"at\">-out</span> survey_data_oopsla <span class=\"at\">-hv</span></span>\n<span id=\"cb14-2\"><a href=\"#cb14-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">./capisce</span> exp heavy_hitter_2 <span class=\"at\">-replay</span> <span class=\"at\">-out</span> survey_data_oopsla <span class=\"at\">-hv</span></span>\n<span id=\"cb14-3\"><a href=\"#cb14-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">./capisce</span> exp heavy_hitter_1 <span class=\"at\">-replay</span> <span class=\"at\">-out</span> survey_data_oopsla <span class=\"at\">-hv</span></span>\n<span id=\"cb14-4\"><a href=\"#cb14-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">./capisce</span> exp flowlet <span class=\"at\">-replay</span> <span class=\"at\">-out</span> survey_data_oopsla <span class=\"at\">-hv</span></span>\n<span id=\"cb14-5\"><a href=\"#cb14-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">./capisce</span> exp 07-multiprotocol <span class=\"at\">-replay</span> <span class=\"at\">-out</span> survey_data_oopsla <span class=\"at\">-hv</span></span>\n<span id=\"cb14-6\"><a href=\"#cb14-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">./capisce</span> exp simple_nat <span class=\"at\">-replay</span> <span class=\"at\">-out</span> survey_data_oopsla <span class=\"at\">-hv</span></span></code></pre></div>\n<p>Then, to produce the graphs as seen in Figure 7, run the following\nscript:</p>\n<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb15-1\"><a href=\"#cb15-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">python3</span> scripts/graphs.py</span></code></pre></div>\n<p>Running the script will output the relative paths to the pdfs it\ngenerates.</p>\n<h4 id=\"common-issues\">Common Issues</h4>\n<p>The Capisce repo ships with solver executables in the\n<code>solvers</code> directory. It is common to have are issues with the\nsolvers—Capisce prints an inscrutable error message followed by\n<code>(Failure \"found false\")</code>. For instance,</p>\n<pre><code>Error: Cannot find or load the main class ap.CmdlMain\nCause: java.lang.ClassNotFoundException: ap.CmdlMain\nUncaught exception:\n\n  (Failure \"found false\")</code></pre>\n<p>If these occur, please install <a href=\"https://github.com/Z3Prover/z3\">Z3</a> and <a href=\"http://www.philipp.ruemmer.org/princess.shtml\">princess</a>. You\ncan either place the executables in capisce’s <code>solvers</code>\ndirectory, or pass the locations of the executables to\n<code>capisce</code> using the <code>-z3</code> and\n<code>-princess</code> flags.</p>\n<h3 id=\"reusability-guide\">Reusability Guide</h3>\n<p>Our artifact supports three key pieces for reusability.</p>\n<ul>\n<li><p>The pipeline specification IR <code>GPL</code>, which can be\nfound in <code>ASTs.GPL</code>. This AST can be used as a compiler\nbackend for related dataplane analysis tools like <code>petr4</code>,\n<code>p4cub</code>, <code>p4k</code>, <code>p4-constraints</code>, or\n<code>PI4</code>.</p></li>\n<li><p>The compiler infrastructure for <code>GPL.t</code> allows for\nprogrammers to easily extend the core set of primitives, in a way that\nsupports efficient reuse.</p></li>\n<li><p>The Counterexample-guided inductive quantifier elimination\nalgorithm <code>QE.cegqe</code> is succinctly stated, and can be\nreimplemented or adapted to as new algorithms are discovered.</p></li>\n</ul>\n<h4 id=\"tutorial\">Tutorial</h4>\n<p>Now that you’ve build <code>Capisce</code>, we’ll show you how it\nworks.</p>\n<p>First run <code>dune utop</code>. This will load <code>Capisce</code>\ninto a REPL. Now, open the <code>Capisce</code> module:</p>\n<div class=\"sourceCode\" id=\"cb17\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb17-1\"><a href=\"#cb17-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>utop # <span class=\"kw\">open</span> Capisce;;</span></code></pre></div>\n<p>In this Hello-World tutorial, we’ll write a program in our IR\n<code>GPL</code>, which represents the guarded pipeline language\ndescribed in the paper. Then we’ll write a specification that it must\nsatisfy. Finally, we’ll infer a ccontrol interface spec that will ensure\nthe assertion is satisfied.</p>\n<h5 id=\"part-1-writing-a-program-in-gpl\">Part 1: Writing a program in\nGPL</h5>\n<p>First, let open the Modules for the program syntax\n(<code>GPL</code>), including Bitvector Expressions (<code>Expr</code>)\nand Boolean Expressions (<code>BExpr</code>).</p>\n<div class=\"sourceCode\" id=\"cb18\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb18-1\"><a href=\"#cb18-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>utop # <span class=\"kw\">open</span> ASTs.GPL;; <span class=\"kw\">open</span> Expr;; <span class=\"kw\">open</span> BExpr;;</span></code></pre></div>\n<p>We’ll now write a simple GPL program that uses a single forwarding\ntable to set a single 9-bit field <code>port</code> based on the value\nof a 32-bit destination address <code>dst</code>. First, we can define\nthe variables <code>port</code>and <code>dst</code>:</p>\n<div class=\"sourceCode\" id=\"cb19\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb19-1\"><a href=\"#cb19-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>utop # <span class=\"kw\">let</span> port = Var.make <span class=\"st\">\"port\"</span> <span class=\"dv\">9</span>;;</span>\n<span id=\"cb19-2\"><a href=\"#cb19-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">val</span> port : Var.t = &lt;abstr&gt;</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb20\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb20-1\"><a href=\"#cb20-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>utop # <span class=\"kw\">let</span> dst = Var.make <span class=\"st\">\"dst\"</span> <span class=\"dv\">32</span>;;</span>\n<span id=\"cb20-2\"><a href=\"#cb20-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">val</span> dst : Var.t = &lt;abstr&gt;</span></code></pre></div>\n<p>We’ll use these variables to construct our table. Lets see how we\nmight do that by inspecting the type of the constructor\n<code>table</code>:</p>\n<div class=\"sourceCode\" id=\"cb21\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb21-1\"><a href=\"#cb21-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>utop # table;;</span></code></pre></div>\n<p>should produce</p>\n<div class=\"sourceCode\" id=\"cb22\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb22-1\"><a href=\"#cb22-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>- : <span class=\"dt\">string</span> -&gt;</span>\n<span id=\"cb22-2\"><a href=\"#cb22-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    [&gt; `Exact <span class=\"kw\">of</span> Var.t | `Maskable <span class=\"kw\">of</span> Var.t | `MaskableDegen <span class=\"kw\">of</span> Var.t ] <span class=\"dt\">list</span> -&gt;</span>\n<span id=\"cb22-3\"><a href=\"#cb22-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    (Var.t <span class=\"dt\">list</span> * Capiscelib.Primitives.Action.t <span class=\"dt\">list</span>) <span class=\"dt\">list</span> -&gt;</span>\n<span id=\"cb22-4\"><a href=\"#cb22-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Pack.t</span>\n<span id=\"cb22-5\"><a href=\"#cb22-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>= &lt;<span class=\"kw\">fun</span>&gt;</span></code></pre></div>\n<p>This tells us that to construct a <code>table</code>, we need 3\narguments: a <code>string</code> name, a list variable keys tagged with\ntheir matchkind (<code>Exact</code>, <code>Maskable</code>, and\n<code>MaskableDegen</code>), then a list of\n<code>Var.t list * Primitives.Action.t list</code>. Each pair\n<code>(xs, as)</code> in this list corresponds to an anonymous function\nwhere <code>xs</code> occur free in a list of primitive actions. This\nlist should be understood as sequential composition. Lets construct our\nfirst action.</p>\n<div class=\"sourceCode\" id=\"cb23\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb23-1\"><a href=\"#cb23-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>utop # <span class=\"kw\">let</span> nop : Var.t <span class=\"dt\">list</span> * Primitives.Action.t <span class=\"dt\">list</span> = [],[];;</span></code></pre></div>\n<p>This action is the trivial action. It takes no arguments\n<code>[],</code> and executes noactions <code>[]</code>.</p>\n<p>Stepping it up a notch in complexity. We will define a action that\ntakes in a single argument, indicated by parameter <code>p</code>, and\nassigns <code>p</code> to our previously-defined variable\n<code>port</code>:</p>\n<div class=\"sourceCode\" id=\"cb24\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb24-1\"><a href=\"#cb24-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>utop # <span class=\"kw\">let</span> setport =</span>\n<span id=\"cb24-2\"><a href=\"#cb24-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>     <span class=\"kw\">let</span> p = Var.make <span class=\"st\">\"p\"</span> <span class=\"dv\">9</span> <span class=\"kw\">in</span></span>\n<span id=\"cb24-3\"><a href=\"#cb24-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>     [p], Primitives.Action.[</span>\n<span id=\"cb24-4\"><a href=\"#cb24-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>          assign port (Expr.var p)</span>\n<span id=\"cb24-5\"><a href=\"#cb24-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>     ];;</span></code></pre></div>\n<p>The first line constructs the AST node for parameter <code>p</code>.\nThen the <code>[p],</code> says that <code>p</code> is an argument for\nthe action, which is defined by the subsequent action list.</p>\n<p>Now we can define a table, called <code>simpletable</code> that reads\nthe vpalue of <code>port</code>, and then either execute the\n<code>setport</code> action with some parameter, or take no action.</p>\n<div class=\"sourceCode\" id=\"cb25\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb25-1\"><a href=\"#cb25-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>utop # <span class=\"kw\">let</span> simpletable =</span>\n<span id=\"cb25-2\"><a href=\"#cb25-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    table <span class=\"st\">\"simpletable\"</span> [`Exact port] [setport; nop];;</span></code></pre></div>\n<p>The <code>Exact</code> matchkind tells us that\n<code>simpletable</code> must precisely read the bits of\n<code>port</code>. Using <code>Maskable</code> corresponds unifies the\nnotions of <code>ternary</code>, <code>lpm</code> and\n<code>optional</code>, all of which allow the the table to skip reading\nthat specific key. <code>MaskableDegen</code> is semantically equivalent\nto <code>Exact</code>, but allows us to differentiate between truly\nmaskable match data and degenerate cases described in the paper</p>\n<h5 id=\"part-2-writing-a-specification\">Part 2: Writing a\nSpecification</h5>\n<p>Now, as an example specification, we can exclude a specific port\nvalue. Perhaps to indicate that this port value, say <code>47</code> is\ndisabled. So we never want to forward a packet out on port\n<code>47</code>. We define a spec that ensures this as follows:</p>\n<div class=\"sourceCode\" id=\"cb26\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb26-1\"><a href=\"#cb26-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>utop # <span class=\"kw\">let</span> port_not_47 =</span>\n<span id=\"cb26-2\"><a href=\"#cb26-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">let</span> prohibited = Expr.bvi <span class=\"dv\">47</span> <span class=\"dv\">9</span> <span class=\"kw\">in</span></span>\n<span id=\"cb26-3\"><a href=\"#cb26-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    BExpr.(not_ (eq_ (Expr.var port) prohibited));;</span></code></pre></div>\n<p>Now we can use assertions to specify that our table must satisfy this\nspec:</p>\n<div class=\"sourceCode\" id=\"cb27\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb27-1\"><a href=\"#cb27-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>utop # <span class=\"kw\">let</span> program = sequence [</span>\n<span id=\"cb27-2\"><a href=\"#cb27-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    simpletable;</span>\n<span id=\"cb27-3\"><a href=\"#cb27-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    assert_ port_not_47</span>\n<span id=\"cb27-4\"><a href=\"#cb27-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>];;</span></code></pre></div>\n<h5 id=\"part-3-inferring-a-spec\">Part 3: Inferring A Spec</h5>\n<p>Inferring the control interface spec for the table requires two\nsteps. First we encode the tables using the instrumentation strategy\ndescribed in the paper, and then we run our inference algorithm.</p>\n<p>The encoding step eliminates tables, and converts a\n<code>GPL.t</code> program into a <code>GCL.t</code> program.\n<code>GCL</code> here stands for Dijkstra’s <em>guarded command\nlanguage</em>. We run this using the <code>GPL.encode_tables</code>\nfunction:</p>\n<div class=\"sourceCode\" id=\"cb28\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb28-1\"><a href=\"#cb28-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>utop # <span class=\"kw\">let</span> gcl = ASTs.GPL.encode_tables program;;</span></code></pre></div>\n<p>To see a pretty printed version of the table-free program, run the\nfollowing:</p>\n<div class=\"sourceCode\" id=\"cb29\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb29-1\"><a href=\"#cb29-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>utop # <span class=\"dt\">Printf</span>.printf <span class=\"st\">\"\\%s\"</span> @@ ASTs.GCL.to_string gcl;;</span></code></pre></div>\n<p>Now we can infer the specification for this program by running the\n<code>CEGQE</code> algorithm:</p>\n<div class=\"sourceCode\" id=\"cb30\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb30-1\"><a href=\"#cb30-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>utop # <span class=\"kw\">let</span> cis = Qe.cegqe gcl;;</span></code></pre></div>\n<p>To pretty print the result in SMTLIB format, run the following\ncommand:</p>\n<div class=\"sourceCode\" id=\"cb31\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb31-1\"><a href=\"#cb31-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>utop # <span class=\"dt\">Printf</span>.printf <span class=\"st\">\"\\%s\"</span> @@ BExpr.to_smtlib cis;;</span></code></pre></div>\n<p>The resulting specification has two conjucts. The first, shown below,\nsays that whenever the action is has index <code>0</code>, that is when\nit corresponds to <code>setport</code>, the argument to\n<code>setport</code> must not be <code>47</code>.</p>\n<div class=\"sourceCode\" id=\"cb32\"><pre class=\"sourceCode lisp\"><code class=\"sourceCode commonlisp\"><span id=\"cb32-1\"><a href=\"#cb32-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>  (<span class=\"kw\">not</span> (<span class=\"kw\">and</span></span>\n<span id=\"cb32-2\"><a href=\"#cb32-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>          (<span class=\"op\">=</span> _symb$simpletable$action$_$<span class=\"dv\">0</span> (_ bv1 <span class=\"dv\">1</span>))</span>\n<span id=\"cb32-3\"><a href=\"#cb32-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>          (<span class=\"op\">=</span> _symb$simpletable$<span class=\"dv\">1</span>$p$_$<span class=\"dv\">0</span> (_ bv47 <span class=\"dv\">9</span>))))</span></code></pre></div>\n<p>The second conjunct, replicated below, says that whenever the action\nis <code>setport</code>, the key that was matched by\n<code>simpletable</code> must not be equal to <code>47</code>.</p>\n<div class=\"sourceCode\" id=\"cb33\"><pre class=\"sourceCode lisp\"><code class=\"sourceCode commonlisp\"><span id=\"cb33-1\"><a href=\"#cb33-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>  (<span class=\"kw\">not</span> (<span class=\"kw\">and</span></span>\n<span id=\"cb33-2\"><a href=\"#cb33-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>          (<span class=\"op\">=</span> _symb$simpletable$action$_$<span class=\"dv\">0</span> (_ bv0 <span class=\"dv\">1</span>))</span>\n<span id=\"cb33-3\"><a href=\"#cb33-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>          (<span class=\"op\">=</span> _symb$simpletable$match_0$_$<span class=\"dv\">0</span> (_ bv47 <span class=\"dv\">9</span>))))</span></code></pre></div>\n<h4 id=\"guarded-pipeline-language-gpl\">Guarded Pipeline Language\n<code>GPL</code></h4>\n<p>Here we provide documentation of the core interface for writing\n<code>GPL.t</code> programs.</p>\n<p>The <code>GPL</code> module, defined in <code>ASTs.ml</code> defines\nprograms.</p>\n<div class=\"sourceCode\" id=\"cb34\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb34-1\"><a href=\"#cb34-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">type</span> t</span></code></pre></div>\n<p>It has a type <code>t</code> that corresponds to <code>GPL</code>\nprograms themselves.</p>\n<p>We can construct trivial programs</p>\n<div class=\"sourceCode\" id=\"cb35\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb35-1\"><a href=\"#cb35-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">val</span> skip : t</span></code></pre></div>\n<p>Sequential compositions of programs;</p>\n<div class=\"sourceCode\" id=\"cb36\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb36-1\"><a href=\"#cb36-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">val</span> sequence : t <span class=\"dt\">list</span> -&gt; t</span></code></pre></div>\n<p>Nondeterministic choice between programs:</p>\n<div class=\"sourceCode\" id=\"cb37\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb37-1\"><a href=\"#cb37-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">val</span> choice : t <span class=\"dt\">list</span> -&gt; ts</span></code></pre></div>\n<p>We can also construct variable assignments</p>\n<div class=\"sourceCode\" id=\"cb38\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb38-1\"><a href=\"#cb38-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">val</span> assign_ : Var.t -&gt; Expr.t -&gt; t</span></code></pre></div>\n<p>and the most important constuct, tables:</p>\n<div class=\"sourceCode\" id=\"cb39\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb39-1\"><a href=\"#cb39-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">val</span> table : <span class=\"dt\">string</span> </span>\n<span id=\"cb39-2\"><a href=\"#cb39-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  -&gt; [&gt; `Exact <span class=\"kw\">of</span> Var.t <span class=\"dt\">list</span> | `Maskable <span class=\"kw\">of</span> Var.t <span class=\"dt\">list</span> | `MaskableDegen <span class=\"kw\">of</span> Var.t ] <span class=\"dt\">list</span> </span>\n<span id=\"cb39-3\"><a href=\"#cb39-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  -&gt; ( Var.t * Primtives.Action.t <span class=\"dt\">list</span>) <span class=\"dt\">list</span> -&gt; t</span></code></pre></div>\n<p>As described above <code>table name keys actions</code> constructs a\ntable named <code>name</code> that chooses an action <code>a</code> in\n<code>actions</code> by inspecting the variables in\n<code>keys</code>.</p>\n<p>More about <code>Primitives.Action</code> can be found in the next\nsection.</p>\n<p>To specify desired behaviors we have two primitives,\n<code>assume</code> and <code>assert</code>.</p>\n<div class=\"sourceCode\" id=\"cb40\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb40-1\"><a href=\"#cb40-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">val</span> assume : BExpr.t -&gt; t</span>\n<span id=\"cb40-2\"><a href=\"#cb40-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">val</span> assert_ : BExpr.t -&gt; t</span></code></pre></div>\n<p>The <code>assume</code> primitive is angelic—if it can be satisfied\nthe program assumes it is. Conversely, <code>assert_</code> is\ndemonic—if it can ba falsified the program assumes it is.</p>\n<h5 id=\"building-the-documentation\">Building the Documentation</h5>\n<p>The full documentation can be viewed using the following command. It\nmay prompt you to install <code>odoc</code>. Please do so using\n<code>opam install odoc</code>.</p>\n<pre><code>make doc -B</code></pre>\n<p>This will open the documentation in your systems default web browser.\nIf you do not have a web browser installed the terminal\n<code>xdg-open</code> command will fail. Feel free to browse the\ndocumenation some other way. In the docker container the docs will be\nopened in <code>w3m</code> (press <code>enter</code> to follow links and\n<code>q</code> to quit).</p>\n<p>The documentation for the core modules can be found by clicking on\n<code>capisce</code> and then navigating to modules <code>Cmd</code>,\n<code>ASTs</code>, and <code>Qe</code>.</p>\n<h4 id=\"instrumentation-and-compiler\">Instrumentation and Compiler</h4>\n<p><code>GPL.t</code> is constructed using a functor\n<code>Cmd.Make</code> that allows users to produce simple loop-free\nimperative programs with demonic nondeterminism.</p>\n<p><code>Cmd.Make</code> has a single module argument which must have\nmodule type <code>Primitive</code> shown below:</p>\n<div class=\"sourceCode\" id=\"cb42\"><pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span id=\"cb42-1\"><a href=\"#cb42-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">module</span> <span class=\"kw\">type</span> Primitive = <span class=\"kw\">sig</span></span>\n<span id=\"cb42-2\"><a href=\"#cb42-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">type</span> t [@@deriving quickcheck, eq, hash, sexp, <span class=\"dt\">compare</span>]</span>\n<span id=\"cb42-3\"><a href=\"#cb42-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">val</span> assume : BExpr.t -&gt; t</span>\n<span id=\"cb42-4\"><a href=\"#cb42-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">val</span> assert_ : BExpr.t -&gt; t</span>\n<span id=\"cb42-5\"><a href=\"#cb42-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">val</span> contra : t -&gt; t -&gt; <span class=\"dt\">bool</span></span>\n<span id=\"cb42-6\"><a href=\"#cb42-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">val</span> to_smtlib : t -&gt; <span class=\"dt\">string</span></span>\n<span id=\"cb42-7\"><a href=\"#cb42-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">val</span> size : t -&gt; <span class=\"dt\">int</span></span>\n<span id=\"cb42-8\"><a href=\"#cb42-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">val</span> vars : t -&gt; Var.t <span class=\"dt\">list</span></span>\n<span id=\"cb42-9\"><a href=\"#cb42-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">end</span></span></code></pre></div>\n<p>The <code>assume</code> and <code>assert_</code> functions construct\nassumptions and assertions as before; <code>contra</code> describes when\ntwo assumptions and/or assertions are contradictory;\n<code>to_smtlib</code> converts <code>t</code> into an string that uses\nsmtlib syntax for expressions and variables; <code>size</code> computes\nthe size of a primitive, and <code>vars</code> computes the variables\nused in a primitive.</p>\n<p>This structure is extremely extensible and facilitates easy reuse of\nour code. The file <code>Primitives.ml</code> serves as a great tutorial\nfor how to build up a higherarchical set of Primitives. Then\n<code>ASTs.ml</code> uses these Primtives to build a set of IRs and a\ncompiler pipeline between them. We summarize it here.</p>\n<p>Our compiler pipeline starts with <code>GPL</code> and then uses\n<code>encode_tables</code> to produce a <code>GCL</code> program. Then\npassify produces a program in the passive form <code>Psv.t</code> as\ndefined in Section 3.4 of the paper. Then we use standard verification\ngeneration technqiues to produce formulae in SMTLIB.</p>\n<p>Each of these passes is a fundamentally a catamorphism over the core\nstructure of the programs, and eliminates a single primitive at a time:\n<code>encode_tables</code> eliminates tables, and <code>passify</code>\neliminates assignments. This is captured in the types.</p>\n<p>Starting from the bottom, <code>Psv.t = Cmd.Make(Passive).t</code>,\nwhere <code>Passive.t</code> is either an <code>Assume</code> or an\n<code>Assert</code>. Then <code>GCL = Cmd.Make(Active).t</code>, where\n<code>Active.t</code> is either a <code>Passive.t</code> or an\n<code>Assign</code>ment. Finally\n<code>GPL = Cmd.Make(Pipeline).t</code>, where <code>Pipeline.t</code>\nis either a <code>Table</code> or an <code>Active</code>. The\ntransformation functions <code>encode_tables</code> and\n<code>passify</code> defined in <code>ASTs.ml</code> define this\nclearly.</p>\n<p>With this compiler infrastructure in place, it would be easy for\nfuture researchers to extend our work with additional features. Just as\nwriting the compiler for <code>GPL</code> leverages the existing\ncompiler for <code>GCL</code>, futurue work could extend GPL add\nprimitives for multiple-assignment, hash functions, or stateful\noperations. Simply by writing elimination passes, researchers could make\nready use of our existing verification generation and specification\ninference code.</p>\n<h4 id=\"specification-inference-and-modelling\">Specification Inference\nand Modelling</h4>\n<p>The algorithm <code>Qe.ceqge</code> in the <code>Qe.ml</code> file is\nstraightfoward and easy to modify. The experimental setup defined in\n<code>bin/Main.ml</code> supports swapping in different algorithms for\nperforming the inference, which will allow future researchers to\ndirectly measure their improvements over CegQe.</p>",
        "keywords": "deductive synthesis, programmable networks, quantifier elimination",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/cornell-netlab/capisce/tree/v.0.0.4"
    },
    "10.5281/zenodo.12786846": {
        "doi": "10.5281/zenodo.12786846",
        "author": "Pimpalkhare, Nikhil and Kincaid, Zachary",
        "title": "Virtual Machine Artifact for \"Monotone Procedure Summarization via Vector Addition Systems and Inductive Potentials\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.12786846",
        "abstract": "<p>UTM Virtual Machine for replicating Evaluation of “Monotone Procedure\nSummarization via Vector Addition Systems and Inductive Potentials”</p>",
        "keywords": "Abstract Machines, Program Analysis",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.13117983": {
        "doi": "10.5281/zenodo.13117983",
        "author": "Zhang, Yiyu and Liu, Tianyi and Wang, Yueyang and Qi, Yun and Ji, Kai and Tang, Jian and Wang, Xiaoliang and Li, Xuandong and Zuo, Zhiqiang",
        "title": "Artifact Package for Article 'HardTaint: Production-Run Dynamic Taint Analysis via Selective Hardware Tracing'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13117983",
        "abstract": "<p>The artifact is used to claim that the main components proposed in\nthe paper “HardTaint: Production-Run Dynamic Taint Analysis via\nSelective Hardware Tracing” are functional.</p>",
        "keywords": "Dynamic Taint Analysis, Intel PT, Selective Tracing",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.13166254": {
        "doi": "10.5281/zenodo.13166254",
        "author": "Borgarelli, Andrea and Enea, Constantin and Majumdar, Rupak and Nagendra, Srinidhi",
        "title": "Artifact for Reward Augmentation in Reinforcement Learning for Testing Distributed Systems &nbsp;Creators",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13166254",
        "abstract": "<p>The artifact provides a framework - WaypointRL - for testing\ndistributed protocol implementations using Reinforcement learning\nmethods and strategies. The framework expects an instrumented\nimplementation as input. The instrumentation will allow the framework to\nsimulate the network and pick the order of messages delivered.\nAdditionally, the framework will control the nodes of the distributed\nsystem to introduce failures (stops and restarts). Apart from RL based\nstrategies when testing, the framework provides a generic interface to\nimplement any strategy as an Agent that interacts with the distributed\nsystem Environment.</p>",
        "keywords": "distributed systems, reactive systems testing, reinforcement learning",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.13323059": {
        "doi": "10.5281/zenodo.13323059",
        "author": "Jungmair, Michael and Engelke, Alexis and Giceva, Jana",
        "title": "Artifact for \"HiPy: Extracting High-Level Semantics From Python Code For Data Processing\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13323059",
        "abstract": "<p>This is the artifact to the paper “HiPy: Extracting High-Level\nSemantics From Python Code For Data Processing” which provides the\nsource code of HiPy as well as tooling, benchmarks, and Docker images to\nreproduce the experiments shown in the paper.</p>",
        "keywords": "Data Processing, High-Level Optimizations, Program Generation, Python",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.13361333": {
        "doi": "10.5281/zenodo.13361333",
        "author": "Norlinder, Jonas and \\\"{O",
        "title": "[OOPSLA'24 Artefact] Mark–Scavenge: Waiting for Trash to Take Itself Out",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13361333",
        "abstract": "<p>This artefact contains contains MS-ZGC, an implementation of\nmark-scavenge, presented in the paper Mark–Scavenge: Waiting for Trash\nto Take Itself Out.</p>",
        "keywords": "concurrent, garbage collection, mark-evacuate, mark-scavenge, scavenging",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.13367665": {
        "doi": "10.5281/zenodo.13367665",
        "author": "Wu, Jifeng and Lemieux, Caroline",
        "title": "Reproduction Package for Article `QuAC: Quick Attribute-Centric Type Inference for Python`",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13367665",
        "abstract": "<p>This artifact supports the paper “QuAC: Quick Attribute-Centric Type\nInference for Python.” The artifact includes the code and data used to\ngenerate the results presented in the paper. It aims to reproduce the\nmain scientific claims and facilitate future research by making the\nsoftware publicly available.</p>",
        "keywords": "Gradual Typing, Python, Static Analysis, Type Inference",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13368062": {
        "doi": "10.5281/zenodo.13368062",
        "author": "Liu, Jiangyi and Murphy, Charlie and Grover, Anvay and Johnson, Keith J.C. and Reps, Thomas and D’Antoni, Loris",
        "title": "Artifact of paper \"Synthesizing Formal Semantics from Executable Interpreters\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13368062",
        "abstract": "<p>This is the artifact of paper “Synthesizing Formal Semantics from\nExecutable Interpreters”. It contains code for the tool Synantic as well\nas benchmarks used to support our claims in the paper.</p>",
        "keywords": "program synthesis, semantics, SemGuS, SMT solvers, SyGuS",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.13370788": {
        "doi": "10.5281/zenodo.13370788",
        "author": "Kang, Chan Gu and Lee, Joonghoon and Oh, Hakjoo",
        "title": "Artifact for Paper \"Statistical Testing of Quantum Programs via Fixed-Point Amplitude Amplification\" in OOPSLA 2024",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13370788",
        "abstract": "<p>This is Zenodo repoistory for Software Artifact of Paper “Statistical\nTesting of Quantum Programs via Fixed-Point Amplitude Amplification”\nappeared in in OOPSLA 2024.</p>\n<p>This repository contains a PDF file of artifact manual and runnable\nsoftware artifact. Running the artifact will give :</p>\n<ul>\n<li>Numerical calculation shown in the Examples in the paper</li>\n<li>Validation of depth cost expression (appeared in Section 6 and 7 of\nthe paper)</li>\n<li>Producing Speed-up plots in Case Study (appeared in Section 7 of the\npaper)</li>\n<li>Implementation of Testing Algorithms</li>\n</ul>\n<p>For the further details, see the attached artifact manual. For any\nquestions, contact changukang@korea.ac.kr. The artifact may be continued\nthrough following github repo : https://github.com/kupl/FpaaTestArtifact\n.</p>",
        "keywords": "Quantum Computing, Quantum Programming, Testing, Verification",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/kupl/FpaaTestArtifact"
    },
    "10.5281/zenodo.13370814": {
        "doi": "10.5281/zenodo.13370814",
        "author": "Tan, Jinhao and Oliveira, Bruno C. d. S.",
        "title": "A Case for First-Class Environments (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13370814",
        "abstract": "<p>The artifact includes the Coq formalization of the paper “A Case for\nFirst-Class Environments”.</p>",
        "keywords": "First-class Environments, Mechanical Formalization, Semantics",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13372050": {
        "doi": "10.5281/zenodo.13372050",
        "author": "Eymer, Jeff and Dexter, Philip and Raskind, Joseph and Liu, Yu David",
        "title": "A Runtime System for Interruptible Query Processing: When Incremental Computing Meets Fine-Grained Parallelism - Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13372050",
        "abstract": "<p>The goal of PitStop is to use lazy evaluation to improve both\nthroughput and operation latency for data processing systems. PitStop\nallows for queries and updates to be temporarily halted mid-traversal\nand continued at a later time. Though it may seem counter intuitive,\nthis pausing allows for a fine-grained parallelism that helps to balance\nworkload and alleviate workload fluctuation. This design also allows for\nfurther query optimization through the use of techniques such as\nbatching and fusion.</p>",
        "keywords": "fine-grained parallelism, interruptible query processing, query language runtime design",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.13372573": {
        "doi": "10.5281/zenodo.13372573",
        "author": "Bembenek, Aaron and Greenberg, Michael and Chong, Stephen",
        "title": "Making Formulog Fast: An Argument for Unconventional Datalog Evaluation (OOPSLA'24 Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13372573",
        "abstract": "<p>Welcome to the artifact for the paper “Making Formulog Fast: An\nArgument for Unconventional Datalog Evaluation” (OOPSLA’24) by Aaron\nBembenek, Michael Greenberg, and Stephen Chong. This artifact was\nreviewed by the OOPSLA’24 Artifact Evaluation Committee. The artifact\nincludes: our extensions to Formulog and Souffl\\'{e",
        "keywords": "compilation, Datalog, Formulog, parallel evaluation, SMT solving",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13373228": {
        "doi": "10.5281/zenodo.13373228",
        "author": "Ye, Wenjia and Sun, Yaozhu and Oliveira, Bruno C. d. S.",
        "title": "Imperative Compositional Programming (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13373228",
        "abstract": "<p>This is the artifact of the OOPSLA2024 research paper : Imperative\nCompositional Programming.</p>",
        "keywords": "Bidirectional Typing, Compositional Programming, Distributive Subtyping, Intersection Types, Mutable References, Type Soundness",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.13376916": {
        "doi": "10.5281/zenodo.13376916",
        "author": "Bowman, William J.",
        "title": "A Low-Level Look at A-Normal Form (artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13376916",
        "abstract": "<p>This artifact accompanies the paper A low-level look at A-normal form\n(https://doi.org/10.1145/3689717). The <code>materials.tar.gz</code>\ncontain source files, documentation, Docker files, and assorted build\nscripts. The file <code>oopsla2024-159-artifact-amd64.qcow2</code>\ncontains the same files, bundled as a QEMU VM image; instructions for\nrunning it are in the gzip file.</p>",
        "keywords": "A-normal form, Compilers, CPS, Intermediate Representation, Monadic Form, Normal Form, Normalization, Optimization",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13377564": {
        "doi": "10.5281/zenodo.13377564",
        "author": "Jeon, Seungmin and Cho, Kyeongmin and Kang, Chan Gu and Lee, Janggun and Oh, Hakjoo and Kang, Jeehoon",
        "title": "Artifact for \"Quantum Probabilistic Model Checking for Time-Bounded Properties\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13377564",
        "abstract": "<p>This is the artifact for OOPSLA 2024 paper: “Quantum Probabilistic\nModel Checking for Time-Bounded Properties”.</p>\n<p>This artifact includes the following files: - qpmc.zip: Contains the\nimplementation and evaluation program used to generate the results\npresented in the paper. - qpmc-evaluation-results.zip: Includes the\noutput files generated by the evaluation program.</p>\n<p>For detailed information about this artifact, please refer to the\nREADME.md file within the qpmc.zip archive. The artifact also includes\nthe full paper with appendices (paper-full.pdf).</p>",
        "keywords": "bounded reachability, probabilistic model checking, quantum computing",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13378311": {
        "doi": "10.5281/zenodo.13378311",
        "author": "Ye, Wenjia and Oliveira, Bruno C. d. S. and Toro, Mat\\'{\\i",
        "title": "Merging Gradual Typing (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13378311",
        "abstract": "<p>This is the artifact of OOPSLA2024 research paper: Merging Gradual\nTyping.</p>",
        "keywords": "Bidirectional Typing, Gradual Typing, Merge Operator, Type-Directed Semantics",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.13380062": {
        "doi": "10.5281/zenodo.13380062",
        "author": "Craaijo, Jos and Verbeek, Freek and Ravindran, Binoy",
        "title": "Reproduction package (Docker container) for the OOPSLA 2024 article \"libLISA: Instruction Discovery and Analysis on x86-64\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13380062",
        "abstract": "<p>These files accompany the OOPSLA 2024 paper ‘libLISA - Instruction\nDiscovery and Analysis on x86-64’.</p>\n<p>This artifact consists of the following:</p>\n<ul>\n<li>The source code for libLISA, the tool presented in the paper.</li>\n<li>The generated semantics for the five CPU architectures we\nanalyzed.</li>\n<li>The source code for all additional tools that we used to generate\nthe data in Table 5, 6, 7, 8 and 9.</li>\n</ul>\n<p>This is all relevant source code and data necessary to reproduce all\nresults in the paper.</p>\n<p>Please see the full guide in artifact-evaluation-guide.7z.</p>",
        "keywords": "instruction enumeration, instruction semantics, synthesis",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13380561": {
        "doi": "10.5281/zenodo.13380561",
        "author": "Hinrichsen, Jonas Kastberg and Jacobs, Jules and Krebbers, Robbert",
        "title": "Multris: Functional Verification of Multiparty Message Passing in Separation Logic - Coq Mechanization",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13380561",
        "abstract": "<p>Coq mechanization artifact for the OOPSLA’24 paper: “Multris:\nFunctional Verification of Multiparty Message Passing in Separation\nLogic”.</p>\n<p>See included README for more details.</p>",
        "keywords": "Coq, Mechanization, Separation Logic",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13381305": {
        "doi": "10.5281/zenodo.13381305",
        "author": "Root, Alexander J and Yan, Bobby and Liu, Peiming and Gyurgyik, Christophe and Bik, Aart J.C. and Kjolstad, Fredrik",
        "title": "Artifact for OOPSLA 2024 Paper: Compilation of Shape Operators on Sparse Arrays",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13381305",
        "abstract": "<p>This artifact contains the prototype Burrito compiler, all benchmarks\nfrom the paper, and graphing scripts used to produce the figures in the\npaper.</p>",
        "keywords": "sparse array programming, sparse data structures, sparse iteration theory",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/rootjalex/burrito-artifact/tree/Release"
    },
    "10.5281/zenodo.13381352": {
        "doi": "10.5281/zenodo.13381352",
        "author": "Palmer, Zachary and Filardo, Nathaniel Wesley and Wu, Ke",
        "title": "Intensional Functions Virtual Machine Image",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13381352",
        "abstract": "<p>This archive contains a virtual machine image with a precompiled\nversion of the artifact from the paper Intensional Functions, which\nappears in OOPSLA 2024 / PACMPL.</p>",
        "keywords": "function, image, intensional, machine, virtual",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.13382344": {
        "doi": "10.5281/zenodo.13382344",
        "author": "Baek, Doehyun and Getz, Jakob and Sim, Yusung and Lehmann, Daniel and Titzer, Ben L. and Ryu, Sukyoung and Pradel, Michael",
        "title": "Reproduction Package for Article `Wasm-R3: Record-Reduce-Replay for Realistic and Standalone WebAssembly Benchmarks`",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13382344",
        "abstract": "<p>This artifact contains supplementary material for the paper “Wasm-R3:\nRecord-Reduce-Replay for Realistic and Standalone WebAssembly\nBenchmarks” (OOPSLA’24).</p>\n<p>There are two main components to this artifact, which are Wasm-R3, a\nrecord-and-replay framework for Webassembly, and Wasm-R3-Bench, a\nbenchmark suite of 27 real-world web applications generated by\nWasm-R3.</p>",
        "keywords": "Benchmarking, record and replay, WebAssembly",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/doehyunbaek/wasm-r3/tree/v0.1.0"
    },
    "10.5281/zenodo.13365896": {
        "doi": "10.5281/zenodo.13365896",
        "author": "Riouak, Idriss and Fors, Niklas and \\\"{O",
        "title": "Efficient Demand Evaluation of Fixed-Point Attributes Using Static Analysis (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13365896",
        "abstract": "<p>This is the software artifact for the paper “Efficient Demand\nEvaluation of Fixed-Point Attributes Using Static Analysis” published in\nSLE 2024. This artifact supports the evaluation of a new demand-driven\nalgorithm for efficient circular Reference Attribute Grammar evaluation,\nspecifically designed to improve performance of higly circular\napplications, e.g., dataflow analyses for Java. The artifact includes\nall necessary tools, dependencies, benchmarks, and scripts to reproduce\nthe experiments presented in the corresponding paper. It provides a\nDocker-based setup for easy deployment, as well as detailed instructions\nfor manual installation. The artifact allows users to explore and\nvalidate the proposed algorithm’s performance improvements through\nreal-world case studies, demonstrating significant speedups in\ndead-assignment and null-pointer dereference analyses compared to\nexisting algorithms. While the artifact does not require specific\nhardware, reproducing the experiments as described in the paper may take\none to two days of computation time. The artifact has been tested on\nLinux and macOS systems.</p>",
        "keywords": "Attribute Grammars, Circular Attributes, Demand Analysis, Fixpoint Computations, Static Analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13625532": {
        "doi": "10.5281/zenodo.13625532",
        "author": "Bragg, Nate F. F. and Foster, Jeffrey S. and Zucker, Philip",
        "title": "Scimitar",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13625532",
        "abstract": "<p>It includes the implementation of Scimitar and well as a number of\nexamples, and instructions on how to run those examples.</p>",
        "keywords": "compilers, functional programming, mixed integer linear programming",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/tupl-tufts/scimitar/tree/published-onward-artifact"
    },
    "10.5281/zenodo.13643574": {
        "doi": "10.5281/zenodo.13643574",
        "author": "Gao, Cunyuan and Parreaux, Lionel",
        "title": "Implementation for Seamless Scope-Safe Metaprogramming through Polymorphic Subtype Inference (Short Paper)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13643574",
        "abstract": "<p>Our artifact implements the quasiquote syntax, type inference\nalgorithm, and code generation on the MLscript compiler. The artifact\nconsists of two parts:</p>\n<ul>\n<li>The main project is written in Scala and powered by sbt, which\nincludes the original MLscript compiler, our implementation, and\ncorresponding test cases for quasiquote;</li>\n<li>The web demo allows users to compile and run general MLscript with\nour quasiquote system programs directly in browsers and check type\ninference and execution results.</li>\n</ul>\n<p>Our quasiquote system is implemented in the main project, on which\nthe web demo is based.</p>",
        "keywords": "First-Class Polymorphism, Metaprogramming, MLscript, Type Inference",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/hkust-taco/metaprogramming-web-demo/tree/v1.0"
    },
    "10.5281/zenodo.13709851": {
        "doi": "10.5281/zenodo.13709851",
        "author": "Lee, Yunjeong and Gopinathan, Kiran and Yang, Ziyi and Flatt, Matthew and Sergey, Ilya",
        "title": "DSLs in Racket: You Want It How, Now? (SLE24 Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13709851",
        "abstract": "<ul>\n<li><p>Type of artifact :</p>\n<ul>\n<li>Example programs written in <code>clickomania</code> DSL that\ngenerates Clickomania games.\n<ul>\n<li>Relevant files : <code>example1.rkt</code>,\n<code>example2.rkt</code>\n<ul>\n<li>If you want to run the program in <code>example2.rkt</code>,\nuncomment line 21 and press F5.</li>\n</ul></li>\n</ul></li>\n<li>Example programs that demonstrate interaction between Racket and\n<code>clickomania</code> DSL.\n<ul>\n<li>Relevant files : <code>dynamic-interop-demo.rkt</code>,\n<code>interop-demo2.rkt</code>\n<ul>\n<li>If you want to run the program in\n<code>dynamic-interop-demo.rkt</code>, (1) go to\n<code>example1.rkt</code> and uncomment the lines 2 and 4, (2) come back\nto <code>dyanmic-interop-demo.rkt</code> and (3) run the program by\npressing F5. After verifying that the program runs, come back to\n<code>example1.rkt</code> to comment out lines 2 and 4 in order to run a\nprogram in <code>interop-demo2.rkt</code>.</li>\n<li>To run the program in <code>interop-demo2.rkt</code>, open the file\nand press F5. You will see a button widget that says “Play Tame Same\nGame!”. Upon pressing the button, you’ll get to play the Clickomania\ngame that is created via <code>clickomania</code> DSL.</li>\n</ul></li>\n</ul></li>\n<li>Racket code that implements <code>clickomania</code> DSL used as a\nrunning example in the paper.</li>\n<li>Relevant files : rest of the code</li>\n<li>Note that <code>clickomania</code>’s reader is inside the\n<code>/clickomania/lang</code> directory</li>\n</ul></li>\n<li><p>Format : source code</p></li>\n<li><p>Location in the VM : <code>~/clickomania/</code>\ndirectory</p></li>\n</ul>",
        "keywords": "domain-specific languages, meta-programming",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.13741142": {
        "doi": "10.5281/zenodo.13741142",
        "author": "Miljak, Luka and Bach Poulsen, Casper and Corvino, Rosilde",
        "title": "Concrete Syntax Metapatterns - Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13741142",
        "abstract": "<p>Software artifact pertaining to the paper “Concrete Syntax\nMetapatterns.” The artifact contains a Virtual Machine for running the\nCSMP Kotlin library, examples, and performance tests described in the\nImplementation/Evaluation and Discussion sections of the paper. The\nartifact also contains the source code and instructions for running it\noutside the VM.</p>",
        "keywords": "black-box parsers, concrete syntax, metaprogramming, refactoring, restructuring",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13801418": {
        "doi": "10.5281/zenodo.13801418",
        "author": "Zhang, Yilin and Dhawal, Omkar Dilip and Nandivada, V. Krishna and Chiba, Shigeru and Ugawa, Tomoharu",
        "title": "Artifact for Reducing Write Barrier Overheads for Orthogonal Persistence",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13801418",
        "abstract": "<p>This is the artifact for the paper “Reducing Write Barrier Overheads\nfor Orthogonal Persistence” accepted by the ACM SIGPLAN International\nConference on Software Language Engineering (SLE) 2024. The goal of this\nartifact is to reproduce the experimentation shown in the paper.</p>",
        "keywords": "Concurrency, Escape Analysis, Memory Management, Non-Volatile Memory, Orthogonal Persistence",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13814132": {
        "doi": "10.5281/zenodo.13814132",
        "author": "Hu, Yuefeng and Ishibe, Hiromu and Dai, Feng and Yamazaki, Tetsuro and Chiba, Shigeru",
        "title": "Artifact - Bugfox: A Trace-based Analyzer for Localizing the Cause of Software Regression in JavaScript",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13814132",
        "abstract": "<p>All the programs and dataset to reproduce the evaluation presented in\nthe corresponding paper.</p>",
        "keywords": "Code Transformation, Debugging, Regression, Runtime Tracing",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13827683": {
        "doi": "10.5281/zenodo.13827683",
        "author": "Pontes Miranda, James William and Bruneliere, Hugo and Tisi, Massimo and Suny\\'{e",
        "title": "Towards an In-context LLM-based Approach for Automating the Definition of Model Views",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13827683",
        "abstract": "<p>This artifact accompanies the paper “Towards an In-context LLM-based\nApproach for Automating the Definition of Model Views.” The provided\nfiles contain all the necessary tools to replicate the experiments\ndescribed in the paper, including scripts for generating the\ndatasets.</p>\n<p>Additionally, the artifact contains all prompt data used in the\nexperiments and baseline model views in VPDL (EMF Views DSL) and ATL.\nThis artifact enables the reproduction of the results discussed in the\npaper.</p>",
        "keywords": "Large Language Models, Model views, Model-Driven Engineering, Prompt engineering",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.13830707": {
        "doi": "10.5281/zenodo.13830707",
        "author": "Hummelgren, Lars and Palmkvist, Viktor and Stjerna, Linnea and Xu, Xuechun and Jalden, Joakim and Broman, David",
        "title": "Artifact for `Trellis: A Domain-Specific Language for Hidden Markov Models with Sparse Transitions`",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13830707",
        "abstract": "<p>This is an artifact accompanying the paper\n<code>Trellis: A Domain-Specific Language for Hidden Markov Models with Sparse Transitions</code>.\nThe artifact contains a Docker image which contains everything needed to\ntry out Trellis and run the complete benchmark suite. Further, it\ncontains the Dockerfile used to construct the image and the evaluation\nresults presented in the corresponding paper.</p>",
        "keywords": "DSL, GPU acceleration, Hidden Markov models, parallelization",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.13832238": {
        "doi": "10.5281/zenodo.13832238",
        "author": "Caylak, Gizem and Lund\\'{e",
        "title": "Reproduction package for Article “ Statically and Dynamically Delayed Sampling for Typed Probabilistic Programming Languages”",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13832238",
        "abstract": "<p>The artifact contains a Docker image (delayed.tar.gz) including\neverything needed to run the benchmarks and produce the results\npresented in the paper. The artifact also includes the Dockerfile used\nto create the Docker image.</p>",
        "keywords": "delayed, docker, Results, sampling",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13851394": {
        "doi": "10.5281/zenodo.13851394",
        "author": "Huberdeau, Laurent and Hamel, Cassandre and Monnier, Stefan and Feeley, Marc",
        "title": "Pnut: A C Transpiler Targeting POSIX Shell",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13851394",
        "abstract": "<p>This is the artifact accompanying our paper “The Design of a\nSelf-Compiling C Transpiler Targeting POSIX Shell”, accepted for\npresentation at the ACM SIGPLAN International Conference on Software\nLanguage Engineering (SLE) 2024. For ease of evaluation, the artifact\nincludes a Docker image containing the project source code, the\ndependencies and shells that can run the scripts produced by our\ntranspiler, and the scripts used to obtain the results presented in the\npaper. Some code examples to demonstrate the usage of the transpiler are\nalso included.</p>",
        "keywords": "Bootstrapping, Compiler, Reproducible Builds",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13855491": {
        "doi": "10.5281/zenodo.13855491",
        "author": "Danvy, Olivier",
        "title": "Accompanying material for 'Nested Summations'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13855491",
        "abstract": "<p>The file ‘nested-summations.c’ is an implementation in ANSI C. The\nfile ‘nested-summations.v’ is a formalization that uses the Coq Proof\nAssistant (versions 8.5pl3, 8.8.0, and 8.19.1).</p>",
        "keywords": "Fibonacci numbers, finitely nested finite sums, Jacobstahl numbers, Jacobstahl-Lucas numbers, Lucas numbers, the Coq Proof Assistant, the On-Line Encyclopedia of Integer Sequences",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.13383121": {
        "doi": "10.5281/zenodo.13383121",
        "author": "Legoupil, Maxime and Rousseau, June and Georges, A\\\"{\\i",
        "title": "Artifact and Appendix of 'Iris-MSWasm: elucidating and mechanising the security invariants of Memory-Safe WebAssembly'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13383121",
        "abstract": "<p>This is the artifact and appendix of the OOPSLA ‘24 paper\n’Iris-MSWasm: elucidating and mechanising the security invariants of\nMemory-Safe WebAssembly’. The artifact contains the coq source code as\nwell as a readme.md file that explains how to build the project and\nwhere to find the different parts of the paper. The appendix is a pdf\nthat contains figures that were elided in the paper for space\nconstraints.</p>",
        "keywords": "Capabilities, Coq, Encapsulation, Logical Relation, Mechanised Proofs, Memory Safety, MSWasm, Wasm, WebAssembly",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13383433": {
        "doi": "10.5281/zenodo.13383433",
        "author": "Simonnet, Julien and Lemerre, Matthieu and Sighireanu, Mihaela",
        "title": "Artifact for the paper 'A Dependent Nominal Physical Type System for the Static Analysis of Memory in Low Level Code'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13383433",
        "abstract": "<p>The artifact includes the sources of the analyser Codex, the set of\nbenchmarks used in experiments, and the utilities (makefiles, scripts)\nto reproduce the results presented in this paper.</p>",
        "keywords": "Abstract interpretation, Dependent types, Spatial memory safety, Type checking, Typed C",
        "badges": [
            "available",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13388204": {
        "doi": "10.5281/zenodo.13388204",
        "author": "Kim, Caleb and Li, Pai and Mohan, Anshuman and Butt, Andrew and Sampson, Adrian and Nigam, Rachit",
        "title": "Reproduction Package for \"Unifying Static and Dynamic Intermediate Languages for Accelerator Generators\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13388204",
        "abstract": "<p>The artifact is a VirtualBox Image to reproduce the results for\n“Unifying Static and Dynamic Intermediate Languages for Accelerator\nGenerators”. In particular, the artifact can be used to reproduce the\ngraphs and quantitative claims made in section 6 and 7 of the paper.\nMore detailed instructions can be found in the REAMDE.md of the\nfollowing repository: https://github.com/cucapra/calyx-resource-eval,\nand more general documentation of Piezo can be found here:\nhttps://docs.calyxir.org/.</p>\n<p>The VirtualBox image consists of: - The Calyx/Piezo compiler - fud,\nthe compiler driver - The Dahlia compiler - The evaluation code. In\nparticular, it contains the scripts necessary to generate the data and\ngraphs used in the paper. It also contains the source code for the\nbenchmarks used in the paper: in particular Polybench benchmarks written\nin Dahlia and PIFO tree benchmarks written in Piezo. For the systolic\narrays, fud uses a Python script to generate systolic arrays written in\nPiezo. More details about fud’s systolic array generation can be found\nhere: https://docs.calyxir.org/frontends/systolic-array.html.</p>",
        "keywords": "Accelerator Design Language, Intermediate Language",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.13393058": {
        "doi": "10.5281/zenodo.13393058",
        "author": "Qian, Kelvin and Smith, Scott and Stride, Brandon and Weng, Shiwei and Wu, Ke",
        "title": "Software Artifact for Semantic-Type-Guided Bug Finding",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13393058",
        "abstract": "<p>This is the codebase for the languages BlueJay, Jay, and JayIL, as\nwell as the languages’ semantic-type-guided type checker. This code is\ndeveloped by the JHU Programming Languages Lab. It is a pipeline of\nfunctional languages that fits for research at each layer.</p>\n<p>This snapshot is the artifact for Semantic-Type-Guided Bug\nFinding.</p>\n<p>With this artifact, the user can recreate all benchmarks seen in the\npaper.</p>",
        "keywords": "Incorrectness, OCaml, Semantic Typing, Symbolic Execution, Test Generation",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.13446443": {
        "doi": "10.5281/zenodo.13446443",
        "author": "Wong, Augustine and Bucci, Paul and Beschastnikh, Ivan and Fedorova, Alexandra",
        "title": "NonSequitur Source Code and User Study Result Data for the paper \"Making Sense of Multi-Threaded Application Performance at Scale with NonSequitur.\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13446443",
        "abstract": "<p>The artifact accompanying the paper “Making Sense of Multi-Threaded\nApplication Performance at Scale with NonSequitur,” which contains: The\nsource code for the NonSequitur visualization tool. Some additional\nPython scripts and data collected/used during the user study described\nin the paper.</p>\n<p>This paper was accepted in the OOPSLA 2024 conference held in\nPasadena, California. The artifact is contained in the zip file\n“oopsla24-ns-artifact.zip.” A detailed description of the artifact is in\nthe file “OOPSLA 2024 NonSequitur Artifact Doc.pdf.”</p>",
        "keywords": "Multi-threaded Applications, Outlier events, Performance debugging, Runtime trace visualization",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.13485897": {
        "doi": "10.5281/zenodo.13485897",
        "author": "Alvarez-Picallo, Mario and Freund, Teodoro and Ghica, Dan R. and Lindley, Sam",
        "title": "Effect Handlers for C via Coroutines - Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13485897",
        "abstract": "<p>Artifact for the library and benchmarks described in the Effect\nHandlers for C via Coroutines paper published at OOPSLA 2024.</p>",
        "keywords": "C, Coroutines, Effect Handlers",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13487216": {
        "doi": "10.5281/zenodo.13487216",
        "author": "Venev, Hristo and Gehr, Timon and Dimitrov, Dimitar and Vechev, Martin",
        "title": "Artifact for \"Modular Synthesis of Efficient Quantum Uncomputation\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13487216",
        "abstract": "<p>This archive contains the artifact for the paper “Modular Synthesis\nof Efficient Quantum Uncomputation”. &nbsp;It can be used to reproduce the\nresults in Tables 1-3.</p>",
        "keywords": "intermediate representations, quantum programming languages",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13502454": {
        "doi": "10.5281/zenodo.13502454",
        "author": "Bittner, Paul Maximilian and Schulthei\\ss{",
        "title": "Vatras - Artifact for the Paper \"On the Expressive Power of Languages for Static Variability\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13502454",
        "abstract": "<p>Vatras is an Agda library and formalizes all results in our\npaper:</p>\n<ul>\n<li>All formal languages for static software variability presented in\nour survey (<strong>Section 3 + Table 1</strong>) are formalized as\nalgebraic datatypes.</li>\n<li>The library implements our formal framework for language\ncomparisons, including necessary data structures, theorems, and proofs\n(<strong>Section 4</strong>).</li>\n<li>This library contains all theorems and proofs to establish the map\nof variability languages we find by comparing the languages from our\nsurvey with our framework (<strong>Section 5</strong>).</li>\n</ul>\n<p>Additionally, our library comes with a small demo. When run in a\nterminal, our demo will show a translation roundtrip, showcasing the\ncircle of compilers developed for identifying the map of variability\nlanguages (Section 5).</p>",
        "keywords": "expressive power, formalization, proofs, software product lines, software variability",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/VariantSync/Vatras/tree/v1.0"
    },
    "10.5281/zenodo.13599952": {
        "doi": "10.5281/zenodo.13599952",
        "author": "Somers, Thomas and Krebbers, Robbert",
        "title": "Artifact of 'Verified Lock-Free Session Channels with Linking'",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13599952",
        "abstract": "<p>This artifact contains the Coq mechanization of the OOPSLA 2024\npaper: ‘Verified Lock-Free Session Channels with Linking’. It contains\nthe source code, instructions for evaluating the artifact, and the\ncorrespondence between the artifact and paper.</p>",
        "keywords": "Coq, Iris, Message passing, separation logic, session types",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13618225": {
        "doi": "10.5281/zenodo.13618225",
        "author": "Liu, Si and Gu, Long and Wei, Hengfeng and Basin, David",
        "title": "Artifact for \"Plume: Efficient and Complete Black-Box Checking of Weak Isolation Levels\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13618225",
        "abstract": "<p>This artifact provides a Docker image that includes all the necessary\ntools and experimental data used in the paper titled “Plume: Efficient\nand Complete Black-Box Checking of Weak Isolation Levels.” The Docker\nimage ensures a fully configured environment to facilitate the\nreproducibility of the results presented in the paper.</p>\n<p>The Docker image includes:</p>\n<ul>\n<li>Comparison Tools: A suite of tools required for the\nexperiments.</li>\n<li>Experimental Data: Complete datasets used in the experiments.</li>\n<li>Reproduction Scripts: Scripts for reproducing the experimental\nresults.</li>\n</ul>",
        "keywords": "black-box testing, formal specification, weak isolation levels",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13618683": {
        "doi": "10.5281/zenodo.13618683",
        "author": "Yi, Xin and Yu, Hengbiao and Chen, Liqian and Mao, Xiaoguang and Wang, Ji",
        "title": "FPCC: Detecting Floating-Point Errors via Chain Conditions (Paper Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13618683",
        "abstract": "<p>This is the artifact for “FPCC: Detecting Floating-Point Errors via\nChain Conditions”, published in SPLASH/OOPSLA 2024. All instructions can\nbe found in the zip file.</p>",
        "keywords": "accuracy, chain condition, error-triggering input, floating-point error",
        "badges": [
            "available",
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.13621222": {
        "doi": "10.5281/zenodo.13621222",
        "author": "Cheng, Luyu and Parreaux, Lionel",
        "title": "The Ultimate Conditional Syntax (Artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13621222",
        "abstract": "<p>This is the artifact of OOPSLA paper titled <em>The Ultimate\nConditional Syntax</em>. The latest version of the artifact can be found\nat <a href=\"https://github.com/hkust-taco/ucs\" class=\"uri\">https://github.com/hkust-taco/ucs</a>. A online web demo can\nbe found at <a href=\"https://ucs.mlscript.dev\" class=\"uri\">https://ucs.mlscript.dev</a>. A comprehensive manual of the\nartifact is located at <code>manual/manual.pdf</code> in the\narchive.</p>",
        "keywords": "compiler, MLscript, pattern matching, semantics, syntax, transformation, web demo",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13621721": {
        "doi": "10.5281/zenodo.13621721",
        "author": "Chen, Ethan and Chang, Jiwon and Zhu, Yuhao",
        "title": "CoolerSpace Artifacts",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13621721",
        "abstract": "<p>This artifact contains four repositories.</p>\n<p>The first repository, CoolerSpace, is the main repository for the\nCoolerSpace library.</p>\n<p>The second repository, eggwrap, is a wrapper for the egg equality\nsaturation framework.</p>\n<p>The third repository, onneggs, is an optimization tool for\nCoolerSpace programs.</p>\n<p>The fourth repository, CoolerSpaceBenchmarker, contains a\nbenchmarking suite for CoolerSpace and several example CoolerSpace\nprograms.</p>\n<p>Each repository has a readme.md file with more information.</p>",
        "keywords": "domain-specific languages, graphics",
        "badges": [
            "available"
        ],
        "github_related_identifiers": "https://github.com/uwplse/tensat"
    },
    "10.5281/zenodo.13622515": {
        "doi": "10.5281/zenodo.13622515",
        "author": "Lobo-Vesga, Elisabet and Russo, Alejandro and Gaboardi, Marco and Corti\\~{n",
        "title": "Paper Artifact: Sensitivity by Parametricity",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13622515",
        "abstract": "<p>The official artifact accompanying the OOPSLA 2024 paper “Sensitivity\nby Parametricity” for the Spar library. The paper explores the use of\nparametricity to perform sensitivity analysis on user-defined functions,\nadditionally, it introduces a Haskell library called Spar that\nimplements this technique. Spar encodes value distances as type-level\nnaturals, proving the sensitivity of a function is reduced to\ntype-checking! This artifact is distributed as a Docker image where the\nSpar library is built and ready to use. Instructions for building the\nimage are provided in README.</p>",
        "keywords": "differential privacy, functional programming languages, Haskell, sensitivity",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13624896": {
        "doi": "10.5281/zenodo.13624896",
        "author": "Goharshady, Amir Kafshdar and Lam, Chun Kit and Parreaux, Lionel",
        "title": "Fast and Optimal Extraction for Sparse Equality Graphs",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13624896",
        "abstract": "<p>This artifact contains the implementation of our optimal extraction\nalgorithm, as well as experiment with the cranelift (wasmtime)\ncompiler.</p>",
        "keywords": "e-graphs, optimal extraction, treewidth",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13625822": {
        "doi": "10.5281/zenodo.13625822",
        "author": "Geeson, Luke and Brotherston, James and Dijkstra, Wilco and Donaldson, Alastair F. and Smith, Lee and Sorensen, Tyler and Wickerson, John",
        "title": "Artifact for \"Mix Testing: Specifying and Testing ABI Compatibility Of C/C++ Atomics Implementations\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13625822",
        "abstract": "<p>This is the artifact accompanying our paper “Mix Testing: Specifying\nand Testing ABI Compatibility Of C/C++ Atomics Implementations”,\nconditionally accepted for publication at OOPSLA2024</p>\n<p>The artifact consists of scripts to reproduce the figures in the\npaper paper. We aim for all badges. For comments please contact\nluke.geeson@cs.ucl.ac.uk.</p>",
        "keywords": "Compiler Testing, Concurrency, Interoperability",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.13625830": {
        "doi": "10.5281/zenodo.13625830",
        "author": "Yang, Ziteng and Shirako, Jun and Sarkar, Vivek",
        "title": "Artifact for \"Fully Verified Instruction Scheduling\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13625830",
        "abstract": "<p>This is the artifact of our project in our paper Fully Verified\nInstruction Scheduling: a lightweight and flexible approach.</p>\n<p>The artifacts consists of two parts: mechanized proofs and\nperformance experiments. Evaluating the mechanized proofs only requires\nsoftware dependencies on Linux machine and the use of proof assistant\nCoq. Evaluating the experiments requires an in-order Risc-V\nhardware.</p>\n<p>The documentations contains step-by-step building guides and a\ndetailed paper-to-artifact correspondence guide that matches every\nlemma/theorems in our submitted paper with the mechanized proofs.</p>",
        "keywords": "CompCert, Compiler Verification, Coq Proof Assistant, Instruction-level\nParallelism",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13625874": {
        "doi": "10.5281/zenodo.13625874",
        "author": "Carnier, Denis and Pottier, Fran\\c{c",
        "title": "Type Inference Logics - Artifact",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13625874",
        "abstract": "<p>This artifact contains both sources and a prebuilt Docker image. The\nsources file contains a <code>README.md</code> for navigating the source\ncode with instructions on how to get started. The image file contains a\nDocker image compiled for AMD64 with all the necessary dependencies to\ncheck the code with the Coq proof assistant and GHC.</p>",
        "keywords": "elaboration, program verification, type inference",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13626195": {
        "doi": "10.5281/zenodo.13626195",
        "author": "Nagar, Kartik and Sahoo, Anmol and Chowdhury, Romit Roy and Jagannathan, Suresh",
        "title": "Artifact - Automated Robustness Verification of Concurrent Data Structure Libraries Against Relaxed Memory Models",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13626195",
        "abstract": "<p>The artifact for our submission contains the implementation of the\ntool (Robocop) and various library implementations tested for\nrobustness. Robocop is an executable program, written in Python, that\ntakes as input a library implementation in C and library specifications\nin a text format. Internally, it parses the C code, performs the\nnecessary analysis to generate constraints and generates SMT calls to\nZ3, to discharge whether the library is robust or not.</p>",
        "keywords": "verification, weak-memory",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13626235": {
        "doi": "10.5281/zenodo.13626235",
        "author": "Takashima, Yoshiki and Cho, Chanhee and Martins, Ruben and Jia, Limin and P\\u{a",
        "title": "Artifact Package for Paper \"Crabtree: Rust API Test Synthesis Guided by Coverage and Type\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13626235",
        "abstract": "<p>Download the tarball and use the README inside.</p>",
        "keywords": "API testing, fuzzing, program synthesis, Rust",
        "badges": [
            "available"
        ]
    },
    "10.5281/zenodo.13626469": {
        "doi": "10.5281/zenodo.13626469",
        "author": "Guan, Zhichao and Cao, Yiyuan and Yu, Tailai and Wang, Ziheng and Wang, Di and Hu, Zhenjiang",
        "title": "Artifact for OOPSLA'24: Semantics Lifting for Syntactic Sugar",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13626469",
        "abstract": "<p>Artifact for OOPSLA’24: Semantics Lifting for Syntactic Sugar. This\nproject will be maintained at\nhttps://github.com/vbcpascal/Osazone-oopsla24.</p>",
        "keywords": "Domain-specific Languages, Programming Language, Syntactic Sugar",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13770453": {
        "doi": "10.5281/zenodo.13770453",
        "author": "Ma, Cong and Ge, Zhaoyi and Lee, Edward and Zhang, Yizhou",
        "title": "Lexical Effect Handlers, Directly (artifact)",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13770453",
        "abstract": "<p>This is the artifact accompanying the paper\n<code>Lexical Effect Handlers, Directly</code>.</p>",
        "keywords": "Algebraic effects, compiler correctness, continuations, effect handlers, Lexa, Salt, stack switching",
        "badges": [
            "available",
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.13825844": {
        "doi": "10.5281/zenodo.13825844",
        "author": "Saioc, Georgian-Vlad and Lange, Julien and M\\o{",
        "title": "Artifact Submission For \"Automated Verification of Parametric Channel-Based Process Communication\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13825844",
        "abstract": "<p>Public release of OOPSLA 2024 Ginger artifact. Includes a small set\nof example program fragments. Experimental data used in the evaluation\nsection of the original paper is proprietary.</p>",
        "keywords": "automated verification, Go, invariant discovery, message passing concurrency, partial deadlocks, static analysis",
        "badges": [
            "available",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/VladSaioc/oopsla-24-artifact/tree/public-artifact"
    },
    "10.5281/zenodo.13863694": {
        "doi": "10.5281/zenodo.13863694",
        "author": "Mariano, Benjamin and Wang, Ziteng and Pailoor, Shankara and Collberg, Christian and Dillig, I\\c{s",
        "title": "Software Artifact for \"Control-Flow Deobfuscation using Trace-Informed Compositional Program Synthesis\"",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.13863694",
        "abstract": "<p>Software artifact for the paper “Control-Flow Deobfuscation using\nTrace-Informed Compositional Program Synthesis”.</p>",
        "keywords": "Deobfuscation, Program Synthesis",
        "badges": [
            "available",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.7143413": {
        "doi": "10.5281/zenodo.7143413",
        "author": "Bilal, Muhammad and Canini, Marco and Fonseca, Rodrigo and Rodrigues, Rodrigo",
        "title": "Accompanying artifact for the paper \"With Great Freedom Comes Great Opportunity: Rethinking Resource Allocation for Serverless Functions\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7143413",
        "abstract": "<p>This repository contains the code and data related to the research paper: With Great Freedom Comes Great Opportunity: Rethinking Resource Allocation for Serverless Functions. It includes&nbsp;the serverless applications, input data for the applications, the optimization algorithms, analysis notebooks and the performance data collected for the experimental scenarios described in the paper.&nbsp;</p>",
        "keywords": "Program Synthesis, Program Translation",
        "badges": [
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.6335844": {
        "doi": "10.5281/zenodo.6335844",
        "author": "Shen, Weihai and khanna, Ansh and Angel, Sebastian and Sen, Siddhartha and Mu, Shuai",
        "title": "Implementation of the article \"Rolis: a software approach to efficiently replicating multi-core transactions\"",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6335844",
        "abstract": "<p></p><p>Artifact appendix item for Eurosys22'</p><p></p>",
        "keywords": "fuzzing mutation compilers",
        "badges": [
            "reproduced",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/stonysystems/rolis/tree/final-v1.0"
    },
    "10.5281/zenodo.4836022": {
        "doi": "10.5281/zenodo.4836022",
        "author": "Ashkboos, Saleh and De Sensi, Daniele and Di Girolamo, Salvatore and Hoefler, Torsten and Li, Shigang",
        "title": "Implementation of the article \"Flare: Flexible In-Network Allreduce\"",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.4836022",
        "abstract": "<p></p><p>SC21 Artifact</p><p></p>",
        "keywords": "Datalog, Software Bugs, Static Analysis Frameworks, Syntactic Patterns",
        "badges": [
            "reproduced",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.2640455": {
        "doi": "10.5281/zenodo.2640455",
        "author": "Wang, Peixin and Fu, Hongfei and Goharshady, Amir Kafshdar and Chatterjee, Krishnendu and Qin, Xudong and Shi, Wenjun",
        "title": "Replication Package for Article: Cost Analysis of Nondeterministic Probabilistic Programs",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.2640455",
        "abstract": "<p>The artifact contains an implementation of our approach in Matlab. Please see the readme file.</p>",
        "keywords": "Probabilistic Programs, Program Cost Analysis",
        "badges": [
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.2641028": {
        "doi": "10.5281/zenodo.2641028",
        "author": "Chajed, Tej and Tassarotti, Joseph and Kaashoek, M. Frans and Zeldovich, Nickolai",
        "title": "Argosy: Verifying Layered Storage Systems with Recovery Refinement (Artifact)",
        "year": "2019",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.2641028",
        "abstract": "<p>Artifact for the PLDI 2019 paper \"Argosy: Verifying layered storage systems with recovery refinement\". Includes the Coq sources for the Argosy framework and the examples we verified using Argosy.</p>",
        "keywords": "Coq, Kleene Algebra, Refinement",
        "badges": [
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.1494266": {
        "doi": "10.5281/zenodo.1494266",
        "author": "v. Gleissenthall, Klaus and K\\i{",
        "title": "Replication Package for Article: \"Pretend Synchrony: Synchronous Verification of Asynchronous Distributed Programs\"",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1494266",
        "abstract": "<p>The artifact contains a VirtualBox VM that can be used to replicate the results mentioned in \"Pretend Synchrony: Synchronous Verification of Asynchronous Distributed Programs\". It includes the source code that implements our verification framework called Goolong, and the benchmarks we have used to evaluate our approach. For instructions, please visit https://goto.ucsd.edu/~rkici/popl19_artifact_evaluation/</p>",
        "keywords": "Distributed Systems, Pretend Synchrony, Reduction, Symmetry, Verification",
        "badges": [
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.1412854": {
        "doi": "10.5281/zenodo.1412854",
        "author": "Mayer, Mika\\\"{e",
        "title": "Implentation for: Bidirectional Evaluation with Direct Manipulation",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1412854",
        "abstract": "<p>This release matches the code submitted for the OOPSLA 2018 artifact evaluation of the paper \"Bidirectional Evaluation with Direct Manipulation\" by Ravi Chugh and Mika l Mayer. The license has been updated with respect to the University of Chicago filing a patent on this technology.</p>",
        "keywords": "Bidirectional Programming, Direct Manipulation, Sketch-n-Sketch",
        "badges": [
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/MikaelMayer/sketch-n-sketch/tree/0.7.1b"
    },
    "10.5281/zenodo.1458158": {
        "doi": "10.5281/zenodo.1458158",
        "author": "Ries, Beno\\^{\\i",
        "title": "Excalibur",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1458158",
        "abstract": "<p>Excalibur is an open-source UML Requirements Engineering tool, developed as a plugin to Eclipse. Excalibur provides an Excalibur Outline, developed as an Eclipse view, which allows to explore the 3 Excalibur project types (specification, report, and simulation). Excalibur, which defines the Messir requirements specification DSL, is able to generate UML-like diagram view (use-case diagrams, class diagrams, sequence diagrams); The third-party technologies used and required for the end-users to be known are : Eclipse, UML, OCL, LaTeX and prolog (for the simulation only).</p>",
        "keywords": "Eclipse, Latex, Model-Driven Engineering, Prolog Simulation, Report Generation, Requirements Engineering, UML",
        "badges": [
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.1460552": {
        "doi": "10.5281/zenodo.1460552",
        "author": "R\\'{e",
        "title": "Morbig: a Static Parser for POSIX Shell",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1460552",
        "abstract": "<p>Morbig is a parser for shell scripts written in the POSIX shell script language. It parses the scripts statically, that is without executing them, and constructs a concrete syntax tree for each of them. The concrete syntax trees are built using constructors according to the shell grammar of the POSIX standard.</p>",
        "keywords": "functional programming, menhir, ocaml, parser, posix shell, scripts",
        "badges": [
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/colis-anr/morbig/tree/v0.9.1"
    },
    "10.5281/zenodo.1294300": {
        "doi": "10.5281/zenodo.1294300",
        "author": "Davis, James C. and Coghlan, Christy A. and Servant, Francisco and Lee, Dongyoon",
        "title": "Artifact (software + dataset) for \"The Impact of Regular Expression Denial of Service (ReDoS) in Practice: an Empirical Study at the Ecosystem Scale\"",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1294300",
        "abstract": "<p># Ecosystem-scale regexp study Welcome to the FSE'18 artifact for the ESEC/FSE paper *\"The Impact of Regular Expression Denial of Service (ReDoS) in Practice: an Empirical Study at the Ecosystem Scale\"*, by J.C. Davis, C.A Coghlan, F. Servant, and D. Lee, all of Virginia Tech. This paper describes a study in which we: - extracted regular expressions (regexes, regexps) from npm and pypi modules - analyzed the regexes along several dimensions Our artifact consists of: - Code to analyze a regex for super-linear performance (Table 1), degree of vulnerability (Table 2), semantic meaning (Table 3), and use of anti-patterns (Table 4). - Unique regexes collected from npm and pypi modules. We are releasing these regexes raw (without analysis or source module(s)) due to security concerns. In addition, we wrote code to statically extract regexes from npm and pypi modules. We released this code as part of our `vuln-regex-detector` software, available [here](https://github.com/davisjam/vuln-regex-detector). Regex extraction was uninteresting from a scientific perspective so we do not elaborate on it in this artifact. In addition to this directory's `README.md`, each sub-tree comes with one or more READMEs describing the software and tests. ## Installation ### By hand To install, execute the script `./configure` on an Ubuntu 16.04 machine with root privileges. This will obtain and install the various dependencies (OS packages, REDOS detectors, npm modules, and pypi modules). It will also initialize submodules. The final line of this script is `echo \"Configuration complete. I hope everything works!\"`. If you see this printed to the console, great! Otherwise...alas. ### Container To facilitate replication, we have published a [containerized version](https://hub.docker.com/r/jamiedavis/daviscoghlanservantlee-fse18-regexartifact/) of this project on hub.docker.com. The container is based on an Ubuntu 16.04 image so it is fairly large. For example, you might run: ``` docker pull jamiedavis/daviscoghlanservantlee-fse18-regexartifact docker run -ti jamiedavis/daviscoghlanservantlee-fse18-regexartifact &gt; vim .env # Set ECOSYSTEM_REGEXP_PROJECT_ROOT=/davis-fse18-artifact/EcosystemREDOS-FSE18 &gt; . .env &gt; ./full-analysis/analyze-regexp.pl ./full-analysis/test/vuln-email.json ```</p>",
        "keywords": "ReDoS, regexes, Regular expressions",
        "badges": [
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.1434471": {
        "doi": "10.5281/zenodo.1434471",
        "author": "Zhang, Yunming and Yang, Mengjiao and Baghdadi, Riyadh and Kamil, Shoaib and Shun, Julian and Amarasinghe, Saman",
        "title": "GraphIt-DSL/graphit: Initial release to make the artifact available for OOPSLA18",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1434471",
        "abstract": "<p>Initial release to make the artifact available for OOPSLA18.</p>",
        "keywords": "Compiler Optimization, Domain Specific Language, Graph Algorithms",
        "badges": [
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/GraphIt-DSL/graphit/tree/v0.1.0"
    },
    "10.5281/zenodo.1420217": {
        "doi": "10.5281/zenodo.1420217",
        "author": "Aydin, Abdulbaki and Eiers, William and Bang, Lucas and Brennan, Tegan and Gavrilov, Miroslav and Bultan, Tevfik and Yu, Fang",
        "title": "Tool for article: Parameterized Model Counting for String and Numeric Constraints",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1420217",
        "abstract": "<p>The Multi-Track Automata Based Counter (MT-ABC) is a string and numeric constriant solver and model counter. ABC provides solutions to systems of string and numeric constraints in the form of a multi-tracked deterministic finite automaton. In addition ABC produces symbolic representation of the number of strings and integers within a length bound, k, that satisfy a set of constraints. ABC can also output the number of satisfying solutions given a bound.</p>",
        "keywords": "constraint solving, model counting, quantitative program analysis",
        "badges": [
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.1412749": {
        "doi": "10.5281/zenodo.1412749",
        "author": "Alimadadi, Saba and Zhong, Di and Madsen, Magnus and Tip, Frank",
        "title": "Replication Package for Article: Finding Broken Promises in Asynchronous JavaScript Programs",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1412749",
        "abstract": "<p>Recently, promises were added to ECMAScript 6, the JavaScript standard, in order to provide better support for the asynchrony that arises in user interfaces, network communication, and non-blocking I/O. Using promises, programmers can avoid common pitfalls of event-driven programming such as event races and the deeply nested counterintuitive control flow referred to as  callback hell . Unfortunately, promises have complex semantics and the intricate control  and data-flow present in promise-based code hinders program comprehension and can easily lead to bugs. The promise graph was proposed as a graphical aid for understanding and debugging promise-based code. PromiseKeeper is an open-source tool which performs a dynamic analysis to create promise graphs and infer common promise anti-patterns. The results of applying PromiseKeeper to 12 open source promise-based Node.js applications suggest that the constructed promise graphs can provide developers with valuable information about occurrences of common anti-patterns in their promise-based code, and that promise graphs can be constructed with acceptable run-time overhead.</p>",
        "keywords": "Dynamic Analysis, JavaScript, Promise Graph, PromiseKeeper, Promises",
        "badges": [
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.1317760": {
        "doi": "10.5281/zenodo.1317760",
        "author": "Saini, Vaibhav and Farmahinifarahani, Farima and Lu, Yadong and Baldi, Pierre and Lopes, Cristina V.",
        "title": "Reusable Package for Article: Oreo: Detection of Clones in the Twilight Zone",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1317760",
        "abstract": "<p>This artifact contains Oreo, a clone detector designed to find code clones in the Twilight zone, along with the input data needed for running this tool, and the materials used in evaluating it.</p>",
        "keywords": "Clone detection, Information Retrieval, Machine Learning, Software Metrics",
        "badges": [
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/Mondego/oreo-artifact/tree/v1.0.0"
    },
    "10.5281/zenodo.1310129": {
        "doi": "10.5281/zenodo.1310129",
        "author": "Kate, Sayali and Ore, John-Paul and Zhang, Xiangyu and Elbaum, Sebastian and Xu, Zhaogui",
        "title": "Artifact (software + dataset) for \"Phys: Probabilistic Physical Unit Assignment and Inconsistency Detection\"",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1310129",
        "abstract": "<p>This artifact contains a docker version of the tool Phys, along with source code and a dataset of C++ files that build against the Robot Operating System (ROS).</p>",
        "keywords": "abstract type inference, factor graphs, robot software, software defect analysis",
        "badges": [
            "evaluated and reusable",
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.1315183": {
        "doi": "10.5281/zenodo.1315183",
        "author": "Wang, Ying and Wen, Ming and Liu, Zhenwei and Wu, Rongxin and Wang, Rui and Yang, Bo and Yu, Hai and Zhu, Zhiliang and Cheung, Shing-Chi",
        "title": "Available badge for Article: 'Do the Dependency Conflicts in My Project Matter?'",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1315183",
        "abstract": "<p>Decca is a Maven plugin which detects dependency conflict issues between Java projects and third party libraries and assesses the issues' severity levels to warn developers whether the issues are benign or harmful (e.g., causing runtime exceptions). HomePage: https://deccadc.github.io/fse18/</p>",
        "keywords": "Dependency conflict, third party library",
        "badges": [
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/DeccaDC/RawData/tree/v1.0.0"
    },
    "10.5281/zenodo.1413855": {
        "doi": "10.5281/zenodo.1413855",
        "author": "Koppel, James and Premtoon, Varot and Solar-Lezama, Armando",
        "title": "Cubix: Source, Docker Image, and experiments",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1413855",
        "abstract": "<p>Contains: * Source code of Cubix * A Dockerfile and the resulting image with a working build of Cubix, * See \"Data Documentation\" below</p>",
        "keywords": "cubix, program transformation, turing test",
        "badges": [
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.1419090": {
        "doi": "10.5281/zenodo.1419090",
        "author": "Zhang, Hailong and Wu, Haowei and Rountev, Atanas",
        "title": "APTWear",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1419090",
        "abstract": "<p>This artifact contains the static analysis, testing framework, experimental subjects, materials for app market study, logs generated by the static analysis, and the result of testing.</p>",
        "keywords": "Android Wear, energy, sensor, smartwatch, static analysis, testing",
        "badges": [
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.1419882": {
        "doi": "10.5281/zenodo.1419882",
        "author": "Guo, Shengjian and Wu, Meng and Wang, Chao",
        "title": "Implementation and benchmarks for article: Adversarial Symbolic Execution for Detecting Concurrency-Related Cache Timing Leaks",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1419882",
        "abstract": "<p>The source code, the document, and the benchmarks of the Adversarial Symbolic Execution tool.</p>",
        "keywords": "Cache timing leak, Concurrency, Symbolic execution",
        "badges": [
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/DanielGuoVT/symsc/tree/1.0"
    },
    "10.5281/zenodo.1420135": {
        "doi": "10.5281/zenodo.1420135",
        "author": "Kini, Dileep and Mathur, Umang and Viswanathan, Mahesh",
        "title": "Data Race Detection on Compressed Traces",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1420135",
        "abstract": "<p>ZipTrack analyses traces of concurrent programs, compressed as SLPs (straight line programs) and checks if there is a race. ZipTrack performs two analyses : 1. HB race detection 2. LockSet violation detection ZipTrack is written in Java. The following classes let you perform different analyses: 1. `ZipHB.java` - for HB race detection on compressed traces 2. `ZipLockSet.java` - for detecting violations of lockset discipline on compressed traces 3. `ZipMetaInfo.java` - for printing trace characteristics. 4. `TransformGrammar.java` - for transforming an SLP S into another SLP S' with more production rules that have terminal symbols only.</p>",
        "keywords": "compression, concurrency, dynamic program analysis, Eraser lockset, happens-before, race detection",
        "badges": [
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/umangm/ziptrack/tree/v1.0.0"
    },
    "10.5281/zenodo.1307486": {
        "doi": "10.5281/zenodo.1307486",
        "author": "Kaiser, Jan-Oliver and Ziliani, Beta and Krebbers, Robbert and R\\'{e",
        "title": "Mtac2 and Iris packages corresponding to the article: \"Mtac2: Typed Tactics for Backward Reasoning in Coq\"",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1307486",
        "abstract": "<p>The artifact includes the code for Mtac2, and a modified branch of Iris 3.1.0 using and showcasing typed tactics.</p>",
        "keywords": "Coq, Dependent types, Tactics",
        "badges": [
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.1311928": {
        "doi": "10.5281/zenodo.1311928",
        "author": "Nandi, Chandrakana and Wilcox, James R. and Panchekha, Pavel and Blau, Taylor and Grossman, Dan and Tatlock, Zachary",
        "title": "Artifact for paper: Functional Programming for Compiling and Decompiling Computer-Aided Design",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1311928",
        "abstract": "<p>In our paper, we made the following contributions (Section 1, last paragraph): 1. A purely functional programming language model for 3D CAD along with denotational semantics for both CAD and triangular mesh. 2. A meaning preserving compilation algorithm from 3D CAD to mesh along with a proof sketch for compiler correctness. 3. A synthesis algorithm that can reverse engineer 3D CAD programs from meshes. This artifact demonstrates the following in support of the above contributions: 1. An early prototype of the compiler from the core 3D CAD language to mesh. The goal is to show that our compiler is capable of generating valid triangular meshes as we described in the paper. To that end we provide 5 CAD programs which cover all the core CAD language features we described in Figure 4 of the paper: 3D primitives, affine transformations, binary operations, and their combinations. 2. An early prototype of the synthesis tool or reverse compiler (Section 5) from 3D mesh to CAD. The goal is to show that the synthesis tool is capable of synthesizing CAD programs from meshes for the case studies we described in Section 6 of the paper. For further details, please refer to our AEC guide document.</p>",
        "keywords": "compilers, computational geometry., denotational semantics, language design, program synthesis",
        "badges": [
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/uwplse/reincarnate-aec/tree/v1.0"
    },
    "10.5281/zenodo.1306029": {
        "doi": "10.5281/zenodo.1306029",
        "author": "Krebbers, Robbert and Jourdan, Jacques-Henri and Jung, Ralf and Tassarotti, Joseph and Kaiser, Jan-Oliver and Timany, Amin and Chargu\\'{e",
        "title": "Coq development for MoSeL: A General, Extensible Modal Framework for Interactive Proofs in Separation Logic",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1306029",
        "abstract": "<p>This is the artifact for the paper \"MoSeL: A General, Extensible Modal Framework for Interactive Proofs in Separation Logic\". The artifact comes in two forms: As a \"mosel-final.zip\" file to build yourself, and as a preconfigured VM \"MoSeL Artifact.ova\" with the artifact already set up and built. You can find the paper and the latest version of this artifact at http://iris-project.org/mosel/</p>",
        "keywords": "Coq, Interactive Theorem Proving, Separation Logic",
        "badges": [
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.1297764": {
        "doi": "10.5281/zenodo.1297764",
        "author": "Lyu, Yingjun and Li, Ding and Halfond, William G. J.",
        "title": "Replication Package for Article: Remove RATs from Your Code: Automated Optimization of Resource Inefficient Database Writes for Mobile Applications",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1297764",
        "abstract": "<p>To facilitate research into local database optimization in mobile applications, we have made available the raw data, analysis code and analysis results that were used in our paper. The artifact includes the source code of the detection and optimization analyses, energy and runtime measurement data, and detailed analysis results for each research question in the paper.</p>",
        "keywords": "database, mobile applications, Performance optimization",
        "badges": [
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.1299357": {
        "doi": "10.5281/zenodo.1299357",
        "author": "Wu, Meng and Guo, Shengjian and Schaumont, Patrick and Wang, Chao",
        "title": "[ISSTA '18 Artifact Evaluation] Eliminating Timing Side-Channel Leaks using Program Repair",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1299357",
        "abstract": "<p>This is an artifact evaluation release for ISSTA 18' paper \"Eliminating Timing Side-Channel Leaks using Program Repair\" The artifact is in an open virtual machine format which can be open with VirtualBox or VMware. To log into the virtual machine, use username: ae, pwd: 123</p>",
        "keywords": "program repair, timing side channel",
        "badges": [
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.1306224": {
        "doi": "10.5281/zenodo.1306224",
        "author": "Tabareau, Nicolas and Tanter, \\'{E",
        "title": "Coq Development: Equivalences for Free: Univalent Parametricity for Effective Transport",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1306224",
        "abstract": "<p>Coq source files accompanying the ICFP 2018 paper \"Equivalences for Free: Univalent Parametricity for Effective Transport\", by Tabareau, Tanter, Sozeau.</p>",
        "keywords": "Coq, parametricity, Univalence",
        "badges": [
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.1296310": {
        "doi": "10.5281/zenodo.1296310",
        "author": "Bl\\\"{a",
        "title": "HSR Parallel Checker",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1296310",
        "abstract": "<p>Checker tool described in the paper. Please follow Installation.pdf for the tool setup and further instruction steps.</p>",
        "keywords": ".NET, C#, data race, deadlock, static checker",
        "badges": [
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.1301239": {
        "doi": "10.5281/zenodo.1301239",
        "author": "DeFreez, Daniel and Thakur, Aditya V. and Rubio-Gonz\\'{a",
        "title": "func2vec-fse2018-artifact",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1301239",
        "abstract": "<p>Artifact with source for running Func2vec and link to data for reproducing experiments.</p>",
        "keywords": "error handling, program analysis, program comprehension, program embeddings, specification mining",
        "badges": [
            "evaluated and reusable",
            "evaluated and functional"
        ],
        "github_related_identifiers": "https://github.com/defreez-ucd/func2vec-fse2018-artifact/tree/fse2018-artifactsubmission"
    },
    "10.5281/zenodo.1218771": {
        "doi": "10.5281/zenodo.1218771",
        "author": "Chen, Dong and Liu, Fangzhou and Ding, Chen and Pai, Sreepathi",
        "title": "Software Artifact for Locality Analysis through Static Parallel Sampling",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1218771",
        "abstract": "<p>We provide the Static Parallel Sampling (SPS) artifact that contains code, testing shell scripts and Python scripts for plotting result. We extracted the minimal code needed from the newest version of the Static Parallel Sampling tools and provide a Dockerfile to generate one working testing environment. This given artifact can reproduce all our results in Figures 5-7 (Miss ratio curve, overhead and parallel execution) in the evaluation section of the paper.</p>",
        "keywords": "locality, program specialization, Static analysis",
        "badges": [
            "evaluated and functional"
        ]
    },
    "10.5281/zenodo.10440364": {
        "doi": "10.5281/zenodo.10440364",
        "author": "Michelland, S\\'{e",
        "title": "Replication package for article: From low-level fault modeling (of a pipeline attack) to a proven hardening scheme",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10440364",
        "abstract": "<p>This software package is the Docker image of a project about protecting RISC-V processors against certain low-level fault attacks. It mainly contains a modified LLVM, GNU binutils, QEMU, and test scripts.</p>\n<p>Project repository from which this image is built: https://gricad-gitlab.univ-grenoble-alpes.fr/michelse/fetch-skips-hardening</p>\n<p>Instructions for using this software and reproducing results: https://gricad-gitlab.univ-grenoble-alpes.fr/michelse/fetch-skips-hardening/-/blob/main/README.md?ref_type=heads</p>",
        "keywords": "Compilation, LLVM, Software fault resistance",
        "badges": [
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.10213773": {
        "doi": "10.5281/zenodo.10213773",
        "author": "Hu, Siyu and Zhao, Tong and Sha, Qiuchen and Li, Enji and Meng, Xiangyu and Liu, Liping and Wang, Lin-Wang and Tan, Guangming and Jia, Weile",
        "title": "Training one DeePMD Model in Minutes: a Step towards Online Learning",
        "year": "2024",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.10213773",
        "abstract": "<p>Artifact appendix item for PPoPP24</p>",
        "keywords": "behavior explanation, debugging, testing",
        "badges": [
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.7684001": {
        "doi": "10.5281/zenodo.7684001",
        "author": "Isemann, Raphael and Giuffrida, Cristiano and Bos, Herbert and van der Kouwe, Erik and Gleissenthall, Klaus von",
        "title": "Artifact for \"Don’t Look UB: Exposing Sanitizer-Eliding Compiler Optimizations\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7684001",
        "abstract": "<p>This artifact contains the fuzzing and static analysis setups of the respective paper.</p>",
        "keywords": "compilers, fuzzing, sanitizers",
        "badges": [
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.6651953": {
        "doi": "10.5281/zenodo.6651953",
        "author": "Nguyen, Minh and Perera, Roly and Wang, Meng and Wu, Nicolas",
        "title": "Reproduction Package for Article: Modular Probabilistic Models via Algebraic Effects",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.6651953",
        "abstract": "<p>This is the artifact for the probabilistic programming language ProbFX as described in the paper “Modular Probabilistic Models via Algebraic Effects”.</p>\n<p>It contains:</p>\n<ol type=\"1\">\n<li><p>A preprint of the paper “Modular Probabilistic Models via Algebraic Effects”.</p></li>\n<li><p>A virtual image prepared with an executable script for running and visualising the example programs shown in the paper (and more).</p></li>\n<li><p>The documented source code for the language implementation and example programs.</p></li>\n</ol>",
        "keywords": "effect handlers, embedded domain-specific languages, functional programming, modularity, probabilistic programming",
        "badges": [
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5821862": {
        "doi": "10.5281/zenodo.5821862",
        "author": "Georges, A\\\"{\\i",
        "title": "Le Temps des Cerises: Efficient Temporal Stack Safety on Capability Machines using Directed Capabilities (Artifact)",
        "year": "2022",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5821862",
        "abstract": "<p>This the artifact accompanying the article “Le Temps des Cerises: Efficient Temporal Stack Safety on Capability Machines using Directed Capabilities”.</p>\n<p>The artifact contains the Coq proofs accompanying the paper. These proofs are built using the Iris framework.</p>\n<p>These proofs are available either as a .tar.gz archive, which can then be checked and compiled following the instructions in the README within, or as a virtual machine image for VirtualBox containing the already compiled Coq proofs. The VM does not require any password and has emacs with Proof General already installed to browse the proofs.</p>\n<p>html/index.html provides a description of the files and how they correspond to statements in the paper. (You need to run make html first if compiling by yourself).</p>",
        "keywords": "capability machines, CHERI, compilation, Coq, full abstraction, Iris, logical relations, separation logic",
        "badges": [
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.5531242": {
        "doi": "10.5281/zenodo.5531242",
        "author": "Jouneaux, Gwendal and Barais, Olivier and Combemale, Benoit and Mussbacher, Gunter",
        "title": "SEALS: A Framework for Building Self-Adaptive Virtual Machines",
        "year": "2021",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.5531242",
        "abstract": "<p>In this artifact, we provide the implementation of the three SEALS-based Self-Adaptive Virtual Machines and the three handcrafted Self-Adaptive Virtual Machines (HTML, RobLANG and MiniJava).</p>\n<p>This artifact provides a Maven-based build for the artifact as well as scripts to reproduce the benchmarking experiment and the lines of code count. Additionally, we provide a Jupyter notebook to analyze the results of the benchmarking experiments.</p>",
        "keywords": "framework, self-adaptation, software language",
        "badges": [
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.1481957": {
        "doi": "10.5281/zenodo.1481957",
        "author": "Tassarotti, Joseph and Harper, Robert",
        "title": "Artifact for Article: A Separation Logic for Concurrent Randomized Programs",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1481957",
        "abstract": "<p>This artifact contains the Coq formal proofs for the logic and examples described in the paper. The development is available both as a tar archive containing the source, and as a Virtual Machine with all dependencies installed.</p>",
        "keywords": "concurrency, Coq, probability, separation logic",
        "badges": [
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.1482574": {
        "doi": "10.5281/zenodo.1482574",
        "author": "Polikarpova, Nadia and Sergey, Ilya",
        "title": "SuSLik, Tool Implementation for Article: Structuring the Synthesis of Heap-Manipulating Programs",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1482574",
        "abstract": "<p>The artifact of this work is a program synthesizer called SuSLik. The tool sources are provided along with the instructions for reproducing the evaluation reported in the paper, and with suggestions for exercising SuSLik beyond the original benchmark suite.</p>",
        "keywords": "Program Synthesis, Proof Systems, Scala, Separation Logic, SMT, Type Theory",
        "badges": [
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/TyGuS/suslik/tree/v0.2-popl19"
    },
    "10.5281/zenodo.1306437": {
        "doi": "10.5281/zenodo.1306437",
        "author": "K?ikava, Filip and Vitek, Jan",
        "title": "Artifact for Paper - Tests from Traces: Automated Unit Test Extraction for R",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1306437",
        "abstract": "<p>This is the artifact for the paper Tests from Traces: Automated Unit Test Extraction for R published at ISSTA 2018. The aim is to show how the genthat tool introduced in the paper works and can be used for extracting code from R packages, and reproduce the experiment used to evaluate it. Concretely, it reproduces the all the code snippets shown in Section 3 and the evaluation from Section 4. The artifact is composed of two parts - Genthat Overview and CRAN Experiment. The first part corresponds to the Section 3 of the paper where we introduce the tool. The second part reproduces the experiment that we used to evaluate the tool in Section 4 and reproduce Table 1, 2 and Figure 4.</p>",
        "keywords": "program tracing, R, test extraction",
        "badges": [
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/fikovnik/ISSTA18-artifact/tree/issta18"
    },
    "10.5281/zenodo.1297458": {
        "doi": "10.5281/zenodo.1297458",
        "author": "Blasi, Arianna and Goffi, Alberto and Kuznetsov, Konstantin and Gorla, Alessandra and Ernst, Michael D. and Pezz\\`{e",
        "title": "Artifact for paper: Translating Code Comments to Procedure Specifications",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1297458",
        "abstract": "<p>The name of our tool is Jdoctor (aka Toradocu 3.0). It is an approach that combines pattern, lexical, and semantic matching to translate Javadoc comments into executable procedure specifications written as Java expressions.</p>",
        "keywords": "automatic test case generation, natural language processing, software testing, Specification inference, test oracle generation",
        "badges": [
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/ariannab/toradocu/tree/v3.0"
    },
    "10.5281/zenodo.1242627": {
        "doi": "10.5281/zenodo.1242627",
        "author": "Devine, James and Finney, Joe and de Halleux, Peli and Moskal, Micha? and Ball, Thomas and Hodges, Steve",
        "title": "Documentation for MakeCode and CODAL: Intuitive and Efficient Embedded Systems Programming for Education Artifact Evaluation",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1242627",
        "abstract": "<p>This artifact contains documentation of artifact 10.5281/zenodo.1242605, this documentation is also contained within the artifact 10.5281/zenodo.1242605 as well.</p>",
        "keywords": "BBC micro:bit., CODAL, education, MakeCode, physical computing",
        "badges": [
            "reproduced",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/lancaster-university/lctes-artefact-evaluation/tree/v0.0.1"
    },
    "10.5281/zenodo.1242605": {
        "doi": "10.5281/zenodo.1242605",
        "author": "Devine, James and Finney, Joe and de Halleux, Peli and Moskal, Micha\\l{",
        "title": "Artifact for the LCTES 2018 paper: MakeCode and Codal: Intuitive and Efficient Embedded Systems Programming for Education",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1242605",
        "abstract": "<p>This artifact allows others to reproduce the results seen in this paper for MakeCode and CODAL, using the BBC micro:bit. The artifact contains an offline build environment for CODAL and MakeCode, allowing evaluators to test and build programs locally. In addition, we also provide espruino and micropython virtual machines to further increase repeatability of our results. Evaluators should download the virtual machine containing all pre-requisite tools, and use an oscilloscope to observe wave forms (used for timing) generated by the micro:bit, and a serial terminal to observe results reported from the micro:bit over serial.</p>",
        "keywords": "BBC micro:bit, CODAL, evaluation, lctes, MakeCode",
        "badges": [
            "reproduced",
            "evaluated and reusable"
        ]
    },
    "10.5281/zenodo.1242583": {
        "doi": "10.5281/zenodo.1242583",
        "author": "Taylor, Ben and Marco, Vicent Sanz and Wolff, Willy and Elkhatib, Yehia and Wang, Zheng",
        "title": "Adaptive Deep Learning Model Selection on Embedded Systems",
        "year": "2018",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.1242583",
        "abstract": "<p>Our research artefact enables the reproduction of the figures from our experimental results (Section 5 of the paper). Please see the Appendix of the paper for detailed Artifact Description.</p>",
        "keywords": "Adaptive computing, Deep learning, Embedded systems",
        "badges": [
            "reproduced",
            "evaluated and reusable"
        ],
        "github_related_identifiers": "https://github.com/BenTaylor3115/Adaptive_Deep_Learning/tree/v1.0.0"
    },
    "10.5281/zenodo.7703209": {
        "doi": "10.5281/zenodo.7703209",
        "author": "Alzayat, Mohamed and Mace, Jonathan and Druschel, Peter and Garg, Deepak",
        "title": "Accompanying artifact for the paper \"Groundhog: Efficient Request Isolation in FaaS\"",
        "year": "2023",
        "publisher": "Association for Computing Machinery",
        "url": "https://doi.org/10.5281/zenodo.7703209",
        "abstract": "<p>Groundhog is a lightweight in-memory snapshot and restore tool that enforces sequential request isolation in Function-as-a-Service (FaaS).\nIn FaaS each function executes in its own container&nbsp;to isolate concurrent executions of different functions from one another. However, successive invocations of the same function commonly reuse the runtime state of a previous invocation in order to avoid container cold-start delays when invoking a function. Although efficient, this container reuse has security implications for functions that are invoked on behalf of differently privileged users or administrative domains: bugs in a function's implementation --- or a third-party library/runtime it depends on --- may leak private data from one invocation of the function to subsequent invocations of the same function.\nGroundhog isolates sequential invocations of a function by efficiently reverting to a clean state, free from any private data, after each invocation. The system exploits two properties of typical FaaS platforms: each container executes at most one function at a time and legitimate functions do not retain state across invocations. This enables Groundhog to efficiently snapshot and restore function state between invocations in a manner that is independent of the programming language/runtime and does not require any changes to existing functions, libraries, language runtimes, or OS kernels.\nPlease visit&nbsp;https://groundhog.mpi-sws.org/ for the latest version and documentation of Groundhog.</p>",
        "keywords": "FPGAs, Operating Systems, Virtual Memory, Virtualization",
        "badges": [
            "reproduced"
        ]
    }
}