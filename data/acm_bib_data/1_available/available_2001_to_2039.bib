@software{10.1145/3580440,
author = {Enriquez, Daniel and Tong, Wai and North, Chris and Qu, Huamin and Yang, Yalong},
title = {User Study Information},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.1145/3580440},
abstract = {
    <p>Contains the following: Data analysis for the study, Affinity diagram
for the qualitative analysis of the interview, The questions that were
asked post-experiment to the participants of the user study</p>

},
keywords = {affinity diagram, qualitative assessment, Semi-structured interview}
}

@software{10.5281/zenodo.13365896,
author = {Riouak, Idriss and Fors, Niklas and \"{O}qvist, Jesper and Hedin, G\"{o}rel and Reichenbach, Christoph},
title = {Efficient Demand Evaluation of Fixed-Point Attributes Using Static Analysis (Artifact)},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13365896},
abstract = {
    <p>This is the software artifact for the paper “Efficient Demand
Evaluation of Fixed-Point Attributes Using Static Analysis” published in
SLE 2024. This artifact supports the evaluation of a new demand-driven
algorithm for efficient circular Reference Attribute Grammar evaluation,
specifically designed to improve performance of higly circular
applications, e.g., dataflow analyses for Java. The artifact includes
all necessary tools, dependencies, benchmarks, and scripts to reproduce
the experiments presented in the corresponding paper. It provides a
Docker-based setup for easy deployment, as well as detailed instructions
for manual installation. The artifact allows users to explore and
validate the proposed algorithm’s performance improvements through
real-world case studies, demonstrating significant speedups in
dead-assignment and null-pointer dereference analyses compared to
existing algorithms. While the artifact does not require specific
hardware, reproducing the experiments as described in the paper may take
one to two days of computation time. The artifact has been tested on
Linux and macOS systems.</p>

},
keywords = {Attribute Grammars, Circular Attributes, Demand Analysis, Fixpoint Computations, Static Analysis}
}

@software{10.5281/zenodo.13625532,
author = {Bragg, Nate F. F. and Foster, Jeffrey S. and Zucker, Philip},
title = {Scimitar},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13625532},
abstract = {
    <p>It includes the implementation of Scimitar and well as a number of
examples, and instructions on how to run those examples.</p>

},
keywords = {compilers, functional programming, mixed integer linear programming}
}

@software{10.5281/zenodo.13643574,
author = {Gao, Cunyuan and Parreaux, Lionel},
title = {Implementation for Seamless Scope-Safe Metaprogramming through Polymorphic Subtype Inference (Short Paper)},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13643574},
abstract = {
    <p>Our artifact implements the quasiquote syntax, type inference
algorithm, and code generation on the MLscript compiler. The artifact
consists of two parts:</p>
<ul>
<li>The main project is written in Scala and powered by sbt, which
includes the original MLscript compiler, our implementation, and
corresponding test cases for quasiquote;</li>
<li>The web demo allows users to compile and run general MLscript with
our quasiquote system programs directly in browsers and check type
inference and execution results.</li>
</ul>
<p>Our quasiquote system is implemented in the main project, on which
the web demo is based.</p>

},
keywords = {First-Class Polymorphism, Metaprogramming, MLscript, Type Inference}
}

@software{10.5281/zenodo.13709851,
author = {Lee, Yunjeong and Gopinathan, Kiran and Yang, Ziyi and Flatt, Matthew and Sergey, Ilya},
title = {DSLs in Racket: You Want It How, Now? (SLE24 Artifact)},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13709851},
abstract = {
    <ul>
<li><p>Type of artifact:</p>
<ul>
<li>Example programs written in <code>clickomania</code> DSL that
generates Clickomania games.
<ul>
<li>Relevant files: <code>example1.rkt</code>,
<code>example2.rkt</code>
<ul>
<li>If you want to run the program in <code>example2.rkt</code>,
uncomment line 21 and press F5.</li>
</ul></li>
</ul></li>
<li>Example programs that demonstrate interaction between Racket and
<code>clickomania</code> DSL.
<ul>
<li>Relevant files: <code>dynamic-interop-demo.rkt</code>,
<code>interop-demo2.rkt</code>
<ul>
<li>If you want to run the program in
<code>dynamic-interop-demo.rkt</code>, (1) go to
<code>example1.rkt</code> and uncomment the lines 2 and 4, (2) come back
to <code>dyanmic-interop-demo.rkt</code> and (3) run the program by
pressing F5. After verifying that the program runs, come back to
<code>example1.rkt</code> to comment out lines 2 and 4 in order to run a
program in <code>interop-demo2.rkt</code>.</li>
<li>To run the program in <code>interop-demo2.rkt</code>, open the file
and press F5. You will see a button widget that says “Play Tame Same
Game!”. Upon pressing the button, you’ll get to play the Clickomania
game that is created via <code>clickomania</code> DSL.</li>
</ul></li>
</ul></li>
<li>Racket code that implements <code>clickomania</code> DSL used as a
running example in the paper.</li>
<li>Relevant files: rest of the code</li>
<li>Note that <code>clickomania</code>’s reader is inside the
<code>/clickomania/lang</code> directory</li>
</ul></li>
<li><p>Format: source code</p></li>
<li><p>Location in the VM: <code>~/clickomania/</code>
directory</p></li>
</ul>

},
keywords = {domain-specific languages, meta-programming}
}

@software{10.5281/zenodo.13741142,
author = {Miljak, Luka and Bach Poulsen, Casper and Corvino, Rosilde},
title = {Concrete Syntax Metapatterns - Artifact},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13741142},
abstract = {
    <p>Software artifact pertaining to the paper “Concrete Syntax
Metapatterns.” The artifact contains a Virtual Machine for running the
CSMP Kotlin library, examples, and performance tests described in the
Implementation/Evaluation and Discussion sections of the paper. The
artifact also contains the source code and instructions for running it
outside the VM.</p>

},
keywords = {black-box parsers, concrete syntax, metaprogramming, refactoring, restructuring}
}

@software{10.5281/zenodo.13801418,
author = {Zhang, Yilin and Dhawal, Omkar Dilip and Nandivada, V. Krishna and Chiba, Shigeru and Ugawa, Tomoharu},
title = {Artifact for Reducing Write Barrier Overheads for Orthogonal Persistence},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13801418},
abstract = {
    <p>This is the artifact for the paper “Reducing Write Barrier Overheads
for Orthogonal Persistence” accepted by the ACM SIGPLAN International
Conference on Software Language Engineering (SLE) 2024. The goal of this
artifact is to reproduce the experimentation shown in the paper.</p>

},
keywords = {Concurrency, Escape Analysis, Memory Management, Non-Volatile Memory, Orthogonal Persistence}
}

@software{10.5281/zenodo.13814132,
author = {Hu, Yuefeng and Ishibe, Hiromu and Dai, Feng and Yamazaki, Tetsuro and Chiba, Shigeru},
title = {Artifact - Bugfox: A Trace-based Analyzer for Localizing the Cause of Software Regression in JavaScript},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13814132},
abstract = {
    <p>All the programs and dataset to reproduce the evaluation presented in
the corresponding paper.</p>

},
keywords = {Code Transformation, Debugging, Regression, Runtime Tracing}
}

@software{10.5281/zenodo.13827683,
author = {Pontes Miranda, James William and Bruneliere, Hugo and Tisi, Massimo and Suny\'{e}, Gerson},
title = {Towards an In-context LLM-based Approach for Automating the Definition of Model Views},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13827683},
abstract = {
    <p>This artifact accompanies the paper “Towards an In-context LLM-based
Approach for Automating the Definition of Model Views.” The provided
files contain all the necessary tools to replicate the experiments
described in the paper, including scripts for generating the
datasets.</p>
<p>Additionally, the artifact contains all prompt data used in the
experiments and baseline model views in VPDL (EMF Views DSL) and ATL.
This artifact enables the reproduction of the results discussed in the
paper.</p>

},
keywords = {Large Language Models, Model views, Model-Driven Engineering, Prompt engineering}
}

@software{10.5281/zenodo.13830707,
author = {Hummelgren, Lars and Palmkvist, Viktor and Stjerna, Linnea and Xu, Xuechun and Jalden, Joakim and Broman, David},
title = {Artifact for `Trellis: A Domain-Specific Language for Hidden Markov Models with Sparse Transitions`},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13830707},
abstract = {
    <p>This is an artifact accompanying the paper
<code>Trellis: A Domain-Specific Language for Hidden Markov Models with Sparse Transitions</code>.
The artifact contains a Docker image which contains everything needed to
try out Trellis and run the complete benchmark suite. Further, it
contains the Dockerfile used to construct the image and the evaluation
results presented in the corresponding paper.</p>

},
keywords = {DSL, GPU acceleration, Hidden Markov models, parallelization}
}

@software{10.5281/zenodo.13832238,
author = {Caylak, Gizem and Lund\'{e}n, Daniel and Senderov, Viktor and Broman, David},
title = {Reproduction package for Article “ Statically and Dynamically Delayed Sampling for Typed Probabilistic Programming Languages”},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13832238},
abstract = {
    <p>The artifact contains a Docker image (delayed.tar.gz) including
everything needed to run the benchmarks and produce the results
presented in the paper. The artifact also includes the Dockerfile used
to create the Docker image.</p>

},
keywords = {delayed, docker, Results, sampling}
}

@software{10.5281/zenodo.13851394,
author = {Huberdeau, Laurent and Hamel, Cassandre and Monnier, Stefan and Feeley, Marc},
title = {Pnut: A C Transpiler Targeting POSIX Shell},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13851394},
abstract = {
    <p>This is the artifact accompanying our paper “The Design of a
Self-Compiling C Transpiler Targeting POSIX Shell”, accepted for
presentation at the ACM SIGPLAN International Conference on Software
Language Engineering (SLE) 2024. For ease of evaluation, the artifact
includes a Docker image containing the project source code, the
dependencies and shells that can run the scripts produced by our
transpiler, and the scripts used to obtain the results presented in the
paper. Some code examples to demonstrate the usage of the transpiler are
also included.</p>

},
keywords = {Bootstrapping, Compiler, Reproducible Builds}
}

@software{10.5281/zenodo.13855491,
author = {Danvy, Olivier},
title = {Accompanying material for 'Nested Summations'},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13855491},
abstract = {
    <p>The file ‘nested-summations.c’ is an implementation in ANSI C. The
file ‘nested-summations.v’ is a formalization that uses the Coq Proof
Assistant (versions 8.5pl3, 8.8.0, and 8.19.1).</p>

},
keywords = {Fibonacci numbers, finitely nested finite sums, Jacobstahl numbers, Jacobstahl-Lucas numbers, Lucas numbers, the Coq Proof Assistant, the On-Line Encyclopedia of Integer Sequences}
}

@software{10.6084/m9.figshare.27087901.v1,
author = {Cunha, Sim\~{a}o and Silva, Lu\'{\i}s and Saraiva, Jo\~{a}o and Fernandes, Jo\~{a}o Paulo},
title = {Energy-Languages-PowerCap},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.6084/m9.figshare.27087901.v1},
abstract = {
    <p>Trading Runtime for Energy Efficiency: Leveraging Power Caps to Save
Energy Across Programming Languages</p>
<ol type="1">
<li><p>Authors:</p>
<p>Sim\~{a}o Cunha (a93262@alunos.uminho.pt) Lu\'{\i}s Silva
(pg50564@alunos.uminho.pt) Jo\~{a}o Saraiva (saraiva@di.uminho.pt) Jo\~{a}o
Paulo Fernandes (jpf9731@nyu.edu)</p></li>
</ol>
<p>Requirements</p>
<pre><code>Debian-based Linux distributions (needs to work with RAPLCap)
Intel processor
Non containerized environment</code></pre>
<p>Directory Structure</p>
<pre><code>benchmarks/
    Contains benchmark tests (see benchmarks/README.md for more details), including:
        Dacapo
        Nofib
        PyPerformance
inputs/
    Required input files for specific problem executions.
Languages/
    Folder with all the languages and problems used for evaluations.
NoteBooks/
    Jupyter notebooks with graphs and calculations used in the paper.
RAPL/
    C program for measuring and limiting CPU power.</code></pre>
<p>Required Libraries</p>
<pre><code>RAPL
lm-sensors
Powercap
Raplcap</code></pre>
<p>These libraries can be installed with the following command:</p>
<p>sudo sh raplLibrariesSetup.sh</p>
<p>Setup</p>
<p>To install all the required language compilers, interpreters and
libraries, execute the script:</p>
<p>sudo sh languagesSetup.sh</p>
<p>Note: This setup was not fully tested and might require manual
interaction (such as accepting permissions).</p>
<p>Generate the input files:</p>
<p>sudo sh gen-input.sh</p>
<p>Execute the script to generate the CSV file (this script iterates all
the Languages and all of the programs):</p>
<p>sh measure.sh</p>
<p>Note: You might need to update some of the compilers’ paths since the
script uses default installation paths from the authors’ machine. These
paths are defined on config.env.</p>

},
keywords = {Energy Efficiency, Green Software, Language Benchmarking, Power Cap, Programming Languages}
}

@software{10.5281/zenodo.13383121,
author = {Legoupil, Maxime and Rousseau, June and Georges, A\"{\i}na Linn and Pichon-Pharabod, Jean and Birkedal, Lars},
title = {Artifact and Appendix of 'Iris-MSWasm: elucidating and mechanising the security invariants of Memory-Safe WebAssembly'},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13383121},
abstract = {
    <p>This is the artifact and appendix of the OOPSLA ‘24 paper
’Iris-MSWasm: elucidating and mechanising the security invariants of
Memory-Safe WebAssembly’. The artifact contains the coq source code as
well as a readme.md file that explains how to build the project and
where to find the different parts of the paper. The appendix is a pdf
that contains figures that were elided in the paper for space
constraints.</p>

},
keywords = {Capabilities, Coq, Encapsulation, Logical Relation, Mechanised Proofs, Memory Safety, MSWasm, Wasm, WebAssembly}
}

@software{10.5281/zenodo.13383433,
author = {Simonnet, Julien and Lemerre, Matthieu and Sighireanu, Mihaela},
title = {Artifact for the paper 'A Dependent Nominal Physical Type System for the Static Analysis of Memory in Low Level Code'},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13383433},
abstract = {
    <p>The artifact includes the sources of the analyser Codex, the set of
benchmarks used in experiments, and the utilities (makefiles, scripts)
to reproduce the results presented in this paper.</p>

},
keywords = {Abstract interpretation, Dependent types, Spatial memory safety, Type checking, Typed C}
}

@software{10.5281/zenodo.13388204,
author = {Kim, Caleb and Li, Pai and Mohan, Anshuman and Butt, Andrew and Sampson, Adrian and Nigam, Rachit},
title = {Reproduction Package for "Unifying Static and Dynamic Intermediate Languages for Accelerator Generators"},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13388204},
abstract = {
    <p>The artifact is a VirtualBox Image to reproduce the results for
“Unifying Static and Dynamic Intermediate Languages for Accelerator
Generators”. In particular, the artifact can be used to reproduce the
graphs and quantitative claims made in section 6 and 7 of the paper.
More detailed instructions can be found in the REAMDE.md of the
following repository: https://github.com/cucapra/calyx-resource-eval,
and more general documentation of Piezo can be found here:
https://docs.calyxir.org/.</p>
<p>The VirtualBox image consists of: - The Calyx/Piezo compiler - fud,
the compiler driver - The Dahlia compiler - The evaluation code. In
particular, it contains the scripts necessary to generate the data and
graphs used in the paper. It also contains the source code for the
benchmarks used in the paper: in particular Polybench benchmarks written
in Dahlia and PIFO tree benchmarks written in Piezo. For the systolic
arrays, fud uses a Python script to generate systolic arrays written in
Piezo. More details about fud’s systolic array generation can be found
here: https://docs.calyxir.org/frontends/systolic-array.html.</p>

},
keywords = {Accelerator Design Language, Intermediate Language}
}

@software{10.5281/zenodo.13393058,
author = {Qian, Kelvin and Smith, Scott and Stride, Brandon and Weng, Shiwei and Wu, Ke},
title = {Software Artifact for Semantic-Type-Guided Bug Finding},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13393058},
abstract = {
    <p>This is the codebase for the languages BlueJay, Jay, and JayIL, as
well as the languages’ semantic-type-guided type checker. This code is
developed by the JHU Programming Languages Lab. It is a pipeline of
functional languages that fits for research at each layer.</p>
<p>This snapshot is the artifact for Semantic-Type-Guided Bug
Finding.</p>
<p>With this artifact, the user can recreate all benchmarks seen in the
paper.</p>

},
keywords = {Incorrectness, OCaml, Semantic Typing, Symbolic Execution, Test Generation}
}

@software{10.5281/zenodo.13446443,
author = {Wong, Augustine and Bucci, Paul and Beschastnikh, Ivan and Fedorova, Alexandra},
title = {NonSequitur Source Code and User Study Result Data for the paper "Making Sense of Multi-Threaded Application Performance at Scale with NonSequitur."},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13446443},
abstract = {
    <p>The artifact accompanying the paper “Making Sense of Multi-Threaded
Application Performance at Scale with NonSequitur,” which contains: The
source code for the NonSequitur visualization tool. Some additional
Python scripts and data collected/used during the user study described
in the paper.</p>
<p>This paper was accepted in the OOPSLA 2024 conference held in
Pasadena, California. The artifact is contained in the zip file
“oopsla24-ns-artifact.zip.” A detailed description of the artifact is in
the file “OOPSLA 2024 NonSequitur Artifact Doc.pdf.”</p>

},
keywords = {Multi-threaded Applications, Outlier events, Performance debugging, Runtime trace visualization}
}

@software{10.5281/zenodo.13485897,
author = {Alvarez-Picallo, Mario and Freund, Teodoro and Ghica, Dan R. and Lindley, Sam},
title = {Effect Handlers for C via Coroutines - Artifact},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13485897},
abstract = {
    <p>Artifact for the library and benchmarks described in the Effect
Handlers for C via Coroutines paper published at OOPSLA 2024.</p>

},
keywords = {C, Coroutines, Effect Handlers}
}

@software{10.5281/zenodo.13487216,
author = {Venev, Hristo and Gehr, Timon and Dimitrov, Dimitar and Vechev, Martin},
title = {Artifact for "Modular Synthesis of Efficient Quantum Uncomputation"},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13487216},
abstract = {
    <p>This archive contains the artifact for the paper “Modular Synthesis
of Efficient Quantum Uncomputation”. &nbsp;It can be used to reproduce the
results in Tables 1-3.</p>

},
keywords = {intermediate representations, quantum programming languages}
}

@software{10.5281/zenodo.13502454,
author = {Bittner, Paul Maximilian and Schulthei\ss{}, Alexander and Moosherr, Benjamin and Young, Jeffrey M. and Teixeira, Leopoldo and Walkingshaw, Eric and Ataei, Parisa and Th\"{u}m, Thomas},
title = {Vatras - Artifact for the Paper "On the Expressive Power of Languages for Static Variability"},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13502454},
abstract = {
    <p>Vatras is an Agda library and formalizes all results in our
paper:</p>
<ul>
<li>All formal languages for static software variability presented in
our survey (<strong>Section 3 + Table 1</strong>) are formalized as
algebraic datatypes.</li>
<li>The library implements our formal framework for language
comparisons, including necessary data structures, theorems, and proofs
(<strong>Section 4</strong>).</li>
<li>This library contains all theorems and proofs to establish the map
of variability languages we find by comparing the languages from our
survey with our framework (<strong>Section 5</strong>).</li>
</ul>
<p>Additionally, our library comes with a small demo. When run in a
terminal, our demo will show a translation roundtrip, showcasing the
circle of compilers developed for identifying the map of variability
languages (Section 5).</p>

},
keywords = {expressive power, formalization, proofs, software product lines, software variability}
}

@software{10.5281/zenodo.13599952,
author = {Somers, Thomas and Krebbers, Robbert},
title = {Artifact of 'Verified Lock-Free Session Channels with Linking'},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13599952},
abstract = {
    <p>This artifact contains the Coq mechanization of the OOPSLA 2024
paper: ‘Verified Lock-Free Session Channels with Linking’. It contains
the source code, instructions for evaluating the artifact, and the
correspondence between the artifact and paper.</p>

},
keywords = {Coq, Iris, Message passing, separation logic, session types}
}

@software{10.5281/zenodo.13618225,
author = {Liu, Si and Gu, Long and Wei, Hengfeng and Basin, David},
title = {Artifact for "Plume: Efficient and Complete Black-Box Checking of Weak Isolation Levels"},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13618225},
abstract = {
    <p>This artifact provides a Docker image that includes all the necessary
tools and experimental data used in the paper titled “Plume: Efficient
and Complete Black-Box Checking of Weak Isolation Levels.” The Docker
image ensures a fully configured environment to facilitate the
reproducibility of the results presented in the paper.</p>
<p>The Docker image includes:</p>
<ul>
<li>Comparison Tools: A suite of tools required for the
experiments.</li>
<li>Experimental Data: Complete datasets used in the experiments.</li>
<li>Reproduction Scripts: Scripts for reproducing the experimental
results.</li>
</ul>

},
keywords = {black-box testing, formal specification, weak isolation levels}
}

@software{10.5281/zenodo.13618683,
author = {Yi, Xin and Yu, Hengbiao and Chen, Liqian and Mao, Xiaoguang and Wang, Ji},
title = {FPCC: Detecting Floating-Point Errors via Chain Conditions (Paper Artifact)},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13618683},
abstract = {
    <p>This is the artifact for “FPCC: Detecting Floating-Point Errors via
Chain Conditions”, published in SPLASH/OOPSLA 2024. All instructions can
be found in the zip file.</p>

},
keywords = {accuracy, chain condition, error-triggering input, floating-point error}
}

@software{10.5281/zenodo.13621222,
author = {Cheng, Luyu and Parreaux, Lionel},
title = {The Ultimate Conditional Syntax (Artifact)},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13621222},
abstract = {
    <p>This is the artifact of OOPSLA paper titled <em>The Ultimate
Conditional Syntax</em>. The latest version of the artifact can be found
at <a href="https://github.com/hkust-taco/ucs" class="uri">https://github.com/hkust-taco/ucs</a>. A online web demo can
be found at <a href="https://ucs.mlscript.dev" class="uri">https://ucs.mlscript.dev</a>. A comprehensive manual of the
artifact is located at <code>manual/manual.pdf</code> in the
archive.</p>

},
keywords = {compiler, MLscript, pattern matching, semantics, syntax, transformation, web demo}
}

@software{10.5281/zenodo.13621721,
author = {Chen, Ethan and Chang, Jiwon and Zhu, Yuhao},
title = {CoolerSpace Artifacts},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13621721},
abstract = {
    <p>This artifact contains four repositories.</p>
<p>The first repository, CoolerSpace, is the main repository for the
CoolerSpace library.</p>
<p>The second repository, eggwrap, is a wrapper for the egg equality
saturation framework.</p>
<p>The third repository, onneggs, is an optimization tool for
CoolerSpace programs.</p>
<p>The fourth repository, CoolerSpaceBenchmarker, contains a
benchmarking suite for CoolerSpace and several example CoolerSpace
programs.</p>
<p>Each repository has a readme.md file with more information.</p>

},
keywords = {domain-specific languages, graphics}
}

@software{10.5281/zenodo.13622515,
author = {Lobo-Vesga, Elisabet and Russo, Alejandro and Gaboardi, Marco and Corti\~{n}as, Carlos Tom\'{e}},
title = {Paper Artifact: Sensitivity by Parametricity},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13622515},
abstract = {
    <p>The official artifact accompanying the OOPSLA 2024 paper “Sensitivity
by Parametricity” for the Spar library. The paper explores the use of
parametricity to perform sensitivity analysis on user-defined functions,
additionally, it introduces a Haskell library called Spar that
implements this technique. Spar encodes value distances as type-level
naturals, proving the sensitivity of a function is reduced to
type-checking! This artifact is distributed as a Docker image where the
Spar library is built and ready to use. Instructions for building the
image are provided in README.</p>

},
keywords = {differential privacy, functional programming languages, Haskell, sensitivity}
}

@software{10.5281/zenodo.13624896,
author = {Goharshady, Amir Kafshdar and Lam, Chun Kit and Parreaux, Lionel},
title = {Fast and Optimal Extraction for Sparse Equality Graphs},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13624896},
abstract = {
    <p>This artifact contains the implementation of our optimal extraction
algorithm, as well as experiment with the cranelift (wasmtime)
compiler.</p>

},
keywords = {e-graphs, optimal extraction, treewidth}
}

@software{10.5281/zenodo.13625822,
author = {Geeson, Luke and Brotherston, James and Dijkstra, Wilco and Donaldson, Alastair F. and Smith, Lee and Sorensen, Tyler and Wickerson, John},
title = {Artifact for "Mix Testing: Specifying and Testing ABI Compatibility Of C/C++ Atomics Implementations"},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13625822},
abstract = {
    <p>This is the artifact accompanying our paper “Mix Testing: Specifying
and Testing ABI Compatibility Of C/C++ Atomics Implementations”,
conditionally accepted for publication at OOPSLA2024</p>
<p>The artifact consists of scripts to reproduce the figures in the
paper paper. We aim for all badges. For comments please contact
luke.geeson@cs.ucl.ac.uk.</p>

},
keywords = {Compiler Testing, Concurrency, Interoperability}
}

@software{10.5281/zenodo.13625830,
author = {Yang, Ziteng and Shirako, Jun and Sarkar, Vivek},
title = {Artifact for "Fully Verified Instruction Scheduling"},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13625830},
abstract = {
    <p>This is the artifact of our project in our paper Fully Verified
Instruction Scheduling: a lightweight and flexible approach.</p>
<p>The artifacts consists of two parts: mechanized proofs and
performance experiments. Evaluating the mechanized proofs only requires
software dependencies on Linux machine and the use of proof assistant
Coq. Evaluating the experiments requires an in-order Risc-V
hardware.</p>
<p>The documentations contains step-by-step building guides and a
detailed paper-to-artifact correspondence guide that matches every
lemma/theorems in our submitted paper with the mechanized proofs.</p>

},
keywords = {CompCert, Compiler Verification, Coq Proof Assistant, Instruction-level
Parallelism}
}

@software{10.5281/zenodo.13625874,
author = {Carnier, Denis and Pottier, Fran\c{c}ois and Keuchel, Steven},
title = {Type Inference Logics - Artifact},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13625874},
abstract = {
    <p>This artifact contains both sources and a prebuilt Docker image. The
sources file contains a <code>README.md</code> for navigating the source
code with instructions on how to get started. The image file contains a
Docker image compiled for AMD64 with all the necessary dependencies to
check the code with the Coq proof assistant and GHC.</p>

},
keywords = {elaboration, program verification, type inference}
}

@software{10.5281/zenodo.13626195,
author = {Nagar, Kartik and Sahoo, Anmol and Chowdhury, Romit Roy and Jagannathan, Suresh},
title = {Artifact - Automated Robustness Verification of Concurrent Data Structure Libraries Against Relaxed Memory Models},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13626195},
abstract = {
    <p>The artifact for our submission contains the implementation of the
tool (Robocop) and various library implementations tested for
robustness. Robocop is an executable program, written in Python, that
takes as input a library implementation in C and library specifications
in a text format. Internally, it parses the C code, performs the
necessary analysis to generate constraints and generates SMT calls to
Z3, to discharge whether the library is robust or not.</p>

},
keywords = {verification, weak-memory}
}

@software{10.5281/zenodo.13626235,
author = {Takashima, Yoshiki and Cho, Chanhee and Martins, Ruben and Jia, Limin and P\u{a}s\u{a}reanu, Corina S.},
title = {Artifact Package for Paper "Crabtree: Rust API Test Synthesis Guided by Coverage and Type"},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13626235},
abstract = {
    <p>Download the tarball and use the README inside.</p>

},
keywords = {API testing, fuzzing, program synthesis, Rust}
}

@software{10.5281/zenodo.13626469,
author = {Guan, Zhichao and Cao, Yiyuan and Yu, Tailai and Wang, Ziheng and Wang, Di and Hu, Zhenjiang},
title = {Artifact for OOPSLA'24: Semantics Lifting for Syntactic Sugar},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13626469},
abstract = {
    <p>Artifact for OOPSLA’24: Semantics Lifting for Syntactic Sugar. This
project will be maintained at
https://github.com/vbcpascal/Osazone-oopsla24.</p>

},
keywords = {Domain-specific Languages, Programming Language, Syntactic Sugar}
}

@software{10.5281/zenodo.13770453,
author = {Ma, Cong and Ge, Zhaoyi and Lee, Edward and Zhang, Yizhou},
title = {Lexical Effect Handlers, Directly (artifact)},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13770453},
abstract = {
    <p>This is the artifact accompanying the paper
<code>Lexical Effect Handlers, Directly</code>.</p>

},
keywords = {Algebraic effects, compiler correctness, continuations, effect handlers, Lexa, Salt, stack switching}
}

@software{10.5281/zenodo.13825844,
author = {Saioc, Georgian-Vlad and Lange, Julien and M\o{}ller, Anders},
title = {Artifact Submission For "Automated Verification of Parametric Channel-Based Process Communication"},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13825844},
abstract = {
    <p>Public release of OOPSLA 2024 Ginger artifact. Includes a small set
of example program fragments. Experimental data used in the evaluation
section of the original paper is proprietary.</p>

},
keywords = {automated verification, Go, invariant discovery, message passing concurrency, partial deadlocks, static analysis}
}

@software{10.5281/zenodo.13863694,
author = {Mariano, Benjamin and Wang, Ziteng and Pailoor, Shankara and Collberg, Christian and Dillig, I\c{s}il},
title = {Software Artifact for "Control-Flow Deobfuscation using Trace-Informed Compositional Program Synthesis"},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.13863694},
abstract = {
    <p>Software artifact for the paper “Control-Flow Deobfuscation using
Trace-Informed Compositional Program Synthesis”.</p>

},
keywords = {Deobfuscation, Program Synthesis}
}

@software{10.6084/m9.figshare.26105056.v1,
author = {Li, Haofeng and Shi, Chenghang and Lu, Jie and Li, Lian and Xue, Jingling},
title = {Boosting the Performance of Alias-Aware IFDS Analysis with CFL-Based Environment Transformers (Artifact)},
year = {2024},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.6084/m9.figshare.26105056.v1},
abstract = {
    <p>The IFDS algorithm is pivotal in solving field-sensitive data-flow
problems. However, its conventional use of access paths for field
sensitivity leads to the generation of a large number of data-flow
facts. This causes scalability challenges in larger programs, limiting
its practical application in extensive codebases. In response, we
propose a new field-sensitive technique that reinterprets the generation
of access paths as a CFL for field-sensitivity and formulates it as an
IDE problem. This approach significantly reduces the number of data-flow
facts generated and handled during the analysis, which is a major factor
in performance degradation.</p>
<p>To demonstrate the effectiveness of this approach, we developed a
taint analysis tool, IDEDroid, in the IFDS/IDE framework. IDEDroid
outperforms FlowDroid, an established IFDS-based taint analysis tool, in
the analysis of 24 major Android apps while improving its precision
(guaranteed theoretically). The speed improvement ranges from 2.1\texttimes{} to
2,368.4\texttimes{}, averaging at 222.0\texttimes{}, with precision gains reaching up to 20.0\%
(in terms of false positives reduced). This performance indicates that
IDEDroid is substantially more effective in detecting information-flow
leaks, making it a potentially superior tool for mobile app vetting in
the market.</p>

},
keywords = {Alias Analysis, CFL-Reachability, IDE, IFDS, Taint Analysis}
}



