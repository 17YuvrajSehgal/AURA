@software{10.1145/3276928,
author = {Abdulla, Parosh Aziz and Atig, Mohamed Faouzi and Jonsson, Bengt and Ngo, Tuan Phong},
title = {Replication Package for the paper: Optimal Stateless Model Checking under the Release-Acquire Semantics},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.1145/3276928},
abstract = {
    <p>The artifact contains two components. - The first one is a Virtual machine. This machine can be used with VirtualBox. - The first one is an instruction file. This file explains how to reproduce the experimental results in the paper.</p>
},
keywords = {C/C++11, Release-Acquire, software model checking, Software verification, stateless model checking}
}

@software{10.1145/3276929,
author = {Vedurada, Jyothi and Nandivada, V. Krishna},
title = {Replication Package for Article: Identifying Refactoring Opportunities for Replacing Type Code with Subclass and State},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.1145/3276929},
abstract = {
    <p>Artifact material contains three files: (1)rcp_plug_1.0.0.201809121031.jar, (2)README.pdf and (3)LICENSE.txt. rcp_plug_1.0.0.201809121031.jar is the Eclipse plugin. README.pdf provides instructions for basic testing of the artifact. LICENSE.txt contains the license used.</p>
},
keywords = {Points-to Analysis, Refactoring, Replace Conditionals with Polymorphism, Replace Type Code with State, Replace Type Code with Subclass, Static Program Analysis}
}

@software{10.1145/3276935,
author = {Bornholt, James and Torlak, Emina},
title = {Artifact: Finding Code That Explodes Under Symbolic Evaluation},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.1145/3276935},
abstract = {
    <p>This artifact contains the code for all experiments in the "Finding Code That Explodes Under Symbolic Evaluation".</p>
},
keywords = {profiling, solver-aided programming, symbolic execution}
}

@software{10.1145/3276937,
author = {Degenbaev, Ulan and Eisinger, Jochen and Hara, Kentaro and Hlopko, Marcel and Lippautz, Michael and Payer, Hannes},
title = {Software Artifact for Article: Cross-Component Garbage Collection},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.1145/3276937},
abstract = {
    <p>Artifact for the paper "Cross-Component Garbage Collection". See the README.txt file in the artifact for detailed instructions on how to set up and run the experiments illustrated in the paper.</p>
},
keywords = {Garbage Collection, Language Implementation, Memory Management, Runtime Environments}
}

@software{10.1145/3277001,
author = {Rahman, Mohammad Masudur and Roy, Chanchal K.},
title = {Replication Package for Paper: Improving IR-Based Bug Localization with Context-Aware Query Reformulation},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.1145/3277001},
abstract = {
    <p>This artifact contains (1) a working prototype of the bug localization tool, BLIZZARD, (2) all the software and data dependencies for running the tool, (3) necessary commands to replicate part of the published results, (4) detailed published results with auxiliary materials, and (5) sufficient instructions for reproducing results with other subject systems.</p>
},
keywords = {bug localization, bug report quality, Debugging automation, graph-based term weighting, information retrieval, query reformulation, replication package, working prototype}
}

@software{10.5281/zenodo.1310129,
author = {Kate, Sayali and Ore, John-Paul and Zhang, Xiangyu and Elbaum, Sebastian and Xu, Zhaogui},
title = {Artifact (software + dataset) for "Phys: Probabilistic Physical Unit Assignment and Inconsistency Detection"},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.1310129},
abstract = {
    <p>This artifact contains a docker version of the tool Phys, along with source code and a dataset of C++ files that build against the Robot Operating System (ROS).</p>
},
keywords = {abstract type inference, factor graphs, robot software, software defect analysis}
}

@software{10.5281/zenodo.1315183,
author = {Wang, Ying and Wen, Ming and Liu, Zhenwei and Wu, Rongxin and Wang, Rui and Yang, Bo and Yu, Hai and Zhu, Zhiliang and Cheung, Shing-Chi},
title = {Available badge for Article: 'Do the Dependency Conflicts in My Project Matter?'},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.1315183},
abstract = {
    <p>Decca is a Maven plugin which detects dependency conflict issues between Java projects and third party libraries and assesses the issues' severity levels to warn developers whether the issues are benign or harmful (e.g., causing runtime exceptions). HomePage: https://deccadc.github.io/fse18/</p>
},
keywords = {Dependency conflict, third party library}
}

@software{10.5281/zenodo.1419882,
author = {Guo, Shengjian and Wu, Meng and Wang, Chao},
title = {Implementation and benchmarks for article: Adversarial Symbolic Execution for Detecting Concurrency-Related Cache Timing Leaks},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.1419882},
abstract = {
    <p>The source code, the document, and the benchmarks of the Adversarial Symbolic Execution tool.</p>
},
keywords = {Cache timing leak, Concurrency, Symbolic execution}
}

@software{10.5281/zenodo.1420135,
author = {Kini, Dileep and Mathur, Umang and Viswanathan, Mahesh},
title = {Data Race Detection on Compressed Traces},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.1420135},
abstract = {
    <p>ZipTrack analyses traces of concurrent programs, compressed as SLPs (straight line programs) and checks if there is a race. ZipTrack performs two analyses : 1. HB race detection 2. LockSet violation detection ZipTrack is written in Java. The following classes let you perform different analyses: 1. `ZipHB.java` - for HB race detection on compressed traces 2. `ZipLockSet.java` - for detecting violations of lockset discipline on compressed traces 3. `ZipMetaInfo.java` - for printing trace characteristics. 4. `TransformGrammar.java` - for transforming an SLP S into another SLP S' with more production rules that have terminal symbols only.</p>
},
keywords = {compression, concurrency, dynamic program analysis, Eraser lockset, happens-before, race detection}
}

@software{10.1145/3276934,
author = {Barowy, Daniel W. and Berger, Emery D. and Zorn, Benjamin},
title = {ExceLint software artifact},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.1145/3276934},
abstract = {
    <p>ExceLint is a static analysis that finds formula errors in spreadsheets. This guide provides an installation walkthrough as well as instructions for running the tool. You can run the tool as a plugin using Excel, or using the benchmark runner which will reproduce the results from the paper. Finally, a post-processing script is supplied that will produce charts similar to those found in the paper.</p>
},
keywords = {debugging, error detection, spreadsheet}
}

@software{10.5281/zenodo.1306437,
author = {K?ikava, Filip and Vitek, Jan},
title = {Artifact for Paper - Tests from Traces: Automated Unit Test Extraction for R},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.1306437},
abstract = {
    <p>This is the artifact for the paper Tests from Traces: Automated Unit Test Extraction for R published at ISSTA 2018. The aim is to show how the genthat tool introduced in the paper works and can be used for extracting code from R packages, and reproduce the experiment used to evaluate it. Concretely, it reproduces the all the code snippets shown in Section 3 and the evaluation from Section 4. The artifact is composed of two parts - Genthat Overview and CRAN Experiment. The first part corresponds to the Section 3 of the paper where we introduce the tool. The second part reproduces the experiment that we used to evaluate the tool in Section 4 and reproduce Table 1, 2 and Figure 4.</p>
},
keywords = {program tracing, R, test extraction}
}

@software{10.5281/zenodo.1297458,
author = {Blasi, Arianna and Goffi, Alberto and Kuznetsov, Konstantin and Gorla, Alessandra and Ernst, Michael D. and Pezz\`{e}, Mauro and Castellanos, Sergio Delgado},
title = {Artifact for paper: Translating Code Comments to Procedure Specifications},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.1297458},
abstract = {
    <p>The name of our tool is Jdoctor (aka Toradocu 3.0). It is an approach that combines pattern, lexical, and semantic matching to translate Javadoc comments into executable procedure specifications written as Java expressions.</p>
},
keywords = {automatic test case generation, natural language processing, software testing, Specification inference, test oracle generation}
}

@software{10.5281/zenodo.1301239,
author = {DeFreez, Daniel and Thakur, Aditya V. and Rubio-Gonz\'{a}lez, Cindy},
title = {func2vec-fse2018-artifact},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.1301239},
abstract = {
    <p>Artifact with source for running Func2vec and link to data for reproducing experiments.</p>
},
keywords = {error handling, program analysis, program comprehension, program embeddings, specification mining}
}

@software{10.1145/3229311,
author = {Santos, Rodrigo C. M. and Lima, Guilherme F. and Sant'Anna, Francisco and Ierusalimschy, Roberto and Haeusler, Edward H.},
title = {Replication Package for Article: A Memory-Bounded, Deterministic and Terminating Semantics for the Synchronous Programming Language C\'{e}u},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.1145/3229311},
abstract = {
    <p>Our artifact includes an open-source implementation of the programming language C\'{e}u. The implementation is based on and should conform with the formal semantics presented in this paper. The artifact also includes an executable script with over 3500 test cases of valid and invalid programs in C\'{e}u. The script is customizable and allows to create new tests providing inputs and expected outputs.</p>
},
keywords = {Determinism, Operational semantics, Synchronous languages, Termination}
}

@software{10.5281/zenodo.1242627,
author = {Devine, James and Finney, Joe and de Halleux, Peli and Moskal, Micha? and Ball, Thomas and Hodges, Steve},
title = {Documentation for MakeCode and CODAL: Intuitive and Efficient Embedded Systems Programming for Education Artifact Evaluation},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.1242627},
abstract = {
    <p>This artifact contains documentation of artifact 10.5281/zenodo.1242605, this documentation is also contained within the artifact 10.5281/zenodo.1242605 as well.</p>
},
keywords = {BBC micro:bit., CODAL, education, MakeCode, physical computing}
}

@software{10.5281/zenodo.1242605,
author = {Devine, James and Finney, Joe and de Halleux, Peli and Moskal, Micha\l{} and Ball, Thomas and Hodges, Steve},
title = {Artifact for the LCTES 2018 paper: MakeCode and Codal: Intuitive and Efficient Embedded Systems Programming for Education},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.1242605},
abstract = {
    <p>This artifact allows others to reproduce the results seen in this paper for MakeCode and CODAL, using the BBC micro:bit. The artifact contains an offline build environment for CODAL and MakeCode, allowing evaluators to test and build programs locally. In addition, we also provide espruino and micropython virtual machines to further increase repeatability of our results. Evaluators should download the virtual machine containing all pre-requisite tools, and use an oscilloscope to observe wave forms (used for timing) generated by the micro:bit, and a serial terminal to observe results reported from the micro:bit over serial.</p>
},
keywords = {BBC micro:bit, CODAL, evaluation, lctes, MakeCode}
}

@software{10.5281/zenodo.1242583,
author = {Taylor, Ben and Marco, Vicent Sanz and Wolff, Willy and Elkhatib, Yehia and Wang, Zheng},
title = {Adaptive Deep Learning Model Selection on Embedded Systems},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.1242583},
abstract = {
    <p>Our research artefact enables the reproduction of the figures from our experimental results (Section 5 of the paper). Please see the Appendix of the paper for detailed Artifact Description.</p>
},
keywords = {Adaptive computing, Deep learning, Embedded systems}
}

@software{10.1145/3190498,
author = {Fu, Xinwei and Lee, Dongyoon and Jung, Changhee},
title = {Replication Package for Article: nAdroid: Statically Detecting Ordering Violations in Android Applications},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.1145/3190498},
abstract = {
    <p>Our artifact provides all the runnable jar files of nAdroid and all the Android applications tested in this paper, along with scripts to use these to regenerate the results in our evaluation section. We tested our artifact on a quad-core Intel i7 3.6 GHz system with 16GB of memory, running the 3.13 Linux kernel. We also provide a virtual machine image with all dependencies installed. To validate the results, run the scripts and check the results according to the README file.</p>
},
keywords = {Android, Data race, Debugging, Ordering violation, Static analysis, Threadification, Use-after-free}
}

@software{10.6084/m9.figshare.5673880.v1,
author = {Zhang, Feng and Xue, Jingling},
title = {Artifact of: “POKER:Permutation-based SIMD Execution of Intensive Tree Search by Path Encoding”},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.6084/m9.figshare.5673880.v1},
abstract = {
    <p>This is the artifact for the paper titled “POKER: Permutation-based SIMD Execution of Intensive Tree Search by Path Encoding\'{Y} accepted at CGO 2018. This artifact helps reproduce the results presented in Figures 7 - 9 and Tables 2 - 3 in Section 4. For more information on how to use it, please refer to our paper and the README.txt file in this package. Please note that POKER is a work in progress. This artifact is a snapshot of this work and thus is only applicable under the experimental settings described in this paper. Please feel free to contact the authors if you have any questions.</p>
},
keywords = {Intensive Tree Search, Permute, SIMD}
}

@software{10.1145/3190499,
author = {Hagedorn, Bastian and Stoltzfus, Larisa and Steuwer, Michel and Gorlatch, Sergei and Dubach, Christophe},
title = {Artifact for the CGO 2018 paper: High Performance Stencil Code Generation with Lift},
year = {2018},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.1145/3190499},
abstract = {
    <p>This artifact encapsulates the workflows to supplement the paper “High Performance Stencil Code Generation With Lift” accepted for presentation at the International Symposium on Code Generation and Optimization in 2018.</p>
},
keywords = {Lift, Performance Portability, Stencil}
}

@software{10.5281/zenodo.1112358,
author = {Buchwald, Sebastian and Fried, Andreas and Hack, Sebastian},
title = {Synthesizing an Instruction Selection Rule Library from Semantic Specifications},
year = {2017},
publisher = {Association for Computing Machinery},
url = {https://doi.org/10.5281/zenodo.1112358},
abstract = {
    <p>This is the software accompanying the paper of the same name, to appear at CGO 2018. The goal of the software is to automatically synthesize rules for translating a compiler's intermediate representation into the assembly language of a processor (a process called ”instruction selection“). The software is distributed along with benchmarks in a Docker container. For some benchmarks, a copy of the SPEC CPU2000 benchmark suite is required.</p>
},
keywords = {Compiler, Instruction Selection, Program Synthesis}
}

